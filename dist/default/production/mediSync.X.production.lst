

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Mon Apr 15 22:07:33 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og9 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=3
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=3
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=3
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=2
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    67                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    68                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    69   000000                     
    70                           ; Generated 17/10/2023 GMT
    71                           ; 
    72                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    73                           ; All rights reserved.
    74                           ; 
    75                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    76                           ; 
    77                           ; Redistribution and use in source and binary forms, with or without modification, are
    78                           ; permitted provided that the following conditions are met:
    79                           ; 
    80                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    81                           ;        conditions and the following disclaimer.
    82                           ; 
    83                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    84                           ;        of conditions and the following disclaimer in the documentation and/or other
    85                           ;        materials provided with the distribution. Publication is not required when
    86                           ;        this file is used in an embedded application.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC18F4321 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104   000000                     
   105                           	psect	idataCOMRAM
   106   001D5E                     __pidataCOMRAM:
   107                           	callstack 0
   108                           
   109                           ;initializer for _servo_active
   110   001D5E  01                 	db	1
   111                           
   112                           	psect	idataBANK0
   113   001BF8                     __pidataBANK0:
   114                           	callstack 0
   115                           
   116                           ;initializer for _pulse
   117   001BF8  0032               	dw	50
   118   001BFA  0032               	dw	50
   119   001BFC  0032               	dw	50
   120   001BFE  0032               	dw	50
   121   001C00  0032               	dw	50
   122   001C02  0032               	dw	50
   123                           
   124                           ;initializer for _Kd
   125   001C04  07D0               	dw	2000
   126   001C06  0000               	dw	0
   127                           
   128                           ;initializer for _Ki
   129   001C08  07D0               	dw	2000
   130   001C0A  0000               	dw	0
   131                           
   132                           ;initializer for _Kp
   133   001C0C  1D4C               	dw	7500
   134   001C0E  0000               	dw	0
   135                           
   136                           ;initializer for _dT
   137   001C10  0064               	dw	100
   138   001C12  0000               	dw	0
   139                           
   140                           ;initializer for _c
   141   001C14  03E8               	dw	1000
   142   001C16  0000               	dw	0
   143                           
   144                           ;initializer for _timeInfusion
   145   001C18  0064               	dw	100
   146   001C1A  0000               	dw	0
   147                           
   148                           ;initializer for _volume
   149   001C1C  000A               	dw	10
   150   001C1E  0000               	dw	0
   151                           
   152                           	psect	mediumconst
   153   001EBC                     __pmediumconst:
   154                           	callstack 0
   155   001EBC  00                 	db	0
   156   001EBD  09C4               	dw	2500
   157   001EBF  09C4               	dw	2500
   158   001EC1  09C4               	dw	2500
   159   001EC3  09C4               	dw	2500
   160   001EC5  09C4               	dw	2500
   161   001EC7  09C4               	dw	2500
   162   001EC9                     __end_of_pulseMax:
   163                           	callstack 0
   164   001EC9  01F4               	dw	500
   165   001ECB  01F4               	dw	500
   166   001ECD  01F4               	dw	500
   167   001ECF  01F4               	dw	500
   168   001ED1  01F4               	dw	500
   169   001ED3  01F4               	dw	500
   170   001ED5                     __end_of_pulseMin:
   171                           	callstack 0
   172   000000                     _LATB	set	3978
   173   000000                     _TRISB	set	3987
   174   000000                     _ADRESL	set	4035
   175   000000                     _ADRESH	set	4036
   176   000000                     _LATC6	set	31838
   177   000000                     _TRISCbits	set	3988
   178   000000                     _TRISC	set	3988
   179   000000                     _PORTD	set	3971
   180   000000                     _LATBbits	set	3978
   181   000000                     _LATCbits	set	3979
   182   000000                     _INTCONbits	set	4082
   183   000000                     _PIR1bits	set	3998
   184   000000                     _PORTB	set	3969
   185   000000                     _ADCON0bits	set	4034
   186   000000                     _TRISC4	set	31908
   187   000000                     _TRISC5	set	31909
   188   000000                     _TRISC6	set	31910
   189   000000                     _TRISA2	set	31890
   190   000000                     _TMR1ON	set	32360
   191   000000                     _PEIE	set	32662
   192   000000                     _GIE	set	32663
   193   000000                     _TMR1IF	set	31984
   194   000000                     _TRISC7	set	31911
   195   000000                     _RB7	set	31759
   196   000000                     _RB6	set	31758
   197   000000                     _RC7	set	31767
   198   000000                     _RB4	set	31756
   199   000000                     _RB3	set	31755
   200   000000                     _RB2	set	31754
   201   000000                     _RB1	set	31753
   202   000000                     _LATC4	set	31836
   203   000000                     _LATC5	set	31837
   204   000000                     _GO	set	32273
   205   000000                     _ADON	set	32272
   206   000000                     _RD0	set	31768
   207   000000                     _RD1	set	31769
   208   000000                     _RD3	set	31771
   209   000000                     _RD2	set	31770
   210   000000                     _RD7	set	31775
   211   000000                     _RD6	set	31774
   212   000000                     _RD5	set	31773
   213   000000                     _RB0	set	31752
   214   000000                     _RC2	set	31762
   215   000000                     _RD4	set	31772
   216   000000                     _TRISA	set	3986
   217   000000                     _LATA2	set	31818
   218   000000                     _TRISC2	set	31906
   219   000000                     _TRISD	set	3989
   220   000000                     _CCP1CON	set	4029
   221   000000                     _TMR1IE	set	31976
   222   000000                     _TMR2IF	set	31985
   223   000000                     _ADCON2	set	4032
   224   000000                     _ADCON1	set	4033
   225   000000                     _ADCON0	set	4034
   226   000000                     _T2CON	set	4042
   227   000000                     _CCPR1L	set	4030
   228   000000                     _TMR1	set	4046
   229   000000                     _T1CON	set	4045
   230   000000                     _PR2	set	4043
   231   000000                     _RBPU	set	32655
   232   000000                     _TMR0IF	set	32658
   233   000000                     _OSCCON	set	4051
   234   000000                     _T0CON	set	4053
   235   000000                     _TMR0L	set	4054
   236   000000                     _TMR0H	set	4055
   237   001ED5                     STR_21:
   238   001ED5  31                 	db	49	;'1'
   239   001ED6  2E                 	db	46
   240   001ED7  53                 	db	83	;'S'
   241   001ED8  74                 	db	116	;'t'
   242   001ED9  61                 	db	97	;'a'
   243   001EDA  72                 	db	114	;'r'
   244   001EDB  74                 	db	116	;'t'
   245   001EDC  20                 	db	32
   246   001EDD  4E                 	db	78	;'N'
   247   001EDE  65                 	db	101	;'e'
   248   001EDF  77                 	db	119	;'w'
   249   001EE0  20                 	db	32
   250   001EE1  49                 	db	73	;'I'
   251   001EE2  6E                 	db	110	;'n'
   252   001EE3  66                 	db	102	;'f'
   253   001EE4  75                 	db	117	;'u'
   254   001EE5  73                 	db	115	;'s'
   255   001EE6  69                 	db	105	;'i'
   256   001EE7  6F                 	db	111	;'o'
   257   001EE8  6E                 	db	110	;'n'
   258   001EE9  00                 	db	0
   259   001EEA                     STR_23:
   260   001EEA  46                 	db	70	;'F'
   261   001EEB  6F                 	db	111	;'o'
   262   001EEC  72                 	db	114	;'r'
   263   001EED  20                 	db	32
   264   001EEE  6D                 	db	109	;'m'
   265   001EEF  6F                 	db	111	;'o'
   266   001EF0  72                 	db	114	;'r'
   267   001EF1  65                 	db	101	;'e'
   268   001EF2  20                 	db	32
   269   001EF3  69                 	db	105	;'i'
   270   001EF4  6E                 	db	110	;'n'
   271   001EF5  66                 	db	102	;'f'
   272   001EF6  6F                 	db	111	;'o'
   273   001EF7  72                 	db	114	;'r'
   274   001EF8  6D                 	db	109	;'m'
   275   001EF9  61                 	db	97	;'a'
   276   001EFA  74                 	db	116	;'t'
   277   001EFB  69                 	db	105	;'i'
   278   001EFC  6F                 	db	111	;'o'
   279   001EFD  6E                 	db	110	;'n'
   280   001EFE  00                 	db	0
   281   001EFF                     STR_39:
   282   001EFF  49                 	db	73	;'I'
   283   001F00  4E                 	db	78	;'N'
   284   001F01  46                 	db	70	;'F'
   285   001F02  55                 	db	85	;'U'
   286   001F03  53                 	db	83	;'S'
   287   001F04  49                 	db	73	;'I'
   288   001F05  4F                 	db	79	;'O'
   289   001F06  4E                 	db	78	;'N'
   290   001F07  20                 	db	32
   291   001F08  43                 	db	67	;'C'
   292   001F09  4F                 	db	79	;'O'
   293   001F0A  4D                 	db	77	;'M'
   294   001F0B  50                 	db	80	;'P'
   295   001F0C  4C                 	db	76	;'L'
   296   001F0D  45                 	db	69	;'E'
   297   001F0E  54                 	db	84	;'T'
   298   001F0F  45                 	db	69	;'E'
   299   001F10  44                 	db	68	;'D'
   300   001F11  00                 	db	0
   301   001F12                     STR_24:
   302   001F12  56                 	db	86	;'V'
   303   001F13  69                 	db	105	;'i'
   304   001F14  73                 	db	115	;'s'
   305   001F15  69                 	db	105	;'i'
   306   001F16  74                 	db	116	;'t'
   307   001F17  3A                 	db	58	;':'
   308   001F18  20                 	db	32
   309   001F19  68                 	db	104	;'h'
   310   001F1A  61                 	db	97	;'a'
   311   001F1B  72                 	db	114	;'r'
   312   001F1C  64                 	db	100	;'d'
   313   001F1D  6E                 	db	110	;'n'
   314   001F1E  67                 	db	103	;'g'
   315   001F1F  2E                 	db	46
   316   001F20  65                 	db	101	;'e'
   317   001F21  64                 	db	100	;'d'
   318   001F22  00                 	db	0
   319   001F23                     STR_9:
   320   001F23  44                 	db	68	;'D'
   321   001F24  4F                 	db	79	;'O'
   322   001F25  20                 	db	32
   323   001F26  59                 	db	89	;'Y'
   324   001F27  4F                 	db	79	;'O'
   325   001F28  55                 	db	85	;'U'
   326   001F29  20                 	db	32
   327   001F2A  57                 	db	87	;'W'
   328   001F2B  41                 	db	65	;'A'
   329   001F2C  4E                 	db	78	;'N'
   330   001F2D  54                 	db	84	;'T'
   331   001F2E  20                 	db	32
   332   001F2F  54                 	db	84	;'T'
   333   001F30  4F                 	db	79	;'O'
   334   001F31  00                 	db	0
   335   001F32  53                 	db	83	;'S'
   336   001F33  59                 	db	89	;'Y'
   337   001F34  52                 	db	82	;'R'
   338   001F35  49                 	db	73	;'I'
   339   001F36  4E                 	db	78	;'N'
   340   001F37  47                 	db	71	;'G'
   341   001F38  45                 	db	69	;'E'
   342   001F39  20                 	db	32
   343   001F3A  49                 	db	73	;'I'
   344   001F3B  53                 	db	83	;'S'
   345   001F3C  20                 	db	32
   346   001F3D  4E                 	db	78	;'N'
   347   001F3E  4F                 	db	79	;'O'
   348   001F3F  54                 	db	84	;'T'
   349   001F40  00                 	db	0
   350   001F41                     STR_20:
   351   001F41  4D                 	db	77	;'M'
   352   001F42  65                 	db	101	;'e'
   353   001F43  64                 	db	100	;'d'
   354   001F44  69                 	db	105	;'i'
   355   001F45  53                 	db	83	;'S'
   356   001F46  79                 	db	121	;'y'
   357   001F47  6E                 	db	110	;'n'
   358   001F48  63                 	db	99	;'c'
   359   001F49  20                 	db	32
   360   001F4A  4D                 	db	77	;'M'
   361   001F4B  65                 	db	101	;'e'
   362   001F4C  6E                 	db	110	;'n'
   363   001F4D  75                 	db	117	;'u'
   364   001F4E  00                 	db	0
   365   001F4F                     STR_2:
   366   001F4F  20                 	db	32
   367   001F50  42                 	db	66	;'B'
   368   001F51  45                 	db	69	;'E'
   369   001F52  54                 	db	84	;'T'
   370   001F53  57                 	db	87	;'W'
   371   001F54  45                 	db	69	;'E'
   372   001F55  45                 	db	69	;'E'
   373   001F56  4E                 	db	78	;'N'
   374   001F57  20                 	db	32
   375   001F58  30                 	db	48	;'0'
   376   001F59  2D                 	db	45
   377   001F5A  00                 	db	0
   378   001F5B  43                 	db	67	;'C'
   379   001F5C  4C                 	db	76	;'L'
   380   001F5D  4F                 	db	79	;'O'
   381   001F5E  53                 	db	83	;'S'
   382   001F5F  45                 	db	69	;'E'
   383   001F60  20                 	db	32
   384   001F61  56                 	db	86	;'V'
   385   001F62  41                 	db	65	;'A'
   386   001F63  4C                 	db	76	;'L'
   387   001F64  56                 	db	86	;'V'
   388   001F65  45                 	db	69	;'E'
   389   001F66  00                 	db	0
   390   001F67                     STR_27:
   391   001F67  50                 	db	80	;'P'
   392   001F68  55                 	db	85	;'U'
   393   001F69  53                 	db	83	;'S'
   394   001F6A  48                 	db	72	;'H'
   395   001F6B  49                 	db	73	;'I'
   396   001F6C  4E                 	db	78	;'N'
   397   001F6D  47                 	db	71	;'G'
   398   001F6E  2E                 	db	46
   399   001F6F  2E                 	db	46
   400   001F70  2E                 	db	46
   401   001F71  00                 	db	0
   402   001F72  50                 	db	80	;'P'
   403   001F73  55                 	db	85	;'U'
   404   001F74  4C                 	db	76	;'L'
   405   001F75  4C                 	db	76	;'L'
   406   001F76  49                 	db	73	;'I'
   407   001F77  4E                 	db	78	;'N'
   408   001F78  47                 	db	71	;'G'
   409   001F79  2E                 	db	46
   410   001F7A  2E                 	db	46
   411   001F7B  2E                 	db	46
   412   001F7C  00                 	db	0
   413   001F7D  4F                 	db	79	;'O'
   414   001F7E  50                 	db	80	;'P'
   415   001F7F  45                 	db	69	;'E'
   416   001F80  4E                 	db	78	;'N'
   417   001F81  20                 	db	32
   418   001F82  56                 	db	86	;'V'
   419   001F83  41                 	db	65	;'A'
   420   001F84  4C                 	db	76	;'L'
   421   001F85  56                 	db	86	;'V'
   422   001F86  45                 	db	69	;'E'
   423   001F87  00                 	db	0
   424   001F88  50                 	db	80	;'P'
   425   001F89  55                 	db	85	;'U'
   426   001F8A  53                 	db	83	;'S'
   427   001F8B  48                 	db	72	;'H'
   428   001F8C  45                 	db	69	;'E'
   429   001F8D  44                 	db	68	;'D'
   430   001F8E  20                 	db	32
   431   001F8F  49                 	db	73	;'I'
   432   001F90  4E                 	db	78	;'N'
   433   001F91  00                 	db	0
   434   001F92  49                 	db	73	;'I'
   435   001F93  4E                 	db	78	;'N'
   436   001F94  46                 	db	70	;'F'
   437   001F95  55                 	db	85	;'U'
   438   001F96  53                 	db	83	;'S'
   439   001F97  49                 	db	73	;'I'
   440   001F98  4F                 	db	79	;'O'
   441   001F99  4E                 	db	78	;'N'
   442   001F9A  00                 	db	0
   443   001F9B                     STR_22:
   444   001F9B  32                 	db	50	;'2'
   445   001F9C  2E                 	db	46
   446   001F9D  4D                 	db	77	;'M'
   447   001F9E  61                 	db	97	;'a'
   448   001F9F  6E                 	db	110	;'n'
   449   001FA0  75                 	db	117	;'u'
   450   001FA1  61                 	db	97	;'a'
   451   001FA2  6C                 	db	108	;'l'
   452   001FA3  00                 	db	0
   453   001FA4  46                 	db	70	;'F'
   454   001FA5  49                 	db	73	;'I'
   455   001FA6  4C                 	db	76	;'L'
   456   001FA7  4C                 	db	76	;'L'
   457   001FA8  49                 	db	73	;'I'
   458   001FA9  4E                 	db	78	;'N'
   459   001FAA  47                 	db	71	;'G'
   460   001FAB  00                 	db	0
   461   001FAC                     STR_8:
   462   001FAC  50                 	db	80	;'P'
   463   001FAD  55                 	db	85	;'U'
   464   001FAE  53                 	db	83	;'S'
   465   001FAF  48                 	db	72	;'H'
   466   001FB0  49                 	db	73	;'I'
   467   001FB1  4E                 	db	78	;'N'
   468   001FB2  47                 	db	71	;'G'
   469   001FB3  00                 	db	0
   470   001FB4                     STR_31:
   471   001FB4  45                 	db	69	;'E'
   472   001FB5  72                 	db	114	;'r'
   473   001FB6  72                 	db	114	;'r'
   474   001FB7  6F                 	db	111	;'o'
   475   001FB8  72                 	db	114	;'r'
   476   001FB9  3A                 	db	58	;':'
   477   001FBA  00                 	db	0
   478   001FBB                     STR_40:
   479   001FBB  56                 	db	86	;'V'
   480   001FBC  4F                 	db	79	;'O'
   481   001FBD  4C                 	db	76	;'L'
   482   001FBE  55                 	db	85	;'U'
   483   001FBF  4D                 	db	77	;'M'
   484   001FC0  45                 	db	69	;'E'
   485   001FC1  00                 	db	0
   486   001FC2                     STR_16:
   487   001FC2  53                 	db	83	;'S'
   488   001FC3  54                 	db	84	;'T'
   489   001FC4  41                 	db	65	;'A'
   490   001FC5  52                 	db	82	;'R'
   491   001FC6  54                 	db	84	;'T'
   492   001FC7  20                 	db	32
   493   001FC8  00                 	db	0
   494   001FC9                     STR_1:
   495   001FC9  49                 	db	73	;'I'
   496   001FCA  4E                 	db	78	;'N'
   497   001FCB  50                 	db	80	;'P'
   498   001FCC  55                 	db	85	;'U'
   499   001FCD  54                 	db	84	;'T'
   500   001FCE  20                 	db	32
   501   001FCF  00                 	db	0
   502   001FD0                     STR_12:
   503   001FD0  31                 	db	49	;'1'
   504   001FD1  2E                 	db	46
   505   001FD2  20                 	db	32
   506   001FD3  59                 	db	89	;'Y'
   507   001FD4  45                 	db	69	;'E'
   508   001FD5  53                 	db	83	;'S'
   509   001FD6  00                 	db	0
   510   001FD7                     STR_13:
   511   001FD7  32                 	db	50	;'2'
   512   001FD8  2E                 	db	46
   513   001FD9  20                 	db	32
   514   001FDA  4E                 	db	78	;'N'
   515   001FDB  4F                 	db	79	;'O'
   516   001FDC  00                 	db	0
   517   001FDD                     STR_35:
   518   001FDD  45                 	db	69	;'E'
   519   001FDE  78                 	db	120	;'x'
   520   001FDF  70                 	db	112	;'p'
   521   001FE0  3A                 	db	58	;':'
   522   001FE1  00                 	db	0
   523   001FE2                     STR_33:
   524   001FE2  50                 	db	80	;'P'
   525   001FE3  6F                 	db	111	;'o'
   526   001FE4  73                 	db	115	;'s'
   527   001FE5  3A                 	db	58	;':'
   528   001FE6  00                 	db	0
   529   001FE7                     STR_5:
   530   001FE7  42                 	db	66	;'B'
   531   001FE8  41                 	db	65	;'A'
   532   001FE9  43                 	db	67	;'C'
   533   001FEA  4B                 	db	75	;'K'
   534   001FEB  00                 	db	0
   535   001FEC                     STR_37:
   536   001FEC  54                 	db	84	;'T'
   537   001FED  3A                 	db	58	;':'
   538   001FEE  20                 	db	32
   539   001FEF  00                 	db	0
   540   001FF0                     STR_32:
   541   001FF0  25                 	db	37
   542   001FF1  6C                 	db	108	;'l'
   543   001FF2  64                 	db	100	;'d'
   544   001FF3  00                 	db	0
   545   001FF4                     STR_42:
   546   001FF4  31                 	db	49	;'1'
   547   001FF5  30                 	db	48	;'0'
   548   001FF6  00                 	db	0
   549   001FF7                     STR_38:
   550   001FF7  25                 	db	37
   551   001FF8  64                 	db	100	;'d'
   552   001FF9  00                 	db	0
   553   001FFA                     STR_43:
   554   001FFA  6D                 	db	109	;'m'
   555   001FFB  6C                 	db	108	;'l'
   556   001FFC  00                 	db	0
   557   001FFD                     STR_41:
   558   001FFD  56                 	db	86	;'V'
   559   001FFE  00                 	db	0
   560   001FFF  00                 	db	0	; dummy byte at the end
   561   000000                     
   562                           ; #config settings
   563                           
   564                           	psect	cinit
   565   001962                     __pcinit:
   566                           	callstack 0
   567   001962                     start_initialization:
   568                           	callstack 0
   569   001962                     __initialization:
   570                           	callstack 0
   571                           
   572                           ; Initialize objects allocated to BANK0 (40 bytes)
   573                           ; load TBLPTR registers with __pidataBANK0
   574   001962  0EF8               	movlw	low __pidataBANK0
   575   001964  6EF6               	movwf	tblptrl,c
   576   001966  0E1B               	movlw	high __pidataBANK0
   577   001968  6EF7               	movwf	tblptrh,c
   578   00196A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   579   00196C  6EF8               	movwf	tblptru,c
   580   00196E  EE00  F0AE         	lfsr	0,__pdataBANK0
   581   001972  EE10 F028          	lfsr	1,40
   582   001976                     copy_data0:
   583   001976  0009               	tblrd		*+
   584   001978  CFF5 FFEE          	movff	tablat,postinc0
   585   00197C  50E5               	movf	postdec1,w,c
   586   00197E  50E1               	movf	fsr1l,w,c
   587   001980  E1FA               	bnz	copy_data0
   588                           
   589                           ; Initialize objects allocated to COMRAM (1 bytes)
   590                           ; load TBLPTR registers with __pidataCOMRAM
   591   001982  0E5E               	movlw	low __pidataCOMRAM
   592   001984  6EF6               	movwf	tblptrl,c
   593   001986  0E1D               	movlw	high __pidataCOMRAM
   594   001988  6EF7               	movwf	tblptrh,c
   595   00198A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   596   00198C  6EF8               	movwf	tblptru,c
   597   00198E  0009               	tblrd		*+	;fetch initializer
   598   001990  CFF5 F07A          	movff	tablat,__pdataCOMRAM
   599                           
   600                           ; Clear objects allocated to BANK0 (46 bytes)
   601   001994  EE00  F080         	lfsr	0,__pbssBANK0
   602   001998  0E2E               	movlw	46
   603   00199A                     clear_0:
   604   00199A  6AEE               	clrf	postinc0,c
   605   00199C  06E8               	decf	wreg,f,c
   606   00199E  E1FD               	bnz	clear_0
   607                           
   608                           ; Clear objects allocated to COMRAM (5 bytes)
   609   0019A0  6A79               	clrf	(__pbssCOMRAM+4)& (0+255),c
   610   0019A2  6A78               	clrf	(__pbssCOMRAM+3)& (0+255),c
   611   0019A4  6A77               	clrf	(__pbssCOMRAM+2)& (0+255),c
   612   0019A6  6A76               	clrf	(__pbssCOMRAM+1)& (0+255),c
   613   0019A8  6A75               	clrf	__pbssCOMRAM& (0+255),c
   614   0019AA                     end_of_initialization:
   615                           	callstack 0
   616   0019AA                     __end_of__initialization:
   617                           	callstack 0
   618   0019AA  907B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   619   0019AC  927B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   620   0019AE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   621   0019B0  6EF8               	movwf	tblptru,c
   622   0019B2  0100               	movlb	0
   623   0019B4  EF83  F00C         	goto	_main	;jump to C main() function
   624                           
   625                           	psect	bssCOMRAM
   626   000075                     __pbssCOMRAM:
   627                           	callstack 0
   628   000075                     _prec:
   629                           	callstack 0
   630   000075                     	ds	2
   631   000077                     _TMR0_ini:
   632                           	callstack 0
   633   000077                     	ds	2
   634   000079                     _flags:
   635                           	callstack 0
   636   000079                     	ds	1
   637                           
   638                           	psect	dataCOMRAM
   639   00007A                     __pdataCOMRAM:
   640                           	callstack 0
   641   00007A                     _servo_active:
   642                           	callstack 0
   643   00007A                     	ds	1
   644                           
   645                           	psect	bssBANK0
   646   000080                     __pbssBANK0:
   647                           	callstack 0
   648   000080                     _dbuf:
   649                           	callstack 0
   650   000080                     	ds	32
   651   0000A0                     _lastError:
   652                           	callstack 0
   653   0000A0                     	ds	4
   654   0000A4                     _errorSum:
   655                           	callstack 0
   656   0000A4                     	ds	4
   657   0000A8                     _mil:
   658                           	callstack 0
   659   0000A8                     	ds	4
   660   0000AC                     _width:
   661                           	callstack 0
   662   0000AC                     	ds	2
   663                           
   664                           	psect	dataBANK0
   665   0000AE                     __pdataBANK0:
   666                           	callstack 0
   667   0000AE                     _pulse:
   668                           	callstack 0
   669   0000AE                     	ds	12
   670   0000BA                     _Kd:
   671                           	callstack 0
   672   0000BA                     	ds	4
   673   0000BE                     _Ki:
   674                           	callstack 0
   675   0000BE                     	ds	4
   676   0000C2                     _Kp:
   677                           	callstack 0
   678   0000C2                     	ds	4
   679   0000C6                     _dT:
   680                           	callstack 0
   681   0000C6                     	ds	4
   682   0000CA                     _c:
   683                           	callstack 0
   684   0000CA                     	ds	4
   685   0000CE                     _timeInfusion:
   686                           	callstack 0
   687   0000CE                     	ds	4
   688   0000D2                     _volume:
   689                           	callstack 0
   690   0000D2                     	ds	4
   691                           
   692                           	psect	cstackBANK0
   693   0000D6                     __pcstackBANK0:
   694                           	callstack 0
   695   0000D6                     infusion@dError:
   696                           	callstack 0
   697                           
   698                           ; 4 bytes @ 0x0
   699   0000D6                     	ds	4
   700   0000DA                     _infusion$1679:
   701                           	callstack 0
   702                           
   703                           ; 4 bytes @ 0x4
   704   0000DA                     	ds	4
   705   0000DE                     infusion@act_pos:
   706                           	callstack 0
   707                           
   708                           ; 2 bytes @ 0x8
   709   0000DE                     	ds	2
   710   0000E0                     infusion@buff:
   711                           	callstack 0
   712                           
   713                           ; 5 bytes @ 0xA
   714   0000E0                     	ds	5
   715   0000E5                     infusion@expectedX:
   716                           	callstack 0
   717                           
   718                           ; 4 bytes @ 0xF
   719   0000E5                     	ds	4
   720   0000E9                     infusion@analogReading:
   721                           	callstack 0
   722                           
   723                           ; 4 bytes @ 0x13
   724   0000E9                     	ds	4
   725   0000ED                     infusion@stopTime:
   726                           	callstack 0
   727                           
   728                           ; 4 bytes @ 0x17
   729   0000ED                     	ds	4
   730   0000F1                     infusion@i:
   731                           	callstack 0
   732                           
   733                           ; 1 bytes @ 0x1B
   734   0000F1                     	ds	1
   735   0000F2                     infusion@controlSignal:
   736                           	callstack 0
   737                           
   738                           ; 4 bytes @ 0x1C
   739   0000F2                     	ds	4
   740   0000F6                     infusion@error:
   741                           	callstack 0
   742                           
   743                           ; 4 bytes @ 0x20
   744   0000F6                     	ds	4
   745   0000FA                     ??_main:
   746                           
   747                           ; 1 bytes @ 0x24
   748   0000FA                     	ds	2
   749   0000FC                     main@userInput:
   750                           	callstack 0
   751                           
   752                           ; 1 bytes @ 0x26
   753   0000FC                     	ds	1
   754   0000FD                     main@currentState:
   755                           	callstack 0
   756                           
   757                           ; 1 bytes @ 0x27
   758   0000FD                     	ds	1
   759                           
   760                           	psect	cstackCOMRAM
   761   000001                     __pcstackCOMRAM:
   762                           	callstack 0
   763   000001                     signalServo@pulseServo:
   764                           	callstack 0
   765                           
   766                           ; 2 bytes @ 0x0
   767   000001                     	ds	2
   768   000003                     signalServo@pinServo:
   769                           	callstack 0
   770                           
   771                           ; 1 bytes @ 0x2
   772   000003                     	ds	1
   773   000004                     ??_Timer1_ISR:
   774                           
   775                           ; 1 bytes @ 0x3
   776   000004                     	ds	1
   777   000005                     ??_keypad_scanner:
   778   000005                     ?_ADC_Read:
   779                           	callstack 0
   780   000005                     ?___wmul:
   781                           	callstack 0
   782   000005                     ?___awdiv:
   783                           	callstack 0
   784   000005                     ?___awmod:
   785                           	callstack 0
   786   000005                     ?___almod:
   787                           	callstack 0
   788   000005                     Lcd_Port@a:
   789                           	callstack 0
   790   000005                     GetNextState@input:
   791                           	callstack 0
   792   000005                     set_pwm_duty@pwm_duty:
   793                           	callstack 0
   794   000005                     change_direction_motion@hDriverIn1:
   795                           	callstack 0
   796   000005                     usePeripheral@peripheral:
   797                           	callstack 0
   798   000005                     delay_ms@milliseconds:
   799                           	callstack 0
   800   000005                     ___wmul@multiplier:
   801                           	callstack 0
   802   000005                     ___awdiv@dividend:
   803                           	callstack 0
   804   000005                     ___awmod@dividend:
   805                           	callstack 0
   806   000005                     fputc@c:
   807                           	callstack 0
   808   000005                     ___almod@dividend:
   809                           	callstack 0
   810                           
   811                           ; 4 bytes @ 0x4
   812   000005                     	ds	1
   813   000006                     ??_Lcd_Cmd:
   814   000006                     ??_GetNextState:
   815   000006                     Lcd_Write_Char@temp:
   816                           	callstack 0
   817                           
   818                           ; 1 bytes @ 0x5
   819   000006                     	ds	1
   820   000007                     ??_set_pwm_duty:
   821   000007                     ??_ADC_Read:
   822   000007                     ??_delay_ms:
   823   000007                     Lcd_Cmd@a:
   824                           	callstack 0
   825   000007                     Lcd_Write_Char@y:
   826                           	callstack 0
   827   000007                     switch_press_scan@key:
   828                           	callstack 0
   829   000007                     fputc@fp:
   830                           	callstack 0
   831   000007                     change_direction_motion@hDriverIn2:
   832                           	callstack 0
   833   000007                     usePeripheral@action:
   834                           	callstack 0
   835   000007                     ___wmul@multiplicand:
   836                           	callstack 0
   837   000007                     ___awdiv@divisor:
   838                           	callstack 0
   839   000007                     ___awmod@divisor:
   840                           	callstack 0
   841                           
   842                           ; 2 bytes @ 0x6
   843   000007                     	ds	1
   844   000008                     ??_fputc:
   845   000008                     ??_Lcd_Init:
   846   000008                     ?_input_option:
   847                           	callstack 0
   848   000008                     Lcd_Set_Cursor@b:
   849                           	callstack 0
   850   000008                     Lcd_Write_Char@a:
   851                           	callstack 0
   852   000008                     GetNextState@currentState:
   853                           	callstack 0
   854                           
   855                           ; 1 bytes @ 0x7
   856   000008                     	ds	1
   857   000009                     Lcd_Set_Cursor@a:
   858                           	callstack 0
   859   000009                     ___awdiv@counter:
   860                           	callstack 0
   861   000009                     ___awmod@counter:
   862                           	callstack 0
   863   000009                     Lcd_Write_String@a:
   864                           	callstack 0
   865   000009                     move_actuator@direction:
   866                           	callstack 0
   867   000009                     ___wmul@product:
   868                           	callstack 0
   869   000009                     ___almod@divisor:
   870                           	callstack 0
   871                           
   872                           ; 4 bytes @ 0x8
   873   000009                     	ds	1
   874   00000A                     ??_input_option:
   875   00000A                     Lcd_Set_Cursor@z:
   876                           	callstack 0
   877   00000A                     ___awdiv@sign:
   878                           	callstack 0
   879   00000A                     ___awmod@sign:
   880                           	callstack 0
   881                           
   882                           ; 1 bytes @ 0x9
   883   00000A                     	ds	1
   884   00000B                     ??_Lcd_Write_String:
   885   00000B                     Lcd_Set_Cursor@y:
   886                           	callstack 0
   887   00000B                     ADC_Read@channel:
   888                           	callstack 0
   889   00000B                     move_actuator@speed:
   890                           	callstack 0
   891   00000B                     ___awdiv@quotient:
   892                           	callstack 0
   893                           
   894                           ; 2 bytes @ 0xA
   895   00000B                     	ds	1
   896   00000C                     Lcd_Set_Cursor@temp:
   897                           	callstack 0
   898   00000C                     ADC_Read@digital:
   899                           	callstack 0
   900   00000C                     input_option@option:
   901                           	callstack 0
   902                           
   903                           ; 2 bytes @ 0xB
   904   00000C                     	ds	1
   905   00000D                     ?_processTimeToSeconds:
   906                           	callstack 0
   907   00000D                     ___almod@counter:
   908                           	callstack 0
   909   00000D                     Lcd_Write_String@i:
   910                           	callstack 0
   911   00000D                     processTimeToSeconds@timeInput:
   912                           	callstack 0
   913                           
   914                           ; 2 bytes @ 0xC
   915   00000D                     	ds	1
   916   00000E                     input_option@userInput:
   917                           	callstack 0
   918   00000E                     ___almod@sign:
   919                           	callstack 0
   920                           
   921                           ; 1 bytes @ 0xD
   922   00000E                     	ds	1
   923   00000F                     ?_input_numbers:
   924                           	callstack 0
   925   00000F                     ?_abs:
   926                           	callstack 0
   927   00000F                     input_value@inputType:
   928                           	callstack 0
   929   00000F                     start_process_screen@word:
   930                           	callstack 0
   931   00000F                     input_numbers@number_of_digits:
   932                           	callstack 0
   933   00000F                     processTimeToSeconds@minutes:
   934                           	callstack 0
   935   00000F                     abs@a:
   936                           	callstack 0
   937                           
   938                           ; 2 bytes @ 0xE
   939   00000F                     	ds	2
   940   000011                     ??_input_numbers:
   941   000011                     ??_abs:
   942   000011                     input_value@initial:
   943                           	callstack 0
   944   000011                     handle_actuator_push@act_pos:
   945                           	callstack 0
   946   000011                     processTimeToSeconds@seconds:
   947                           	callstack 0
   948                           
   949                           ; 2 bytes @ 0x10
   950   000011                     	ds	2
   951   000013                     ??_handle_actuator_push:
   952   000013                     input_value@limit:
   953                           	callstack 0
   954   000013                     processTimeToSeconds@totalSeconds:
   955                           	callstack 0
   956   000013                     input_numbers@inputBuffer:
   957                           	callstack 0
   958                           
   959                           ; 5 bytes @ 0x12
   960   000013                     	ds	1
   961   000014                     handle_actuator_push@decision:
   962                           	callstack 0
   963                           
   964                           ; 2 bytes @ 0x13
   965   000014                     	ds	1
   966   000015                     ?___lldiv:
   967                           	callstack 0
   968   000015                     input_value@units:
   969                           	callstack 0
   970   000015                     ___lldiv@dividend:
   971                           	callstack 0
   972                           
   973                           ; 4 bytes @ 0x14
   974   000015                     	ds	2
   975   000017                     
   976                           ; 1 bytes @ 0x16
   977   000017                     	ds	1
   978   000018                     input_numbers@outputBuffer:
   979                           	callstack 0
   980                           
   981                           ; 2 bytes @ 0x17
   982   000018                     	ds	1
   983   000019                     ___lldiv@divisor:
   984                           	callstack 0
   985                           
   986                           ; 4 bytes @ 0x18
   987   000019                     	ds	1
   988   00001A                     input_numbers@separator:
   989                           	callstack 0
   990                           
   991                           ; 1 bytes @ 0x19
   992   00001A                     	ds	1
   993   00001B                     input_numbers@userInput:
   994                           	callstack 0
   995                           
   996                           ; 1 bytes @ 0x1A
   997   00001B                     	ds	1
   998   00001C                     input_numbers@counter:
   999                           	callstack 0
  1000                           
  1001                           ; 2 bytes @ 0x1B
  1002   00001C                     	ds	1
  1003   00001D                     ___lldiv@quotient:
  1004                           	callstack 0
  1005                           
  1006                           ; 4 bytes @ 0x1C
  1007   00001D                     	ds	4
  1008   000021                     ___lldiv@counter:
  1009                           	callstack 0
  1010                           
  1011                           ; 1 bytes @ 0x20
  1012   000021                     	ds	1
  1013   000022                     ?___lmul:
  1014                           	callstack 0
  1015   000022                     ___lmul@multiplier:
  1016                           	callstack 0
  1017                           
  1018                           ; 4 bytes @ 0x21
  1019   000022                     	ds	4
  1020   000026                     ___lmul@multiplicand:
  1021                           	callstack 0
  1022                           
  1023                           ; 4 bytes @ 0x25
  1024   000026                     	ds	4
  1025   00002A                     ___lmul@product:
  1026                           	callstack 0
  1027                           
  1028                           ; 4 bytes @ 0x29
  1029   00002A                     	ds	4
  1030   00002E                     ?_string_long_vol:
  1031                           	callstack 0
  1032   00002E                     ?___aldiv:
  1033                           	callstack 0
  1034   00002E                     string_long_vol@str:
  1035                           	callstack 0
  1036   00002E                     ___aldiv@dividend:
  1037                           	callstack 0
  1038                           
  1039                           ; 4 bytes @ 0x2D
  1040   00002E                     	ds	4
  1041   000032                     ??_string_long_vol:
  1042   000032                     ___aldiv@divisor:
  1043                           	callstack 0
  1044                           
  1045                           ; 4 bytes @ 0x31
  1046   000032                     	ds	4
  1047   000036                     ___aldiv@counter:
  1048                           	callstack 0
  1049                           
  1050                           ; 1 bytes @ 0x35
  1051   000036                     	ds	1
  1052   000037                     ___aldiv@sign:
  1053                           	callstack 0
  1054                           
  1055                           ; 1 bytes @ 0x36
  1056   000037                     	ds	1
  1057   000038                     string_long_vol@result:
  1058                           	callstack 0
  1059   000038                     ___aldiv@quotient:
  1060                           	callstack 0
  1061                           
  1062                           ; 4 bytes @ 0x37
  1063   000038                     	ds	4
  1064   00003C                     ?_calculateBitRatePer10Sec:
  1065                           	callstack 0
  1066   00003C                     vfpfcnvrt@fp:
  1067                           	callstack 0
  1068   00003C                     calculateBitRatePer10Sec@volume_mL:
  1069                           	callstack 0
  1070                           
  1071                           ; 4 bytes @ 0x3B
  1072   00003C                     	ds	1
  1073   00003D                     vfpfcnvrt@fmt:
  1074                           	callstack 0
  1075                           
  1076                           ; 1 bytes @ 0x3C
  1077   00003D                     	ds	1
  1078   00003E                     vfpfcnvrt@ap:
  1079                           	callstack 0
  1080                           
  1081                           ; 1 bytes @ 0x3D
  1082   00003E                     	ds	1
  1083   00003F                     ??_vfpfcnvrt:
  1084                           
  1085                           ; 1 bytes @ 0x3E
  1086   00003F                     	ds	1
  1087   000040                     calculateBitRatePer10Sec@totalSeconds:
  1088                           	callstack 0
  1089                           
  1090                           ; 4 bytes @ 0x3F
  1091   000040                     	ds	1
  1092   000041                     vfpfcnvrt@done:
  1093                           	callstack 0
  1094                           
  1095                           ; 1 bytes @ 0x40
  1096   000041                     	ds	1
  1097   000042                     vfpfcnvrt@cp:
  1098                           	callstack 0
  1099                           
  1100                           ; 2 bytes @ 0x41
  1101   000042                     	ds	2
  1102   000044                     calculateBitRatePer10Sec@length_mm_scaled:
  1103                           	callstack 0
  1104   000044                     vfpfcnvrt@convarg:
  1105                           	callstack 0
  1106                           
  1107                           ; 4 bytes @ 0x43
  1108   000044                     	ds	4
  1109   000048                     vfpfcnvrt@c:
  1110                           	callstack 0
  1111   000048                     calculateBitRatePer10Sec@length_per_min_mm_scaled:
  1112                           	callstack 0
  1113                           
  1114                           ; 4 bytes @ 0x47
  1115   000048                     	ds	1
  1116   000049                     ?_vfprintf:
  1117                           	callstack 0
  1118   000049                     vfprintf@fp:
  1119                           	callstack 0
  1120                           
  1121                           ; 1 bytes @ 0x48
  1122   000049                     	ds	1
  1123   00004A                     vfprintf@fmt:
  1124                           	callstack 0
  1125                           
  1126                           ; 2 bytes @ 0x49
  1127   00004A                     	ds	2
  1128   00004C                     vfprintf@ap:
  1129                           	callstack 0
  1130   00004C                     calculateBitRatePer10Sec@bit_rate_per_min_scaled:
  1131                           	callstack 0
  1132                           
  1133                           ; 4 bytes @ 0x4B
  1134   00004C                     	ds	1
  1135   00004D                     vfprintf@cfmt:
  1136                           	callstack 0
  1137                           
  1138                           ; 2 bytes @ 0x4C
  1139   00004D                     	ds	2
  1140   00004F                     ?_sprintf:
  1141                           	callstack 0
  1142   00004F                     sprintf@s:
  1143                           	callstack 0
  1144                           
  1145                           ; 1 bytes @ 0x4E
  1146   00004F                     	ds	1
  1147   000050                     sprintf@fmt:
  1148                           	callstack 0
  1149   000050                     calculateBitRatePer10Sec@bit_rate_per_10sec:
  1150                           	callstack 0
  1151                           
  1152                           ; 4 bytes @ 0x4F
  1153   000050                     	ds	4
  1154   000054                     ?_getExpected:
  1155                           	callstack 0
  1156                           
  1157                           ; 4 bytes @ 0x53
  1158   000054                     	ds	2
  1159   000056                     sprintf@ap:
  1160                           	callstack 0
  1161                           
  1162                           ; 1 bytes @ 0x55
  1163   000056                     	ds	1
  1164   000057                     sprintf@f:
  1165                           	callstack 0
  1166                           
  1167                           ; 12 bytes @ 0x56
  1168   000057                     	ds	1
  1169   000058                     getExpected@ms:
  1170                           	callstack 0
  1171                           
  1172                           ; 4 bytes @ 0x57
  1173   000058                     	ds	4
  1174   00005C                     getExpected@expected:
  1175                           	callstack 0
  1176                           
  1177                           ; 4 bytes @ 0x5B
  1178   00005C                     	ds	4
  1179   000060                     _getExpected$1676:
  1180                           	callstack 0
  1181                           
  1182                           ; 4 bytes @ 0x5F
  1183   000060                     	ds	4
  1184   000064                     _getExpected$1677:
  1185                           	callstack 0
  1186                           
  1187                           ; 4 bytes @ 0x63
  1188   000064                     	ds	4
  1189   000068                     ??_infusion:
  1190                           
  1191                           ; 1 bytes @ 0x67
  1192   000068                     	ds	8
  1193   000070                     ??_handle_infusion_setup:
  1194                           
  1195                           ; 1 bytes @ 0x6F
  1196   000070                     	ds	2
  1197   000072                     handle_infusion_setup@v:
  1198                           	callstack 0
  1199                           
  1200                           ; 2 bytes @ 0x71
  1201   000072                     	ds	2
  1202   000074                     handle_infusion_setup@currentState:
  1203                           	callstack 0
  1204                           
  1205                           ; 1 bytes @ 0x73
  1206   000074                     	ds	1
  1207                           
  1208 ;;
  1209 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1210 ;;
  1211 ;; *************** function _main *****************
  1212 ;; Defined at:
  1213 ;;		line 612 in file "main.c"
  1214 ;; Parameters:    Size  Location     Type
  1215 ;;		None
  1216 ;; Auto vars:     Size  Location     Type
  1217 ;;  currentState    1   39[BANK0 ] enum E2620
  1218 ;;  userInput       1   38[BANK0 ] unsigned char 
  1219 ;; Return value:  Size  Location     Type
  1220 ;;                  1    wreg      void 
  1221 ;; Registers used:
  1222 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1223 ;; Tracked objects:
  1224 ;;		On entry : 0/0
  1225 ;;		On exit  : 3F/0
  1226 ;;		Unchanged: 0/0
  1227 ;; Data sizes:     COMRAM   BANK0   BANK1
  1228 ;;      Params:         0       0       0
  1229 ;;      Locals:         0       2       0
  1230 ;;      Temps:          0       2       0
  1231 ;;      Totals:         0       4       0
  1232 ;;Total ram usage:        4 bytes
  1233 ;; Hardware stack levels required when called: 9
  1234 ;; This function calls:
  1235 ;;		_GetNextState
  1236 ;;		_handle_infusion_setup
  1237 ;;		_manual
  1238 ;;		_menu
  1239 ;;		_switch_press_scan
  1240 ;;		_system_init
  1241 ;; This function is called by:
  1242 ;;		Startup code after reset
  1243 ;; This function uses a non-reentrant model
  1244 ;;
  1245                           
  1246                           	psect	text0
  1247   001906                     __ptext0:
  1248                           	callstack 0
  1249   001906                     _main:
  1250                           	callstack 22
  1251                           
  1252                           ;main.c: 613:     system_init();
  1253                           
  1254                           ;incstack = 0
  1255   001906  EC1E  F00C         	call	_system_init	;wreg free
  1256                           
  1257                           ;main.c: 614:     ScreenState currentState = MAIN_MENU;
  1258   00190A  0E01               	movlw	1
  1259   00190C  D027               	goto	L1
  1260   00190E                     l4908:
  1261                           
  1262                           ; BSR set to: 0
  1263                           ;main.c: 620:                 menu();
  1264   00190E  EC2F  F00D         	call	_menu	;wreg free
  1265                           
  1266                           ;main.c: 621:                 break;
  1267   001912  D01B               	goto	l4922
  1268   001914                     l4910:
  1269                           
  1270                           ; BSR set to: 0
  1271                           ;main.c: 623:                 handle_infusion_setup();
  1272   001914  EC09  F009         	call	_handle_infusion_setup	;wreg free
  1273                           
  1274                           ;main.c: 624:                 currentState = MAIN_MENU;
  1275   001918  0E01               	movlw	1
  1276   00191A  D003               	goto	L2
  1277   00191C                     l4914:
  1278                           
  1279                           ; BSR set to: 0
  1280                           ;main.c: 627:                 manual();
  1281   00191C  EC53  F00D         	call	_manual	;wreg free
  1282                           
  1283                           ;main.c: 628:                 currentState = MANUAL_SCREEN;
  1284   001920  0E03               	movlw	3
  1285   001922                     L2:
  1286   001922  0100               	movlb	0	; () banked
  1287   001924  6FFD               	movwf	main@currentState& (0+255),b
  1288                           
  1289                           ;main.c: 629:                 break;
  1290   001926  D011               	goto	l4922
  1291   001928                     l4920:
  1292                           
  1293                           ; BSR set to: 0
  1294   001928  51FD               	movf	main@currentState& (0+255),w,b
  1295   00192A  6FFA               	movwf	??_main& (0+255),b
  1296   00192C  6BFB               	clrf	(??_main+1)& (0+255),b
  1297                           
  1298                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1299                           ; Switch size 1, requested type "simple"
  1300                           ; Number of cases is 1, Range of values is 0 to 0
  1301                           ; switch strategies available:
  1302                           ; Name         Instructions Cycles
  1303                           ; simple_byte            4     3 (average)
  1304                           ;	Chosen strategy is simple_byte
  1305   00192E  51FB               	movf	(??_main+1)& (0+255),w,b
  1306   001930  0A00               	xorlw	0	; case 0
  1307   001932  A4D8               	btfss	status,2,c
  1308   001934  D00A               	goto	l4922
  1309                           
  1310                           ; BSR set to: 0
  1311                           ; Switch size 1, requested type "simple"
  1312                           ; Number of cases is 3, Range of values is 1 to 3
  1313                           ; switch strategies available:
  1314                           ; Name         Instructions Cycles
  1315                           ; simple_byte           10     6 (average)
  1316                           ;	Chosen strategy is simple_byte
  1317   001936  51FA               	movf	??_main& (0+255),w,b
  1318   001938  0A01               	xorlw	1	; case 1
  1319   00193A  B4D8               	btfsc	status,2,c
  1320   00193C  D7E8               	goto	l4908
  1321   00193E  0A03               	xorlw	3	; case 2
  1322   001940  B4D8               	btfsc	status,2,c
  1323   001942  D7E8               	goto	l4910
  1324   001944  0A01               	xorlw	1	; case 3
  1325   001946  B4D8               	btfsc	status,2,c
  1326   001948  D7E9               	goto	l4914
  1327   00194A                     l4922:
  1328                           
  1329                           ;main.c: 634:         userInput = switch_press_scan();
  1330   00194A  EC8B  F00E         	call	_switch_press_scan	;wreg free
  1331   00194E  0100               	movlb	0	; () banked
  1332   001950  6FFC               	movwf	main@userInput& (0+255),b
  1333                           
  1334                           ;main.c: 637:         currentState = GetNextState(currentState, userInput);
  1335   001952  C0FC  F005         	movff	main@userInput,GetNextState@input
  1336   001956  51FD               	movf	main@currentState& (0+255),w,b
  1337   001958  EC76  F00A         	call	_GetNextState
  1338   00195C                     L1:
  1339   00195C  0100               	movlb	0	; () banked
  1340   00195E  6FFD               	movwf	main@currentState& (0+255),b
  1341   001960  D7E3               	goto	l4920
  1342   001962                     __end_of_main:
  1343                           	callstack 0
  1344                           
  1345 ;; *************** function _system_init *****************
  1346 ;; Defined at:
  1347 ;;		line 139 in file "main.c"
  1348 ;; Parameters:    Size  Location     Type
  1349 ;;		None
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;		None
  1352 ;; Return value:  Size  Location     Type
  1353 ;;                  1    wreg      void 
  1354 ;; Registers used:
  1355 ;;		wreg, status,2, status,0, cstack
  1356 ;; Tracked objects:
  1357 ;;		On entry : 0/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMRAM   BANK0   BANK1
  1361 ;;      Params:         0       0       0
  1362 ;;      Locals:         0       0       0
  1363 ;;      Temps:          0       0       0
  1364 ;;      Totals:         0       0       0
  1365 ;;Total ram usage:        0 bytes
  1366 ;; Hardware stack levels used: 1
  1367 ;; Hardware stack levels required when called: 5
  1368 ;; This function calls:
  1369 ;;		_ADC_init
  1370 ;;		_InitKeypad
  1371 ;;		_Lcd_Init
  1372 ;;		_init_actuator
  1373 ;;		_usePeripheral
  1374 ;; This function is called by:
  1375 ;;		_main
  1376 ;; This function uses a non-reentrant model
  1377 ;;
  1378                           
  1379                           	psect	text1
  1380   00183C                     __ptext1:
  1381                           	callstack 0
  1382   00183C                     _system_init:
  1383                           	callstack 25
  1384                           
  1385                           ;main.c: 141:     OSCCON = 0x72;
  1386                           
  1387                           ; BSR set to: 0
  1388                           ;incstack = 0
  1389   00183C  0E72               	movlw	114
  1390   00183E  6ED3               	movwf	211,c	;volatile
  1391                           
  1392                           ;main.c: 143:     PORTD = 0x00;
  1393   001840  0E00               	movlw	0
  1394   001842  6E83               	movwf	131,c	;volatile
  1395                           
  1396                           ;main.c: 145:     TRISD = 0x00;
  1397   001844  0E00               	movlw	0
  1398   001846  6E95               	movwf	149,c	;volatile
  1399                           
  1400                           ;main.c: 147:     TRISC = 0x00;
  1401   001848  0E00               	movlw	0
  1402   00184A  6E94               	movwf	148,c	;volatile
  1403                           
  1404                           ;main.c: 149:     Lcd_Init();
  1405   00184C  ECAE  F00B         	call	_Lcd_Init	;wreg free
  1406                           
  1407                           ;main.c: 151:     InitKeypad();
  1408   001850  ECA0  F00E         	call	_InitKeypad	;wreg free
  1409                           
  1410                           ;main.c: 154:     ADC_init();
  1411   001854  EC96  F00E         	call	_ADC_init	;wreg free
  1412                           
  1413                           ;main.c: 157:     init_actuator();
  1414   001858  EC75  F00E         	call	_init_actuator	;wreg free
  1415                           
  1416                           ;main.c: 159:     TRISA2 = 0;
  1417   00185C  9492               	bcf	3986,2,c	;volatile
  1418                           
  1419                           ;main.c: 160:     TRISC6 = 0;
  1420   00185E  9C94               	bcf	3988,6,c	;volatile
  1421                           
  1422                           ;main.c: 161:     TRISC5 = 0;
  1423   001860  9A94               	bcf	3988,5,c	;volatile
  1424                           
  1425                           ;main.c: 162:     TRISC4 = 0;
  1426   001862  9894               	bcf	3988,4,c	;volatile
  1427                           
  1428                           ;main.c: 164:     usePeripheral(green_led, on);
  1429   001864  0E00               	movlw	0
  1430   001866  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  1431   001868  0E00               	movlw	0
  1432   00186A  6E05               	movwf	usePeripheral@peripheral^0,c
  1433   00186C  0E00               	movlw	0
  1434   00186E  6E08               	movwf	(usePeripheral@action+1)^0,c
  1435   001870  0E01               	movlw	1
  1436   001872  6E07               	movwf	usePeripheral@action^0,c
  1437   001874  EC62  F008         	call	_usePeripheral	;wreg free
  1438                           
  1439                           ;main.c: 165:     usePeripheral(orange_led, off);
  1440   001878  0E00               	movlw	0
  1441   00187A  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  1442   00187C  0E01               	movlw	1
  1443   00187E  6E05               	movwf	usePeripheral@peripheral^0,c
  1444   001880  0E00               	movlw	0
  1445   001882  6E08               	movwf	(usePeripheral@action+1)^0,c
  1446   001884  0E00               	movlw	0
  1447   001886  6E07               	movwf	usePeripheral@action^0,c
  1448   001888  EC62  F008         	call	_usePeripheral	;wreg free
  1449                           
  1450                           ;main.c: 166:     usePeripheral(red_led, off);
  1451   00188C  0E00               	movlw	0
  1452   00188E  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  1453   001890  0E02               	movlw	2
  1454   001892  6E05               	movwf	usePeripheral@peripheral^0,c
  1455   001894  0E00               	movlw	0
  1456   001896  6E08               	movwf	(usePeripheral@action+1)^0,c
  1457   001898  0E00               	movlw	0
  1458   00189A  6E07               	movwf	usePeripheral@action^0,c
  1459   00189C  EC62  F008         	call	_usePeripheral	;wreg free
  1460                           
  1461                           ;main.c: 170:     TRISCbits.RC1 = 0;
  1462   0018A0  9294               	bcf	148,1,c	;volatile
  1463   0018A2  0012               	return		;funcret
  1464   0018A4                     __end_of_system_init:
  1465                           	callstack 0
  1466                           
  1467 ;; *************** function _init_actuator *****************
  1468 ;; Defined at:
  1469 ;;		line 3 in file "actuator.c"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;		None
  1472 ;; Auto vars:     Size  Location     Type
  1473 ;;		None
  1474 ;; Return value:  Size  Location     Type
  1475 ;;                  1    wreg      void 
  1476 ;; Registers used:
  1477 ;;		wreg, status,2
  1478 ;; Tracked objects:
  1479 ;;		On entry : 0/0
  1480 ;;		On exit  : 0/0
  1481 ;;		Unchanged: 0/0
  1482 ;; Data sizes:     COMRAM   BANK0   BANK1
  1483 ;;      Params:         0       0       0
  1484 ;;      Locals:         0       0       0
  1485 ;;      Temps:          0       0       0
  1486 ;;      Totals:         0       0       0
  1487 ;;Total ram usage:        0 bytes
  1488 ;; Hardware stack levels used: 1
  1489 ;; Hardware stack levels required when called: 2
  1490 ;; This function calls:
  1491 ;;		Nothing
  1492 ;; This function is called by:
  1493 ;;		_system_init
  1494 ;; This function uses a non-reentrant model
  1495 ;;
  1496                           
  1497                           	psect	text2
  1498   001CEA                     __ptext2:
  1499                           	callstack 0
  1500   001CEA                     _init_actuator:
  1501                           	callstack 27
  1502                           
  1503                           ;actuator.c: 6:     RC2 = 0;
  1504                           
  1505                           ;incstack = 0
  1506   001CEA  9482               	bcf	3970,2,c	;volatile
  1507                           
  1508                           ;actuator.c: 7:     TRISC2 = 0;
  1509   001CEC  9494               	bcf	3988,2,c	;volatile
  1510                           
  1511                           ;actuator.c: 8:     CCP1CON = 0x0C;
  1512   001CEE  0E0C               	movlw	12
  1513   001CF0  6EBD               	movwf	189,c	;volatile
  1514                           
  1515                           ;actuator.c: 9:     CCPR1L = 0;
  1516   001CF2  0E00               	movlw	0
  1517   001CF4  6EBE               	movwf	190,c	;volatile
  1518                           
  1519                           ;actuator.c: 12:     TMR2IF = 0;
  1520   001CF6  929E               	bcf	3998,1,c	;volatile
  1521                           
  1522                           ;actuator.c: 13:     T2CON = 0x05;
  1523   001CF8  0E05               	movlw	5
  1524   001CFA  6ECA               	movwf	202,c	;volatile
  1525                           
  1526                           ;actuator.c: 14:     PR2 = 0xFF;
  1527   001CFC  68CB               	setf	203,c	;volatile
  1528   001CFE  0012               	return		;funcret
  1529   001D00                     __end_of_init_actuator:
  1530                           	callstack 0
  1531                           
  1532 ;; *************** function _Lcd_Init *****************
  1533 ;; Defined at:
  1534 ;;		line 88 in file "lcd.c"
  1535 ;; Parameters:    Size  Location     Type
  1536 ;;		None
  1537 ;; Auto vars:     Size  Location     Type
  1538 ;;		None
  1539 ;; Return value:  Size  Location     Type
  1540 ;;                  1    wreg      void 
  1541 ;; Registers used:
  1542 ;;		wreg, status,2, cstack
  1543 ;; Tracked objects:
  1544 ;;		On entry : 0/0
  1545 ;;		On exit  : 0/0
  1546 ;;		Unchanged: 0/0
  1547 ;; Data sizes:     COMRAM   BANK0   BANK1
  1548 ;;      Params:         0       0       0
  1549 ;;      Locals:         0       0       0
  1550 ;;      Temps:          1       0       0
  1551 ;;      Totals:         1       0       0
  1552 ;;Total ram usage:        1 bytes
  1553 ;; Hardware stack levels used: 1
  1554 ;; Hardware stack levels required when called: 4
  1555 ;; This function calls:
  1556 ;;		_Lcd_Cmd
  1557 ;;		_Lcd_Port
  1558 ;; This function is called by:
  1559 ;;		_system_init
  1560 ;; This function uses a non-reentrant model
  1561 ;;
  1562                           
  1563                           	psect	text3
  1564   00175C                     __ptext3:
  1565                           	callstack 0
  1566   00175C                     _Lcd_Init:
  1567                           	callstack 25
  1568                           
  1569                           ;lcd.c: 90:   Lcd_Port(0x00);
  1570                           
  1571                           ;incstack = 0
  1572   00175C  0E00               	movlw	0
  1573   00175E  ECE6  F00D         	call	_Lcd_Port
  1574                           
  1575                           ;lcd.c: 91:    _delay((unsigned long)((20)*(8000000L/4000.0)));
  1576   001762  0E34               	movlw	52
  1577   001764  6E08               	movwf	??_Lcd_Init^0,c
  1578   001766  0EF2               	movlw	242
  1579   001768                     u4807:
  1580   001768  2EE8               	decfsz	wreg,f,c
  1581   00176A  D7FE               	bra	u4807
  1582   00176C  2E08               	decfsz	??_Lcd_Init^0,f,c
  1583   00176E  D7FC               	bra	u4807
  1584                           
  1585                           ;lcd.c: 92:   Lcd_Cmd(0x03);
  1586   001770  0E03               	movlw	3
  1587   001772  EC49  F00E         	call	_Lcd_Cmd
  1588                           
  1589                           ;lcd.c: 93:  _delay((unsigned long)((5)*(8000000L/4000.0)));
  1590   001776  0E0D               	movlw	13
  1591   001778  6E08               	movwf	??_Lcd_Init^0,c
  1592   00177A  0EFC               	movlw	252
  1593   00177C                     u4817:
  1594   00177C  2EE8               	decfsz	wreg,f,c
  1595   00177E  D7FE               	bra	u4817
  1596   001780  2E08               	decfsz	??_Lcd_Init^0,f,c
  1597   001782  D7FC               	bra	u4817
  1598                           
  1599                           ;lcd.c: 94:   Lcd_Cmd(0x03);
  1600   001784  0E03               	movlw	3
  1601   001786  EC49  F00E         	call	_Lcd_Cmd
  1602                           
  1603                           ;lcd.c: 95:  _delay((unsigned long)((11)*(8000000L/4000.0)));
  1604   00178A  0E1D               	movlw	29
  1605   00178C  6E08               	movwf	??_Lcd_Init^0,c
  1606   00178E  0E91               	movlw	145
  1607   001790                     u4827:
  1608   001790  2EE8               	decfsz	wreg,f,c
  1609   001792  D7FE               	bra	u4827
  1610   001794  2E08               	decfsz	??_Lcd_Init^0,f,c
  1611   001796  D7FC               	bra	u4827
  1612   001798  0000               	nop	
  1613                           
  1614                           ;lcd.c: 96:   Lcd_Cmd(0x03);
  1615   00179A  0E03               	movlw	3
  1616   00179C  EC49  F00E         	call	_Lcd_Cmd
  1617                           
  1618                           ;lcd.c: 98:   Lcd_Cmd(0x02);
  1619   0017A0  0E02               	movlw	2
  1620   0017A2  EC49  F00E         	call	_Lcd_Cmd
  1621                           
  1622                           ;lcd.c: 99:   Lcd_Cmd(0x02);
  1623   0017A6  0E02               	movlw	2
  1624   0017A8  EC49  F00E         	call	_Lcd_Cmd
  1625                           
  1626                           ;lcd.c: 100:   Lcd_Cmd(0x08);
  1627   0017AC  0E08               	movlw	8
  1628   0017AE  EC49  F00E         	call	_Lcd_Cmd
  1629                           
  1630                           ;lcd.c: 101:   Lcd_Cmd(0x00);
  1631   0017B2  0E00               	movlw	0
  1632   0017B4  EC49  F00E         	call	_Lcd_Cmd
  1633                           
  1634                           ;lcd.c: 102:   Lcd_Cmd(0x0C);
  1635   0017B8  0E0C               	movlw	12
  1636   0017BA  EC49  F00E         	call	_Lcd_Cmd
  1637                           
  1638                           ;lcd.c: 103:   Lcd_Cmd(0x00);
  1639   0017BE  0E00               	movlw	0
  1640   0017C0  EC49  F00E         	call	_Lcd_Cmd
  1641                           
  1642                           ;lcd.c: 104:   Lcd_Cmd(0x06);
  1643   0017C4  0E06               	movlw	6
  1644   0017C6  EC49  F00E         	call	_Lcd_Cmd
  1645   0017CA  0012               	return		;funcret
  1646   0017CC                     __end_of_Lcd_Init:
  1647                           	callstack 0
  1648                           
  1649 ;; *************** function _InitKeypad *****************
  1650 ;; Defined at:
  1651 ;;		line 40 in file "keypad.c"
  1652 ;; Parameters:    Size  Location     Type
  1653 ;;		None
  1654 ;; Auto vars:     Size  Location     Type
  1655 ;;		None
  1656 ;; Return value:  Size  Location     Type
  1657 ;;                  1    wreg      void 
  1658 ;; Registers used:
  1659 ;;		wreg, status,2
  1660 ;; Tracked objects:
  1661 ;;		On entry : 0/0
  1662 ;;		On exit  : 0/0
  1663 ;;		Unchanged: 0/0
  1664 ;; Data sizes:     COMRAM   BANK0   BANK1
  1665 ;;      Params:         0       0       0
  1666 ;;      Locals:         0       0       0
  1667 ;;      Temps:          0       0       0
  1668 ;;      Totals:         0       0       0
  1669 ;;Total ram usage:        0 bytes
  1670 ;; Hardware stack levels used: 1
  1671 ;; Hardware stack levels required when called: 2
  1672 ;; This function calls:
  1673 ;;		Nothing
  1674 ;; This function is called by:
  1675 ;;		_system_init
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679                           	psect	text4
  1680   001D40                     __ptext4:
  1681                           	callstack 0
  1682   001D40                     _InitKeypad:
  1683                           	callstack 27
  1684                           
  1685                           ;keypad.c: 42:             PORTB = 0x00;
  1686                           
  1687                           ;incstack = 0
  1688   001D40  0E00               	movlw	0
  1689   001D42  6E81               	movwf	129,c	;volatile
  1690                           
  1691                           ;keypad.c: 43:             TRISB = 0xF0;
  1692   001D44  0EF0               	movlw	240
  1693   001D46  6E93               	movwf	147,c	;volatile
  1694                           
  1695                           ;keypad.c: 44:             TRISC7=1;
  1696   001D48  8E94               	bsf	3988,7,c	;volatile
  1697                           
  1698                           ;keypad.c: 45:             RBPU = 0;
  1699   001D4A  9EF1               	bcf	4081,7,c	;volatile
  1700   001D4C  0012               	return		;funcret
  1701   001D4E                     __end_of_InitKeypad:
  1702                           	callstack 0
  1703                           
  1704 ;; *************** function _ADC_init *****************
  1705 ;; Defined at:
  1706 ;;		line 16 in file "helper.c"
  1707 ;; Parameters:    Size  Location     Type
  1708 ;;		None
  1709 ;; Auto vars:     Size  Location     Type
  1710 ;;		None
  1711 ;; Return value:  Size  Location     Type
  1712 ;;                  1    wreg      void 
  1713 ;; Registers used:
  1714 ;;		wreg, status,2
  1715 ;; Tracked objects:
  1716 ;;		On entry : 0/0
  1717 ;;		On exit  : 0/0
  1718 ;;		Unchanged: 0/0
  1719 ;; Data sizes:     COMRAM   BANK0   BANK1
  1720 ;;      Params:         0       0       0
  1721 ;;      Locals:         0       0       0
  1722 ;;      Temps:          0       0       0
  1723 ;;      Totals:         0       0       0
  1724 ;;Total ram usage:        0 bytes
  1725 ;; Hardware stack levels used: 1
  1726 ;; Hardware stack levels required when called: 2
  1727 ;; This function calls:
  1728 ;;		Nothing
  1729 ;; This function is called by:
  1730 ;;		_system_init
  1731 ;; This function uses a non-reentrant model
  1732 ;;
  1733                           
  1734                           	psect	text5
  1735   001D2C                     __ptext5:
  1736                           	callstack 0
  1737   001D2C                     _ADC_init:
  1738                           	callstack 27
  1739                           
  1740                           ;helper.c: 18:     TRISA = 0xff;
  1741                           
  1742                           ;incstack = 0
  1743   001D2C  6892               	setf	146,c	;volatile
  1744                           
  1745                           ;helper.c: 19:     ADCON1 = 0x0e;
  1746   001D2E  0E0E               	movlw	14
  1747   001D30  6EC1               	movwf	193,c	;volatile
  1748                           
  1749                           ;helper.c: 20:     ADCON2 = 0x92;
  1750   001D32  0E92               	movlw	146
  1751   001D34  6EC0               	movwf	192,c	;volatile
  1752                           
  1753                           ;helper.c: 21:     ADRESH = 0;
  1754   001D36  0E00               	movlw	0
  1755   001D38  6EC4               	movwf	196,c	;volatile
  1756                           
  1757                           ;helper.c: 22:     ADRESL = 0;
  1758   001D3A  0E00               	movlw	0
  1759   001D3C  6EC3               	movwf	195,c	;volatile
  1760   001D3E  0012               	return		;funcret
  1761   001D40                     __end_of_ADC_init:
  1762                           	callstack 0
  1763                           
  1764 ;; *************** function _menu *****************
  1765 ;; Defined at:
  1766 ;;		line 120 in file "helper.c"
  1767 ;; Parameters:    Size  Location     Type
  1768 ;;		None
  1769 ;; Auto vars:     Size  Location     Type
  1770 ;;		None
  1771 ;; Return value:  Size  Location     Type
  1772 ;;                  1    wreg      void 
  1773 ;; Registers used:
  1774 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1775 ;; Tracked objects:
  1776 ;;		On entry : 0/0
  1777 ;;		On exit  : 0/0
  1778 ;;		Unchanged: 0/0
  1779 ;; Data sizes:     COMRAM   BANK0   BANK1
  1780 ;;      Params:         0       0       0
  1781 ;;      Locals:         0       0       0
  1782 ;;      Temps:          0       0       0
  1783 ;;      Totals:         0       0       0
  1784 ;;Total ram usage:        0 bytes
  1785 ;; Hardware stack levels used: 1
  1786 ;; Hardware stack levels required when called: 5
  1787 ;; This function calls:
  1788 ;;		_Lcd_Clear
  1789 ;;		_Lcd_Set_Cursor
  1790 ;;		_Lcd_Write_String
  1791 ;; This function is called by:
  1792 ;;		_main
  1793 ;; This function uses a non-reentrant model
  1794 ;;
  1795                           
  1796                           	psect	text6
  1797   001A5E                     __ptext6:
  1798                           	callstack 0
  1799   001A5E                     _menu:
  1800                           	callstack 25
  1801                           
  1802                           ;helper.c: 121:     Lcd_Clear();
  1803                           
  1804                           ;incstack = 0
  1805   001A5E  ECA7  F00E         	call	_Lcd_Clear	;wreg free
  1806                           
  1807                           ;helper.c: 122:     Lcd_Set_Cursor(position_row_1,position_column_1 );
  1808   001A62  0E01               	movlw	1
  1809   001A64  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  1810   001A66  0E01               	movlw	1
  1811   001A68  EC5B  F009         	call	_Lcd_Set_Cursor
  1812                           
  1813                           ;helper.c: 123:     Lcd_Write_String("MediSync Menu");
  1814   001A6C  0E41               	movlw	low STR_20
  1815   001A6E  6E09               	movwf	Lcd_Write_String@a^0,c
  1816   001A70  0E1F               	movlw	high STR_20
  1817   001A72  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  1818   001A74  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  1819                           
  1820                           ;helper.c: 124:     Lcd_Set_Cursor(position_row_2,position_column_1);
  1821   001A78  0E01               	movlw	1
  1822   001A7A  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  1823   001A7C  0E02               	movlw	2
  1824   001A7E  EC5B  F009         	call	_Lcd_Set_Cursor
  1825                           
  1826                           ;helper.c: 125:     Lcd_Write_String("1.Start New Infusion");
  1827   001A82  0ED5               	movlw	low STR_21
  1828   001A84  6E09               	movwf	Lcd_Write_String@a^0,c
  1829   001A86  0E1E               	movlw	high STR_21
  1830   001A88  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  1831   001A8A  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  1832                           
  1833                           ;helper.c: 126:     Lcd_Set_Cursor(position_row_3,position_column_1);
  1834   001A8E  0E01               	movlw	1
  1835   001A90  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  1836   001A92  0E03               	movlw	3
  1837   001A94  EC5B  F009         	call	_Lcd_Set_Cursor
  1838                           
  1839                           ;helper.c: 127:     Lcd_Write_String("2.Manual");
  1840   001A98  0E9B               	movlw	low STR_22
  1841   001A9A  6E09               	movwf	Lcd_Write_String@a^0,c
  1842   001A9C  0E1F               	movlw	high STR_22
  1843   001A9E  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  1844   001AA0  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  1845   001AA4  0012               	return		;funcret
  1846   001AA6                     __end_of_menu:
  1847                           	callstack 0
  1848                           
  1849 ;; *************** function _manual *****************
  1850 ;; Defined at:
  1851 ;;		line 130 in file "helper.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;		None
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;		None
  1856 ;; Return value:  Size  Location     Type
  1857 ;;                  1    wreg      void 
  1858 ;; Registers used:
  1859 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1860 ;; Tracked objects:
  1861 ;;		On entry : 0/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMRAM   BANK0   BANK1
  1865 ;;      Params:         0       0       0
  1866 ;;      Locals:         0       0       0
  1867 ;;      Temps:          0       0       0
  1868 ;;      Totals:         0       0       0
  1869 ;;Total ram usage:        0 bytes
  1870 ;; Hardware stack levels used: 1
  1871 ;; Hardware stack levels required when called: 5
  1872 ;; This function calls:
  1873 ;;		_Lcd_Clear
  1874 ;;		_Lcd_Set_Cursor
  1875 ;;		_Lcd_Write_String
  1876 ;; This function is called by:
  1877 ;;		_main
  1878 ;; This function uses a non-reentrant model
  1879 ;;
  1880                           
  1881                           	psect	text7
  1882   001AA6                     __ptext7:
  1883                           	callstack 0
  1884   001AA6                     _manual:
  1885                           	callstack 25
  1886                           
  1887                           ;helper.c: 131:     Lcd_Clear();
  1888                           
  1889                           ;incstack = 0
  1890   001AA6  ECA7  F00E         	call	_Lcd_Clear	;wreg free
  1891                           
  1892                           ;helper.c: 132:     Lcd_Set_Cursor( position_row_1,position_column_1);
  1893   001AAA  0E01               	movlw	1
  1894   001AAC  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  1895   001AAE  0E01               	movlw	1
  1896   001AB0  EC5B  F009         	call	_Lcd_Set_Cursor
  1897                           
  1898                           ;helper.c: 133:     Lcd_Write_String("For more information");
  1899   001AB4  0EEA               	movlw	low STR_23
  1900   001AB6  6E09               	movwf	Lcd_Write_String@a^0,c
  1901   001AB8  0E1E               	movlw	high STR_23
  1902   001ABA  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  1903   001ABC  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  1904                           
  1905                           ;helper.c: 134:     Lcd_Set_Cursor( position_row_2,position_column_2);
  1906   001AC0  0E02               	movlw	2
  1907   001AC2  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  1908   001AC4  0E02               	movlw	2
  1909   001AC6  EC5B  F009         	call	_Lcd_Set_Cursor
  1910                           
  1911                           ;helper.c: 135:     Lcd_Write_String("Visit: hardng.ed");
  1912   001ACA  0E12               	movlw	low STR_24
  1913   001ACC  6E09               	movwf	Lcd_Write_String@a^0,c
  1914   001ACE  0E1F               	movlw	high STR_24
  1915   001AD0  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  1916   001AD2  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  1917                           
  1918                           ;helper.c: 136:     Lcd_Set_Cursor( position_row_4,position_column_1 );
  1919   001AD6  0E01               	movlw	1
  1920   001AD8  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  1921   001ADA  0E04               	movlw	4
  1922   001ADC  EC5B  F009         	call	_Lcd_Set_Cursor
  1923                           
  1924                           ;helper.c: 137:     Lcd_Write_String("BACK");
  1925   001AE0  0EE7               	movlw	low STR_5
  1926   001AE2  6E09               	movwf	Lcd_Write_String@a^0,c
  1927   001AE4  0E1F               	movlw	high STR_5
  1928   001AE6  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  1929   001AE8  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  1930   001AEC  0012               	return		;funcret
  1931   001AEE                     __end_of_manual:
  1932                           	callstack 0
  1933                           
  1934 ;; *************** function _handle_infusion_setup *****************
  1935 ;; Defined at:
  1936 ;;		line 463 in file "main.c"
  1937 ;; Parameters:    Size  Location     Type
  1938 ;;		None
  1939 ;; Auto vars:     Size  Location     Type
  1940 ;;  t               3    0        PTR const unsigned char 
  1941 ;;  v               2  113[COMRAM] PTR const unsigned char 
  1942 ;;		 -> RAM(511), input_numbers@inputBuffer(5), 
  1943 ;;  actuator_pos    2    0        int 
  1944 ;;  decision        2    0        int 
  1945 ;;  currentState    1  115[COMRAM] enum E2634
  1946 ;; Return value:  Size  Location     Type
  1947 ;;                  1    wreg      void 
  1948 ;; Registers used:
  1949 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1950 ;; Tracked objects:
  1951 ;;		On entry : 0/0
  1952 ;;		On exit  : 0/0
  1953 ;;		Unchanged: 0/0
  1954 ;; Data sizes:     COMRAM   BANK0   BANK1
  1955 ;;      Params:         0       0       0
  1956 ;;      Locals:         3       0       0
  1957 ;;      Temps:          2       0       0
  1958 ;;      Totals:         5       0       0
  1959 ;;Total ram usage:        5 bytes
  1960 ;; Hardware stack levels used: 1
  1961 ;; Hardware stack levels required when called: 8
  1962 ;; This function calls:
  1963 ;;		_ADC_Read
  1964 ;;		_infusion
  1965 ;;		_input_numbers
  1966 ;;		_input_value
  1967 ;;		_string_long_vol
  1968 ;; This function is called by:
  1969 ;;		_main
  1970 ;; This function uses a non-reentrant model
  1971 ;;
  1972                           
  1973                           	psect	text8
  1974   001212                     __ptext8:
  1975                           	callstack 0
  1976   001212                     _handle_infusion_setup:
  1977                           	callstack 22
  1978                           
  1979                           ;main.c: 464:     InfusionSetupState currentState = START_INFUSION_SETUP;
  1980                           
  1981                           ;incstack = 0
  1982   001212  0E00               	movlw	0
  1983   001214  6E74               	movwf	handle_infusion_setup@currentState^0,c
  1984   001216  0E00               	movlw	0
  1985   001218  EC37  F00B         	call	_ADC_Read
  1986                           
  1987                           ;main.c: 467:     const char* v;;main.c: 468:     const char* t;;main.c: 469:     while 
      +                          (currentState != FINISH_INFUSION_SETUP) {
  1988   00121C  D047               	goto	l4836
  1989   00121E                     l4816:
  1990                           
  1991                           ;main.c: 472:                 infusion();
  1992   00121E  ECC8  F000         	call	_infusion	;wreg free
  1993                           
  1994                           ;main.c: 473:                 input_value("VOLUME", "V", "10", "ml");
  1995   001222  0EBB               	movlw	low STR_40
  1996   001224  6E0F               	movwf	input_value@inputType^0,c
  1997   001226  0E1F               	movlw	high STR_40
  1998   001228  6E10               	movwf	(input_value@inputType+1)^0,c
  1999   00122A  0EFD               	movlw	low STR_41
  2000   00122C  6E11               	movwf	input_value@initial^0,c
  2001   00122E  0E1F               	movlw	high STR_41
  2002   001230  6E12               	movwf	(input_value@initial+1)^0,c
  2003   001232  0EF4               	movlw	low STR_42
  2004   001234  6E13               	movwf	input_value@limit^0,c
  2005   001236  0E1F               	movlw	high STR_42
  2006   001238  6E14               	movwf	(input_value@limit+1)^0,c
  2007   00123A  0EFA               	movlw	low STR_43
  2008   00123C  6E15               	movwf	input_value@units^0,c
  2009   00123E  0E1F               	movlw	high STR_43
  2010   001240  6E16               	movwf	(input_value@units+1)^0,c
  2011   001242  ECB6  F008         	call	_input_value	;wreg free
  2012                           
  2013                           ;main.c: 475:                 currentState = INPUT_VOLUME_STATE;
  2014   001246  0E01               	movlw	1
  2015   001248  D021               	goto	L4
  2016   00124A                     l4822:
  2017                           
  2018                           ;main.c: 479:                 v = input_numbers('.', 3);
  2019   00124A  0E00               	movlw	0
  2020   00124C  6E10               	movwf	(input_numbers@number_of_digits+1)^0,c
  2021   00124E  0E03               	movlw	3
  2022   001250  6E0F               	movwf	input_numbers@number_of_digits^0,c
  2023   001252  0E2E               	movlw	46
  2024   001254  EC6E  F006         	call	_input_numbers
  2025   001258  C00F  F072         	movff	?_input_numbers,handle_infusion_setup@v
  2026   00125C  C010  F073         	movff	?_input_numbers+1,handle_infusion_setup@v+1
  2027                           
  2028                           ;main.c: 480:                 volume = string_long_vol(v);
  2029   001260  C072  F02E         	movff	handle_infusion_setup@v,string_long_vol@str
  2030   001264  C073  F02F         	movff	handle_infusion_setup@v+1,string_long_vol@str+1
  2031   001268  ECB1  F007         	call	_string_long_vol	;wreg free
  2032   00126C  C02E  F0D2         	movff	?_string_long_vol,_volume
  2033   001270  C02F  F0D3         	movff	?_string_long_vol+1,_volume+1
  2034   001274  C030  F0D4         	movff	?_string_long_vol+2,_volume+2
  2035   001278  C031  F0D5         	movff	?_string_long_vol+3,_volume+3
  2036                           
  2037                           ;main.c: 482:                 if (v == 'b') {
  2038   00127C  0E62               	movlw	98
  2039   00127E  1872               	xorwf	handle_infusion_setup@v^0,w,c
  2040   001280  1073               	iorwf	(handle_infusion_setup@v+1)^0,w,c
  2041   001282  A4D8               	btfss	status,2,c
  2042   001284  D002               	goto	l4830
  2043                           
  2044                           ;main.c: 483:                     currentState = FINISH_INFUSION_SETUP;
  2045   001286  0E0A               	movlw	10
  2046   001288  D001               	goto	L4
  2047   00128A                     l4830:
  2048                           
  2049                           ;main.c: 485:                     currentState = INPUT_TIME_STATE;
  2050   00128A  0E02               	movlw	2
  2051   00128C                     L4:
  2052   00128C  6E74               	movwf	handle_infusion_setup@currentState^0,c
  2053   00128E  D00E               	goto	l4836
  2054   001290                     l4834:
  2055   001290  5074               	movf	handle_infusion_setup@currentState^0,w,c
  2056   001292  6E70               	movwf	??_handle_infusion_setup^0,c
  2057   001294  6A71               	clrf	(??_handle_infusion_setup+1)^0,c
  2058                           
  2059                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2060                           ; Switch size 1, requested type "simple"
  2061                           ; Number of cases is 1, Range of values is 0 to 0
  2062                           ; switch strategies available:
  2063                           ; Name         Instructions Cycles
  2064                           ; simple_byte            4     3 (average)
  2065                           ;	Chosen strategy is simple_byte
  2066   001296  5071               	movf	(??_handle_infusion_setup+1)^0,w,c
  2067   001298  0A00               	xorlw	0	; case 0
  2068   00129A  A4D8               	btfss	status,2,c
  2069   00129C  D007               	goto	l4836
  2070                           
  2071                           ; Switch size 1, requested type "simple"
  2072                           ; Number of cases is 2, Range of values is 0 to 1
  2073                           ; switch strategies available:
  2074                           ; Name         Instructions Cycles
  2075                           ; simple_byte            7     4 (average)
  2076                           ;	Chosen strategy is simple_byte
  2077   00129E  5070               	movf	??_handle_infusion_setup^0,w,c
  2078   0012A0  0A00               	xorlw	0	; case 0
  2079   0012A2  B4D8               	btfsc	status,2,c
  2080   0012A4  D7BC               	goto	l4816
  2081   0012A6  0A01               	xorlw	1	; case 1
  2082   0012A8  B4D8               	btfsc	status,2,c
  2083   0012AA  D7CF               	goto	l4822
  2084   0012AC                     l4836:
  2085                           
  2086                           ;main.c: 469:     while (currentState != FINISH_INFUSION_SETUP) {
  2087   0012AC  0E0A               	movlw	10
  2088   0012AE  1874               	xorwf	handle_infusion_setup@currentState^0,w,c
  2089   0012B0  B4D8               	btfsc	status,2,c
  2090   0012B2  0012               	return	
  2091   0012B4  D7ED               	goto	l4834
  2092   0012B6                     __end_of_handle_infusion_setup:
  2093                           	callstack 0
  2094                           
  2095 ;; *************** function _string_long_vol *****************
  2096 ;; Defined at:
  2097 ;;		line 213 in file "main.c"
  2098 ;; Parameters:    Size  Location     Type
  2099 ;;  str             2   45[COMRAM] PTR const unsigned char 
  2100 ;;		 -> RAM(511), input_numbers@inputBuffer(5), 
  2101 ;; Auto vars:     Size  Location     Type
  2102 ;;  result          4   55[COMRAM] long 
  2103 ;; Return value:  Size  Location     Type
  2104 ;;                  4   45[COMRAM] long 
  2105 ;; Registers used:
  2106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2107 ;; Tracked objects:
  2108 ;;		On entry : 0/0
  2109 ;;		On exit  : 0/0
  2110 ;;		Unchanged: 0/0
  2111 ;; Data sizes:     COMRAM   BANK0   BANK1
  2112 ;;      Params:         4       0       0
  2113 ;;      Locals:         4       0       0
  2114 ;;      Temps:          6       0       0
  2115 ;;      Totals:        14       0       0
  2116 ;;Total ram usage:       14 bytes
  2117 ;; Hardware stack levels used: 1
  2118 ;; Hardware stack levels required when called: 3
  2119 ;; This function calls:
  2120 ;;		___lmul
  2121 ;; This function is called by:
  2122 ;;		_handle_infusion_setup
  2123 ;; This function uses a non-reentrant model
  2124 ;;
  2125                           
  2126                           	psect	text9
  2127   000F62                     __ptext9:
  2128                           	callstack 0
  2129   000F62                     _string_long_vol:
  2130                           	callstack 26
  2131                           
  2132                           ;main.c: 214:     long result = ((long)(str[1] - '0') * 10) + (long)(str[3] - '0');
  2133                           
  2134                           ;incstack = 0
  2135   000F62  EE20 F003          	lfsr	2,3
  2136   000F66  502E               	movf	string_long_vol@str^0,w,c
  2137   000F68  26D9               	addwf	fsr2l,f,c
  2138   000F6A  502F               	movf	(string_long_vol@str+1)^0,w,c
  2139   000F6C  22DA               	addwfc	fsr2h,f,c
  2140   000F6E  50DF               	movf	indf2,w,c
  2141   000F70  6E32               	movwf	??_string_long_vol^0,c
  2142   000F72  0ED0               	movlw	208
  2143   000F74  2432               	addwf	??_string_long_vol^0,w,c
  2144   000F76  6E33               	movwf	(??_string_long_vol+1)^0,c
  2145   000F78  6A34               	clrf	(??_string_long_vol+2)^0,c
  2146   000F7A  0EFF               	movlw	255
  2147   000F7C  2234               	addwfc	(??_string_long_vol+2)^0,f,c
  2148   000F7E  EE20 F001          	lfsr	2,1
  2149   000F82  502E               	movf	string_long_vol@str^0,w,c
  2150   000F84  26D9               	addwf	fsr2l,f,c
  2151   000F86  502F               	movf	(string_long_vol@str+1)^0,w,c
  2152   000F88  22DA               	addwfc	fsr2h,f,c
  2153   000F8A  50DF               	movf	indf2,w,c
  2154   000F8C  6E35               	movwf	(??_string_long_vol+3)^0,c
  2155   000F8E  0ED0               	movlw	208
  2156   000F90  2435               	addwf	(??_string_long_vol+3)^0,w,c
  2157   000F92  6E36               	movwf	(??_string_long_vol+4)^0,c
  2158   000F94  6A37               	clrf	(??_string_long_vol+5)^0,c
  2159   000F96  0EFF               	movlw	255
  2160   000F98  2237               	addwfc	(??_string_long_vol+5)^0,f,c
  2161   000F9A  C036  F022         	movff	??_string_long_vol+4,___lmul@multiplier
  2162   000F9E  C037  F023         	movff	??_string_long_vol+5,___lmul@multiplier+1
  2163   000FA2  6A24               	clrf	(___lmul@multiplier+2)^0,c
  2164   000FA4  6A25               	clrf	(___lmul@multiplier+3)^0,c
  2165   000FA6  0E0A               	movlw	10
  2166   000FA8  6E26               	movwf	___lmul@multiplicand^0,c
  2167   000FAA  0E00               	movlw	0
  2168   000FAC  6E27               	movwf	(___lmul@multiplicand+1)^0,c
  2169   000FAE  0E00               	movlw	0
  2170   000FB0  6E28               	movwf	(___lmul@multiplicand+2)^0,c
  2171   000FB2  0E00               	movlw	0
  2172   000FB4  6E29               	movwf	(___lmul@multiplicand+3)^0,c
  2173   000FB6  ECDC  F00C         	call	___lmul	;wreg free
  2174   000FBA  5033               	movf	(??_string_long_vol+1)^0,w,c
  2175   000FBC  2422               	addwf	?___lmul^0,w,c
  2176   000FBE  6E38               	movwf	string_long_vol@result^0,c
  2177   000FC0  5034               	movf	(??_string_long_vol+2)^0,w,c
  2178   000FC2  2023               	addwfc	(?___lmul+1)^0,w,c
  2179   000FC4  6E39               	movwf	(string_long_vol@result+1)^0,c
  2180   000FC6  0E00               	movlw	0
  2181   000FC8  2024               	addwfc	(?___lmul+2)^0,w,c
  2182   000FCA  6E3A               	movwf	(string_long_vol@result+2)^0,c
  2183   000FCC  0E00               	movlw	0
  2184   000FCE  2025               	addwfc	(?___lmul+3)^0,w,c
  2185   000FD0  6E3B               	movwf	(string_long_vol@result+3)^0,c
  2186                           
  2187                           ;main.c: 215:     if(((long)(str[1] - '0')) == 0){
  2188   000FD2  EE20 F001          	lfsr	2,1
  2189   000FD6  502E               	movf	string_long_vol@str^0,w,c
  2190   000FD8  26D9               	addwf	fsr2l,f,c
  2191   000FDA  502F               	movf	(string_long_vol@str+1)^0,w,c
  2192   000FDC  22DA               	addwfc	fsr2h,f,c
  2193   000FDE  50DF               	movf	indf2,w,c
  2194   000FE0  6E32               	movwf	??_string_long_vol^0,c
  2195   000FE2  0ED0               	movlw	208
  2196   000FE4  2432               	addwf	??_string_long_vol^0,w,c
  2197   000FE6  6E33               	movwf	(??_string_long_vol+1)^0,c
  2198   000FE8  6A34               	clrf	(??_string_long_vol+2)^0,c
  2199   000FEA  0EFF               	movlw	255
  2200   000FEC  2234               	addwfc	(??_string_long_vol+2)^0,f,c
  2201   000FEE  5033               	movf	(??_string_long_vol+1)^0,w,c
  2202   000FF0  1034               	iorwf	(??_string_long_vol+2)^0,w,c
  2203   000FF2  A4D8               	btfss	status,2,c
  2204   000FF4  D008               	goto	l4646
  2205                           
  2206                           ;main.c: 216:         result = 100;
  2207   000FF6  0E64               	movlw	100
  2208   000FF8  6E38               	movwf	string_long_vol@result^0,c
  2209   000FFA  0E00               	movlw	0
  2210   000FFC  6E39               	movwf	(string_long_vol@result+1)^0,c
  2211   000FFE  0E00               	movlw	0
  2212   001000  6E3A               	movwf	(string_long_vol@result+2)^0,c
  2213   001002  0E00               	movlw	0
  2214   001004  6E3B               	movwf	(string_long_vol@result+3)^0,c
  2215   001006                     l4646:
  2216                           
  2217                           ;main.c: 218:     return result;
  2218   001006  C038  F02E         	movff	string_long_vol@result,?_string_long_vol
  2219   00100A  C039  F02F         	movff	string_long_vol@result+1,?_string_long_vol+1
  2220   00100E  C03A  F030         	movff	string_long_vol@result+2,?_string_long_vol+2
  2221   001012  C03B  F031         	movff	string_long_vol@result+3,?_string_long_vol+3
  2222   001016  0012               	return		;funcret
  2223   001018                     __end_of_string_long_vol:
  2224                           	callstack 0
  2225                           
  2226 ;; *************** function _input_value *****************
  2227 ;; Defined at:
  2228 ;;		line 48 in file "helper.c"
  2229 ;; Parameters:    Size  Location     Type
  2230 ;;  inputType       2   14[COMRAM] PTR unsigned char 
  2231 ;;		 -> STR_40(7), 
  2232 ;;  initial         2   16[COMRAM] PTR unsigned char 
  2233 ;;		 -> STR_41(2), 
  2234 ;;  limit           2   18[COMRAM] PTR unsigned char 
  2235 ;;		 -> STR_42(3), 
  2236 ;;  units           2   20[COMRAM] PTR unsigned char 
  2237 ;;		 -> STR_43(3), 
  2238 ;; Auto vars:     Size  Location     Type
  2239 ;;		None
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  1    wreg      void 
  2242 ;; Registers used:
  2243 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMRAM   BANK0   BANK1
  2249 ;;      Params:         8       0       0
  2250 ;;      Locals:         0       0       0
  2251 ;;      Temps:          0       0       0
  2252 ;;      Totals:         8       0       0
  2253 ;;Total ram usage:        8 bytes
  2254 ;; Hardware stack levels used: 1
  2255 ;; Hardware stack levels required when called: 5
  2256 ;; This function calls:
  2257 ;;		_Lcd_Clear
  2258 ;;		_Lcd_Set_Cursor
  2259 ;;		_Lcd_Write_String
  2260 ;; This function is called by:
  2261 ;;		_handle_infusion_setup
  2262 ;; This function uses a non-reentrant model
  2263 ;;
  2264                           
  2265                           	psect	text10
  2266   00116C                     __ptext10:
  2267                           	callstack 0
  2268   00116C                     _input_value:
  2269                           	callstack 24
  2270                           
  2271                           ;helper.c: 49:     Lcd_Clear();;
  2272                           
  2273                           ;incstack = 0
  2274   00116C  ECA7  F00E         	call	_Lcd_Clear	;wreg free
  2275                           
  2276                           ;helper.c: 50:     Lcd_Set_Cursor(position_row_1,position_column_1 );
  2277   001170  0E01               	movlw	1
  2278   001172  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2279   001174  0E01               	movlw	1
  2280   001176  EC5B  F009         	call	_Lcd_Set_Cursor
  2281                           
  2282                           ;helper.c: 51:     Lcd_Write_String("INPUT ");
  2283   00117A  0EC9               	movlw	low STR_1
  2284   00117C  6E09               	movwf	Lcd_Write_String@a^0,c
  2285   00117E  0E1F               	movlw	high STR_1
  2286   001180  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2287   001182  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  2288                           
  2289                           ;helper.c: 52:     Lcd_Write_String(inputType);
  2290   001186  C00F  F009         	movff	input_value@inputType,Lcd_Write_String@a
  2291   00118A  C010  F00A         	movff	input_value@inputType+1,Lcd_Write_String@a+1
  2292   00118E  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  2293                           
  2294                           ;helper.c: 53:     Lcd_Set_Cursor(position_row_2,position_column_1 );
  2295   001192  0E01               	movlw	1
  2296   001194  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2297   001196  0E02               	movlw	2
  2298   001198  EC5B  F009         	call	_Lcd_Set_Cursor
  2299                           
  2300                           ;helper.c: 54:     Lcd_Write_String(initial);
  2301   00119C  C011  F009         	movff	input_value@initial,Lcd_Write_String@a
  2302   0011A0  C012  F00A         	movff	input_value@initial+1,Lcd_Write_String@a+1
  2303   0011A4  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  2304                           
  2305                           ;helper.c: 55:     Lcd_Write_String(" BETWEEN 0-");
  2306   0011A8  0E4F               	movlw	low STR_2
  2307   0011AA  6E09               	movwf	Lcd_Write_String@a^0,c
  2308   0011AC  0E1F               	movlw	high STR_2
  2309   0011AE  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2310   0011B0  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  2311                           
  2312                           ;helper.c: 56:     Lcd_Write_String(limit);
  2313   0011B4  C013  F009         	movff	input_value@limit,Lcd_Write_String@a
  2314   0011B8  C014  F00A         	movff	input_value@limit+1,Lcd_Write_String@a+1
  2315   0011BC  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  2316                           
  2317                           ;helper.c: 57:     Lcd_Write_String(" ");
  2318   0011C0  0EEE               	movlw	low (STR_37+2)
  2319   0011C2  6E09               	movwf	Lcd_Write_String@a^0,c
  2320   0011C4  0E1F               	movlw	high (STR_37+2)
  2321   0011C6  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2322   0011C8  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  2323                           
  2324                           ;helper.c: 58:     Lcd_Write_String(units);
  2325   0011CC  C015  F009         	movff	input_value@units,Lcd_Write_String@a
  2326   0011D0  C016  F00A         	movff	input_value@units+1,Lcd_Write_String@a+1
  2327   0011D4  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  2328                           
  2329                           ;helper.c: 59:     Lcd_Set_Cursor(position_row_3, position_column_1);
  2330   0011D8  0E01               	movlw	1
  2331   0011DA  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2332   0011DC  0E03               	movlw	3
  2333   0011DE  EC5B  F009         	call	_Lcd_Set_Cursor
  2334                           
  2335                           ;helper.c: 60:     Lcd_Write_String(initial);
  2336   0011E2  C011  F009         	movff	input_value@initial,Lcd_Write_String@a
  2337   0011E6  C012  F00A         	movff	input_value@initial+1,Lcd_Write_String@a+1
  2338   0011EA  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  2339                           
  2340                           ;helper.c: 61:     Lcd_Write_String(": ");
  2341   0011EE  0EED               	movlw	low (STR_37+1)
  2342   0011F0  6E09               	movwf	Lcd_Write_String@a^0,c
  2343   0011F2  0E1F               	movlw	high (STR_37+1)
  2344   0011F4  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2345   0011F6  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  2346                           
  2347                           ;helper.c: 62:     Lcd_Set_Cursor(position_row_4,position_column_17 );
  2348   0011FA  0E11               	movlw	17
  2349   0011FC  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2350   0011FE  0E04               	movlw	4
  2351   001200  EC5B  F009         	call	_Lcd_Set_Cursor
  2352                           
  2353                           ;helper.c: 63:     Lcd_Write_String("BACK");
  2354   001204  0EE7               	movlw	low STR_5
  2355   001206  6E09               	movwf	Lcd_Write_String@a^0,c
  2356   001208  0E1F               	movlw	high STR_5
  2357   00120A  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2358   00120C  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  2359   001210  0012               	return		;funcret
  2360   001212                     __end_of_input_value:
  2361                           	callstack 0
  2362                           
  2363 ;; *************** function _input_numbers *****************
  2364 ;; Defined at:
  2365 ;;		line 68 in file "main.c"
  2366 ;; Parameters:    Size  Location     Type
  2367 ;;  separator       1    wreg     unsigned char 
  2368 ;;  number_of_di    2   14[COMRAM] int 
  2369 ;; Auto vars:     Size  Location     Type
  2370 ;;  separator       1   25[COMRAM] unsigned char 
  2371 ;;  outputBuffer    2   23[COMRAM] unsigned char [2]
  2372 ;;  inputBuffer     5   18[COMRAM] unsigned char [5]
  2373 ;;  counter         2   27[COMRAM] int 
  2374 ;;  userInput       1   26[COMRAM] unsigned char 
  2375 ;; Return value:  Size  Location     Type
  2376 ;;                  2   14[COMRAM] PTR unsigned char 
  2377 ;; Registers used:
  2378 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2379 ;; Tracked objects:
  2380 ;;		On entry : 0/0
  2381 ;;		On exit  : 0/0
  2382 ;;		Unchanged: 0/0
  2383 ;; Data sizes:     COMRAM   BANK0   BANK1
  2384 ;;      Params:         2       0       0
  2385 ;;      Locals:        11       0       0
  2386 ;;      Temps:          2       0       0
  2387 ;;      Totals:        15       0       0
  2388 ;;Total ram usage:       15 bytes
  2389 ;; Hardware stack levels used: 1
  2390 ;; Hardware stack levels required when called: 5
  2391 ;; This function calls:
  2392 ;;		_Lcd_Set_Cursor
  2393 ;;		_Lcd_Write_String
  2394 ;;		_switch_press_scan
  2395 ;; This function is called by:
  2396 ;;		_handle_infusion_setup
  2397 ;; This function uses a non-reentrant model
  2398 ;;
  2399                           
  2400                           	psect	text11
  2401   000CDC                     __ptext11:
  2402                           	callstack 0
  2403   000CDC                     _input_numbers:
  2404                           	callstack 24
  2405                           
  2406                           ;incstack = 0
  2407                           ;input_numbers@separator stored from wreg
  2408   000CDC  6E1A               	movwf	input_numbers@separator^0,c
  2409                           
  2410                           ;main.c: 70:     char inputBuffer[5];;main.c: 71:     inputBuffer[2]= separator;
  2411   000CDE  C01A  F015         	movff	input_numbers@separator,input_numbers@inputBuffer+2
  2412                           
  2413                           ;main.c: 73:     int counter = 0;
  2414   000CE2  0E00               	movlw	0
  2415   000CE4  6E1D               	movwf	(input_numbers@counter+1)^0,c
  2416   000CE6  0E00               	movlw	0
  2417   000CE8  6E1C               	movwf	input_numbers@counter^0,c
  2418                           
  2419                           ;main.c: 75:     Lcd_Set_Cursor(position_row_3, position_column_8);
  2420   000CEA  0E08               	movlw	8
  2421   000CEC  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2422   000CEE  0E03               	movlw	3
  2423   000CF0  EC5B  F009         	call	_Lcd_Set_Cursor
  2424                           
  2425                           ;main.c: 78:     while(userInput == 'n' && counter <= number_of_digits){
  2426   000CF4  D051               	goto	l4626
  2427   000CF6                     l4584:
  2428                           
  2429                           ;main.c: 79:         char outputBuffer[2];;main.c: 80:         userInput = switch_press_
      +                          scan();
  2430   000CF6  EC8B  F00E         	call	_switch_press_scan	;wreg free
  2431   000CFA  6E1B               	movwf	input_numbers@userInput^0,c
  2432                           
  2433                           ;main.c: 82:         if (userInput == 'b') {
  2434   000CFC  0E62               	movlw	98
  2435   000CFE  181B               	xorwf	input_numbers@userInput^0,w,c
  2436   000D00  A4D8               	btfss	status,2,c
  2437   000D02  D005               	goto	l4594
  2438                           
  2439                           ;main.c: 83:             return 'b';
  2440   000D04  0E62               	movlw	98
  2441   000D06  6E0F               	movwf	?_input_numbers^0,c
  2442   000D08  0E00               	movlw	0
  2443   000D0A  6E10               	movwf	(?_input_numbers+1)^0,c
  2444   000D0C  0012               	return	
  2445   000D0E                     l4594:
  2446                           
  2447                           ;main.c: 86:             if(userInput >= 48 && userInput <= 57 ){
  2448   000D0E  0E2F               	movlw	47
  2449   000D10  641B               	cpfsgt	input_numbers@userInput^0,c
  2450   000D12  D042               	goto	l4626
  2451   000D14  0E3A               	movlw	58
  2452   000D16  601B               	cpfslt	input_numbers@userInput^0,c
  2453   000D18  D03F               	goto	l4626
  2454                           
  2455                           ;main.c: 87:                 _delay((unsigned long)((500)*(8000000L/4000.0)));
  2456   000D1A  0E06               	movlw	6
  2457   000D1C  6E12               	movwf	(??_input_numbers+1)^0,c
  2458   000D1E  0E13               	movlw	19
  2459   000D20  6E11               	movwf	??_input_numbers^0,c
  2460   000D22  0EAE               	movlw	174
  2461   000D24                     u4837:
  2462   000D24  2EE8               	decfsz	wreg,f,c
  2463   000D26  D7FE               	bra	u4837
  2464   000D28  2E11               	decfsz	??_input_numbers^0,f,c
  2465   000D2A  D7FC               	bra	u4837
  2466   000D2C  2E12               	decfsz	(??_input_numbers+1)^0,f,c
  2467   000D2E  D7FA               	bra	u4837
  2468                           
  2469                           ;main.c: 88:                 inputBuffer[counter]= userInput;
  2470   000D30  501C               	movf	input_numbers@counter^0,w,c
  2471   000D32  0F13               	addlw	low input_numbers@inputBuffer
  2472   000D34  6ED9               	movwf	fsr2l,c
  2473   000D36  6ADA               	clrf	fsr2h,c
  2474   000D38  C01B  FFDF         	movff	input_numbers@userInput,indf2
  2475                           
  2476                           ;main.c: 89:                 outputBuffer[0] = inputBuffer[counter];
  2477   000D3C  501C               	movf	input_numbers@counter^0,w,c
  2478   000D3E  0F13               	addlw	low input_numbers@inputBuffer
  2479   000D40  6ED9               	movwf	fsr2l,c
  2480   000D42  6ADA               	clrf	fsr2h,c
  2481   000D44  50DF               	movf	indf2,w,c
  2482   000D46  6E18               	movwf	input_numbers@outputBuffer^0,c
  2483                           
  2484                           ;main.c: 90:                 outputBuffer[1] = '\0';
  2485   000D48  0E00               	movlw	0
  2486   000D4A  6E19               	movwf	(input_numbers@outputBuffer+1)^0,c
  2487                           
  2488                           ;main.c: 91:                 Lcd_Write_String(outputBuffer);
  2489   000D4C  0E18               	movlw	low input_numbers@outputBuffer
  2490   000D4E  6E09               	movwf	Lcd_Write_String@a^0,c
  2491   000D50  6A0A               	clrf	(Lcd_Write_String@a+1)^0,c
  2492   000D52  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  2493                           
  2494                           ;main.c: 92:                 counter++;
  2495   000D56  4A1C               	infsnz	input_numbers@counter^0,f,c
  2496   000D58  2A1D               	incf	(input_numbers@counter+1)^0,f,c
  2497                           
  2498                           ;main.c: 93:                 Lcd_Set_Cursor( position_row_3,position_column_8 + counter)
      +                          ;
  2499   000D5A  501C               	movf	input_numbers@counter^0,w,c
  2500   000D5C  0F08               	addlw	8
  2501   000D5E  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2502   000D60  0E03               	movlw	3
  2503   000D62  EC5B  F009         	call	_Lcd_Set_Cursor
  2504                           
  2505                           ;main.c: 95:                 if(inputBuffer[counter] == separator){
  2506   000D66  501C               	movf	input_numbers@counter^0,w,c
  2507   000D68  0F13               	addlw	low input_numbers@inputBuffer
  2508   000D6A  6ED9               	movwf	fsr2l,c
  2509   000D6C  6ADA               	clrf	fsr2h,c
  2510   000D6E  501A               	movf	input_numbers@separator^0,w,c
  2511   000D70  18DE               	xorwf	postinc2,w,c
  2512   000D72  A4D8               	btfss	status,2,c
  2513   000D74  D011               	goto	l4626
  2514                           
  2515                           ;main.c: 96:                     outputBuffer[0] = separator;
  2516   000D76  C01A  F018         	movff	input_numbers@separator,input_numbers@outputBuffer
  2517                           
  2518                           ;main.c: 97:                     outputBuffer[1] = '\0';
  2519   000D7A  0E00               	movlw	0
  2520   000D7C  6E19               	movwf	(input_numbers@outputBuffer+1)^0,c
  2521                           
  2522                           ;main.c: 98:                     Lcd_Write_String(outputBuffer);
  2523   000D7E  0E18               	movlw	low input_numbers@outputBuffer
  2524   000D80  6E09               	movwf	Lcd_Write_String@a^0,c
  2525   000D82  6A0A               	clrf	(Lcd_Write_String@a+1)^0,c
  2526   000D84  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  2527                           
  2528                           ;main.c: 99:                     counter++;
  2529   000D88  4A1C               	infsnz	input_numbers@counter^0,f,c
  2530   000D8A  2A1D               	incf	(input_numbers@counter+1)^0,f,c
  2531                           
  2532                           ;main.c: 100:                     Lcd_Set_Cursor( position_row_3,position_column_8 + cou
      +                          nter);
  2533   000D8C  501C               	movf	input_numbers@counter^0,w,c
  2534   000D8E  0F08               	addlw	8
  2535   000D90  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2536   000D92  0E03               	movlw	3
  2537   000D94  EC5B  F009         	call	_Lcd_Set_Cursor
  2538   000D98                     l4626:
  2539                           
  2540                           ;main.c: 78:     while(userInput == 'n' && counter <= number_of_digits){
  2541                           
  2542                           ;main.c: 108:         }
  2543   000D98  501C               	movf	input_numbers@counter^0,w,c
  2544   000D9A  5C0F               	subwf	input_numbers@number_of_digits^0,w,c
  2545   000D9C  5010               	movf	(input_numbers@number_of_digits+1)^0,w,c
  2546   000D9E  0A80               	xorlw	128
  2547   000DA0  6E11               	movwf	??_input_numbers^0,c
  2548   000DA2  501D               	movf	(input_numbers@counter+1)^0,w,c
  2549   000DA4  0A80               	xorlw	128
  2550   000DA6  5811               	subwfb	??_input_numbers^0,w,c
  2551   000DA8  B0D8               	btfsc	status,0,c
  2552   000DAA  D7A5               	goto	l4584
  2553                           
  2554                           ;main.c: 112:     _delay((unsigned long)((2000)*(8000000L/4000.0)));
  2555   000DAC  0E15               	movlw	21
  2556   000DAE  6E12               	movwf	(??_input_numbers+1)^0,c
  2557   000DB0  0E4B               	movlw	75
  2558   000DB2  6E11               	movwf	??_input_numbers^0,c
  2559   000DB4  0EBE               	movlw	190
  2560   000DB6                     u4847:
  2561   000DB6  2EE8               	decfsz	wreg,f,c
  2562   000DB8  D7FE               	bra	u4847
  2563   000DBA  2E11               	decfsz	??_input_numbers^0,f,c
  2564   000DBC  D7FC               	bra	u4847
  2565   000DBE  2E12               	decfsz	(??_input_numbers+1)^0,f,c
  2566   000DC0  D7FA               	bra	u4847
  2567   000DC2  D000               	nop2	
  2568                           
  2569                           ;main.c: 114:     return inputBuffer;
  2570   000DC4  0E13               	movlw	low input_numbers@inputBuffer
  2571   000DC6  6E0F               	movwf	?_input_numbers^0,c
  2572   000DC8  6A10               	clrf	(?_input_numbers+1)^0,c
  2573   000DCA  0012               	return		;funcret
  2574   000DCC                     __end_of_input_numbers:
  2575                           	callstack 0
  2576                           
  2577 ;; *************** function _infusion *****************
  2578 ;; Defined at:
  2579 ;;		line 376 in file "main.c"
  2580 ;; Parameters:    Size  Location     Type
  2581 ;;		None
  2582 ;; Auto vars:     Size  Location     Type
  2583 ;;  i               1   27[BANK0 ] char 
  2584 ;;  buff            5   10[BANK0 ] unsigned char [5]
  2585 ;;  error           4   32[BANK0 ] long 
  2586 ;;  controlSigna    4   28[BANK0 ] long 
  2587 ;;  stopTime        4   23[BANK0 ] long 
  2588 ;;  analogReadin    4   19[BANK0 ] long 
  2589 ;;  expectedX       4   15[BANK0 ] long 
  2590 ;;  dError          4    0[BANK0 ] long 
  2591 ;;  act_pos         2    8[BANK0 ] int 
  2592 ;; Return value:  Size  Location     Type
  2593 ;;                  1    wreg      void 
  2594 ;; Registers used:
  2595 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2596 ;; Tracked objects:
  2597 ;;		On entry : 0/0
  2598 ;;		On exit  : 0/0
  2599 ;;		Unchanged: 0/0
  2600 ;; Data sizes:     COMRAM   BANK0   BANK1
  2601 ;;      Params:         0       0       0
  2602 ;;      Locals:         0      36       0
  2603 ;;      Temps:          8       0       0
  2604 ;;      Totals:         8      36       0
  2605 ;;Total ram usage:       44 bytes
  2606 ;; Hardware stack levels used: 1
  2607 ;; Hardware stack levels required when called: 7
  2608 ;; This function calls:
  2609 ;;		_ADC_Read
  2610 ;;		_Lcd_Clear
  2611 ;;		_Lcd_Set_Cursor
  2612 ;;		_Lcd_Write_String
  2613 ;;		_Timer1_start
  2614 ;;		___aldiv
  2615 ;;		___lmul
  2616 ;;		_delay_ms
  2617 ;;		_getExpected
  2618 ;;		_handle_actuator_push
  2619 ;;		_move_actuator
  2620 ;;		_processTimeToSeconds
  2621 ;;		_sprintf
  2622 ;;		_usePeripheral
  2623 ;; This function is called by:
  2624 ;;		_handle_infusion_setup
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           	psect	text12
  2629   000190                     __ptext12:
  2630                           	callstack 0
  2631   000190                     _infusion:
  2632                           	callstack 22
  2633                           
  2634                           ;main.c: 378:     Timer1_start();
  2635                           
  2636                           ;incstack = 0
  2637   000190  EC69  F00E         	call	_Timer1_start	;wreg free
  2638                           
  2639                           ;main.c: 379:     LATB = 0xff;
  2640   000194  688A               	setf	138,c	;volatile
  2641                           
  2642                           ;main.c: 380:     int act_pos = ADC_Read(0);
  2643   000196  0E00               	movlw	0
  2644   000198  EC37  F00B         	call	_ADC_Read
  2645   00019C  C005  F0DE         	movff	?_ADC_Read,infusion@act_pos
  2646   0001A0  C006  F0DF         	movff	?_ADC_Read+1,infusion@act_pos+1
  2647                           
  2648                           ;main.c: 382:     char buff[5];;main.c: 383:     long expectedX, analogReading, error, d
      +                          Error, controlSignal;;main.c: 385:     long stopTime = processTimeToSeconds(timeInfusion
      +                          );
  2649   0001A4  0E00               	movlw	0
  2650   0001A6  6E0E               	movwf	(processTimeToSeconds@timeInput+1)^0,c
  2651   0001A8  0E64               	movlw	100
  2652   0001AA  6E0D               	movwf	processTimeToSeconds@timeInput^0,c
  2653   0001AC  EC52  F00C         	call	_processTimeToSeconds	;wreg free
  2654   0001B0  C00D  F0ED         	movff	?_processTimeToSeconds,infusion@stopTime
  2655   0001B4  C00E  F0EE         	movff	?_processTimeToSeconds+1,infusion@stopTime+1
  2656   0001B8  0100               	movlb	0	; () banked
  2657   0001BA  0E00               	movlw	0
  2658   0001BC  BFEE               	btfsc	(infusion@stopTime+1)& (0+255),7,b
  2659   0001BE  0EFF               	movlw	-1
  2660   0001C0  6FEF               	movwf	(infusion@stopTime+2)& (0+255),b
  2661   0001C2  6FF0               	movwf	(infusion@stopTime+3)& (0+255),b
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;main.c: 386:     Lcd_Clear();
  2665   0001C4  ECA7  F00E         	call	_Lcd_Clear	;wreg free
  2666                           
  2667                           ;main.c: 387:     usePeripheral(orange_led, on);
  2668   0001C8  0E00               	movlw	0
  2669   0001CA  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  2670   0001CC  0E01               	movlw	1
  2671   0001CE  6E05               	movwf	usePeripheral@peripheral^0,c
  2672   0001D0  0E00               	movlw	0
  2673   0001D2  6E08               	movwf	(usePeripheral@action+1)^0,c
  2674   0001D4  0E01               	movlw	1
  2675   0001D6  6E07               	movwf	usePeripheral@action^0,c
  2676   0001D8  EC62  F008         	call	_usePeripheral	;wreg free
  2677                           
  2678                           ;main.c: 390:     while( (mil) < stopTime*1000){
  2679   0001DC  D1A1               	goto	l4726
  2680   0001DE                     l4662:
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;main.c: 392:         expectedX = getExpected();
  2684   0001DE  ECF2  F005         	call	_getExpected	;wreg free
  2685   0001E2  C054  F0E5         	movff	?_getExpected,infusion@expectedX
  2686   0001E6  C055  F0E6         	movff	?_getExpected+1,infusion@expectedX+1
  2687   0001EA  C056  F0E7         	movff	?_getExpected+2,infusion@expectedX+2
  2688   0001EE  C057  F0E8         	movff	?_getExpected+3,infusion@expectedX+3
  2689                           
  2690                           ;main.c: 393:         analogReading = ADC_Read(0);
  2691   0001F2  0E00               	movlw	0
  2692   0001F4  EC37  F00B         	call	_ADC_Read
  2693   0001F8  C005  F0E9         	movff	?_ADC_Read,infusion@analogReading
  2694   0001FC  C006  F0EA         	movff	?_ADC_Read+1,infusion@analogReading+1
  2695   000200  0100               	movlb	0	; () banked
  2696   000202  0E00               	movlw	0
  2697   000204  BFEA               	btfsc	(infusion@analogReading+1)& (0+255),7,b
  2698   000206  0EFF               	movlw	-1
  2699   000208  6FEB               	movwf	(infusion@analogReading+2)& (0+255),b
  2700   00020A  6FEC               	movwf	(infusion@analogReading+3)& (0+255),b
  2701                           
  2702                           ; BSR set to: 0
  2703                           ;main.c: 394:         error = (analogReading - expectedX);
  2704   00020C  51E5               	movf	infusion@expectedX& (0+255),w,b
  2705   00020E  5DE9               	subwf	infusion@analogReading& (0+255),w,b
  2706   000210  6FF6               	movwf	infusion@error& (0+255),b
  2707   000212  51E6               	movf	(infusion@expectedX+1)& (0+255),w,b
  2708   000214  59EA               	subwfb	(infusion@analogReading+1)& (0+255),w,b
  2709   000216  6FF7               	movwf	(infusion@error+1)& (0+255),b
  2710   000218  51E7               	movf	(infusion@expectedX+2)& (0+255),w,b
  2711   00021A  59EB               	subwfb	(infusion@analogReading+2)& (0+255),w,b
  2712   00021C  6FF8               	movwf	(infusion@error+2)& (0+255),b
  2713   00021E  51E8               	movf	(infusion@expectedX+3)& (0+255),w,b
  2714   000220  59EC               	subwfb	(infusion@analogReading+3)& (0+255),w,b
  2715   000222  6FF9               	movwf	(infusion@error+3)& (0+255),b
  2716                           
  2717                           ; BSR set to: 0
  2718                           ;main.c: 396:         dError = (error - lastError)/(dT/1000);
  2719   000224  51A0               	movf	_lastError& (0+255),w,b
  2720   000226  5DF6               	subwf	infusion@error& (0+255),w,b
  2721   000228  6E2E               	movwf	___aldiv@dividend^0,c
  2722   00022A  51A1               	movf	(_lastError+1)& (0+255),w,b
  2723   00022C  59F7               	subwfb	(infusion@error+1)& (0+255),w,b
  2724   00022E  6E2F               	movwf	(___aldiv@dividend+1)^0,c
  2725   000230  51A2               	movf	(_lastError+2)& (0+255),w,b
  2726   000232  59F8               	subwfb	(infusion@error+2)& (0+255),w,b
  2727   000234  6E30               	movwf	(___aldiv@dividend+2)^0,c
  2728   000236  51A3               	movf	(_lastError+3)& (0+255),w,b
  2729   000238  59F9               	subwfb	(infusion@error+3)& (0+255),w,b
  2730   00023A  6E31               	movwf	(___aldiv@dividend+3)^0,c
  2731   00023C  0E00               	movlw	0
  2732   00023E  6E32               	movwf	___aldiv@divisor^0,c
  2733   000240  0E00               	movlw	0
  2734   000242  6E33               	movwf	(___aldiv@divisor+1)^0,c
  2735   000244  0E00               	movlw	0
  2736   000246  6E34               	movwf	(___aldiv@divisor+2)^0,c
  2737   000248  0E00               	movlw	0
  2738   00024A  6E35               	movwf	(___aldiv@divisor+3)^0,c
  2739   00024C  ECE6  F006         	call	___aldiv	;wreg free
  2740   000250  C02E  F0D6         	movff	?___aldiv,infusion@dError
  2741   000254  C02F  F0D7         	movff	?___aldiv+1,infusion@dError+1
  2742   000258  C030  F0D8         	movff	?___aldiv+2,infusion@dError+2
  2743   00025C  C031  F0D9         	movff	?___aldiv+3,infusion@dError+3
  2744                           
  2745                           ;main.c: 397:         errorSum += (error * (dT / 1000));
  2746   000260  C0F6  F022         	movff	infusion@error,___lmul@multiplier
  2747   000264  C0F7  F023         	movff	infusion@error+1,___lmul@multiplier+1
  2748   000268  C0F8  F024         	movff	infusion@error+2,___lmul@multiplier+2
  2749   00026C  C0F9  F025         	movff	infusion@error+3,___lmul@multiplier+3
  2750   000270  0E00               	movlw	0
  2751   000272  6E26               	movwf	___lmul@multiplicand^0,c
  2752   000274  0E00               	movlw	0
  2753   000276  6E27               	movwf	(___lmul@multiplicand+1)^0,c
  2754   000278  0E00               	movlw	0
  2755   00027A  6E28               	movwf	(___lmul@multiplicand+2)^0,c
  2756   00027C  0E00               	movlw	0
  2757   00027E  6E29               	movwf	(___lmul@multiplicand+3)^0,c
  2758   000280  ECDC  F00C         	call	___lmul	;wreg free
  2759   000284  5022               	movf	?___lmul^0,w,c
  2760   000286  0100               	movlb	0	; () banked
  2761   000288  27A4               	addwf	_errorSum& (0+255),f,b
  2762   00028A  5023               	movf	(?___lmul+1)^0,w,c
  2763   00028C  23A5               	addwfc	(_errorSum+1)& (0+255),f,b
  2764   00028E  5024               	movf	(?___lmul+2)^0,w,c
  2765   000290  23A6               	addwfc	(_errorSum+2)& (0+255),f,b
  2766   000292  5025               	movf	(?___lmul+3)^0,w,c
  2767   000294  23A7               	addwfc	(_errorSum+3)& (0+255),f,b
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;main.c: 399:         controlSignal = (Kp * error + Ki * errorSum + Kd * dError) / 100;
  2771   000296  C0F6  F022         	movff	infusion@error,___lmul@multiplier
  2772   00029A  C0F7  F023         	movff	infusion@error+1,___lmul@multiplier+1
  2773   00029E  C0F8  F024         	movff	infusion@error+2,___lmul@multiplier+2
  2774   0002A2  C0F9  F025         	movff	infusion@error+3,___lmul@multiplier+3
  2775   0002A6  0E4C               	movlw	76
  2776   0002A8  6E26               	movwf	___lmul@multiplicand^0,c
  2777   0002AA  0E1D               	movlw	29
  2778   0002AC  6E27               	movwf	(___lmul@multiplicand+1)^0,c
  2779   0002AE  0E00               	movlw	0
  2780   0002B0  6E28               	movwf	(___lmul@multiplicand+2)^0,c
  2781   0002B2  0E00               	movlw	0
  2782   0002B4  6E29               	movwf	(___lmul@multiplicand+3)^0,c
  2783   0002B6  ECDC  F00C         	call	___lmul	;wreg free
  2784   0002BA  C022  F068         	movff	?___lmul,??_infusion
  2785   0002BE  C023  F069         	movff	?___lmul+1,??_infusion+1
  2786   0002C2  C024  F06A         	movff	?___lmul+2,??_infusion+2
  2787   0002C6  C025  F06B         	movff	?___lmul+3,??_infusion+3
  2788   0002CA  C0A4  F022         	movff	_errorSum,___lmul@multiplier
  2789   0002CE  C0A5  F023         	movff	_errorSum+1,___lmul@multiplier+1
  2790   0002D2  C0A6  F024         	movff	_errorSum+2,___lmul@multiplier+2
  2791   0002D6  C0A7  F025         	movff	_errorSum+3,___lmul@multiplier+3
  2792   0002DA  0ED0               	movlw	208
  2793   0002DC  6E26               	movwf	___lmul@multiplicand^0,c
  2794   0002DE  0E07               	movlw	7
  2795   0002E0  6E27               	movwf	(___lmul@multiplicand+1)^0,c
  2796   0002E2  0E00               	movlw	0
  2797   0002E4  6E28               	movwf	(___lmul@multiplicand+2)^0,c
  2798   0002E6  0E00               	movlw	0
  2799   0002E8  6E29               	movwf	(___lmul@multiplicand+3)^0,c
  2800   0002EA  ECDC  F00C         	call	___lmul	;wreg free
  2801   0002EE  5022               	movf	?___lmul^0,w,c
  2802   0002F0  2468               	addwf	??_infusion^0,w,c
  2803   0002F2  6E6C               	movwf	(??_infusion+4)^0,c
  2804   0002F4  5023               	movf	(?___lmul+1)^0,w,c
  2805   0002F6  2069               	addwfc	(??_infusion+1)^0,w,c
  2806   0002F8  6E6D               	movwf	(??_infusion+5)^0,c
  2807   0002FA  5024               	movf	(?___lmul+2)^0,w,c
  2808   0002FC  206A               	addwfc	(??_infusion+2)^0,w,c
  2809   0002FE  6E6E               	movwf	(??_infusion+6)^0,c
  2810   000300  5025               	movf	(?___lmul+3)^0,w,c
  2811   000302  206B               	addwfc	(??_infusion+3)^0,w,c
  2812   000304  6E6F               	movwf	(??_infusion+7)^0,c
  2813   000306  C0D6  F022         	movff	infusion@dError,___lmul@multiplier
  2814   00030A  C0D7  F023         	movff	infusion@dError+1,___lmul@multiplier+1
  2815   00030E  C0D8  F024         	movff	infusion@dError+2,___lmul@multiplier+2
  2816   000312  C0D9  F025         	movff	infusion@dError+3,___lmul@multiplier+3
  2817   000316  0ED0               	movlw	208
  2818   000318  6E26               	movwf	___lmul@multiplicand^0,c
  2819   00031A  0E07               	movlw	7
  2820   00031C  6E27               	movwf	(___lmul@multiplicand+1)^0,c
  2821   00031E  0E00               	movlw	0
  2822   000320  6E28               	movwf	(___lmul@multiplicand+2)^0,c
  2823   000322  0E00               	movlw	0
  2824   000324  6E29               	movwf	(___lmul@multiplicand+3)^0,c
  2825   000326  ECDC  F00C         	call	___lmul	;wreg free
  2826   00032A  5022               	movf	?___lmul^0,w,c
  2827   00032C  246C               	addwf	(??_infusion+4)^0,w,c
  2828   00032E  6E2E               	movwf	___aldiv@dividend^0,c
  2829   000330  5023               	movf	(?___lmul+1)^0,w,c
  2830   000332  206D               	addwfc	(??_infusion+5)^0,w,c
  2831   000334  6E2F               	movwf	(___aldiv@dividend+1)^0,c
  2832   000336  5024               	movf	(?___lmul+2)^0,w,c
  2833   000338  206E               	addwfc	(??_infusion+6)^0,w,c
  2834   00033A  6E30               	movwf	(___aldiv@dividend+2)^0,c
  2835   00033C  5025               	movf	(?___lmul+3)^0,w,c
  2836   00033E  206F               	addwfc	(??_infusion+7)^0,w,c
  2837   000340  6E31               	movwf	(___aldiv@dividend+3)^0,c
  2838   000342  0E64               	movlw	100
  2839   000344  6E32               	movwf	___aldiv@divisor^0,c
  2840   000346  0E00               	movlw	0
  2841   000348  6E33               	movwf	(___aldiv@divisor+1)^0,c
  2842   00034A  0E00               	movlw	0
  2843   00034C  6E34               	movwf	(___aldiv@divisor+2)^0,c
  2844   00034E  0E00               	movlw	0
  2845   000350  6E35               	movwf	(___aldiv@divisor+3)^0,c
  2846   000352  ECE6  F006         	call	___aldiv	;wreg free
  2847   000356  C02E  F0F2         	movff	?___aldiv,infusion@controlSignal
  2848   00035A  C02F  F0F3         	movff	?___aldiv+1,infusion@controlSignal+1
  2849   00035E  C030  F0F4         	movff	?___aldiv+2,infusion@controlSignal+2
  2850   000362  C031  F0F5         	movff	?___aldiv+3,infusion@controlSignal+3
  2851                           
  2852                           ;main.c: 402:         if (controlSignal < 0) {
  2853   000366  0100               	movlb	0	; () banked
  2854   000368  AFF5               	btfss	(infusion@controlSignal+3)& (0+255),7,b
  2855   00036A  D008               	goto	l4678
  2856                           
  2857                           ; BSR set to: 0
  2858                           ;main.c: 403:             controlSignal = 0;
  2859   00036C  0E00               	movlw	0
  2860   00036E  6FF2               	movwf	infusion@controlSignal& (0+255),b
  2861   000370  0E00               	movlw	0
  2862   000372  6FF3               	movwf	(infusion@controlSignal+1)& (0+255),b
  2863   000374  0E00               	movlw	0
  2864   000376  6FF4               	movwf	(infusion@controlSignal+2)& (0+255),b
  2865   000378  0E00               	movlw	0
  2866   00037A  6FF5               	movwf	(infusion@controlSignal+3)& (0+255),b
  2867   00037C                     l4678:
  2868                           
  2869                           ; BSR set to: 0
  2870                           ;main.c: 405:         if (controlSignal > 510) {
  2871   00037C  BFF5               	btfsc	(infusion@controlSignal+3)& (0+255),7,b
  2872   00037E  D010               	goto	l4682
  2873   000380  51F5               	movf	(infusion@controlSignal+3)& (0+255),w,b
  2874   000382  11F4               	iorwf	(infusion@controlSignal+2)& (0+255),w,b
  2875   000384  E105               	bnz	u4680
  2876   000386  29F2               	incf	infusion@controlSignal& (0+255),w,b
  2877   000388  0E01               	movlw	1
  2878   00038A  59F3               	subwfb	(infusion@controlSignal+1)& (0+255),w,b
  2879   00038C  A0D8               	btfss	status,0,c
  2880   00038E  D008               	goto	l4682
  2881   000390                     u4680:
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;main.c: 406:             controlSignal = 510;
  2885   000390  0EFE               	movlw	254
  2886   000392  6FF2               	movwf	infusion@controlSignal& (0+255),b
  2887   000394  0E01               	movlw	1
  2888   000396  6FF3               	movwf	(infusion@controlSignal+1)& (0+255),b
  2889   000398  0E00               	movlw	0
  2890   00039A  6FF4               	movwf	(infusion@controlSignal+2)& (0+255),b
  2891   00039C  0E00               	movlw	0
  2892   00039E  6FF5               	movwf	(infusion@controlSignal+3)& (0+255),b
  2893   0003A0                     l4682:
  2894                           
  2895                           ; BSR set to: 0
  2896                           ;main.c: 409:         move_actuator(backwards, controlSignal);
  2897   0003A0  0E00               	movlw	0
  2898   0003A2  6E0A               	movwf	(move_actuator@direction+1)^0,c
  2899   0003A4  0E00               	movlw	0
  2900   0003A6  6E09               	movwf	move_actuator@direction^0,c
  2901   0003A8  C0F2  F00B         	movff	infusion@controlSignal,move_actuator@speed
  2902   0003AC  C0F3  F00C         	movff	infusion@controlSignal+1,move_actuator@speed+1
  2903   0003B0  EC07  F00D         	call	_move_actuator	;wreg free
  2904                           
  2905                           ;main.c: 410:         lastError = error;
  2906   0003B4  C0F6  F0A0         	movff	infusion@error,_lastError
  2907   0003B8  C0F7  F0A1         	movff	infusion@error+1,_lastError+1
  2908   0003BC  C0F8  F0A2         	movff	infusion@error+2,_lastError+2
  2909   0003C0  C0F9  F0A3         	movff	infusion@error+3,_lastError+3
  2910                           
  2911                           ;main.c: 412:         Lcd_Set_Cursor(1,1);
  2912   0003C4  0E01               	movlw	1
  2913   0003C6  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2914   0003C8  0E01               	movlw	1
  2915   0003CA  EC5B  F009         	call	_Lcd_Set_Cursor
  2916                           
  2917                           ;main.c: 413:         Lcd_Write_String("Error:");
  2918   0003CE  0EB4               	movlw	low STR_31
  2919   0003D0  6E09               	movwf	Lcd_Write_String@a^0,c
  2920   0003D2  0E1F               	movlw	high STR_31
  2921   0003D4  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2922   0003D6  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  2923                           
  2924                           ;main.c: 414:         sprintf(buff, "%ld", error);
  2925   0003DA  0EE0               	movlw	low infusion@buff
  2926   0003DC  6E4F               	movwf	sprintf@s^0,c
  2927   0003DE  0EF0               	movlw	low STR_32
  2928   0003E0  6E50               	movwf	sprintf@fmt^0,c
  2929   0003E2  0E1F               	movlw	high STR_32
  2930   0003E4  6E51               	movwf	(sprintf@fmt+1)^0,c
  2931   0003E6  C0F6  F052         	movff	infusion@error,?_sprintf+3
  2932   0003EA  C0F7  F053         	movff	infusion@error+1,?_sprintf+4
  2933   0003EE  C0F8  F054         	movff	infusion@error+2,?_sprintf+5
  2934   0003F2  C0F9  F055         	movff	infusion@error+3,?_sprintf+6
  2935   0003F6  EC77  F00D         	call	_sprintf	;wreg free
  2936                           
  2937                           ;main.c: 415:         Lcd_Write_String(buff);
  2938   0003FA  0EE0               	movlw	low infusion@buff
  2939   0003FC  6E09               	movwf	Lcd_Write_String@a^0,c
  2940   0003FE  6A0A               	clrf	(Lcd_Write_String@a+1)^0,c
  2941   000400  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  2942                           
  2943                           ;main.c: 417:         Lcd_Set_Cursor(2,1);
  2944   000404  0E01               	movlw	1
  2945   000406  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2946   000408  0E02               	movlw	2
  2947   00040A  EC5B  F009         	call	_Lcd_Set_Cursor
  2948                           
  2949                           ;main.c: 418:         Lcd_Write_String("Pos:");
  2950   00040E  0EE2               	movlw	low STR_33
  2951   000410  6E09               	movwf	Lcd_Write_String@a^0,c
  2952   000412  0E1F               	movlw	high STR_33
  2953   000414  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2954   000416  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  2955                           
  2956                           ;main.c: 419:         sprintf(buff, "%ld", analogReading);
  2957   00041A  0EE0               	movlw	low infusion@buff
  2958   00041C  6E4F               	movwf	sprintf@s^0,c
  2959   00041E  0EF0               	movlw	low STR_32
  2960   000420  6E50               	movwf	sprintf@fmt^0,c
  2961   000422  0E1F               	movlw	high STR_32
  2962   000424  6E51               	movwf	(sprintf@fmt+1)^0,c
  2963   000426  C0E9  F052         	movff	infusion@analogReading,?_sprintf+3
  2964   00042A  C0EA  F053         	movff	infusion@analogReading+1,?_sprintf+4
  2965   00042E  C0EB  F054         	movff	infusion@analogReading+2,?_sprintf+5
  2966   000432  C0EC  F055         	movff	infusion@analogReading+3,?_sprintf+6
  2967   000436  EC77  F00D         	call	_sprintf	;wreg free
  2968                           
  2969                           ;main.c: 420:         Lcd_Write_String(buff);
  2970   00043A  0EE0               	movlw	low infusion@buff
  2971   00043C  6E09               	movwf	Lcd_Write_String@a^0,c
  2972   00043E  6A0A               	clrf	(Lcd_Write_String@a+1)^0,c
  2973   000440  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  2974                           
  2975                           ;main.c: 423:         Lcd_Set_Cursor(3,1);
  2976   000444  0E01               	movlw	1
  2977   000446  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2978   000448  0E03               	movlw	3
  2979   00044A  EC5B  F009         	call	_Lcd_Set_Cursor
  2980                           
  2981                           ;main.c: 424:         Lcd_Write_String("Exp:");
  2982   00044E  0EDD               	movlw	low STR_35
  2983   000450  6E09               	movwf	Lcd_Write_String@a^0,c
  2984   000452  0E1F               	movlw	high STR_35
  2985   000454  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2986   000456  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  2987                           
  2988                           ;main.c: 425:         sprintf(buff, "%ld", expectedX);
  2989   00045A  0EE0               	movlw	low infusion@buff
  2990   00045C  6E4F               	movwf	sprintf@s^0,c
  2991   00045E  0EF0               	movlw	low STR_32
  2992   000460  6E50               	movwf	sprintf@fmt^0,c
  2993   000462  0E1F               	movlw	high STR_32
  2994   000464  6E51               	movwf	(sprintf@fmt+1)^0,c
  2995   000466  C0E5  F052         	movff	infusion@expectedX,?_sprintf+3
  2996   00046A  C0E6  F053         	movff	infusion@expectedX+1,?_sprintf+4
  2997   00046E  C0E7  F054         	movff	infusion@expectedX+2,?_sprintf+5
  2998   000472  C0E8  F055         	movff	infusion@expectedX+3,?_sprintf+6
  2999   000476  EC77  F00D         	call	_sprintf	;wreg free
  3000                           
  3001                           ;main.c: 426:         Lcd_Write_String(buff);
  3002   00047A  0EE0               	movlw	low infusion@buff
  3003   00047C  6E09               	movwf	Lcd_Write_String@a^0,c
  3004   00047E  6A0A               	clrf	(Lcd_Write_String@a+1)^0,c
  3005   000480  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  3006                           
  3007                           ;main.c: 429:         Lcd_Set_Cursor(4,10);
  3008   000484  0E0A               	movlw	10
  3009   000486  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  3010   000488  0E04               	movlw	4
  3011   00048A  EC5B  F009         	call	_Lcd_Set_Cursor
  3012                           
  3013                           ;main.c: 430:         Lcd_Write_String("T: ");
  3014   00048E  0EEC               	movlw	low STR_37
  3015   000490  6E09               	movwf	Lcd_Write_String@a^0,c
  3016   000492  0E1F               	movlw	high STR_37
  3017   000494  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  3018   000496  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  3019                           
  3020                           ;main.c: 432:         sprintf(buff, "%d", stopTime - (mil/1000));
  3021   00049A  C0A8  F02E         	movff	_mil,___aldiv@dividend
  3022   00049E  C0A9  F02F         	movff	_mil+1,___aldiv@dividend+1
  3023   0004A2  C0AA  F030         	movff	_mil+2,___aldiv@dividend+2
  3024   0004A6  C0AB  F031         	movff	_mil+3,___aldiv@dividend+3
  3025   0004AA  0EE8               	movlw	232
  3026   0004AC  6E32               	movwf	___aldiv@divisor^0,c
  3027   0004AE  0E03               	movlw	3
  3028   0004B0  6E33               	movwf	(___aldiv@divisor+1)^0,c
  3029   0004B2  0E00               	movlw	0
  3030   0004B4  6E34               	movwf	(___aldiv@divisor+2)^0,c
  3031   0004B6  0E00               	movlw	0
  3032   0004B8  6E35               	movwf	(___aldiv@divisor+3)^0,c
  3033   0004BA  ECE6  F006         	call	___aldiv	;wreg free
  3034   0004BE  502E               	movf	?___aldiv^0,w,c
  3035   0004C0  0100               	movlb	0	; () banked
  3036   0004C2  5DED               	subwf	infusion@stopTime& (0+255),w,b
  3037   0004C4  6FDA               	movwf	_infusion$1679& (0+255),b
  3038   0004C6  502F               	movf	(?___aldiv+1)^0,w,c
  3039   0004C8  59EE               	subwfb	(infusion@stopTime+1)& (0+255),w,b
  3040   0004CA  6FDB               	movwf	(_infusion$1679+1)& (0+255),b
  3041   0004CC  5030               	movf	(?___aldiv+2)^0,w,c
  3042   0004CE  59EF               	subwfb	(infusion@stopTime+2)& (0+255),w,b
  3043   0004D0  6FDC               	movwf	(_infusion$1679+2)& (0+255),b
  3044   0004D2  5031               	movf	(?___aldiv+3)^0,w,c
  3045   0004D4  59F0               	subwfb	(infusion@stopTime+3)& (0+255),w,b
  3046   0004D6  6FDD               	movwf	(_infusion$1679+3)& (0+255),b
  3047                           
  3048                           ; BSR set to: 0
  3049                           ;main.c: 432:         sprintf(buff, "%d", stopTime - (mil/1000));
  3050   0004D8  0EE0               	movlw	low infusion@buff
  3051   0004DA  6E4F               	movwf	sprintf@s^0,c
  3052   0004DC  0EF7               	movlw	low STR_38
  3053   0004DE  6E50               	movwf	sprintf@fmt^0,c
  3054   0004E0  0E1F               	movlw	high STR_38
  3055   0004E2  6E51               	movwf	(sprintf@fmt+1)^0,c
  3056   0004E4  C0DA  F052         	movff	_infusion$1679,?_sprintf+3
  3057   0004E8  C0DB  F053         	movff	_infusion$1679+1,?_sprintf+4
  3058   0004EC  C0DC  F054         	movff	_infusion$1679+2,?_sprintf+5
  3059   0004F0  C0DD  F055         	movff	_infusion$1679+3,?_sprintf+6
  3060   0004F4  EC77  F00D         	call	_sprintf	;wreg free
  3061                           
  3062                           ;main.c: 433:         Lcd_Write_String(buff);
  3063   0004F8  0EE0               	movlw	low infusion@buff
  3064   0004FA  6E09               	movwf	Lcd_Write_String@a^0,c
  3065   0004FC  6A0A               	clrf	(Lcd_Write_String@a+1)^0,c
  3066   0004FE  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  3067                           
  3068                           ;main.c: 436:         delay_ms(dT);
  3069   000502  0E00               	movlw	0
  3070   000504  6E06               	movwf	(delay_ms@milliseconds+1)^0,c
  3071   000506  0E64               	movlw	100
  3072   000508  6E05               	movwf	delay_ms@milliseconds^0,c
  3073   00050A  EC59  F00E         	call	_delay_ms	;wreg free
  3074                           
  3075                           ;main.c: 437:         Lcd_Clear();
  3076   00050E  ECA7  F00E         	call	_Lcd_Clear	;wreg free
  3077                           
  3078                           ;main.c: 439:         act_pos = ADC_Read(0);
  3079   000512  0E00               	movlw	0
  3080   000514  EC37  F00B         	call	_ADC_Read
  3081   000518  C005  F0DE         	movff	?_ADC_Read,infusion@act_pos
  3082   00051C  C006  F0DF         	movff	?_ADC_Read+1,infusion@act_pos+1
  3083   000520                     l4726:
  3084                           
  3085                           ;main.c: 390:     while( (mil) < stopTime*1000){
  3086   000520  C0ED  F022         	movff	infusion@stopTime,___lmul@multiplier
  3087   000524  C0EE  F023         	movff	infusion@stopTime+1,___lmul@multiplier+1
  3088   000528  C0EF  F024         	movff	infusion@stopTime+2,___lmul@multiplier+2
  3089   00052C  C0F0  F025         	movff	infusion@stopTime+3,___lmul@multiplier+3
  3090   000530  0EE8               	movlw	232
  3091   000532  6E26               	movwf	___lmul@multiplicand^0,c
  3092   000534  0E03               	movlw	3
  3093   000536  6E27               	movwf	(___lmul@multiplicand+1)^0,c
  3094   000538  0E00               	movlw	0
  3095   00053A  6E28               	movwf	(___lmul@multiplicand+2)^0,c
  3096   00053C  0E00               	movlw	0
  3097   00053E  6E29               	movwf	(___lmul@multiplicand+3)^0,c
  3098   000540  ECDC  F00C         	call	___lmul	;wreg free
  3099   000544  5022               	movf	?___lmul^0,w,c
  3100   000546  0100               	movlb	0	; () banked
  3101   000548  5DA8               	subwf	_mil& (0+255),w,b
  3102   00054A  5023               	movf	(?___lmul+1)^0,w,c
  3103   00054C  59A9               	subwfb	(_mil+1)& (0+255),w,b
  3104   00054E  5024               	movf	(?___lmul+2)^0,w,c
  3105   000550  59AA               	subwfb	(_mil+2)& (0+255),w,b
  3106   000552  51AB               	movf	(_mil+3)& (0+255),w,b
  3107   000554  0A80               	xorlw	128
  3108   000556  6E68               	movwf	??_infusion^0,c
  3109   000558  5025               	movf	(?___lmul+3)^0,w,c
  3110   00055A  0A80               	xorlw	128
  3111   00055C  5868               	subwfb	??_infusion^0,w,c
  3112   00055E  A0D8               	btfss	status,0,c
  3113   000560  D63E               	goto	l4662
  3114                           
  3115                           ; BSR set to: 0
  3116                           ;main.c: 442:     usePeripheral(orange_led, off);
  3117   000562  0E00               	movlw	0
  3118   000564  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  3119   000566  0E01               	movlw	1
  3120   000568  6E05               	movwf	usePeripheral@peripheral^0,c
  3121   00056A  0E00               	movlw	0
  3122   00056C  6E08               	movwf	(usePeripheral@action+1)^0,c
  3123   00056E  0E00               	movlw	0
  3124   000570  6E07               	movwf	usePeripheral@action^0,c
  3125   000572  EC62  F008         	call	_usePeripheral	;wreg free
  3126                           
  3127                           ;main.c: 443:     move_actuator(forward, 0);
  3128   000576  0E00               	movlw	0
  3129   000578  6E0A               	movwf	(move_actuator@direction+1)^0,c
  3130   00057A  0E01               	movlw	1
  3131   00057C  6E09               	movwf	move_actuator@direction^0,c
  3132   00057E  0E00               	movlw	0
  3133   000580  6E0C               	movwf	(move_actuator@speed+1)^0,c
  3134   000582  0E00               	movlw	0
  3135   000584  6E0B               	movwf	move_actuator@speed^0,c
  3136   000586  EC07  F00D         	call	_move_actuator	;wreg free
  3137                           
  3138                           ;main.c: 444:     Lcd_Clear();
  3139   00058A  ECA7  F00E         	call	_Lcd_Clear	;wreg free
  3140                           
  3141                           ;main.c: 445:     Lcd_Set_Cursor(1,1);
  3142   00058E  0E01               	movlw	1
  3143   000590  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  3144   000592  0E01               	movlw	1
  3145   000594  EC5B  F009         	call	_Lcd_Set_Cursor
  3146                           
  3147                           ;main.c: 446:     Lcd_Write_String("INFUSION COMPLETED");
  3148   000598  0EFF               	movlw	low STR_39
  3149   00059A  6E09               	movwf	Lcd_Write_String@a^0,c
  3150   00059C  0E1E               	movlw	high STR_39
  3151   00059E  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  3152   0005A0  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  3153                           
  3154                           ;main.c: 448:     for(int8_t i = 0; i < 5; i++){
  3155   0005A4  0E00               	movlw	0
  3156   0005A6  0100               	movlb	0	; () banked
  3157   0005A8  6FF1               	movwf	infusion@i& (0+255),b
  3158   0005AA                     l4742:
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;main.c: 449:         usePeripheral(buzzer, on);
  3162   0005AA  0E00               	movlw	0
  3163   0005AC  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  3164   0005AE  0E03               	movlw	3
  3165   0005B0  6E05               	movwf	usePeripheral@peripheral^0,c
  3166   0005B2  0E00               	movlw	0
  3167   0005B4  6E08               	movwf	(usePeripheral@action+1)^0,c
  3168   0005B6  0E01               	movlw	1
  3169   0005B8  6E07               	movwf	usePeripheral@action^0,c
  3170   0005BA  EC62  F008         	call	_usePeripheral	;wreg free
  3171                           
  3172                           ;main.c: 450:         usePeripheral(red_led, on);
  3173   0005BE  0E00               	movlw	0
  3174   0005C0  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  3175   0005C2  0E02               	movlw	2
  3176   0005C4  6E05               	movwf	usePeripheral@peripheral^0,c
  3177   0005C6  0E00               	movlw	0
  3178   0005C8  6E08               	movwf	(usePeripheral@action+1)^0,c
  3179   0005CA  0E01               	movlw	1
  3180   0005CC  6E07               	movwf	usePeripheral@action^0,c
  3181   0005CE  EC62  F008         	call	_usePeripheral	;wreg free
  3182                           
  3183                           ;main.c: 451:         _delay((unsigned long)((1000)*(8000000L/4000.0)));
  3184   0005D2  0E0B               	movlw	11
  3185   0005D4  6E69               	movwf	(??_infusion+1)^0,c
  3186   0005D6  0E26               	movlw	38
  3187   0005D8  6E68               	movwf	??_infusion^0,c
  3188   0005DA  0E5E               	movlw	94
  3189   0005DC                     u4857:
  3190   0005DC  2EE8               	decfsz	wreg,f,c
  3191   0005DE  D7FE               	bra	u4857
  3192   0005E0  2E68               	decfsz	??_infusion^0,f,c
  3193   0005E2  D7FC               	bra	u4857
  3194   0005E4  2E69               	decfsz	(??_infusion+1)^0,f,c
  3195   0005E6  D7FA               	bra	u4857
  3196                           
  3197                           ;main.c: 452:         usePeripheral(buzzer, off);
  3198   0005E8  0E00               	movlw	0
  3199   0005EA  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  3200   0005EC  0E03               	movlw	3
  3201   0005EE  6E05               	movwf	usePeripheral@peripheral^0,c
  3202   0005F0  0E00               	movlw	0
  3203   0005F2  6E08               	movwf	(usePeripheral@action+1)^0,c
  3204   0005F4  0E00               	movlw	0
  3205   0005F6  6E07               	movwf	usePeripheral@action^0,c
  3206   0005F8  EC62  F008         	call	_usePeripheral	;wreg free
  3207                           
  3208                           ;main.c: 453:         usePeripheral(red_led, off);
  3209   0005FC  0E00               	movlw	0
  3210   0005FE  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  3211   000600  0E02               	movlw	2
  3212   000602  6E05               	movwf	usePeripheral@peripheral^0,c
  3213   000604  0E00               	movlw	0
  3214   000606  6E08               	movwf	(usePeripheral@action+1)^0,c
  3215   000608  0E00               	movlw	0
  3216   00060A  6E07               	movwf	usePeripheral@action^0,c
  3217   00060C  EC62  F008         	call	_usePeripheral	;wreg free
  3218                           
  3219                           ;main.c: 454:         _delay((unsigned long)((1000)*(8000000L/4000.0)));
  3220   000610  0E0B               	movlw	11
  3221   000612  6E69               	movwf	(??_infusion+1)^0,c
  3222   000614  0E26               	movlw	38
  3223   000616  6E68               	movwf	??_infusion^0,c
  3224   000618  0E5E               	movlw	94
  3225   00061A                     u4867:
  3226   00061A  2EE8               	decfsz	wreg,f,c
  3227   00061C  D7FE               	bra	u4867
  3228   00061E  2E68               	decfsz	??_infusion^0,f,c
  3229   000620  D7FC               	bra	u4867
  3230   000622  2E69               	decfsz	(??_infusion+1)^0,f,c
  3231   000624  D7FA               	bra	u4867
  3232                           
  3233                           ;main.c: 455:     }
  3234   000626  0100               	movlb	0	; () banked
  3235   000628  2BF1               	incf	infusion@i& (0+255),f,b
  3236                           
  3237                           ; BSR set to: 0
  3238   00062A  51F1               	movf	infusion@i& (0+255),w,b
  3239   00062C  0A80               	xorlw	128
  3240   00062E  0F7B               	addlw	-133
  3241   000630  A0D8               	btfss	status,0,c
  3242   000632  D7BB               	goto	l4742
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;main.c: 457:     handle_actuator_push(act_pos);
  3246   000634  C0DE  F011         	movff	infusion@act_pos,handle_actuator_push@act_pos
  3247   000638  C0DF  F012         	movff	infusion@act_pos+1,handle_actuator_push@act_pos+1
  3248   00063C  EC4C  F007         	call	_handle_actuator_push	;wreg free
  3249   000640  0012               	return		;funcret
  3250   000642                     __end_of_infusion:
  3251                           	callstack 0
  3252                           
  3253 ;; *************** function _sprintf *****************
  3254 ;; Defined at:
  3255 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_sprintf.c"
  3256 ;; Parameters:    Size  Location     Type
  3257 ;;  s               1   78[COMRAM] PTR unsigned char 
  3258 ;;		 -> infusion@buff(5), 
  3259 ;;  fmt             2   79[COMRAM] PTR const unsigned char 
  3260 ;;		 -> STR_38(3), STR_36(4), STR_34(4), STR_32(4), 
  3261 ;; Auto vars:     Size  Location     Type
  3262 ;;  f              12   86[COMRAM] struct _IO_FILE
  3263 ;;  ret             2    0        int 
  3264 ;;  ap              1   85[COMRAM] PTR void [1]
  3265 ;;		 -> ?_sprintf(2), 
  3266 ;; Return value:  Size  Location     Type
  3267 ;;                  2   78[COMRAM] int 
  3268 ;; Registers used:
  3269 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3270 ;; Tracked objects:
  3271 ;;		On entry : 0/0
  3272 ;;		On exit  : 0/0
  3273 ;;		Unchanged: 0/0
  3274 ;; Data sizes:     COMRAM   BANK0   BANK1
  3275 ;;      Params:         7       0       0
  3276 ;;      Locals:        13       0       0
  3277 ;;      Temps:          0       0       0
  3278 ;;      Totals:        20       0       0
  3279 ;;Total ram usage:       20 bytes
  3280 ;; Hardware stack levels used: 1
  3281 ;; Hardware stack levels required when called: 6
  3282 ;; This function calls:
  3283 ;;		_vfprintf
  3284 ;; This function is called by:
  3285 ;;		_infusion
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289                           	psect	text13
  3290   001AEE                     __ptext13:
  3291                           	callstack 0
  3292   001AEE                     _sprintf:
  3293                           	callstack 22
  3294                           
  3295                           ;incstack = 0
  3296   001AEE  0E52               	movlw	low (?_sprintf+3)
  3297   001AF0  6E56               	movwf	sprintf@ap^0,c
  3298   001AF2  C04F  F057         	movff	sprintf@s,sprintf@f
  3299   001AF6  0E00               	movlw	0
  3300   001AF8  6E5B               	movwf	(sprintf@f+4)^0,c
  3301   001AFA  0E00               	movlw	0
  3302   001AFC  6E5A               	movwf	(sprintf@f+3)^0,c
  3303   001AFE  0E00               	movlw	0
  3304   001B00  6E62               	movwf	(sprintf@f+11)^0,c
  3305   001B02  0E00               	movlw	0
  3306   001B04  6E61               	movwf	(sprintf@f+10)^0,c
  3307   001B06  0E57               	movlw	low sprintf@f
  3308   001B08  6E49               	movwf	vfprintf@fp^0,c
  3309   001B0A  C050  F04A         	movff	sprintf@fmt,vfprintf@fmt
  3310   001B0E  C051  F04B         	movff	sprintf@fmt+1,vfprintf@fmt+1
  3311   001B12  0E56               	movlw	low sprintf@ap
  3312   001B14  6E4C               	movwf	vfprintf@ap^0,c
  3313   001B16  ECCB  F00D         	call	_vfprintf	;wreg free
  3314   001B1A  504F               	movf	sprintf@s^0,w,c
  3315   001B1C  245A               	addwf	(sprintf@f+3)^0,w,c
  3316   001B1E  6ED9               	movwf	fsr2l,c
  3317   001B20  6ADA               	clrf	fsr2h,c
  3318   001B22  6ADF               	clrf	indf2,c
  3319   001B24  0012               	return		;funcret
  3320   001B26                     __end_of_sprintf:
  3321                           	callstack 0
  3322                           
  3323 ;; *************** function _vfprintf *****************
  3324 ;; Defined at:
  3325 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  3326 ;; Parameters:    Size  Location     Type
  3327 ;;  fp              1   72[COMRAM] PTR struct _IO_FILE
  3328 ;;		 -> sprintf@f(12), 
  3329 ;;  fmt             2   73[COMRAM] PTR const unsigned char 
  3330 ;;		 -> STR_38(3), STR_36(4), STR_34(4), STR_32(4), 
  3331 ;;  ap              1   75[COMRAM] PTR PTR void 
  3332 ;;		 -> sprintf@ap(1), 
  3333 ;; Auto vars:     Size  Location     Type
  3334 ;;  cfmt            2   76[COMRAM] PTR unsigned char 
  3335 ;;		 -> STR_38(3), STR_36(4), STR_34(4), STR_32(4), 
  3336 ;; Return value:  Size  Location     Type
  3337 ;;                  2   72[COMRAM] int 
  3338 ;; Registers used:
  3339 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3340 ;; Tracked objects:
  3341 ;;		On entry : 0/0
  3342 ;;		On exit  : 0/0
  3343 ;;		Unchanged: 0/0
  3344 ;; Data sizes:     COMRAM   BANK0   BANK1
  3345 ;;      Params:         4       0       0
  3346 ;;      Locals:         2       0       0
  3347 ;;      Temps:          0       0       0
  3348 ;;      Totals:         6       0       0
  3349 ;;Total ram usage:        6 bytes
  3350 ;; Hardware stack levels used: 1
  3351 ;; Hardware stack levels required when called: 5
  3352 ;; This function calls:
  3353 ;;		_vfpfcnvrt
  3354 ;; This function is called by:
  3355 ;;		_sprintf
  3356 ;; This function uses a non-reentrant model
  3357 ;;
  3358                           
  3359                           	psect	text14
  3360   001B96                     __ptext14:
  3361                           	callstack 0
  3362   001B96                     _vfprintf:
  3363                           	callstack 22
  3364                           
  3365                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  3366                           
  3367                           ;incstack = 0
  3368   001B96  C04A  F04D         	movff	vfprintf@fmt,vfprintf@cfmt
  3369   001B9A  C04B  F04E         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  3370                           
  3371                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  3372   001B9E  D008               	goto	l4434
  3373   001BA0                     l4432:
  3374                           
  3375                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  3376   001BA0  C049  F03C         	movff	vfprintf@fp,vfpfcnvrt@fp
  3377   001BA4  0E4D               	movlw	low vfprintf@cfmt
  3378   001BA6  6E3D               	movwf	vfpfcnvrt@fmt^0,c
  3379   001BA8  C04C  F03E         	movff	vfprintf@ap,vfpfcnvrt@ap
  3380   001BAC  EC53  F004         	call	_vfpfcnvrt	;wreg free
  3381   001BB0                     l4434:
  3382                           
  3383                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  3384   001BB0  C04D  FFF6         	movff	vfprintf@cfmt,tblptrl
  3385   001BB4  C04E  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  3386   001BB8                     	if	0	;tblptru may be non-zero
  3387   001BB8                     	endif
  3388   001BB8                     	if	0	;tblptru may be non-zero
  3389   001BB8                     	endif
  3390   001BB8  0008               	tblrd		*
  3391   001BBA  50F5               	movf	tablat,w,c
  3392   001BBC  0900               	iorlw	0
  3393   001BBE  A4D8               	btfss	status,2,c
  3394   001BC0  D7EF               	goto	l4432
  3395                           
  3396                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  3397   001BC2  0E00               	movlw	0
  3398   001BC4  6E4A               	movwf	(?_vfprintf+1)^0,c
  3399   001BC6  0E00               	movlw	0
  3400   001BC8  6E49               	movwf	?_vfprintf^0,c
  3401   001BCA  0012               	return		;funcret
  3402   001BCC                     __end_of_vfprintf:
  3403                           	callstack 0
  3404                           
  3405 ;; *************** function _vfpfcnvrt *****************
  3406 ;; Defined at:
  3407 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  3408 ;; Parameters:    Size  Location     Type
  3409 ;;  fp              1   59[COMRAM] PTR struct _IO_FILE
  3410 ;;		 -> sprintf@f(12), 
  3411 ;;  fmt             1   60[COMRAM] PTR PTR unsigned char 
  3412 ;;		 -> vfprintf@cfmt(2), 
  3413 ;;  ap              1   61[COMRAM] PTR PTR void 
  3414 ;;		 -> sprintf@ap(1), 
  3415 ;; Auto vars:     Size  Location     Type
  3416 ;;  convarg         4   67[COMRAM] struct .
  3417 ;;  cp              2   65[COMRAM] PTR unsigned char 
  3418 ;;		 -> STR_38(3), STR_36(4), STR_34(4), STR_32(4), 
  3419 ;;  c               1   71[COMRAM] unsigned char 
  3420 ;;  done            1   64[COMRAM] _Bool 
  3421 ;; Return value:  Size  Location     Type
  3422 ;;                  1    wreg      void 
  3423 ;; Registers used:
  3424 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3425 ;; Tracked objects:
  3426 ;;		On entry : 0/0
  3427 ;;		On exit  : 0/0
  3428 ;;		Unchanged: 0/0
  3429 ;; Data sizes:     COMRAM   BANK0   BANK1
  3430 ;;      Params:         3       0       0
  3431 ;;      Locals:         8       0       0
  3432 ;;      Temps:          2       0       0
  3433 ;;      Totals:        13       0       0
  3434 ;;Total ram usage:       13 bytes
  3435 ;; Hardware stack levels used: 1
  3436 ;; Hardware stack levels required when called: 4
  3437 ;; This function calls:
  3438 ;;		___aldiv
  3439 ;;		___almod
  3440 ;;		_abs
  3441 ;;		_fputc
  3442 ;; This function is called by:
  3443 ;;		_vfprintf
  3444 ;; This function uses a non-reentrant model
  3445 ;;
  3446                           
  3447                           	psect	text15
  3448   0008A6                     __ptext15:
  3449                           	callstack 0
  3450   0008A6                     _vfpfcnvrt:
  3451                           	callstack 22
  3452                           
  3453                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  3454                           
  3455                           ;incstack = 0
  3456   0008A6  503D               	movf	vfpfcnvrt@fmt^0,w,c
  3457   0008A8  6ED9               	movwf	fsr2l,c
  3458   0008AA  6ADA               	clrf	fsr2h,c
  3459   0008AC  CFDE FFF6          	movff	postinc2,tblptrl
  3460   0008B0  CFDD FFF7          	movff	postdec2,tblptrh
  3461   0008B4                     	if	0	;tblptru may be non-zero
  3462   0008B4                     	endif
  3463   0008B4                     	if	0	;tblptru may be non-zero
  3464   0008B4                     	endif
  3465   0008B4  0008               	tblrd		*
  3466   0008B6  50F5               	movf	tablat,w,c
  3467   0008B8  0A25               	xorlw	37
  3468   0008BA  A4D8               	btfss	status,2,c
  3469   0008BC  D0EE               	goto	l4270
  3470                           
  3471                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  3472   0008BE  503D               	movf	vfpfcnvrt@fmt^0,w,c
  3473   0008C0  6ED9               	movwf	fsr2l,c
  3474   0008C2  6ADA               	clrf	fsr2h,c
  3475   0008C4  2ADE               	incf	postinc2,f,c
  3476   0008C6  0E00               	movlw	0
  3477   0008C8  22DD               	addwfc	postdec2,f,c
  3478                           
  3479                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  3480   0008CA  0E00               	movlw	0
  3481   0008CC  0100               	movlb	0	; () banked
  3482   0008CE  6FAD               	movwf	(_width+1)& (0+255),b
  3483   0008D0  0E00               	movlw	0
  3484   0008D2  6FAC               	movwf	_width& (0+255),b
  3485   0008D4  C0AC  F079         	movff	_width,_flags
  3486                           
  3487                           ; BSR set to: 0
  3488                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  3489   0008D8  6875               	setf	_prec^0,c
  3490   0008DA  6876               	setf	(_prec+1)^0,c
  3491                           
  3492                           ; BSR set to: 0
  3493                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  3494   0008DC  503D               	movf	vfpfcnvrt@fmt^0,w,c
  3495   0008DE  6ED9               	movwf	fsr2l,c
  3496   0008E0  6ADA               	clrf	fsr2h,c
  3497   0008E2  CFDE F042          	movff	postinc2,vfpfcnvrt@cp
  3498   0008E6  CFDD F043          	movff	postdec2,vfpfcnvrt@cp+1
  3499                           
  3500                           ; BSR set to: 0
  3501                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1293:   c = *cp;
  3502   0008EA  C042  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3503   0008EE  C043  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  3504   0008F2                     	if	0	;tblptru may be non-zero
  3505   0008F2                     	endif
  3506   0008F2                     	if	0	;tblptru may be non-zero
  3507   0008F2                     	endif
  3508   0008F2  0008               	tblrd		*
  3509   0008F4  CFF5 F048          	movff	tablat,vfpfcnvrt@c
  3510                           
  3511                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1294:   switch(c)
      +                           {
  3512   0008F8  D008               	goto	l4226
  3513   0008FA                     l4218:
  3514                           
  3515                           ; BSR set to: 0
  3516                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1309:     cp++;
  3517   0008FA  4A42               	infsnz	vfpfcnvrt@cp^0,f,c
  3518   0008FC  2A43               	incf	(vfpfcnvrt@cp+1)^0,f,c
  3519                           
  3520                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1316:     break;
  3521   0008FE  D010               	goto	l4228
  3522   000900                     l4220:
  3523                           
  3524                           ; BSR set to: 0
  3525                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1350:     c = 'i'
      +                          ;
  3526   000900  0E69               	movlw	105
  3527   000902  D001               	goto	L5
  3528   000904                     l4222:
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1353:     c = 0;
  3532   000904  0E00               	movlw	0
  3533   000906                     L5:
  3534   000906  6E48               	movwf	vfpfcnvrt@c^0,c
  3535                           
  3536                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1354:     break;
  3537   000908  D00B               	goto	l4228
  3538   00090A                     l4226:
  3539                           
  3540                           ; BSR set to: 0
  3541   00090A  5048               	movf	vfpfcnvrt@c^0,w,c
  3542                           
  3543                           ; Switch size 1, requested type "simple"
  3544                           ; Number of cases is 3, Range of values is 100 to 108
  3545                           ; switch strategies available:
  3546                           ; Name         Instructions Cycles
  3547                           ; simple_byte           10     6 (average)
  3548                           ;	Chosen strategy is simple_byte
  3549   00090C  0A64               	xorlw	100	; case 100
  3550   00090E  B4D8               	btfsc	status,2,c
  3551   000910  D7F7               	goto	l4220
  3552   000912  0A0D               	xorlw	13	; case 105
  3553   000914  B4D8               	btfsc	status,2,c
  3554   000916  D7F4               	goto	l4220
  3555   000918  0A05               	xorlw	5	; case 108
  3556   00091A  B4D8               	btfsc	status,2,c
  3557   00091C  D7EE               	goto	l4218
  3558   00091E  D7F2               	goto	l4222
  3559   000920                     l4228:
  3560                           
  3561                           ; BSR set to: 0
  3562                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  3563   000920  C042  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3564   000924  C043  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  3565   000928                     	if	0	;tblptru may be non-zero
  3566   000928                     	endif
  3567   000928                     	if	0	;tblptru may be non-zero
  3568   000928                     	endif
  3569   000928  0008               	tblrd		*
  3570   00092A  50F5               	movf	tablat,w,c
  3571   00092C  0A64               	xorlw	100
  3572   00092E  B4D8               	btfsc	status,2,c
  3573   000930  D02D               	goto	l4238
  3574                           
  3575                           ; BSR set to: 0
  3576   000932  C042  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3577   000936  C043  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  3578   00093A                     	if	0	;tblptru may be non-zero
  3579   00093A                     	endif
  3580   00093A                     	if	0	;tblptru may be non-zero
  3581   00093A                     	endif
  3582   00093A  0008               	tblrd		*
  3583   00093C  50F5               	movf	tablat,w,c
  3584   00093E  0A69               	xorlw	105
  3585   000940  B4D8               	btfsc	status,2,c
  3586   000942  D024               	goto	l4238
  3587   000944  D0A3               	goto	l4266
  3588   000946                     l4232:
  3589                           
  3590                           ; BSR set to: 0
  3591                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1365:      convar
      +                          g.sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  3592   000946  503E               	movf	vfpfcnvrt@ap^0,w,c
  3593   000948  6ED9               	movwf	fsr2l,c
  3594   00094A  6ADA               	clrf	fsr2h,c
  3595   00094C  50DF               	movf	indf2,w,c
  3596   00094E  2ADF               	incf	indf2,f,c
  3597   000950  2ADF               	incf	indf2,f,c
  3598   000952  6ED9               	movwf	fsr2l,c
  3599   000954  6ADA               	clrf	fsr2h,c
  3600   000956  CFDE F044          	movff	postinc2,vfpfcnvrt@convarg
  3601   00095A  CFDD F045          	movff	postdec2,vfpfcnvrt@convarg+1
  3602   00095E  0E00               	movlw	0
  3603   000960  BE45               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  3604   000962  0EFF               	movlw	-1
  3605   000964  6E46               	movwf	(vfpfcnvrt@convarg+2)^0,c
  3606   000966  6E47               	movwf	(vfpfcnvrt@convarg+3)^0,c
  3607                           
  3608                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1366:      break;
  3609   000968  D018               	goto	l4240
  3610   00096A                     l4234:
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1379:      convar
      +                          g.sint = (vfpf_sint_t)(*(long *)__va_arg(*(long **)ap, (long)0));
  3614   00096A  503E               	movf	vfpfcnvrt@ap^0,w,c
  3615   00096C  6ED9               	movwf	fsr2l,c
  3616   00096E  6ADA               	clrf	fsr2h,c
  3617   000970  0E04               	movlw	4
  3618   000972  26DF               	addwf	indf2,f,c
  3619   000974  5CDF               	subwf	indf2,w,c
  3620   000976  6ED9               	movwf	fsr2l,c
  3621   000978  6ADA               	clrf	fsr2h,c
  3622   00097A  CFDE F044          	movff	postinc2,vfpfcnvrt@convarg
  3623   00097E  CFDE F045          	movff	postinc2,vfpfcnvrt@convarg+1
  3624   000982  CFDE F046          	movff	postinc2,vfpfcnvrt@convarg+2
  3625   000986  CFDE F047          	movff	postinc2,vfpfcnvrt@convarg+3
  3626                           
  3627                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1380:      break;
  3628   00098A  D007               	goto	l4240
  3629   00098C                     l4238:
  3630                           
  3631                           ; BSR set to: 0
  3632   00098C  5048               	movf	vfpfcnvrt@c^0,w,c
  3633                           
  3634                           ; Switch size 1, requested type "simple"
  3635                           ; Number of cases is 2, Range of values is 105 to 108
  3636                           ; switch strategies available:
  3637                           ; Name         Instructions Cycles
  3638                           ; simple_byte            7     4 (average)
  3639                           ;	Chosen strategy is simple_byte
  3640   00098E  0A69               	xorlw	105	; case 105
  3641   000990  B4D8               	btfsc	status,2,c
  3642   000992  D7D9               	goto	l4232
  3643   000994  0A05               	xorlw	5	; case 108
  3644   000996  B4D8               	btfsc	status,2,c
  3645   000998  D7E8               	goto	l4234
  3646   00099A                     l4240:
  3647                           
  3648                           ; BSR set to: 0
  3649                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  3650   00099A  0E01               	movlw	1
  3651   00099C  2442               	addwf	vfpfcnvrt@cp^0,w,c
  3652   00099E  6E3F               	movwf	??_vfpfcnvrt^0,c
  3653   0009A0  0E00               	movlw	0
  3654   0009A2  2043               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  3655   0009A4  6E40               	movwf	(??_vfpfcnvrt+1)^0,c
  3656   0009A6  503D               	movf	vfpfcnvrt@fmt^0,w,c
  3657   0009A8  6ED9               	movwf	fsr2l,c
  3658   0009AA  6ADA               	clrf	fsr2h,c
  3659   0009AC  C03F  FFDE         	movff	??_vfpfcnvrt,postinc2
  3660   0009B0  C040  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  3664   0009B4  0E20               	movlw	32
  3665   0009B6  6E48               	movwf	vfpfcnvrt@c^0,c
  3666                           
  3667                           ; BSR set to: 0
  3668                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  3669   0009B8  AE47               	btfss	(vfpfcnvrt@convarg+3)^0,7,c
  3670   0009BA  D002               	goto	u4170
  3671   0009BC  0E01               	movlw	1
  3672   0009BE  D001               	goto	u4180
  3673   0009C0                     u4170:
  3674   0009C0  0E00               	movlw	0
  3675   0009C2                     u4180:
  3676   0009C2  6E41               	movwf	vfpfcnvrt@done^0,c
  3677   0009C4                     l4246:
  3678                           
  3679                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  3680   0009C4  0648               	decf	vfpfcnvrt@c^0,f,c
  3681   0009C6  5048               	movf	vfpfcnvrt@c^0,w,c
  3682   0009C8  0F80               	addlw	low _dbuf
  3683   0009CA  6ED9               	movwf	fsr2l,c
  3684   0009CC  6ADA               	clrf	fsr2h,c
  3685   0009CE  C044  F005         	movff	vfpfcnvrt@convarg,___almod@dividend
  3686   0009D2  C045  F006         	movff	vfpfcnvrt@convarg+1,___almod@dividend+1
  3687   0009D6  C046  F007         	movff	vfpfcnvrt@convarg+2,___almod@dividend+2
  3688   0009DA  C047  F008         	movff	vfpfcnvrt@convarg+3,___almod@dividend+3
  3689   0009DE  0E0A               	movlw	10
  3690   0009E0  6E09               	movwf	___almod@divisor^0,c
  3691   0009E2  0E00               	movlw	0
  3692   0009E4  6E0A               	movwf	(___almod@divisor+1)^0,c
  3693   0009E6  0E00               	movlw	0
  3694   0009E8  6E0B               	movwf	(___almod@divisor+2)^0,c
  3695   0009EA  0E00               	movlw	0
  3696   0009EC  6E0C               	movwf	(___almod@divisor+3)^0,c
  3697   0009EE  EC0C  F008         	call	___almod	;wreg free
  3698   0009F2  C005  F00F         	movff	?___almod,abs@a
  3699   0009F6  C006  F010         	movff	?___almod+1,abs@a+1
  3700   0009FA  EC10  F00E         	call	_abs	;wreg free
  3701   0009FE  500F               	movf	?_abs^0,w,c
  3702   000A00  0F30               	addlw	48
  3703   000A02  6EDF               	movwf	indf2,c
  3704                           
  3705                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  3706   000A04  C044  F02E         	movff	vfpfcnvrt@convarg,___aldiv@dividend
  3707   000A08  C045  F02F         	movff	vfpfcnvrt@convarg+1,___aldiv@dividend+1
  3708   000A0C  C046  F030         	movff	vfpfcnvrt@convarg+2,___aldiv@dividend+2
  3709   000A10  C047  F031         	movff	vfpfcnvrt@convarg+3,___aldiv@dividend+3
  3710   000A14  0E0A               	movlw	10
  3711   000A16  6E32               	movwf	___aldiv@divisor^0,c
  3712   000A18  0E00               	movlw	0
  3713   000A1A  6E33               	movwf	(___aldiv@divisor+1)^0,c
  3714   000A1C  0E00               	movlw	0
  3715   000A1E  6E34               	movwf	(___aldiv@divisor+2)^0,c
  3716   000A20  0E00               	movlw	0
  3717   000A22  6E35               	movwf	(___aldiv@divisor+3)^0,c
  3718   000A24  ECE6  F006         	call	___aldiv	;wreg free
  3719   000A28  C02E  F044         	movff	?___aldiv,vfpfcnvrt@convarg
  3720   000A2C  C02F  F045         	movff	?___aldiv+1,vfpfcnvrt@convarg+1
  3721   000A30  C030  F046         	movff	?___aldiv+2,vfpfcnvrt@convarg+2
  3722   000A34  C031  F047         	movff	?___aldiv+3,vfpfcnvrt@convarg+3
  3723                           
  3724                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  3725   000A38  5044               	movf	vfpfcnvrt@convarg^0,w,c
  3726   000A3A  1045               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  3727   000A3C  1046               	iorwf	(vfpfcnvrt@convarg+2)^0,w,c
  3728   000A3E  1047               	iorwf	(vfpfcnvrt@convarg+3)^0,w,c
  3729   000A40  B4D8               	btfsc	status,2,c
  3730   000A42  D003               	goto	u4200
  3731   000A44  5048               	movf	vfpfcnvrt@c^0,w,c
  3732   000A46  A4D8               	btfss	status,2,c
  3733   000A48  D7BD               	goto	l4246
  3734   000A4A                     u4200:
  3735                           
  3736                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  3737   000A4A  5048               	movf	vfpfcnvrt@c^0,w,c
  3738   000A4C  B4D8               	btfsc	status,2,c
  3739   000A4E  D019               	goto	l4264
  3740   000A50  5041               	movf	vfpfcnvrt@done^0,w,c
  3741   000A52  B4D8               	btfsc	status,2,c
  3742   000A54  D016               	goto	l4264
  3743                           
  3744                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  3745   000A56  0648               	decf	vfpfcnvrt@c^0,f,c
  3746   000A58  5048               	movf	vfpfcnvrt@c^0,w,c
  3747   000A5A  0F80               	addlw	low _dbuf
  3748   000A5C  6ED9               	movwf	fsr2l,c
  3749   000A5E  6ADA               	clrf	fsr2h,c
  3750   000A60  0E2D               	movlw	45
  3751   000A62  6EDF               	movwf	indf2,c
  3752   000A64  D00E               	goto	l4264
  3753   000A66                     l4260:
  3754                           
  3755                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  3756   000A66  5048               	movf	vfpfcnvrt@c^0,w,c
  3757   000A68  0F80               	addlw	low _dbuf
  3758   000A6A  6ED9               	movwf	fsr2l,c
  3759   000A6C  6ADA               	clrf	fsr2h,c
  3760   000A6E  50DF               	movf	indf2,w,c
  3761   000A70  6E3F               	movwf	??_vfpfcnvrt^0,c
  3762   000A72  503F               	movf	??_vfpfcnvrt^0,w,c
  3763   000A74  6E05               	movwf	fputc@c^0,c
  3764   000A76  6A06               	clrf	(fputc@c+1)^0,c
  3765   000A78  C03C  F007         	movff	vfpfcnvrt@fp,fputc@fp
  3766   000A7C  ECB7  F00A         	call	_fputc	;wreg free
  3767   000A80  2A48               	incf	vfpfcnvrt@c^0,f,c
  3768   000A82                     l4264:
  3769                           
  3770                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  3771   000A82  0E20               	movlw	32
  3772   000A84  1848               	xorwf	vfpfcnvrt@c^0,w,c
  3773   000A86  B4D8               	btfsc	status,2,c
  3774   000A88  0012               	return	
  3775   000A8A  D7ED               	goto	l4260
  3776   000A8C                     l4266:
  3777                           
  3778                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  3779   000A8C  503D               	movf	vfpfcnvrt@fmt^0,w,c
  3780   000A8E  6ED9               	movwf	fsr2l,c
  3781   000A90  6ADA               	clrf	fsr2h,c
  3782   000A92  2ADE               	incf	postinc2,f,c
  3783   000A94  0E00               	movlw	0
  3784   000A96  22DD               	addwfc	postdec2,f,c
  3785   000A98  0012               	return	
  3786   000A9A                     l4270:
  3787                           
  3788                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  3789   000A9A  503D               	movf	vfpfcnvrt@fmt^0,w,c
  3790   000A9C  6ED9               	movwf	fsr2l,c
  3791   000A9E  6ADA               	clrf	fsr2h,c
  3792   000AA0  CFDE FFF6          	movff	postinc2,tblptrl
  3793   000AA4  CFDD FFF7          	movff	postdec2,tblptrh
  3794   000AA8                     	if	0	;tblptru may be non-zero
  3795   000AA8                     	endif
  3796   000AA8                     	if	0	;tblptru may be non-zero
  3797   000AA8                     	endif
  3798   000AA8  0008               	tblrd		*
  3799   000AAA  50F5               	movf	tablat,w,c
  3800   000AAC  6E05               	movwf	fputc@c^0,c
  3801   000AAE  6A06               	clrf	(fputc@c+1)^0,c
  3802   000AB0  C03C  F007         	movff	vfpfcnvrt@fp,fputc@fp
  3803   000AB4  ECB7  F00A         	call	_fputc	;wreg free
  3804   000AB8  D7E9               	goto	l4266
  3805   000ABA                     __end_of_vfpfcnvrt:
  3806                           	callstack 0
  3807                           
  3808 ;; *************** function _fputc *****************
  3809 ;; Defined at:
  3810 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_fputc.c"
  3811 ;; Parameters:    Size  Location     Type
  3812 ;;  c               2    4[COMRAM] int 
  3813 ;;  fp              1    6[COMRAM] PTR struct _IO_FILE
  3814 ;;		 -> sprintf@f(12), 
  3815 ;; Auto vars:     Size  Location     Type
  3816 ;;		None
  3817 ;; Return value:  Size  Location     Type
  3818 ;;                  2    4[COMRAM] int 
  3819 ;; Registers used:
  3820 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3821 ;; Tracked objects:
  3822 ;;		On entry : 0/0
  3823 ;;		On exit  : 0/0
  3824 ;;		Unchanged: 0/0
  3825 ;; Data sizes:     COMRAM   BANK0   BANK1
  3826 ;;      Params:         3       0       0
  3827 ;;      Locals:         0       0       0
  3828 ;;      Temps:          5       0       0
  3829 ;;      Totals:         8       0       0
  3830 ;;Total ram usage:        8 bytes
  3831 ;; Hardware stack levels used: 1
  3832 ;; Hardware stack levels required when called: 3
  3833 ;; This function calls:
  3834 ;;		_putch
  3835 ;; This function is called by:
  3836 ;;		_vfpfcnvrt
  3837 ;; This function uses a non-reentrant model
  3838 ;;
  3839                           
  3840                           	psect	text16
  3841   00156E                     __ptext16:
  3842                           	callstack 0
  3843   00156E                     _fputc:
  3844                           	callstack 22
  3845                           
  3846                           ;incstack = 0
  3847   00156E  5007               	movf	fputc@fp^0,w,c
  3848   001570  B4D8               	btfsc	status,2,c
  3849   001572  D003               	goto	u3840
  3850   001574  5007               	movf	fputc@fp^0,w,c
  3851   001576  A4D8               	btfss	status,2,c
  3852   001578  D004               	goto	l4042
  3853   00157A                     u3840:
  3854   00157A  5005               	movf	fputc@c^0,w,c
  3855   00157C  ECAE  F00E         	call	_putch
  3856   001580  0012               	return	
  3857   001582                     l4042:
  3858   001582  5007               	movf	fputc@fp^0,w,c
  3859   001584  6ED9               	movwf	fsr2l,c
  3860   001586  6ADA               	clrf	fsr2h,c
  3861   001588  0E0A               	movlw	10
  3862   00158A  26D9               	addwf	fsr2l,f,c
  3863   00158C  50DE               	movf	postinc2,w,c
  3864   00158E  10DE               	iorwf	postinc2,w,c
  3865   001590  B4D8               	btfsc	status,2,c
  3866   001592  D014               	goto	u3860
  3867   001594  5007               	movf	fputc@fp^0,w,c
  3868   001596  6ED9               	movwf	fsr2l,c
  3869   001598  6ADA               	clrf	fsr2h,c
  3870   00159A  0E0A               	movlw	10
  3871   00159C  26D9               	addwf	fsr2l,f,c
  3872   00159E  5007               	movf	fputc@fp^0,w,c
  3873   0015A0  6EE1               	movwf	fsr1l,c
  3874   0015A2  6AE2               	clrf	fsr1h,c
  3875   0015A4  0E03               	movlw	3
  3876   0015A6  26E1               	addwf	fsr1l,f,c
  3877   0015A8  50DE               	movf	postinc2,w,c
  3878   0015AA  5CE6               	subwf	postinc1,w,c
  3879   0015AC  50E6               	movf	postinc1,w,c
  3880   0015AE  0A80               	xorlw	128
  3881   0015B0  6E0C               	movwf	(??_fputc+4)^0,c
  3882   0015B2  50DE               	movf	postinc2,w,c
  3883   0015B4  0A80               	xorlw	128
  3884   0015B6  580C               	subwfb	(??_fputc+4)^0,w,c
  3885   0015B8  B0D8               	btfsc	status,0,c
  3886   0015BA  0012               	return	
  3887   0015BC                     u3860:
  3888   0015BC  5007               	movf	fputc@fp^0,w,c
  3889   0015BE  6ED9               	movwf	fsr2l,c
  3890   0015C0  6ADA               	clrf	fsr2h,c
  3891   0015C2  0E03               	movlw	3
  3892   0015C4  26D9               	addwf	fsr2l,f,c
  3893   0015C6  50DF               	movf	indf2,w,c
  3894   0015C8  6E08               	movwf	??_fputc^0,c
  3895   0015CA  5007               	movf	fputc@fp^0,w,c
  3896   0015CC  6ED9               	movwf	fsr2l,c
  3897   0015CE  6ADA               	clrf	fsr2h,c
  3898   0015D0  50DF               	movf	indf2,w,c
  3899   0015D2  2408               	addwf	??_fputc^0,w,c
  3900   0015D4  6ED9               	movwf	fsr2l,c
  3901   0015D6  6ADA               	clrf	fsr2h,c
  3902   0015D8  C005  FFDF         	movff	fputc@c,indf2
  3903   0015DC  5007               	movf	fputc@fp^0,w,c
  3904   0015DE  6ED9               	movwf	fsr2l,c
  3905   0015E0  6ADA               	clrf	fsr2h,c
  3906   0015E2  0E03               	movlw	3
  3907   0015E4  26D9               	addwf	fsr2l,f,c
  3908   0015E6  2ADE               	incf	postinc2,f,c
  3909   0015E8  0E00               	movlw	0
  3910   0015EA  22DD               	addwfc	postdec2,f,c
  3911   0015EC  0012               	return		;funcret
  3912   0015EE                     __end_of_fputc:
  3913                           	callstack 0
  3914                           
  3915 ;; *************** function _putch *****************
  3916 ;; Defined at:
  3917 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\putch.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;  c               1    wreg     unsigned char 
  3920 ;; Auto vars:     Size  Location     Type
  3921 ;;  c               1    0[COMRAM] unsigned char 
  3922 ;; Return value:  Size  Location     Type
  3923 ;;                  1    wreg      void 
  3924 ;; Registers used:
  3925 ;;		wreg
  3926 ;; Tracked objects:
  3927 ;;		On entry : 0/0
  3928 ;;		On exit  : 0/0
  3929 ;;		Unchanged: 0/0
  3930 ;; Data sizes:     COMRAM   BANK0   BANK1
  3931 ;;      Params:         0       0       0
  3932 ;;      Locals:         0       0       0
  3933 ;;      Temps:          0       0       0
  3934 ;;      Totals:         0       0       0
  3935 ;;Total ram usage:        0 bytes
  3936 ;; Hardware stack levels used: 1
  3937 ;; Hardware stack levels required when called: 2
  3938 ;; This function calls:
  3939 ;;		Nothing
  3940 ;; This function is called by:
  3941 ;;		_fputc
  3942 ;; This function uses a non-reentrant model
  3943 ;;
  3944                           
  3945                           	psect	text17
  3946   001D5C                     __ptext17:
  3947                           	callstack 0
  3948   001D5C                     _putch:
  3949                           	callstack 22
  3950                           
  3951                           ;incstack = 0
  3952   001D5C  0012               	return		;funcret
  3953   001D5E                     __end_of_putch:
  3954                           	callstack 0
  3955                           
  3956 ;; *************** function _abs *****************
  3957 ;; Defined at:
  3958 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\abs.c"
  3959 ;; Parameters:    Size  Location     Type
  3960 ;;  a               2   14[COMRAM] int 
  3961 ;; Auto vars:     Size  Location     Type
  3962 ;;		None
  3963 ;; Return value:  Size  Location     Type
  3964 ;;                  2   14[COMRAM] int 
  3965 ;; Registers used:
  3966 ;;		wreg, status,2, status,0
  3967 ;; Tracked objects:
  3968 ;;		On entry : 0/0
  3969 ;;		On exit  : 0/0
  3970 ;;		Unchanged: 0/0
  3971 ;; Data sizes:     COMRAM   BANK0   BANK1
  3972 ;;      Params:         2       0       0
  3973 ;;      Locals:         0       0       0
  3974 ;;      Temps:          2       0       0
  3975 ;;      Totals:         4       0       0
  3976 ;;Total ram usage:        4 bytes
  3977 ;; Hardware stack levels used: 1
  3978 ;; Hardware stack levels required when called: 2
  3979 ;; This function calls:
  3980 ;;		Nothing
  3981 ;; This function is called by:
  3982 ;;		_vfpfcnvrt
  3983 ;; This function uses a non-reentrant model
  3984 ;;
  3985                           
  3986                           	psect	text18
  3987   001C20                     __ptext18:
  3988                           	callstack 0
  3989   001C20                     _abs:
  3990                           	callstack 23
  3991                           
  3992                           ;incstack = 0
  3993   001C20  BE10               	btfsc	(abs@a+1)^0,7,c
  3994   001C22  D005               	goto	l1338
  3995   001C24  C00F  F00F         	movff	abs@a,?_abs
  3996   001C28  C010  F010         	movff	abs@a+1,?_abs+1
  3997   001C2C  0012               	return	
  3998   001C2E                     l1338:
  3999   001C2E  C00F  F011         	movff	abs@a,??_abs
  4000   001C32  C010  F012         	movff	abs@a+1,??_abs+1
  4001   001C36  1E11               	comf	??_abs^0,f,c
  4002   001C38  1E12               	comf	(??_abs+1)^0,f,c
  4003   001C3A  4A11               	infsnz	??_abs^0,f,c
  4004   001C3C  2A12               	incf	(??_abs+1)^0,f,c
  4005   001C3E  C011  F00F         	movff	??_abs,?_abs
  4006   001C42  C012  F010         	movff	??_abs+1,?_abs+1
  4007   001C46  0012               	return		;funcret
  4008   001C48                     __end_of_abs:
  4009                           	callstack 0
  4010                           
  4011 ;; *************** function ___almod *****************
  4012 ;; Defined at:
  4013 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\almod.c"
  4014 ;; Parameters:    Size  Location     Type
  4015 ;;  dividend        4    4[COMRAM] long 
  4016 ;;  divisor         4    8[COMRAM] long 
  4017 ;; Auto vars:     Size  Location     Type
  4018 ;;  sign            1   13[COMRAM] unsigned char 
  4019 ;;  counter         1   12[COMRAM] unsigned char 
  4020 ;; Return value:  Size  Location     Type
  4021 ;;                  4    4[COMRAM] long 
  4022 ;; Registers used:
  4023 ;;		wreg, status,2, status,0
  4024 ;; Tracked objects:
  4025 ;;		On entry : 0/0
  4026 ;;		On exit  : 0/0
  4027 ;;		Unchanged: 0/0
  4028 ;; Data sizes:     COMRAM   BANK0   BANK1
  4029 ;;      Params:         8       0       0
  4030 ;;      Locals:         2       0       0
  4031 ;;      Temps:          0       0       0
  4032 ;;      Totals:        10       0       0
  4033 ;;Total ram usage:       10 bytes
  4034 ;; Hardware stack levels used: 1
  4035 ;; Hardware stack levels required when called: 2
  4036 ;; This function calls:
  4037 ;;		Nothing
  4038 ;; This function is called by:
  4039 ;;		_vfpfcnvrt
  4040 ;; This function uses a non-reentrant model
  4041 ;;
  4042                           
  4043                           	psect	text19
  4044   001018                     __ptext19:
  4045                           	callstack 0
  4046   001018                     ___almod:
  4047                           	callstack 23
  4048                           
  4049                           ;incstack = 0
  4050   001018  0E00               	movlw	0
  4051   00101A  6E0E               	movwf	___almod@sign^0,c
  4052   00101C  AE08               	btfss	(___almod@dividend+3)^0,7,c
  4053   00101E  D00A               	goto	l4008
  4054   001020  1E08               	comf	(___almod@dividend+3)^0,f,c
  4055   001022  1E07               	comf	(___almod@dividend+2)^0,f,c
  4056   001024  1E06               	comf	(___almod@dividend+1)^0,f,c
  4057   001026  6C05               	negf	___almod@dividend^0,c
  4058   001028  0E00               	movlw	0
  4059   00102A  2206               	addwfc	(___almod@dividend+1)^0,f,c
  4060   00102C  2207               	addwfc	(___almod@dividend+2)^0,f,c
  4061   00102E  2208               	addwfc	(___almod@dividend+3)^0,f,c
  4062   001030  0E01               	movlw	1
  4063   001032  6E0E               	movwf	___almod@sign^0,c
  4064   001034                     l4008:
  4065   001034  AE0C               	btfss	(___almod@divisor+3)^0,7,c
  4066   001036  D008               	goto	l4012
  4067   001038  1E0C               	comf	(___almod@divisor+3)^0,f,c
  4068   00103A  1E0B               	comf	(___almod@divisor+2)^0,f,c
  4069   00103C  1E0A               	comf	(___almod@divisor+1)^0,f,c
  4070   00103E  6C09               	negf	___almod@divisor^0,c
  4071   001040  0E00               	movlw	0
  4072   001042  220A               	addwfc	(___almod@divisor+1)^0,f,c
  4073   001044  220B               	addwfc	(___almod@divisor+2)^0,f,c
  4074   001046  220C               	addwfc	(___almod@divisor+3)^0,f,c
  4075   001048                     l4012:
  4076   001048  5009               	movf	___almod@divisor^0,w,c
  4077   00104A  100A               	iorwf	(___almod@divisor+1)^0,w,c
  4078   00104C  100B               	iorwf	(___almod@divisor+2)^0,w,c
  4079   00104E  100C               	iorwf	(___almod@divisor+3)^0,w,c
  4080   001050  B4D8               	btfsc	status,2,c
  4081   001052  D024               	goto	l4028
  4082   001054  0E01               	movlw	1
  4083   001056  6E0D               	movwf	___almod@counter^0,c
  4084   001058  D006               	goto	l4018
  4085   00105A                     l4016:
  4086   00105A  90D8               	bcf	status,0,c
  4087   00105C  3609               	rlcf	___almod@divisor^0,f,c
  4088   00105E  360A               	rlcf	(___almod@divisor+1)^0,f,c
  4089   001060  360B               	rlcf	(___almod@divisor+2)^0,f,c
  4090   001062  360C               	rlcf	(___almod@divisor+3)^0,f,c
  4091   001064  2A0D               	incf	___almod@counter^0,f,c
  4092   001066                     l4018:
  4093   001066  AE0C               	btfss	(___almod@divisor+3)^0,7,c
  4094   001068  D7F8               	goto	l4016
  4095   00106A                     u3800:
  4096   00106A  5009               	movf	___almod@divisor^0,w,c
  4097   00106C  5C05               	subwf	___almod@dividend^0,w,c
  4098   00106E  500A               	movf	(___almod@divisor+1)^0,w,c
  4099   001070  5806               	subwfb	(___almod@dividend+1)^0,w,c
  4100   001072  500B               	movf	(___almod@divisor+2)^0,w,c
  4101   001074  5807               	subwfb	(___almod@dividend+2)^0,w,c
  4102   001076  500C               	movf	(___almod@divisor+3)^0,w,c
  4103   001078  5808               	subwfb	(___almod@dividend+3)^0,w,c
  4104   00107A  A0D8               	btfss	status,0,c
  4105   00107C  D008               	goto	l4024
  4106   00107E  5009               	movf	___almod@divisor^0,w,c
  4107   001080  5E05               	subwf	___almod@dividend^0,f,c
  4108   001082  500A               	movf	(___almod@divisor+1)^0,w,c
  4109   001084  5A06               	subwfb	(___almod@dividend+1)^0,f,c
  4110   001086  500B               	movf	(___almod@divisor+2)^0,w,c
  4111   001088  5A07               	subwfb	(___almod@dividend+2)^0,f,c
  4112   00108A  500C               	movf	(___almod@divisor+3)^0,w,c
  4113   00108C  5A08               	subwfb	(___almod@dividend+3)^0,f,c
  4114   00108E                     l4024:
  4115   00108E  90D8               	bcf	status,0,c
  4116   001090  320C               	rrcf	(___almod@divisor+3)^0,f,c
  4117   001092  320B               	rrcf	(___almod@divisor+2)^0,f,c
  4118   001094  320A               	rrcf	(___almod@divisor+1)^0,f,c
  4119   001096  3209               	rrcf	___almod@divisor^0,f,c
  4120   001098  2E0D               	decfsz	___almod@counter^0,f,c
  4121   00109A  D7E7               	goto	u3800
  4122   00109C                     l4028:
  4123   00109C  500E               	movf	___almod@sign^0,w,c
  4124   00109E  B4D8               	btfsc	status,2,c
  4125   0010A0  D008               	goto	l4032
  4126   0010A2  1E08               	comf	(___almod@dividend+3)^0,f,c
  4127   0010A4  1E07               	comf	(___almod@dividend+2)^0,f,c
  4128   0010A6  1E06               	comf	(___almod@dividend+1)^0,f,c
  4129   0010A8  6C05               	negf	___almod@dividend^0,c
  4130   0010AA  0E00               	movlw	0
  4131   0010AC  2206               	addwfc	(___almod@dividend+1)^0,f,c
  4132   0010AE  2207               	addwfc	(___almod@dividend+2)^0,f,c
  4133   0010B0  2208               	addwfc	(___almod@dividend+3)^0,f,c
  4134   0010B2                     l4032:
  4135   0010B2  C005  F005         	movff	___almod@dividend,?___almod
  4136   0010B6  C006  F006         	movff	___almod@dividend+1,?___almod+1
  4137   0010BA  C007  F007         	movff	___almod@dividend+2,?___almod+2
  4138   0010BE  C008  F008         	movff	___almod@dividend+3,?___almod+3
  4139   0010C2  0012               	return		;funcret
  4140   0010C4                     __end_of___almod:
  4141                           	callstack 0
  4142                           
  4143 ;; *************** function _handle_actuator_push *****************
  4144 ;; Defined at:
  4145 ;;		line 235 in file "main.c"
  4146 ;; Parameters:    Size  Location     Type
  4147 ;;  act_pos         2   16[COMRAM] int 
  4148 ;; Auto vars:     Size  Location     Type
  4149 ;;  decision        2   19[COMRAM] int 
  4150 ;; Return value:  Size  Location     Type
  4151 ;;                  2   16[COMRAM] int 
  4152 ;; Registers used:
  4153 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4154 ;; Tracked objects:
  4155 ;;		On entry : 3F/0
  4156 ;;		On exit  : 0/0
  4157 ;;		Unchanged: 0/0
  4158 ;; Data sizes:     COMRAM   BANK0   BANK1
  4159 ;;      Params:         2       0       0
  4160 ;;      Locals:         2       0       0
  4161 ;;      Temps:          1       0       0
  4162 ;;      Totals:         5       0       0
  4163 ;;Total ram usage:        5 bytes
  4164 ;; Hardware stack levels used: 1
  4165 ;; Hardware stack levels required when called: 6
  4166 ;; This function calls:
  4167 ;;		_ADC_Read
  4168 ;;		_Lcd_Clear
  4169 ;;		_Lcd_Set_Cursor
  4170 ;;		_Lcd_Write_String
  4171 ;;		_input_option
  4172 ;;		_move_actuator
  4173 ;;		_start_process_screen
  4174 ;;		_usePeripheral
  4175 ;; This function is called by:
  4176 ;;		_infusion
  4177 ;; This function uses a non-reentrant model
  4178 ;;
  4179                           
  4180                           	psect	text20
  4181   000E98                     __ptext20:
  4182                           	callstack 0
  4183   000E98                     _handle_actuator_push:
  4184                           	callstack 22
  4185                           
  4186                           ; BSR set to: 0
  4187                           ;main.c: 236:     int decision;;main.c: 237:     start_process_screen("PUSHING");
  4188                           
  4189                           ;incstack = 0
  4190   000E98  0EAC               	movlw	low STR_8
  4191   000E9A  6E0F               	movwf	start_process_screen@word^0,c
  4192   000E9C  0E1F               	movlw	high STR_8
  4193   000E9E  6E10               	movwf	(start_process_screen@word+1)^0,c
  4194   000EA0  ECF7  F00A         	call	_start_process_screen	;wreg free
  4195                           
  4196                           ;main.c: 238:     decision = input_option();
  4197   000EA4  ECAB  F009         	call	_input_option	;wreg free
  4198   000EA8  C008  F014         	movff	?_input_option,handle_actuator_push@decision
  4199   000EAC  C009  F015         	movff	?_input_option+1,handle_actuator_push@decision+1
  4200                           
  4201                           ;main.c: 240:     if(decision == 1){
  4202   000EB0  0414               	decf	handle_actuator_push@decision^0,w,c
  4203   000EB2  1015               	iorwf	(handle_actuator_push@decision+1)^0,w,c
  4204   000EB4  A4D8               	btfss	status,2,c
  4205   000EB6  0012               	return	
  4206                           
  4207                           ;main.c: 241:         Lcd_Clear();
  4208   000EB8  ECA7  F00E         	call	_Lcd_Clear	;wreg free
  4209                           
  4210                           ;main.c: 242:         Lcd_Set_Cursor( position_row_1,position_column_1);
  4211   000EBC  0E01               	movlw	1
  4212   000EBE  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  4213   000EC0  0E01               	movlw	1
  4214   000EC2  EC5B  F009         	call	_Lcd_Set_Cursor
  4215                           
  4216                           ;main.c: 243:         Lcd_Write_String("PUSHING...");
  4217   000EC6  0E67               	movlw	low STR_27
  4218   000EC8  6E09               	movwf	Lcd_Write_String@a^0,c
  4219   000ECA  0E1F               	movlw	high STR_27
  4220   000ECC  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  4221   000ECE  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  4222                           
  4223                           ;main.c: 245:         while(act_pos > 20){
  4224   000ED2  D02A               	goto	l4470
  4225   000ED4                     l4464:
  4226                           
  4227                           ;main.c: 246:             act_pos = ADC_Read(0);
  4228   000ED4  0E00               	movlw	0
  4229   000ED6  EC37  F00B         	call	_ADC_Read
  4230   000EDA  C005  F011         	movff	?_ADC_Read,handle_actuator_push@act_pos
  4231   000EDE  C006  F012         	movff	?_ADC_Read+1,handle_actuator_push@act_pos+1
  4232                           
  4233                           ;main.c: 247:             usePeripheral(orange_led, on);
  4234   000EE2  0E00               	movlw	0
  4235   000EE4  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  4236   000EE6  0E01               	movlw	1
  4237   000EE8  6E05               	movwf	usePeripheral@peripheral^0,c
  4238   000EEA  0E00               	movlw	0
  4239   000EEC  6E08               	movwf	(usePeripheral@action+1)^0,c
  4240   000EEE  0E01               	movlw	1
  4241   000EF0  6E07               	movwf	usePeripheral@action^0,c
  4242   000EF2  EC62  F008         	call	_usePeripheral	;wreg free
  4243                           
  4244                           ;main.c: 248:             _delay((unsigned long)((25)*(8000000L/4000.0)));
  4245   000EF6  0E41               	movlw	65
  4246   000EF8  6E13               	movwf	??_handle_actuator_push^0,c
  4247   000EFA  0EEE               	movlw	238
  4248   000EFC                     u4877:
  4249   000EFC  2EE8               	decfsz	wreg,f,c
  4250   000EFE  D7FE               	bra	u4877
  4251   000F00  2E13               	decfsz	??_handle_actuator_push^0,f,c
  4252   000F02  D7FC               	bra	u4877
  4253   000F04  D000               	nop2	
  4254                           
  4255                           ;main.c: 249:             move_actuator(backwards, 1023);
  4256   000F06  0E00               	movlw	0
  4257   000F08  6E0A               	movwf	(move_actuator@direction+1)^0,c
  4258   000F0A  0E00               	movlw	0
  4259   000F0C  6E09               	movwf	move_actuator@direction^0,c
  4260   000F0E  0E03               	movlw	3
  4261   000F10  6E0C               	movwf	(move_actuator@speed+1)^0,c
  4262   000F12  680B               	setf	move_actuator@speed^0,c
  4263   000F14  EC07  F00D         	call	_move_actuator	;wreg free
  4264                           
  4265                           ;main.c: 250:             _delay((unsigned long)((25)*(8000000L/4000.0)));
  4266   000F18  0E41               	movlw	65
  4267   000F1A  6E13               	movwf	??_handle_actuator_push^0,c
  4268   000F1C  0EEE               	movlw	238
  4269   000F1E                     u4887:
  4270   000F1E  2EE8               	decfsz	wreg,f,c
  4271   000F20  D7FE               	bra	u4887
  4272   000F22  2E13               	decfsz	??_handle_actuator_push^0,f,c
  4273   000F24  D7FC               	bra	u4887
  4274   000F26  D000               	nop2	
  4275   000F28                     l4470:
  4276                           
  4277                           ;main.c: 245:         while(act_pos > 20){
  4278   000F28  BE12               	btfsc	(handle_actuator_push@act_pos+1)^0,7,c
  4279   000F2A  D006               	goto	u4600
  4280   000F2C  5012               	movf	(handle_actuator_push@act_pos+1)^0,w,c
  4281   000F2E  E1D2               	bnz	l4464
  4282   000F30  0E15               	movlw	21
  4283   000F32  5C11               	subwf	handle_actuator_push@act_pos^0,w,c
  4284   000F34  B0D8               	btfsc	status,0,c
  4285   000F36  D7CE               	goto	l4464
  4286   000F38                     u4600:
  4287                           
  4288                           ;main.c: 253:         move_actuator(forward, 0);
  4289   000F38  0E00               	movlw	0
  4290   000F3A  6E0A               	movwf	(move_actuator@direction+1)^0,c
  4291   000F3C  0E01               	movlw	1
  4292   000F3E  6E09               	movwf	move_actuator@direction^0,c
  4293   000F40  0E00               	movlw	0
  4294   000F42  6E0C               	movwf	(move_actuator@speed+1)^0,c
  4295   000F44  0E00               	movlw	0
  4296   000F46  6E0B               	movwf	move_actuator@speed^0,c
  4297   000F48  EC07  F00D         	call	_move_actuator	;wreg free
  4298                           
  4299                           ;main.c: 254:         usePeripheral(orange_led, off);
  4300   000F4C  0E00               	movlw	0
  4301   000F4E  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  4302   000F50  0E01               	movlw	1
  4303   000F52  6E05               	movwf	usePeripheral@peripheral^0,c
  4304   000F54  0E00               	movlw	0
  4305   000F56  6E08               	movwf	(usePeripheral@action+1)^0,c
  4306   000F58  0E00               	movlw	0
  4307   000F5A  6E07               	movwf	usePeripheral@action^0,c
  4308   000F5C  EC62  F008         	call	_usePeripheral	;wreg free
  4309   000F60  0012               	return		;funcret
  4310   000F62                     __end_of_handle_actuator_push:
  4311                           	callstack 0
  4312                           
  4313 ;; *************** function _usePeripheral *****************
  4314 ;; Defined at:
  4315 ;;		line 25 in file "helper.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;  peripheral      2    4[COMRAM] int 
  4318 ;;  action          2    6[COMRAM] int 
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;		None
  4321 ;; Return value:  Size  Location     Type
  4322 ;;                  1    wreg      void 
  4323 ;; Registers used:
  4324 ;;		wreg, status,2, status,0
  4325 ;; Tracked objects:
  4326 ;;		On entry : 0/0
  4327 ;;		On exit  : 0/0
  4328 ;;		Unchanged: 0/0
  4329 ;; Data sizes:     COMRAM   BANK0   BANK1
  4330 ;;      Params:         4       0       0
  4331 ;;      Locals:         0       0       0
  4332 ;;      Temps:          0       0       0
  4333 ;;      Totals:         4       0       0
  4334 ;;Total ram usage:        4 bytes
  4335 ;; Hardware stack levels used: 1
  4336 ;; Hardware stack levels required when called: 2
  4337 ;; This function calls:
  4338 ;;		Nothing
  4339 ;; This function is called by:
  4340 ;;		_system_init
  4341 ;;		_handle_actuator_push
  4342 ;;		_infusion
  4343 ;; This function uses a non-reentrant model
  4344 ;;
  4345                           
  4346                           	psect	text21
  4347   0010C4                     __ptext21:
  4348                           	callstack 0
  4349   0010C4                     _usePeripheral:
  4350                           	callstack 27
  4351                           
  4352                           ;helper.c: 27:     if(peripheral == green_led && action == on){
  4353                           
  4354                           ;incstack = 0
  4355   0010C4  5005               	movf	usePeripheral@peripheral^0,w,c
  4356   0010C6  1006               	iorwf	(usePeripheral@peripheral+1)^0,w,c
  4357   0010C8  A4D8               	btfss	status,2,c
  4358   0010CA  D006               	goto	l4302
  4359   0010CC  0407               	decf	usePeripheral@action^0,w,c
  4360   0010CE  1008               	iorwf	(usePeripheral@action+1)^0,w,c
  4361   0010D0  A4D8               	btfss	status,2,c
  4362   0010D2  D002               	goto	l4302
  4363                           
  4364                           ;helper.c: 28:         LATA2 = on;
  4365   0010D4  8489               	bsf	3977,2,c	;volatile
  4366                           
  4367                           ;helper.c: 29:     }else if(peripheral == green_led && action == off){
  4368   0010D6  0012               	return	
  4369   0010D8                     l4302:
  4370   0010D8  5005               	movf	usePeripheral@peripheral^0,w,c
  4371   0010DA  1006               	iorwf	(usePeripheral@peripheral+1)^0,w,c
  4372   0010DC  A4D8               	btfss	status,2,c
  4373   0010DE  D006               	goto	l4308
  4374   0010E0  5007               	movf	usePeripheral@action^0,w,c
  4375   0010E2  1008               	iorwf	(usePeripheral@action+1)^0,w,c
  4376   0010E4  A4D8               	btfss	status,2,c
  4377   0010E6  D002               	goto	l4308
  4378                           
  4379                           ;helper.c: 30:         LATA2 = off;
  4380   0010E8  9489               	bcf	3977,2,c	;volatile
  4381                           
  4382                           ;helper.c: 31:     }else if(peripheral == orange_led && action == on){
  4383   0010EA  0012               	return	
  4384   0010EC                     l4308:
  4385   0010EC  0405               	decf	usePeripheral@peripheral^0,w,c
  4386   0010EE  1006               	iorwf	(usePeripheral@peripheral+1)^0,w,c
  4387   0010F0  A4D8               	btfss	status,2,c
  4388   0010F2  D006               	goto	l4314
  4389   0010F4  0407               	decf	usePeripheral@action^0,w,c
  4390   0010F6  1008               	iorwf	(usePeripheral@action+1)^0,w,c
  4391   0010F8  A4D8               	btfss	status,2,c
  4392   0010FA  D002               	goto	l4314
  4393                           
  4394                           ;helper.c: 32:         LATC6 = on;
  4395   0010FC  8C8B               	bsf	3979,6,c	;volatile
  4396                           
  4397                           ;helper.c: 33:     }else if(peripheral == orange_led && action == off){
  4398   0010FE  0012               	return	
  4399   001100                     l4314:
  4400   001100  0405               	decf	usePeripheral@peripheral^0,w,c
  4401   001102  1006               	iorwf	(usePeripheral@peripheral+1)^0,w,c
  4402   001104  A4D8               	btfss	status,2,c
  4403   001106  D006               	goto	l4320
  4404   001108  5007               	movf	usePeripheral@action^0,w,c
  4405   00110A  1008               	iorwf	(usePeripheral@action+1)^0,w,c
  4406   00110C  A4D8               	btfss	status,2,c
  4407   00110E  D002               	goto	l4320
  4408                           
  4409                           ;helper.c: 34:         LATC6 = off;
  4410   001110  9C8B               	bcf	3979,6,c	;volatile
  4411                           
  4412                           ;helper.c: 35:     }
  4413   001112  0012               	return	
  4414   001114                     l4320:
  4415   001114  0E02               	movlw	2
  4416   001116  1805               	xorwf	usePeripheral@peripheral^0,w,c
  4417   001118  1006               	iorwf	(usePeripheral@peripheral+1)^0,w,c
  4418   00111A  A4D8               	btfss	status,2,c
  4419   00111C  D006               	goto	l4326
  4420   00111E  0407               	decf	usePeripheral@action^0,w,c
  4421   001120  1008               	iorwf	(usePeripheral@action+1)^0,w,c
  4422   001122  A4D8               	btfss	status,2,c
  4423   001124  D002               	goto	l4326
  4424                           
  4425                           ;helper.c: 37:         LATC5 = on;
  4426   001126  8A8B               	bsf	3979,5,c	;volatile
  4427                           
  4428                           ;helper.c: 38:     }else if(peripheral == red_led && action == off){
  4429   001128  0012               	return	
  4430   00112A                     l4326:
  4431   00112A  0E02               	movlw	2
  4432   00112C  1805               	xorwf	usePeripheral@peripheral^0,w,c
  4433   00112E  1006               	iorwf	(usePeripheral@peripheral+1)^0,w,c
  4434   001130  A4D8               	btfss	status,2,c
  4435   001132  D006               	goto	l4332
  4436   001134  5007               	movf	usePeripheral@action^0,w,c
  4437   001136  1008               	iorwf	(usePeripheral@action+1)^0,w,c
  4438   001138  A4D8               	btfss	status,2,c
  4439   00113A  D002               	goto	l4332
  4440                           
  4441                           ;helper.c: 39:         LATC5 = off;
  4442   00113C  9A8B               	bcf	3979,5,c	;volatile
  4443                           
  4444                           ;helper.c: 40:     }else if(peripheral == buzzer && action == on){
  4445   00113E  0012               	return	
  4446   001140                     l4332:
  4447   001140  0E03               	movlw	3
  4448   001142  1805               	xorwf	usePeripheral@peripheral^0,w,c
  4449   001144  1006               	iorwf	(usePeripheral@peripheral+1)^0,w,c
  4450   001146  A4D8               	btfss	status,2,c
  4451   001148  D006               	goto	l4338
  4452   00114A  0407               	decf	usePeripheral@action^0,w,c
  4453   00114C  1008               	iorwf	(usePeripheral@action+1)^0,w,c
  4454   00114E  A4D8               	btfss	status,2,c
  4455   001150  D002               	goto	l4338
  4456                           
  4457                           ;helper.c: 41:         LATC4 = on;
  4458   001152  888B               	bsf	3979,4,c	;volatile
  4459                           
  4460                           ;helper.c: 42:     }else if(peripheral == buzzer && action == off){
  4461   001154  0012               	return	
  4462   001156                     l4338:
  4463   001156  0E03               	movlw	3
  4464   001158  1805               	xorwf	usePeripheral@peripheral^0,w,c
  4465   00115A  1006               	iorwf	(usePeripheral@peripheral+1)^0,w,c
  4466   00115C  A4D8               	btfss	status,2,c
  4467   00115E  0012               	return	
  4468   001160  5007               	movf	usePeripheral@action^0,w,c
  4469   001162  1008               	iorwf	(usePeripheral@action+1)^0,w,c
  4470   001164  A4D8               	btfss	status,2,c
  4471   001166  0012               	return	
  4472                           
  4473                           ;helper.c: 43:         LATC4 = off;
  4474   001168  988B               	bcf	3979,4,c	;volatile
  4475   00116A  0012               	return	
  4476   00116C                     __end_of_usePeripheral:
  4477                           	callstack 0
  4478                           
  4479 ;; *************** function _start_process_screen *****************
  4480 ;; Defined at:
  4481 ;;		line 101 in file "helper.c"
  4482 ;; Parameters:    Size  Location     Type
  4483 ;;  word            2   14[COMRAM] PTR unsigned char 
  4484 ;;		 -> STR_30(9), STR_28(8), STR_26(8), 
  4485 ;; Auto vars:     Size  Location     Type
  4486 ;;		None
  4487 ;; Return value:  Size  Location     Type
  4488 ;;                  1    wreg      void 
  4489 ;; Registers used:
  4490 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4491 ;; Tracked objects:
  4492 ;;		On entry : 3F/0
  4493 ;;		On exit  : 0/0
  4494 ;;		Unchanged: 0/0
  4495 ;; Data sizes:     COMRAM   BANK0   BANK1
  4496 ;;      Params:         2       0       0
  4497 ;;      Locals:         0       0       0
  4498 ;;      Temps:          0       0       0
  4499 ;;      Totals:         2       0       0
  4500 ;;Total ram usage:        2 bytes
  4501 ;; Hardware stack levels used: 1
  4502 ;; Hardware stack levels required when called: 5
  4503 ;; This function calls:
  4504 ;;		_Lcd_Clear
  4505 ;;		_Lcd_Set_Cursor
  4506 ;;		_Lcd_Write_String
  4507 ;; This function is called by:
  4508 ;;		_handle_actuator_push
  4509 ;; This function uses a non-reentrant model
  4510 ;;
  4511                           
  4512                           	psect	text22
  4513   0015EE                     __ptext22:
  4514                           	callstack 0
  4515   0015EE                     _start_process_screen:
  4516                           	callstack 22
  4517                           
  4518                           ; BSR set to: 0
  4519                           ;helper.c: 103:     Lcd_Clear();
  4520                           
  4521                           ;incstack = 0
  4522   0015EE  ECA7  F00E         	call	_Lcd_Clear	;wreg free
  4523                           
  4524                           ;helper.c: 104:     Lcd_Set_Cursor(position_row_1, position_column_1);
  4525   0015F2  0E01               	movlw	1
  4526   0015F4  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  4527   0015F6  0E01               	movlw	1
  4528   0015F8  EC5B  F009         	call	_Lcd_Set_Cursor
  4529                           
  4530                           ;helper.c: 105:     Lcd_Write_String("DO YOU WANT TO");
  4531   0015FC  0E23               	movlw	low STR_9
  4532   0015FE  6E09               	movwf	Lcd_Write_String@a^0,c
  4533   001600  0E1F               	movlw	high STR_9
  4534   001602  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  4535   001604  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  4536                           
  4537                           ;helper.c: 106:     Lcd_Set_Cursor( position_row_2,position_column_1);
  4538   001608  0E01               	movlw	1
  4539   00160A  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  4540   00160C  0E02               	movlw	2
  4541   00160E  EC5B  F009         	call	_Lcd_Set_Cursor
  4542                           
  4543                           ;helper.c: 107:     Lcd_Write_String("START ");
  4544   001612  0EC2               	movlw	low STR_16
  4545   001614  6E09               	movwf	Lcd_Write_String@a^0,c
  4546   001616  0E1F               	movlw	high STR_16
  4547   001618  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  4548   00161A  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  4549                           
  4550                           ;helper.c: 108:     Lcd_Write_String(word);
  4551   00161E  C00F  F009         	movff	start_process_screen@word,Lcd_Write_String@a
  4552   001622  C010  F00A         	movff	start_process_screen@word+1,Lcd_Write_String@a+1
  4553   001626  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  4554                           
  4555                           ;helper.c: 109:     Lcd_Set_Cursor( position_row_3,position_column_1);
  4556   00162A  0E01               	movlw	1
  4557   00162C  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  4558   00162E  0E03               	movlw	3
  4559   001630  EC5B  F009         	call	_Lcd_Set_Cursor
  4560                           
  4561                           ;helper.c: 110:     Lcd_Write_String("1. YES");
  4562   001634  0ED0               	movlw	low STR_12
  4563   001636  6E09               	movwf	Lcd_Write_String@a^0,c
  4564   001638  0E1F               	movlw	high STR_12
  4565   00163A  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  4566   00163C  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  4567                           
  4568                           ;helper.c: 111:     Lcd_Set_Cursor(position_row_4, position_column_1);
  4569   001640  0E01               	movlw	1
  4570   001642  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  4571   001644  0E04               	movlw	4
  4572   001646  EC5B  F009         	call	_Lcd_Set_Cursor
  4573                           
  4574                           ;helper.c: 112:     Lcd_Write_String("2. NO");
  4575   00164A  0ED7               	movlw	low STR_13
  4576   00164C  6E09               	movwf	Lcd_Write_String@a^0,c
  4577   00164E  0E1F               	movlw	high STR_13
  4578   001650  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  4579   001652  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  4580                           
  4581                           ;helper.c: 113:     Lcd_Set_Cursor(position_row_4,position_column_17 );
  4582   001656  0E11               	movlw	17
  4583   001658  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  4584   00165A  0E04               	movlw	4
  4585   00165C  EC5B  F009         	call	_Lcd_Set_Cursor
  4586                           
  4587                           ;helper.c: 114:     Lcd_Write_String("BACK");
  4588   001660  0EE7               	movlw	low STR_5
  4589   001662  6E09               	movwf	Lcd_Write_String@a^0,c
  4590   001664  0E1F               	movlw	high STR_5
  4591   001666  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  4592   001668  EC75  F00B         	call	_Lcd_Write_String	;wreg free
  4593   00166C  0012               	return		;funcret
  4594   00166E                     __end_of_start_process_screen:
  4595                           	callstack 0
  4596                           
  4597 ;; *************** function _Lcd_Write_String *****************
  4598 ;; Defined at:
  4599 ;;		line 123 in file "lcd.c"
  4600 ;; Parameters:    Size  Location     Type
  4601 ;;  a               2    8[COMRAM] PTR unsigned char 
  4602 ;;		 -> STR_43(3), STR_42(3), STR_41(2), STR_40(7), 
  4603 ;;		 -> STR_39(19), STR_37(4), STR_35(5), STR_33(5), 
  4604 ;;		 -> infusion@buff(5), STR_31(7), STR_30(9), STR_29(11), 
  4605 ;;		 -> STR_28(8), STR_27(11), STR_26(8), input_numbers@outputBuffer(2), 
  4606 ;;		 -> STR_25(5), STR_24(17), STR_23(21), STR_22(9), 
  4607 ;;		 -> STR_21(21), STR_20(14), STR_19(5), STR_18(6), 
  4608 ;;		 -> STR_17(7), STR_16(7), STR_15(15), STR_14(5), 
  4609 ;;		 -> STR_13(6), STR_12(7), STR_11(12), STR_10(11), 
  4610 ;;		 -> STR_9(15), STR_8(8), STR_7(10), STR_6(15), 
  4611 ;;		 -> STR_5(5), STR_4(3), STR_3(2), STR_2(12), 
  4612 ;;		 -> STR_1(7), 
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;  i               2   12[COMRAM] int 
  4615 ;; Return value:  Size  Location     Type
  4616 ;;                  1    wreg      void 
  4617 ;; Registers used:
  4618 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4619 ;; Tracked objects:
  4620 ;;		On entry : 0/0
  4621 ;;		On exit  : 0/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMRAM   BANK0   BANK1
  4624 ;;      Params:         2       0       0
  4625 ;;      Locals:         2       0       0
  4626 ;;      Temps:          2       0       0
  4627 ;;      Totals:         6       0       0
  4628 ;;Total ram usage:        6 bytes
  4629 ;; Hardware stack levels used: 1
  4630 ;; Hardware stack levels required when called: 4
  4631 ;; This function calls:
  4632 ;;		_Lcd_Write_Char
  4633 ;; This function is called by:
  4634 ;;		_input_value
  4635 ;;		_start_process_screen
  4636 ;;		_menu
  4637 ;;		_manual
  4638 ;;		_input_numbers
  4639 ;;		_handle_actuator_push
  4640 ;;		_infusion
  4641 ;; This function uses a non-reentrant model
  4642 ;;
  4643                           
  4644                           	psect	text23
  4645   0016EA                     __ptext23:
  4646                           	callstack 0
  4647   0016EA                     _Lcd_Write_String:
  4648                           	callstack 25
  4649                           
  4650                           ;lcd.c: 123: void Lcd_Write_String(char *a);lcd.c: 124: {;lcd.c: 125:  int i;;lcd.c: 126
      +                          :  for(i=0;a[i]!='\0';i++)
  4651                           
  4652                           ;incstack = 0
  4653   0016EA  0E00               	movlw	0
  4654   0016EC  6E0E               	movwf	(Lcd_Write_String@i+1)^0,c
  4655   0016EE  0E00               	movlw	0
  4656   0016F0  6E0D               	movwf	Lcd_Write_String@i^0,c
  4657   0016F2  D01A               	goto	l4094
  4658   0016F4                     l4090:
  4659                           
  4660                           ;lcd.c: 127:     Lcd_Write_Char(a[i]);
  4661   0016F4  500D               	movf	Lcd_Write_String@i^0,w,c
  4662   0016F6  2409               	addwf	Lcd_Write_String@a^0,w,c
  4663   0016F8  6E0B               	movwf	??_Lcd_Write_String^0,c
  4664   0016FA  500E               	movf	(Lcd_Write_String@i+1)^0,w,c
  4665   0016FC  200A               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  4666   0016FE  6E0C               	movwf	(??_Lcd_Write_String+1)^0,c
  4667   001700  C00B  FFF6         	movff	??_Lcd_Write_String,tblptrl
  4668   001704  C00C  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  4669   001708  6AF8               	clrf	tblptru,c
  4670   00170A  0E01               	movlw	(high __ramtop+-1)
  4671   00170C  64F7               	cpfsgt	tblptrh,c
  4672   00170E  D003               	bra	u3927
  4673   001710  0008               	tblrd		*
  4674   001712  50F5               	movf	tablat,w,c
  4675   001714  D005               	bra	u3920
  4676   001716                     u3927:
  4677   001716  CFF6 FFE1          	movff	tblptrl,fsr1l
  4678   00171A  CFF7 FFE2          	movff	tblptrh,fsr1h
  4679   00171E  50E7               	movf	indf1,w,c
  4680   001720                     u3920:
  4681   001720  EC93  F00D         	call	_Lcd_Write_Char
  4682   001724  4A0D               	infsnz	Lcd_Write_String@i^0,f,c
  4683   001726  2A0E               	incf	(Lcd_Write_String@i+1)^0,f,c
  4684   001728                     l4094:
  4685   001728  500D               	movf	Lcd_Write_String@i^0,w,c
  4686   00172A  2409               	addwf	Lcd_Write_String@a^0,w,c
  4687   00172C  6E0B               	movwf	??_Lcd_Write_String^0,c
  4688   00172E  500E               	movf	(Lcd_Write_String@i+1)^0,w,c
  4689   001730  200A               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  4690   001732  6E0C               	movwf	(??_Lcd_Write_String+1)^0,c
  4691   001734  C00B  FFF6         	movff	??_Lcd_Write_String,tblptrl
  4692   001738  C00C  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  4693   00173C  6AF8               	clrf	tblptru,c
  4694   00173E  0E01               	movlw	(high __ramtop+-1)
  4695   001740  64F7               	cpfsgt	tblptrh,c
  4696   001742  D003               	bra	u3937
  4697   001744  0008               	tblrd		*
  4698   001746  50F5               	movf	tablat,w,c
  4699   001748  D005               	bra	u3930
  4700   00174A                     u3937:
  4701   00174A  CFF6 FFE1          	movff	tblptrl,fsr1l
  4702   00174E  CFF7 FFE2          	movff	tblptrh,fsr1h
  4703   001752  50E7               	movf	indf1,w,c
  4704   001754                     u3930:
  4705   001754  0900               	iorlw	0
  4706   001756  B4D8               	btfsc	status,2,c
  4707   001758  0012               	return	
  4708   00175A  D7CC               	goto	l4090
  4709   00175C                     __end_of_Lcd_Write_String:
  4710                           	callstack 0
  4711                           
  4712 ;; *************** function _Lcd_Write_Char *****************
  4713 ;; Defined at:
  4714 ;;		line 107 in file "lcd.c"
  4715 ;; Parameters:    Size  Location     Type
  4716 ;;  a               1    wreg     unsigned char 
  4717 ;; Auto vars:     Size  Location     Type
  4718 ;;  a               1    7[COMRAM] unsigned char 
  4719 ;;  y               1    6[COMRAM] unsigned char 
  4720 ;;  temp            1    5[COMRAM] unsigned char 
  4721 ;; Return value:  Size  Location     Type
  4722 ;;                  1    wreg      void 
  4723 ;; Registers used:
  4724 ;;		wreg, status,2, status,0, cstack
  4725 ;; Tracked objects:
  4726 ;;		On entry : 0/0
  4727 ;;		On exit  : 0/0
  4728 ;;		Unchanged: 0/0
  4729 ;; Data sizes:     COMRAM   BANK0   BANK1
  4730 ;;      Params:         0       0       0
  4731 ;;      Locals:         3       0       0
  4732 ;;      Temps:          0       0       0
  4733 ;;      Totals:         3       0       0
  4734 ;;Total ram usage:        3 bytes
  4735 ;; Hardware stack levels used: 1
  4736 ;; Hardware stack levels required when called: 3
  4737 ;; This function calls:
  4738 ;;		_Lcd_Port
  4739 ;; This function is called by:
  4740 ;;		_Lcd_Write_String
  4741 ;; This function uses a non-reentrant model
  4742 ;;
  4743                           
  4744                           	psect	text24
  4745   001B26                     __ptext24:
  4746                           	callstack 0
  4747   001B26                     _Lcd_Write_Char:
  4748                           	callstack 25
  4749                           
  4750                           ;incstack = 0
  4751                           ;Lcd_Write_Char@a stored from wreg
  4752   001B26  6E08               	movwf	Lcd_Write_Char@a^0,c
  4753                           
  4754                           ;lcd.c: 107: void Lcd_Write_Char(char a);lcd.c: 108: {;lcd.c: 109:    char temp,y;;lcd.c
      +                          : 110:    temp = a&0x0F;
  4755   001B28  5008               	movf	Lcd_Write_Char@a^0,w,c
  4756   001B2A  0B0F               	andlw	15
  4757   001B2C  6E06               	movwf	Lcd_Write_Char@temp^0,c
  4758                           
  4759                           ;lcd.c: 111:    y = a&0xF0;
  4760   001B2E  5008               	movf	Lcd_Write_Char@a^0,w,c
  4761   001B30  0BF0               	andlw	240
  4762   001B32  6E07               	movwf	Lcd_Write_Char@y^0,c
  4763                           
  4764                           ;lcd.c: 112:    RD2 = 1;
  4765   001B34  8483               	bsf	3971,2,c	;volatile
  4766                           
  4767                           ;lcd.c: 113:    Lcd_Port(y>>4);
  4768   001B36  3807               	swapf	Lcd_Write_Char@y^0,w,c
  4769   001B38  0B0F               	andlw	15
  4770   001B3A  ECE6  F00D         	call	_Lcd_Port
  4771                           
  4772                           ;lcd.c: 114:    RD3 = 1;
  4773   001B3E  8683               	bsf	3971,3,c	;volatile
  4774                           
  4775                           ;lcd.c: 115:    _delay((unsigned long)((40)*(8000000L/4000000.0)));
  4776   001B40  0E1A               	movlw	26
  4777   001B42                     u4897:
  4778   001B42  2EE8               	decfsz	wreg,f,c
  4779   001B44  D7FE               	bra	u4897
  4780   001B46  D000               	nop2	
  4781                           
  4782                           ;lcd.c: 116:    RD3 = 0;
  4783   001B48  9683               	bcf	3971,3,c	;volatile
  4784                           
  4785                           ;lcd.c: 117:    Lcd_Port(temp);
  4786   001B4A  5006               	movf	Lcd_Write_Char@temp^0,w,c
  4787   001B4C  ECE6  F00D         	call	_Lcd_Port
  4788                           
  4789                           ;lcd.c: 118:    RD3 = 1;
  4790   001B50  8683               	bsf	3971,3,c	;volatile
  4791                           
  4792                           ;lcd.c: 119:    _delay((unsigned long)((40)*(8000000L/4000000.0)));
  4793   001B52  0E1A               	movlw	26
  4794   001B54                     u4907:
  4795   001B54  2EE8               	decfsz	wreg,f,c
  4796   001B56  D7FE               	bra	u4907
  4797   001B58  D000               	nop2	
  4798                           
  4799                           ;lcd.c: 120:    RD3 = 0;
  4800   001B5A  9683               	bcf	3971,3,c	;volatile
  4801   001B5C  0012               	return		;funcret
  4802   001B5E                     __end_of_Lcd_Write_Char:
  4803                           	callstack 0
  4804                           
  4805 ;; *************** function _Lcd_Set_Cursor *****************
  4806 ;; Defined at:
  4807 ;;		line 52 in file "lcd.c"
  4808 ;; Parameters:    Size  Location     Type
  4809 ;;  a               1    wreg     unsigned char 
  4810 ;;  b               1    7[COMRAM] unsigned char 
  4811 ;; Auto vars:     Size  Location     Type
  4812 ;;  a               1    8[COMRAM] unsigned char 
  4813 ;;  temp            1   11[COMRAM] unsigned char 
  4814 ;;  y               1   10[COMRAM] unsigned char 
  4815 ;;  z               1    9[COMRAM] unsigned char 
  4816 ;; Return value:  Size  Location     Type
  4817 ;;                  1    wreg      void 
  4818 ;; Registers used:
  4819 ;;		wreg, status,2, status,0, cstack
  4820 ;; Tracked objects:
  4821 ;;		On entry : 0/0
  4822 ;;		On exit  : 0/0
  4823 ;;		Unchanged: 0/0
  4824 ;; Data sizes:     COMRAM   BANK0   BANK1
  4825 ;;      Params:         1       0       0
  4826 ;;      Locals:         4       0       0
  4827 ;;      Temps:          0       0       0
  4828 ;;      Totals:         5       0       0
  4829 ;;Total ram usage:        5 bytes
  4830 ;; Hardware stack levels used: 1
  4831 ;; Hardware stack levels required when called: 4
  4832 ;; This function calls:
  4833 ;;		_Lcd_Cmd
  4834 ;; This function is called by:
  4835 ;;		_input_value
  4836 ;;		_start_process_screen
  4837 ;;		_menu
  4838 ;;		_manual
  4839 ;;		_input_numbers
  4840 ;;		_handle_actuator_push
  4841 ;;		_infusion
  4842 ;; This function uses a non-reentrant model
  4843 ;;
  4844                           
  4845                           	psect	text25
  4846   0012B6                     __ptext25:
  4847                           	callstack 0
  4848   0012B6                     _Lcd_Set_Cursor:
  4849                           	callstack 25
  4850                           
  4851                           ;incstack = 0
  4852                           ;Lcd_Set_Cursor@a stored from wreg
  4853   0012B6  6E09               	movwf	Lcd_Set_Cursor@a^0,c
  4854                           
  4855                           ;lcd.c: 52: void Lcd_Set_Cursor(char a, char b);lcd.c: 53: {;lcd.c: 54:  char temp,z,y;;
      +                          lcd.c: 55:  if(a == 1)
  4856   0012B8  0409               	decf	Lcd_Set_Cursor@a^0,w,c
  4857   0012BA  A4D8               	btfss	status,2,c
  4858   0012BC  D010               	goto	l4064
  4859                           
  4860                           ;lcd.c: 56:  {;lcd.c: 57:    temp = 0x80 + b - 1;
  4861   0012BE  5008               	movf	Lcd_Set_Cursor@b^0,w,c
  4862   0012C0  0F7F               	addlw	127
  4863   0012C2  6E0C               	movwf	Lcd_Set_Cursor@temp^0,c
  4864                           
  4865                           ;lcd.c: 58:   z = temp>>4;
  4866   0012C4  380C               	swapf	Lcd_Set_Cursor@temp^0,w,c
  4867   0012C6  0B0F               	andlw	15
  4868   0012C8  6E0A               	movwf	Lcd_Set_Cursor@z^0,c
  4869                           
  4870                           ;lcd.c: 59:   y = temp & 0x0F;
  4871   0012CA  500C               	movf	Lcd_Set_Cursor@temp^0,w,c
  4872   0012CC  0B0F               	andlw	15
  4873   0012CE  6E0B               	movwf	Lcd_Set_Cursor@y^0,c
  4874                           
  4875                           ;lcd.c: 60:   Lcd_Cmd(z);
  4876   0012D0  500A               	movf	Lcd_Set_Cursor@z^0,w,c
  4877   0012D2  EC49  F00E         	call	_Lcd_Cmd
  4878                           
  4879                           ;lcd.c: 61:   Lcd_Cmd(y);
  4880   0012D6  500B               	movf	Lcd_Set_Cursor@y^0,w,c
  4881   0012D8  EC49  F00E         	call	_Lcd_Cmd
  4882                           
  4883                           ;lcd.c: 62:  }
  4884   0012DC  0012               	return	
  4885   0012DE                     l4064:
  4886   0012DE  0E02               	movlw	2
  4887   0012E0  1809               	xorwf	Lcd_Set_Cursor@a^0,w,c
  4888   0012E2  A4D8               	btfss	status,2,c
  4889   0012E4  D010               	goto	l4072
  4890                           
  4891                           ;lcd.c: 64:  {;lcd.c: 65:   temp = 0xC0 + b - 1;
  4892   0012E6  5008               	movf	Lcd_Set_Cursor@b^0,w,c
  4893   0012E8  0FBF               	addlw	191
  4894   0012EA  6E0C               	movwf	Lcd_Set_Cursor@temp^0,c
  4895                           
  4896                           ;lcd.c: 66:   z = temp>>4;
  4897   0012EC  380C               	swapf	Lcd_Set_Cursor@temp^0,w,c
  4898   0012EE  0B0F               	andlw	15
  4899   0012F0  6E0A               	movwf	Lcd_Set_Cursor@z^0,c
  4900                           
  4901                           ;lcd.c: 67:   y = temp & 0x0F;
  4902   0012F2  500C               	movf	Lcd_Set_Cursor@temp^0,w,c
  4903   0012F4  0B0F               	andlw	15
  4904   0012F6  6E0B               	movwf	Lcd_Set_Cursor@y^0,c
  4905                           
  4906                           ;lcd.c: 68:   Lcd_Cmd(z);
  4907   0012F8  500A               	movf	Lcd_Set_Cursor@z^0,w,c
  4908   0012FA  EC49  F00E         	call	_Lcd_Cmd
  4909                           
  4910                           ;lcd.c: 69:   Lcd_Cmd(y);
  4911   0012FE  500B               	movf	Lcd_Set_Cursor@y^0,w,c
  4912   001300  EC49  F00E         	call	_Lcd_Cmd
  4913                           
  4914                           ;lcd.c: 70:  }else if(a == 3)
  4915   001304  0012               	return	
  4916   001306                     l4072:
  4917   001306  0E03               	movlw	3
  4918   001308  1809               	xorwf	Lcd_Set_Cursor@a^0,w,c
  4919   00130A  A4D8               	btfss	status,2,c
  4920   00130C  D010               	goto	l4080
  4921                           
  4922                           ;lcd.c: 71:  {;lcd.c: 72:   temp = 0x94 + b - 1;
  4923   00130E  5008               	movf	Lcd_Set_Cursor@b^0,w,c
  4924   001310  0F93               	addlw	147
  4925   001312  6E0C               	movwf	Lcd_Set_Cursor@temp^0,c
  4926                           
  4927                           ;lcd.c: 73:   z = temp>>4;
  4928   001314  380C               	swapf	Lcd_Set_Cursor@temp^0,w,c
  4929   001316  0B0F               	andlw	15
  4930   001318  6E0A               	movwf	Lcd_Set_Cursor@z^0,c
  4931                           
  4932                           ;lcd.c: 74:   y = temp & 0x0F;
  4933   00131A  500C               	movf	Lcd_Set_Cursor@temp^0,w,c
  4934   00131C  0B0F               	andlw	15
  4935   00131E  6E0B               	movwf	Lcd_Set_Cursor@y^0,c
  4936                           
  4937                           ;lcd.c: 75:   Lcd_Cmd(z);
  4938   001320  500A               	movf	Lcd_Set_Cursor@z^0,w,c
  4939   001322  EC49  F00E         	call	_Lcd_Cmd
  4940                           
  4941                           ;lcd.c: 76:   Lcd_Cmd(y);
  4942   001326  500B               	movf	Lcd_Set_Cursor@y^0,w,c
  4943   001328  EC49  F00E         	call	_Lcd_Cmd
  4944                           
  4945                           ;lcd.c: 77:  }
  4946   00132C  0012               	return	
  4947   00132E                     l4080:
  4948   00132E  0E04               	movlw	4
  4949   001330  1809               	xorwf	Lcd_Set_Cursor@a^0,w,c
  4950   001332  A4D8               	btfss	status,2,c
  4951   001334  0012               	return	
  4952                           
  4953                           ;lcd.c: 79:  {;lcd.c: 80:   temp = 0xD4 + b - 1;
  4954   001336  5008               	movf	Lcd_Set_Cursor@b^0,w,c
  4955   001338  0FD3               	addlw	211
  4956   00133A  6E0C               	movwf	Lcd_Set_Cursor@temp^0,c
  4957                           
  4958                           ;lcd.c: 81:   z = temp>>4;
  4959   00133C  380C               	swapf	Lcd_Set_Cursor@temp^0,w,c
  4960   00133E  0B0F               	andlw	15
  4961   001340  6E0A               	movwf	Lcd_Set_Cursor@z^0,c
  4962                           
  4963                           ;lcd.c: 82:   y = temp & 0x0F;
  4964   001342  500C               	movf	Lcd_Set_Cursor@temp^0,w,c
  4965   001344  0B0F               	andlw	15
  4966   001346  6E0B               	movwf	Lcd_Set_Cursor@y^0,c
  4967                           
  4968                           ;lcd.c: 83:   Lcd_Cmd(z);
  4969   001348  500A               	movf	Lcd_Set_Cursor@z^0,w,c
  4970   00134A  EC49  F00E         	call	_Lcd_Cmd
  4971                           
  4972                           ;lcd.c: 84:   Lcd_Cmd(y);
  4973   00134E  500B               	movf	Lcd_Set_Cursor@y^0,w,c
  4974   001350  EC49  F00E         	call	_Lcd_Cmd
  4975   001354  0012               	return	
  4976   001356                     __end_of_Lcd_Set_Cursor:
  4977                           	callstack 0
  4978                           
  4979 ;; *************** function _Lcd_Clear *****************
  4980 ;; Defined at:
  4981 ;;		line 46 in file "lcd.c"
  4982 ;; Parameters:    Size  Location     Type
  4983 ;;		None
  4984 ;; Auto vars:     Size  Location     Type
  4985 ;;		None
  4986 ;; Return value:  Size  Location     Type
  4987 ;;                  1    wreg      void 
  4988 ;; Registers used:
  4989 ;;		wreg, status,2, cstack
  4990 ;; Tracked objects:
  4991 ;;		On entry : 0/0
  4992 ;;		On exit  : 0/0
  4993 ;;		Unchanged: 0/0
  4994 ;; Data sizes:     COMRAM   BANK0   BANK1
  4995 ;;      Params:         0       0       0
  4996 ;;      Locals:         0       0       0
  4997 ;;      Temps:          0       0       0
  4998 ;;      Totals:         0       0       0
  4999 ;;Total ram usage:        0 bytes
  5000 ;; Hardware stack levels used: 1
  5001 ;; Hardware stack levels required when called: 4
  5002 ;; This function calls:
  5003 ;;		_Lcd_Cmd
  5004 ;; This function is called by:
  5005 ;;		_input_value
  5006 ;;		_start_process_screen
  5007 ;;		_menu
  5008 ;;		_manual
  5009 ;;		_handle_actuator_push
  5010 ;;		_infusion
  5011 ;; This function uses a non-reentrant model
  5012 ;;
  5013                           
  5014                           	psect	text26
  5015   001D4E                     __ptext26:
  5016                           	callstack 0
  5017   001D4E                     _Lcd_Clear:
  5018                           	callstack 25
  5019                           
  5020                           ;lcd.c: 48:  Lcd_Cmd(0);
  5021                           
  5022                           ;incstack = 0
  5023   001D4E  0E00               	movlw	0
  5024   001D50  EC49  F00E         	call	_Lcd_Cmd
  5025                           
  5026                           ;lcd.c: 49:  Lcd_Cmd(1);
  5027   001D54  0E01               	movlw	1
  5028   001D56  EC49  F00E         	call	_Lcd_Cmd
  5029   001D5A  0012               	return		;funcret
  5030   001D5C                     __end_of_Lcd_Clear:
  5031                           	callstack 0
  5032                           
  5033 ;; *************** function _Lcd_Cmd *****************
  5034 ;; Defined at:
  5035 ;;		line 37 in file "lcd.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;  a               1    wreg     unsigned char 
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;  a               1    6[COMRAM] unsigned char 
  5040 ;; Return value:  Size  Location     Type
  5041 ;;                  1    wreg      void 
  5042 ;; Registers used:
  5043 ;;		wreg, status,2, cstack
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 0/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMRAM   BANK0   BANK1
  5049 ;;      Params:         0       0       0
  5050 ;;      Locals:         1       0       0
  5051 ;;      Temps:          1       0       0
  5052 ;;      Totals:         2       0       0
  5053 ;;Total ram usage:        2 bytes
  5054 ;; Hardware stack levels used: 1
  5055 ;; Hardware stack levels required when called: 3
  5056 ;; This function calls:
  5057 ;;		_Lcd_Port
  5058 ;; This function is called by:
  5059 ;;		_Lcd_Clear
  5060 ;;		_Lcd_Set_Cursor
  5061 ;;		_Lcd_Init
  5062 ;; This function uses a non-reentrant model
  5063 ;;
  5064                           
  5065                           	psect	text27
  5066   001C92                     __ptext27:
  5067                           	callstack 0
  5068   001C92                     _Lcd_Cmd:
  5069                           	callstack 25
  5070                           
  5071                           ;incstack = 0
  5072                           ;Lcd_Cmd@a stored from wreg
  5073   001C92  6E07               	movwf	Lcd_Cmd@a^0,c
  5074                           
  5075                           ;lcd.c: 37: void Lcd_Cmd(char a);lcd.c: 38: {;lcd.c: 39:  RD2 = 0;
  5076   001C94  9483               	bcf	3971,2,c	;volatile
  5077                           
  5078                           ;lcd.c: 40:  Lcd_Port(a);
  5079   001C96  5007               	movf	Lcd_Cmd@a^0,w,c
  5080   001C98  ECE6  F00D         	call	_Lcd_Port
  5081                           
  5082                           ;lcd.c: 41:  RD3 = 1;
  5083   001C9C  8683               	bsf	3971,3,c	;volatile
  5084                           
  5085                           ;lcd.c: 42:         _delay((unsigned long)((4)*(8000000L/4000.0)));
  5086   001C9E  0E0B               	movlw	11
  5087   001CA0  6E06               	movwf	??_Lcd_Cmd^0,c
  5088   001CA2  0E62               	movlw	98
  5089   001CA4                     u4917:
  5090   001CA4  2EE8               	decfsz	wreg,f,c
  5091   001CA6  D7FE               	bra	u4917
  5092   001CA8  2E06               	decfsz	??_Lcd_Cmd^0,f,c
  5093   001CAA  D7FC               	bra	u4917
  5094   001CAC  D000               	nop2	
  5095                           
  5096                           ;lcd.c: 43:         RD3 = 0;
  5097   001CAE  9683               	bcf	3971,3,c	;volatile
  5098   001CB0  0012               	return		;funcret
  5099   001CB2                     __end_of_Lcd_Cmd:
  5100                           	callstack 0
  5101                           
  5102 ;; *************** function _Lcd_Port *****************
  5103 ;; Defined at:
  5104 ;;		line 15 in file "lcd.c"
  5105 ;; Parameters:    Size  Location     Type
  5106 ;;  a               1    wreg     unsigned char 
  5107 ;; Auto vars:     Size  Location     Type
  5108 ;;  a               1    4[COMRAM] unsigned char 
  5109 ;; Return value:  Size  Location     Type
  5110 ;;                  1    wreg      void 
  5111 ;; Registers used:
  5112 ;;		wreg
  5113 ;; Tracked objects:
  5114 ;;		On entry : 0/0
  5115 ;;		On exit  : 0/0
  5116 ;;		Unchanged: 0/0
  5117 ;; Data sizes:     COMRAM   BANK0   BANK1
  5118 ;;      Params:         0       0       0
  5119 ;;      Locals:         1       0       0
  5120 ;;      Temps:          0       0       0
  5121 ;;      Totals:         1       0       0
  5122 ;;Total ram usage:        1 bytes
  5123 ;; Hardware stack levels used: 1
  5124 ;; Hardware stack levels required when called: 2
  5125 ;; This function calls:
  5126 ;;		Nothing
  5127 ;; This function is called by:
  5128 ;;		_Lcd_Cmd
  5129 ;;		_Lcd_Init
  5130 ;;		_Lcd_Write_Char
  5131 ;; This function uses a non-reentrant model
  5132 ;;
  5133                           
  5134                           	psect	text28
  5135   001BCC                     __ptext28:
  5136                           	callstack 0
  5137   001BCC                     _Lcd_Port:
  5138                           	callstack 26
  5139                           
  5140                           ;incstack = 0
  5141                           ;Lcd_Port@a stored from wreg
  5142   001BCC  6E05               	movwf	Lcd_Port@a^0,c
  5143                           
  5144                           ;lcd.c: 15: void Lcd_Port(char a);lcd.c: 16: {;lcd.c: 17:  if(a & 1)
  5145   001BCE  A005               	btfss	Lcd_Port@a^0,0,c
  5146   001BD0  D002               	goto	l17
  5147                           
  5148                           ;lcd.c: 18:   RD4 = 1;
  5149   001BD2  8883               	bsf	3971,4,c	;volatile
  5150   001BD4  D001               	goto	l3812
  5151   001BD6                     l17:
  5152                           
  5153                           ;lcd.c: 20:   RD4 = 0;
  5154   001BD6  9883               	bcf	3971,4,c	;volatile
  5155   001BD8                     l3812:
  5156                           
  5157                           ;lcd.c: 22:  if(a & 2)
  5158   001BD8  A205               	btfss	Lcd_Port@a^0,1,c
  5159   001BDA  D002               	goto	l19
  5160                           
  5161                           ;lcd.c: 23:   RD5 = 1;
  5162   001BDC  8A83               	bsf	3971,5,c	;volatile
  5163   001BDE  D001               	goto	l3816
  5164   001BE0                     l19:
  5165                           
  5166                           ;lcd.c: 25:   RD5 = 0;
  5167   001BE0  9A83               	bcf	3971,5,c	;volatile
  5168   001BE2                     l3816:
  5169                           
  5170                           ;lcd.c: 27:  if(a & 4)
  5171   001BE2  A405               	btfss	Lcd_Port@a^0,2,c
  5172   001BE4  D002               	goto	l21
  5173                           
  5174                           ;lcd.c: 28:   RD6 = 1;
  5175   001BE6  8C83               	bsf	3971,6,c	;volatile
  5176   001BE8  D001               	goto	l3820
  5177   001BEA                     l21:
  5178                           
  5179                           ;lcd.c: 30:   RD6 = 0;
  5180   001BEA  9C83               	bcf	3971,6,c	;volatile
  5181   001BEC                     l3820:
  5182                           
  5183                           ;lcd.c: 32:  if(a & 8)
  5184   001BEC  A605               	btfss	Lcd_Port@a^0,3,c
  5185   001BEE  D002               	goto	l23
  5186                           
  5187                           ;lcd.c: 33:   RD7 = 1;
  5188   001BF0  8E83               	bsf	3971,7,c	;volatile
  5189   001BF2  0012               	return	
  5190   001BF4                     l23:
  5191                           
  5192                           ;lcd.c: 35:   RD7 = 0;
  5193   001BF4  9E83               	bcf	3971,7,c	;volatile
  5194   001BF6  0012               	return		;funcret
  5195   001BF8                     __end_of_Lcd_Port:
  5196                           	callstack 0
  5197                           
  5198 ;; *************** function _move_actuator *****************
  5199 ;; Defined at:
  5200 ;;		line 29 in file "actuator.c"
  5201 ;; Parameters:    Size  Location     Type
  5202 ;;  direction       2    8[COMRAM] int 
  5203 ;;  speed           2   10[COMRAM] unsigned short 
  5204 ;; Auto vars:     Size  Location     Type
  5205 ;;		None
  5206 ;; Return value:  Size  Location     Type
  5207 ;;                  1    wreg      void 
  5208 ;; Registers used:
  5209 ;;		wreg, status,2, status,0, cstack
  5210 ;; Tracked objects:
  5211 ;;		On entry : 0/0
  5212 ;;		On exit  : 0/0
  5213 ;;		Unchanged: 0/0
  5214 ;; Data sizes:     COMRAM   BANK0   BANK1
  5215 ;;      Params:         4       0       0
  5216 ;;      Locals:         0       0       0
  5217 ;;      Temps:          0       0       0
  5218 ;;      Totals:         4       0       0
  5219 ;;Total ram usage:        4 bytes
  5220 ;; Hardware stack levels used: 1
  5221 ;; Hardware stack levels required when called: 3
  5222 ;; This function calls:
  5223 ;;		_change_direction_motion
  5224 ;;		_set_pwm_duty
  5225 ;; This function is called by:
  5226 ;;		_handle_actuator_push
  5227 ;;		_infusion
  5228 ;; This function uses a non-reentrant model
  5229 ;;
  5230                           
  5231                           	psect	text29
  5232   001A0E                     __ptext29:
  5233                           	callstack 0
  5234   001A0E                     _move_actuator:
  5235                           	callstack 25
  5236                           
  5237                           ;actuator.c: 31:     if(speed > 0) {
  5238                           
  5239                           ;incstack = 0
  5240   001A0E  500B               	movf	move_actuator@speed^0,w,c
  5241   001A10  100C               	iorwf	(move_actuator@speed+1)^0,w,c
  5242   001A12  B4D8               	btfsc	status,2,c
  5243   001A14  D01D               	goto	l4286
  5244                           
  5245                           ;actuator.c: 32:         if(direction == forward){
  5246   001A16  0409               	decf	move_actuator@direction^0,w,c
  5247   001A18  100A               	iorwf	(move_actuator@direction+1)^0,w,c
  5248   001A1A  A4D8               	btfss	status,2,c
  5249   001A1C  D00B               	goto	l4282
  5250                           
  5251                           ;actuator.c: 33:             change_direction_motion(0,1);
  5252   001A1E  0E00               	movlw	0
  5253   001A20  6E06               	movwf	(change_direction_motion@hDriverIn1+1)^0,c
  5254   001A22  0E00               	movlw	0
  5255   001A24  6E05               	movwf	change_direction_motion@hDriverIn1^0,c
  5256   001A26  0E00               	movlw	0
  5257   001A28  6E08               	movwf	(change_direction_motion@hDriverIn2+1)^0,c
  5258   001A2A  0E01               	movlw	1
  5259   001A2C  6E07               	movwf	change_direction_motion@hDriverIn2^0,c
  5260   001A2E  EC80  F00E         	call	_change_direction_motion	;wreg free
  5261                           
  5262                           ;actuator.c: 34:         }else if(direction == backwards){
  5263   001A32  D00E               	goto	l4286
  5264   001A34                     l4282:
  5265   001A34  5009               	movf	move_actuator@direction^0,w,c
  5266   001A36  100A               	iorwf	(move_actuator@direction+1)^0,w,c
  5267   001A38  A4D8               	btfss	status,2,c
  5268   001A3A  D00A               	goto	l4286
  5269                           
  5270                           ;actuator.c: 35:             change_direction_motion(1,0);
  5271   001A3C  0E00               	movlw	0
  5272   001A3E  6E06               	movwf	(change_direction_motion@hDriverIn1+1)^0,c
  5273   001A40  0E01               	movlw	1
  5274   001A42  6E05               	movwf	change_direction_motion@hDriverIn1^0,c
  5275   001A44  0E00               	movlw	0
  5276   001A46  6E08               	movwf	(change_direction_motion@hDriverIn2+1)^0,c
  5277   001A48  0E00               	movlw	0
  5278   001A4A  6E07               	movwf	change_direction_motion@hDriverIn2^0,c
  5279   001A4C  EC80  F00E         	call	_change_direction_motion	;wreg free
  5280   001A50                     l4286:
  5281                           
  5282                           ;actuator.c: 38:     set_pwm_duty(speed);
  5283   001A50  C00B  F005         	movff	move_actuator@speed,set_pwm_duty@pwm_duty
  5284   001A54  C00C  F006         	movff	move_actuator@speed+1,set_pwm_duty@pwm_duty+1
  5285   001A58  EC37  F00E         	call	_set_pwm_duty	;wreg free
  5286   001A5C  0012               	return		;funcret
  5287   001A5E                     __end_of_move_actuator:
  5288                           	callstack 0
  5289                           
  5290 ;; *************** function _set_pwm_duty *****************
  5291 ;; Defined at:
  5292 ;;		line 18 in file "actuator.c"
  5293 ;; Parameters:    Size  Location     Type
  5294 ;;  pwm_duty        2    4[COMRAM] unsigned short 
  5295 ;; Auto vars:     Size  Location     Type
  5296 ;;		None
  5297 ;; Return value:  Size  Location     Type
  5298 ;;                  1    wreg      void 
  5299 ;; Registers used:
  5300 ;;		wreg, status,2, status,0
  5301 ;; Tracked objects:
  5302 ;;		On entry : 0/0
  5303 ;;		On exit  : 0/0
  5304 ;;		Unchanged: 0/0
  5305 ;; Data sizes:     COMRAM   BANK0   BANK1
  5306 ;;      Params:         2       0       0
  5307 ;;      Locals:         0       0       0
  5308 ;;      Temps:          2       0       0
  5309 ;;      Totals:         4       0       0
  5310 ;;Total ram usage:        4 bytes
  5311 ;; Hardware stack levels used: 1
  5312 ;; Hardware stack levels required when called: 2
  5313 ;; This function calls:
  5314 ;;		Nothing
  5315 ;; This function is called by:
  5316 ;;		_move_actuator
  5317 ;; This function uses a non-reentrant model
  5318 ;;
  5319                           
  5320                           	psect	text30
  5321   001C6E                     __ptext30:
  5322                           	callstack 0
  5323   001C6E                     _set_pwm_duty:
  5324                           	callstack 25
  5325                           
  5326                           ;actuator.c: 18: void set_pwm_duty(uint16_t pwm_duty);actuator.c: 19: {;actuator.c: 20: 
      +                            CCP1CON = ((pwm_duty << 4) & 0x30) | 0x0C;
  5327                           
  5328                           ;incstack = 0
  5329   001C6E  3805               	swapf	set_pwm_duty@pwm_duty^0,w,c
  5330   001C70  0BF0               	andlw	240
  5331   001C72  0B30               	andlw	48
  5332   001C74  090C               	iorlw	12
  5333   001C76  6EBD               	movwf	189,c	;volatile
  5334                           
  5335                           ;actuator.c: 21:   CCPR1L = pwm_duty>>2;
  5336   001C78  C005  F007         	movff	set_pwm_duty@pwm_duty,??_set_pwm_duty
  5337   001C7C  C006  F008         	movff	set_pwm_duty@pwm_duty+1,??_set_pwm_duty+1
  5338   001C80  90D8               	bcf	status,0,c
  5339   001C82  3208               	rrcf	(??_set_pwm_duty+1)^0,f,c
  5340   001C84  3207               	rrcf	??_set_pwm_duty^0,f,c
  5341   001C86  90D8               	bcf	status,0,c
  5342   001C88  3208               	rrcf	(??_set_pwm_duty+1)^0,f,c
  5343   001C8A  3207               	rrcf	??_set_pwm_duty^0,f,c
  5344   001C8C  5007               	movf	??_set_pwm_duty^0,w,c
  5345   001C8E  6EBE               	movwf	190,c	;volatile
  5346   001C90  0012               	return		;funcret
  5347   001C92                     __end_of_set_pwm_duty:
  5348                           	callstack 0
  5349                           
  5350 ;; *************** function _change_direction_motion *****************
  5351 ;; Defined at:
  5352 ;;		line 24 in file "actuator.c"
  5353 ;; Parameters:    Size  Location     Type
  5354 ;;  hDriverIn1      2    4[COMRAM] int 
  5355 ;;  hDriverIn2      2    6[COMRAM] int 
  5356 ;; Auto vars:     Size  Location     Type
  5357 ;;		None
  5358 ;; Return value:  Size  Location     Type
  5359 ;;                  1    wreg      void 
  5360 ;; Registers used:
  5361 ;;		None
  5362 ;; Tracked objects:
  5363 ;;		On entry : 0/0
  5364 ;;		On exit  : 0/0
  5365 ;;		Unchanged: 0/0
  5366 ;; Data sizes:     COMRAM   BANK0   BANK1
  5367 ;;      Params:         4       0       0
  5368 ;;      Locals:         0       0       0
  5369 ;;      Temps:          0       0       0
  5370 ;;      Totals:         4       0       0
  5371 ;;Total ram usage:        4 bytes
  5372 ;; Hardware stack levels used: 1
  5373 ;; Hardware stack levels required when called: 2
  5374 ;; This function calls:
  5375 ;;		Nothing
  5376 ;; This function is called by:
  5377 ;;		_move_actuator
  5378 ;; This function uses a non-reentrant model
  5379 ;;
  5380                           
  5381                           	psect	text31
  5382   001D00                     __ptext31:
  5383                           	callstack 0
  5384   001D00                     _change_direction_motion:
  5385                           	callstack 25
  5386                           
  5387                           ;actuator.c: 25:         RD1 = hDriverIn1;
  5388                           
  5389                           ;incstack = 0
  5390   001D00  A005               	btfss	change_direction_motion@hDriverIn1^0,0,c
  5391   001D02  D002               	goto	u3950
  5392   001D04  8283               	bsf	3971,1,c	;volatile
  5393   001D06  D001               	goto	u3965
  5394   001D08                     u3950:
  5395   001D08  9283               	bcf	3971,1,c	;volatile
  5396   001D0A                     u3965:
  5397                           
  5398                           ;actuator.c: 26:         RD0= hDriverIn2;
  5399   001D0A  A007               	btfss	change_direction_motion@hDriverIn2^0,0,c
  5400   001D0C  D002               	goto	u3970
  5401   001D0E  8083               	bsf	3971,0,c	;volatile
  5402   001D10  0012               	return	
  5403   001D12                     u3970:
  5404   001D12  9083               	bcf	3971,0,c	;volatile
  5405   001D14  0012               	return		;funcret
  5406   001D16                     __end_of_change_direction_motion:
  5407                           	callstack 0
  5408                           
  5409 ;; *************** function _input_option *****************
  5410 ;; Defined at:
  5411 ;;		line 190 in file "main.c"
  5412 ;; Parameters:    Size  Location     Type
  5413 ;;		None
  5414 ;; Auto vars:     Size  Location     Type
  5415 ;;  option          2   11[COMRAM] int 
  5416 ;;  userInput       1   13[COMRAM] unsigned char 
  5417 ;; Return value:  Size  Location     Type
  5418 ;;                  2    7[COMRAM] int 
  5419 ;; Registers used:
  5420 ;;		wreg, status,2, status,0, cstack
  5421 ;; Tracked objects:
  5422 ;;		On entry : 0/0
  5423 ;;		On exit  : 0/0
  5424 ;;		Unchanged: 0/0
  5425 ;; Data sizes:     COMRAM   BANK0   BANK1
  5426 ;;      Params:         2       0       0
  5427 ;;      Locals:         3       0       0
  5428 ;;      Temps:          2       0       0
  5429 ;;      Totals:         7       0       0
  5430 ;;Total ram usage:        7 bytes
  5431 ;; Hardware stack levels used: 1
  5432 ;; Hardware stack levels required when called: 4
  5433 ;; This function calls:
  5434 ;;		_switch_press_scan
  5435 ;; This function is called by:
  5436 ;;		_handle_actuator_push
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           	psect	text32
  5441   001356                     __ptext32:
  5442                           	callstack 0
  5443   001356                     _input_option:
  5444                           	callstack 23
  5445                           
  5446                           ;main.c: 191:     char userInput = 'n';
  5447                           
  5448                           ;incstack = 0
  5449   001356  0E6E               	movlw	110
  5450   001358  6E0E               	movwf	input_option@userInput^0,c
  5451                           
  5452                           ;main.c: 192:     int option;;main.c: 194:     while(userInput == 'n'){
  5453   00135A  D03C               	goto	l4392
  5454   00135C                     l4370:
  5455                           
  5456                           ;main.c: 195:         userInput = switch_press_scan();
  5457   00135C  EC8B  F00E         	call	_switch_press_scan	;wreg free
  5458   001360  6E0E               	movwf	input_option@userInput^0,c
  5459                           
  5460                           ;main.c: 196:         if(userInput == '1'){
  5461   001362  0E31               	movlw	49
  5462   001364  180E               	xorwf	input_option@userInput^0,w,c
  5463   001366  A4D8               	btfss	status,2,c
  5464   001368  D00F               	goto	l4378
  5465                           
  5466                           ;main.c: 197:             _delay((unsigned long)((1000)*(8000000L/4000.0)));
  5467   00136A  0E0B               	movlw	11
  5468   00136C  6E0B               	movwf	(??_input_option+1)^0,c
  5469   00136E  0E26               	movlw	38
  5470   001370  6E0A               	movwf	??_input_option^0,c
  5471   001372  0E5E               	movlw	94
  5472   001374                     u4927:
  5473   001374  2EE8               	decfsz	wreg,f,c
  5474   001376  D7FE               	bra	u4927
  5475   001378  2E0A               	decfsz	??_input_option^0,f,c
  5476   00137A  D7FC               	bra	u4927
  5477   00137C  2E0B               	decfsz	(??_input_option+1)^0,f,c
  5478   00137E  D7FA               	bra	u4927
  5479                           
  5480                           ;main.c: 198:             option = 1;
  5481   001380  0E00               	movlw	0
  5482   001382  6E0D               	movwf	(input_option@option+1)^0,c
  5483   001384  0E01               	movlw	1
  5484   001386  D025               	goto	L6
  5485   001388                     l4378:
  5486   001388  0E32               	movlw	50
  5487   00138A  180E               	xorwf	input_option@userInput^0,w,c
  5488   00138C  A4D8               	btfss	status,2,c
  5489   00138E  D00F               	goto	l4384
  5490                           
  5491                           ;main.c: 200:             _delay((unsigned long)((1000)*(8000000L/4000.0)));
  5492   001390  0E0B               	movlw	11
  5493   001392  6E0B               	movwf	(??_input_option+1)^0,c
  5494   001394  0E26               	movlw	38
  5495   001396  6E0A               	movwf	??_input_option^0,c
  5496   001398  0E5E               	movlw	94
  5497   00139A                     u4937:
  5498   00139A  2EE8               	decfsz	wreg,f,c
  5499   00139C  D7FE               	bra	u4937
  5500   00139E  2E0A               	decfsz	??_input_option^0,f,c
  5501   0013A0  D7FC               	bra	u4937
  5502   0013A2  2E0B               	decfsz	(??_input_option+1)^0,f,c
  5503   0013A4  D7FA               	bra	u4937
  5504                           
  5505                           ;main.c: 201:             option = 2;
  5506   0013A6  0E00               	movlw	0
  5507   0013A8  6E0D               	movwf	(input_option@option+1)^0,c
  5508   0013AA  0E02               	movlw	2
  5509   0013AC  D012               	goto	L6
  5510   0013AE                     l4384:
  5511   0013AE  0E62               	movlw	98
  5512   0013B0  180E               	xorwf	input_option@userInput^0,w,c
  5513   0013B2  A4D8               	btfss	status,2,c
  5514   0013B4  D7D0               	goto	__ptext32
  5515                           
  5516                           ;main.c: 203:             _delay((unsigned long)((1000)*(8000000L/4000.0)));
  5517   0013B6  0E0B               	movlw	11
  5518   0013B8  6E0B               	movwf	(??_input_option+1)^0,c
  5519   0013BA  0E26               	movlw	38
  5520   0013BC  6E0A               	movwf	??_input_option^0,c
  5521   0013BE  0E5E               	movlw	94
  5522   0013C0                     u4947:
  5523   0013C0  2EE8               	decfsz	wreg,f,c
  5524   0013C2  D7FE               	bra	u4947
  5525   0013C4  2E0A               	decfsz	??_input_option^0,f,c
  5526   0013C6  D7FC               	bra	u4947
  5527   0013C8  2E0B               	decfsz	(??_input_option+1)^0,f,c
  5528   0013CA  D7FA               	bra	u4947
  5529                           
  5530                           ;main.c: 204:             option = 'b';
  5531   0013CC  0E00               	movlw	0
  5532   0013CE  6E0D               	movwf	(input_option@option+1)^0,c
  5533   0013D0  0E62               	movlw	98
  5534   0013D2                     L6:
  5535   0013D2  6E0C               	movwf	input_option@option^0,c
  5536   0013D4                     l4392:
  5537                           
  5538                           ;main.c: 194:     while(userInput == 'n'){
  5539   0013D4  0E6E               	movlw	110
  5540   0013D6  180E               	xorwf	input_option@userInput^0,w,c
  5541   0013D8  B4D8               	btfsc	status,2,c
  5542   0013DA  D7C0               	goto	l4370
  5543                           
  5544                           ;main.c: 209:     return option;
  5545   0013DC  C00C  F008         	movff	input_option@option,?_input_option
  5546   0013E0  C00D  F009         	movff	input_option@option+1,?_input_option+1
  5547   0013E4  0012               	return		;funcret
  5548   0013E6                     __end_of_input_option:
  5549                           	callstack 0
  5550                           
  5551 ;; *************** function _switch_press_scan *****************
  5552 ;; Defined at:
  5553 ;;		line 31 in file "keypad.c"
  5554 ;; Parameters:    Size  Location     Type
  5555 ;;		None
  5556 ;; Auto vars:     Size  Location     Type
  5557 ;;  key             1    6[COMRAM] unsigned char 
  5558 ;; Return value:  Size  Location     Type
  5559 ;;                  1    wreg      unsigned char 
  5560 ;; Registers used:
  5561 ;;		wreg, status,2, status,0, cstack
  5562 ;; Tracked objects:
  5563 ;;		On entry : 0/0
  5564 ;;		On exit  : 0/0
  5565 ;;		Unchanged: 0/0
  5566 ;; Data sizes:     COMRAM   BANK0   BANK1
  5567 ;;      Params:         0       0       0
  5568 ;;      Locals:         1       0       0
  5569 ;;      Temps:          0       0       0
  5570 ;;      Totals:         1       0       0
  5571 ;;Total ram usage:        1 bytes
  5572 ;; Hardware stack levels used: 1
  5573 ;; Hardware stack levels required when called: 3
  5574 ;; This function calls:
  5575 ;;		_keypad_scanner
  5576 ;; This function is called by:
  5577 ;;		_input_numbers
  5578 ;;		_input_option
  5579 ;;		_main
  5580 ;; This function uses a non-reentrant model
  5581 ;;
  5582                           
  5583                           	psect	text33
  5584   001D16                     __ptext33:
  5585                           	callstack 0
  5586   001D16                     _switch_press_scan:
  5587                           	callstack 27
  5588                           
  5589                           ;keypad.c: 33:             char key = 'n';
  5590                           
  5591                           ;incstack = 0
  5592   001D16  0E6E               	movlw	110
  5593   001D18  D002               	goto	L7
  5594   001D1A                     l4102:
  5595                           
  5596                           ;keypad.c: 35:             key = keypad_scanner();
  5597   001D1A  EC21  F003         	call	_keypad_scanner	;wreg free
  5598   001D1E                     L7:
  5599   001D1E  6E07               	movwf	switch_press_scan@key^0,c
  5600                           
  5601                           ;keypad.c: 34:             while(key=='n')
  5602   001D20  0E6E               	movlw	110
  5603   001D22  1807               	xorwf	switch_press_scan@key^0,w,c
  5604   001D24  B4D8               	btfsc	status,2,c
  5605   001D26  D7F9               	goto	l4102
  5606                           
  5607                           ;keypad.c: 36:             return key;
  5608   001D28  5007               	movf	switch_press_scan@key^0,w,c
  5609   001D2A  0012               	return		;funcret
  5610   001D2C                     __end_of_switch_press_scan:
  5611                           	callstack 0
  5612                           
  5613 ;; *************** function _keypad_scanner *****************
  5614 ;; Defined at:
  5615 ;;		line 3 in file "keypad.c"
  5616 ;; Parameters:    Size  Location     Type
  5617 ;;		None
  5618 ;; Auto vars:     Size  Location     Type
  5619 ;;		None
  5620 ;; Return value:  Size  Location     Type
  5621 ;;                  1    wreg      unsigned char 
  5622 ;; Registers used:
  5623 ;;		wreg
  5624 ;; Tracked objects:
  5625 ;;		On entry : 0/0
  5626 ;;		On exit  : 0/0
  5627 ;;		Unchanged: 0/0
  5628 ;; Data sizes:     COMRAM   BANK0   BANK1
  5629 ;;      Params:         0       0       0
  5630 ;;      Locals:         0       0       0
  5631 ;;      Temps:          2       0       0
  5632 ;;      Totals:         2       0       0
  5633 ;;Total ram usage:        2 bytes
  5634 ;; Hardware stack levels used: 1
  5635 ;; Hardware stack levels required when called: 2
  5636 ;; This function calls:
  5637 ;;		Nothing
  5638 ;; This function is called by:
  5639 ;;		_switch_press_scan
  5640 ;; This function uses a non-reentrant model
  5641 ;;
  5642                           
  5643                           	psect	text34
  5644   000642                     __ptext34:
  5645                           	callstack 0
  5646   000642                     _keypad_scanner:
  5647                           	callstack 27
  5648                           
  5649                           ;keypad.c: 5:             RB0 = 0; RB1 = 1; RB2 = 1; RB3 = 1;
  5650                           
  5651                           ;incstack = 0
  5652   000642  9081               	bcf	3969,0,c	;volatile
  5653   000644  8281               	bsf	3969,1,c	;volatile
  5654   000646  8481               	bsf	3969,2,c	;volatile
  5655   000648  8681               	bsf	3969,3,c	;volatile
  5656                           
  5657                           ;keypad.c: 6:             if (RB4 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0)
      +                          )); while (RB4==0); return '7'; }
  5658   00064A  B881               	btfsc	3969,4,c	;volatile
  5659   00064C  D010               	goto	l251
  5660   00064E  0E02               	movlw	2
  5661   000650  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5662   000652  0E04               	movlw	4
  5663   000654  6E05               	movwf	??_keypad_scanner^0,c
  5664   000656  0EBA               	movlw	186
  5665   000658                     u4957:
  5666   000658  2EE8               	decfsz	wreg,f,c
  5667   00065A  D7FE               	bra	u4957
  5668   00065C  2E05               	decfsz	??_keypad_scanner^0,f,c
  5669   00065E  D7FC               	bra	u4957
  5670   000660  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5671   000662  D7FA               	bra	u4957
  5672   000664  D000               	nop2	
  5673   000666                     l252:
  5674   000666  A881               	btfss	3969,4,c	;volatile
  5675   000668  D7FE               	goto	l252
  5676   00066A  0E37               	movlw	55
  5677   00066C  0012               	return	
  5678   00066E                     l251:
  5679                           
  5680                           ;keypad.c: 7:             if (RC7 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0)
      +                          )); while (RC7==0); return '8'; }
  5681   00066E  BE82               	btfsc	3970,7,c	;volatile
  5682   000670  D010               	goto	l256
  5683   000672  0E02               	movlw	2
  5684   000674  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5685   000676  0E04               	movlw	4
  5686   000678  6E05               	movwf	??_keypad_scanner^0,c
  5687   00067A  0EBA               	movlw	186
  5688   00067C                     u4967:
  5689   00067C  2EE8               	decfsz	wreg,f,c
  5690   00067E  D7FE               	bra	u4967
  5691   000680  2E05               	decfsz	??_keypad_scanner^0,f,c
  5692   000682  D7FC               	bra	u4967
  5693   000684  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5694   000686  D7FA               	bra	u4967
  5695   000688  D000               	nop2	
  5696   00068A                     l257:
  5697   00068A  AE82               	btfss	3970,7,c	;volatile
  5698   00068C  D7FE               	goto	l257
  5699   00068E  0E38               	movlw	56
  5700   000690  0012               	return	
  5701   000692                     l256:
  5702                           
  5703                           ;keypad.c: 8:             if (RB6 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0)
      +                          )); while (RB6==0); return '9'; }
  5704   000692  BC81               	btfsc	3969,6,c	;volatile
  5705   000694  D010               	goto	l260
  5706   000696  0E02               	movlw	2
  5707   000698  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5708   00069A  0E04               	movlw	4
  5709   00069C  6E05               	movwf	??_keypad_scanner^0,c
  5710   00069E  0EBA               	movlw	186
  5711   0006A0                     u4977:
  5712   0006A0  2EE8               	decfsz	wreg,f,c
  5713   0006A2  D7FE               	bra	u4977
  5714   0006A4  2E05               	decfsz	??_keypad_scanner^0,f,c
  5715   0006A6  D7FC               	bra	u4977
  5716   0006A8  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5717   0006AA  D7FA               	bra	u4977
  5718   0006AC  D000               	nop2	
  5719   0006AE                     l261:
  5720   0006AE  AC81               	btfss	3969,6,c	;volatile
  5721   0006B0  D7FE               	goto	l261
  5722   0006B2  0E39               	movlw	57
  5723   0006B4  0012               	return	
  5724   0006B6                     l260:
  5725                           
  5726                           ;keypad.c: 9:             if (RB7 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0)
      +                          )); while (RB7==0); return 'u'; }
  5727   0006B6  BE81               	btfsc	3969,7,c	;volatile
  5728   0006B8  D010               	goto	l264
  5729   0006BA  0E02               	movlw	2
  5730   0006BC  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5731   0006BE  0E04               	movlw	4
  5732   0006C0  6E05               	movwf	??_keypad_scanner^0,c
  5733   0006C2  0EBA               	movlw	186
  5734   0006C4                     u4987:
  5735   0006C4  2EE8               	decfsz	wreg,f,c
  5736   0006C6  D7FE               	bra	u4987
  5737   0006C8  2E05               	decfsz	??_keypad_scanner^0,f,c
  5738   0006CA  D7FC               	bra	u4987
  5739   0006CC  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5740   0006CE  D7FA               	bra	u4987
  5741   0006D0  D000               	nop2	
  5742   0006D2                     l265:
  5743   0006D2  AE81               	btfss	3969,7,c	;volatile
  5744   0006D4  D7FE               	goto	l265
  5745   0006D6  0E75               	movlw	117
  5746   0006D8  0012               	return	
  5747   0006DA                     l264:
  5748                           
  5749                           ;keypad.c: 11:             RB0 = 1; RB1 = 0; RB2 = 1; RB3 = 1;
  5750   0006DA  8081               	bsf	3969,0,c	;volatile
  5751   0006DC  9281               	bcf	3969,1,c	;volatile
  5752   0006DE  8481               	bsf	3969,2,c	;volatile
  5753   0006E0  8681               	bsf	3969,3,c	;volatile
  5754                           
  5755                           ;keypad.c: 12:             if (RB4 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB4==0); return '4'; }
  5756   0006E2  B881               	btfsc	3969,4,c	;volatile
  5757   0006E4  D010               	goto	l268
  5758   0006E6  0E02               	movlw	2
  5759   0006E8  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5760   0006EA  0E04               	movlw	4
  5761   0006EC  6E05               	movwf	??_keypad_scanner^0,c
  5762   0006EE  0EBA               	movlw	186
  5763   0006F0                     u4997:
  5764   0006F0  2EE8               	decfsz	wreg,f,c
  5765   0006F2  D7FE               	bra	u4997
  5766   0006F4  2E05               	decfsz	??_keypad_scanner^0,f,c
  5767   0006F6  D7FC               	bra	u4997
  5768   0006F8  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5769   0006FA  D7FA               	bra	u4997
  5770   0006FC  D000               	nop2	
  5771   0006FE                     l269:
  5772   0006FE  A881               	btfss	3969,4,c	;volatile
  5773   000700  D7FE               	goto	l269
  5774   000702  0E34               	movlw	52
  5775   000704  0012               	return	
  5776   000706                     l268:
  5777                           
  5778                           ;keypad.c: 13:             if (RC7 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RC7==0); return '5'; }
  5779   000706  BE82               	btfsc	3970,7,c	;volatile
  5780   000708  D010               	goto	l272
  5781   00070A  0E02               	movlw	2
  5782   00070C  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5783   00070E  0E04               	movlw	4
  5784   000710  6E05               	movwf	??_keypad_scanner^0,c
  5785   000712  0EBA               	movlw	186
  5786   000714                     u5007:
  5787   000714  2EE8               	decfsz	wreg,f,c
  5788   000716  D7FE               	bra	u5007
  5789   000718  2E05               	decfsz	??_keypad_scanner^0,f,c
  5790   00071A  D7FC               	bra	u5007
  5791   00071C  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5792   00071E  D7FA               	bra	u5007
  5793   000720  D000               	nop2	
  5794   000722                     l273:
  5795   000722  AE82               	btfss	3970,7,c	;volatile
  5796   000724  D7FE               	goto	l273
  5797   000726  0E35               	movlw	53
  5798   000728  0012               	return	
  5799   00072A                     l272:
  5800                           
  5801                           ;keypad.c: 14:             if (RB6 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB6==0); return '6'; }
  5802   00072A  BC81               	btfsc	3969,6,c	;volatile
  5803   00072C  D010               	goto	l276
  5804   00072E  0E02               	movlw	2
  5805   000730  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5806   000732  0E04               	movlw	4
  5807   000734  6E05               	movwf	??_keypad_scanner^0,c
  5808   000736  0EBA               	movlw	186
  5809   000738                     u5017:
  5810   000738  2EE8               	decfsz	wreg,f,c
  5811   00073A  D7FE               	bra	u5017
  5812   00073C  2E05               	decfsz	??_keypad_scanner^0,f,c
  5813   00073E  D7FC               	bra	u5017
  5814   000740  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5815   000742  D7FA               	bra	u5017
  5816   000744  D000               	nop2	
  5817   000746                     l277:
  5818   000746  AC81               	btfss	3969,6,c	;volatile
  5819   000748  D7FE               	goto	l277
  5820   00074A  0E36               	movlw	54
  5821   00074C  0012               	return	
  5822   00074E                     l276:
  5823                           
  5824                           ;keypad.c: 15:             if (RB7 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB7==0); return 'r'; }
  5825   00074E  BE81               	btfsc	3969,7,c	;volatile
  5826   000750  D010               	goto	l280
  5827   000752  0E02               	movlw	2
  5828   000754  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5829   000756  0E04               	movlw	4
  5830   000758  6E05               	movwf	??_keypad_scanner^0,c
  5831   00075A  0EBA               	movlw	186
  5832   00075C                     u5027:
  5833   00075C  2EE8               	decfsz	wreg,f,c
  5834   00075E  D7FE               	bra	u5027
  5835   000760  2E05               	decfsz	??_keypad_scanner^0,f,c
  5836   000762  D7FC               	bra	u5027
  5837   000764  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5838   000766  D7FA               	bra	u5027
  5839   000768  D000               	nop2	
  5840   00076A                     l281:
  5841   00076A  AE81               	btfss	3969,7,c	;volatile
  5842   00076C  D7FE               	goto	l281
  5843   00076E  0E72               	movlw	114
  5844   000770  0012               	return	
  5845   000772                     l280:
  5846                           
  5847                           ;keypad.c: 17:             RB0 = 1; RB1 = 1; RB2 = 0; RB3 = 1;
  5848   000772  8081               	bsf	3969,0,c	;volatile
  5849   000774  8281               	bsf	3969,1,c	;volatile
  5850   000776  9481               	bcf	3969,2,c	;volatile
  5851   000778  8681               	bsf	3969,3,c	;volatile
  5852                           
  5853                           ;keypad.c: 18:             if (RB4 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB4==0); return '1'; }
  5854   00077A  B881               	btfsc	3969,4,c	;volatile
  5855   00077C  D010               	goto	l284
  5856   00077E  0E02               	movlw	2
  5857   000780  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5858   000782  0E04               	movlw	4
  5859   000784  6E05               	movwf	??_keypad_scanner^0,c
  5860   000786  0EBA               	movlw	186
  5861   000788                     u5037:
  5862   000788  2EE8               	decfsz	wreg,f,c
  5863   00078A  D7FE               	bra	u5037
  5864   00078C  2E05               	decfsz	??_keypad_scanner^0,f,c
  5865   00078E  D7FC               	bra	u5037
  5866   000790  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5867   000792  D7FA               	bra	u5037
  5868   000794  D000               	nop2	
  5869   000796                     l285:
  5870   000796  A881               	btfss	3969,4,c	;volatile
  5871   000798  D7FE               	goto	l285
  5872   00079A  0E31               	movlw	49
  5873   00079C  0012               	return	
  5874   00079E                     l284:
  5875                           
  5876                           ;keypad.c: 19:             if (RC7 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RC7==0); return '2'; }
  5877   00079E  BE82               	btfsc	3970,7,c	;volatile
  5878   0007A0  D010               	goto	l288
  5879   0007A2  0E02               	movlw	2
  5880   0007A4  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5881   0007A6  0E04               	movlw	4
  5882   0007A8  6E05               	movwf	??_keypad_scanner^0,c
  5883   0007AA  0EBA               	movlw	186
  5884   0007AC                     u5047:
  5885   0007AC  2EE8               	decfsz	wreg,f,c
  5886   0007AE  D7FE               	bra	u5047
  5887   0007B0  2E05               	decfsz	??_keypad_scanner^0,f,c
  5888   0007B2  D7FC               	bra	u5047
  5889   0007B4  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5890   0007B6  D7FA               	bra	u5047
  5891   0007B8  D000               	nop2	
  5892   0007BA                     l289:
  5893   0007BA  AE82               	btfss	3970,7,c	;volatile
  5894   0007BC  D7FE               	goto	l289
  5895   0007BE  0E32               	movlw	50
  5896   0007C0  0012               	return	
  5897   0007C2                     l288:
  5898                           
  5899                           ;keypad.c: 20:             if (RB6 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB6==0); return '3'; }
  5900   0007C2  BC81               	btfsc	3969,6,c	;volatile
  5901   0007C4  D010               	goto	l292
  5902   0007C6  0E02               	movlw	2
  5903   0007C8  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5904   0007CA  0E04               	movlw	4
  5905   0007CC  6E05               	movwf	??_keypad_scanner^0,c
  5906   0007CE  0EBA               	movlw	186
  5907   0007D0                     u5057:
  5908   0007D0  2EE8               	decfsz	wreg,f,c
  5909   0007D2  D7FE               	bra	u5057
  5910   0007D4  2E05               	decfsz	??_keypad_scanner^0,f,c
  5911   0007D6  D7FC               	bra	u5057
  5912   0007D8  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5913   0007DA  D7FA               	bra	u5057
  5914   0007DC  D000               	nop2	
  5915   0007DE                     l293:
  5916   0007DE  AC81               	btfss	3969,6,c	;volatile
  5917   0007E0  D7FE               	goto	l293
  5918   0007E2  0E33               	movlw	51
  5919   0007E4  0012               	return	
  5920   0007E6                     l292:
  5921                           
  5922                           ;keypad.c: 21:             if (RB7 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB7==0); return 'l'; }
  5923   0007E6  BE81               	btfsc	3969,7,c	;volatile
  5924   0007E8  D010               	goto	l296
  5925   0007EA  0E02               	movlw	2
  5926   0007EC  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5927   0007EE  0E04               	movlw	4
  5928   0007F0  6E05               	movwf	??_keypad_scanner^0,c
  5929   0007F2  0EBA               	movlw	186
  5930   0007F4                     u5067:
  5931   0007F4  2EE8               	decfsz	wreg,f,c
  5932   0007F6  D7FE               	bra	u5067
  5933   0007F8  2E05               	decfsz	??_keypad_scanner^0,f,c
  5934   0007FA  D7FC               	bra	u5067
  5935   0007FC  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5936   0007FE  D7FA               	bra	u5067
  5937   000800  D000               	nop2	
  5938   000802                     l297:
  5939   000802  AE81               	btfss	3969,7,c	;volatile
  5940   000804  D7FE               	goto	l297
  5941   000806  0E6C               	movlw	108
  5942   000808  0012               	return	
  5943   00080A                     l296:
  5944                           
  5945                           ;keypad.c: 23:             RB0 = 1; RB1 = 1; RB2 = 1; RB3 = 0;
  5946   00080A  8081               	bsf	3969,0,c	;volatile
  5947   00080C  8281               	bsf	3969,1,c	;volatile
  5948   00080E  8481               	bsf	3969,2,c	;volatile
  5949   000810  9681               	bcf	3969,3,c	;volatile
  5950                           
  5951                           ;keypad.c: 24:             if (RB4 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB4==0); return 'b'; }
  5952   000812  B881               	btfsc	3969,4,c	;volatile
  5953   000814  D010               	goto	l300
  5954   000816  0E02               	movlw	2
  5955   000818  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5956   00081A  0E04               	movlw	4
  5957   00081C  6E05               	movwf	??_keypad_scanner^0,c
  5958   00081E  0EBA               	movlw	186
  5959   000820                     u5077:
  5960   000820  2EE8               	decfsz	wreg,f,c
  5961   000822  D7FE               	bra	u5077
  5962   000824  2E05               	decfsz	??_keypad_scanner^0,f,c
  5963   000826  D7FC               	bra	u5077
  5964   000828  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5965   00082A  D7FA               	bra	u5077
  5966   00082C  D000               	nop2	
  5967   00082E                     l301:
  5968   00082E  A881               	btfss	3969,4,c	;volatile
  5969   000830  D7FE               	goto	l301
  5970   000832  0E62               	movlw	98
  5971   000834  0012               	return	
  5972   000836                     l300:
  5973                           
  5974                           ;keypad.c: 25:             if (RC7 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RC7==0); return '0'; }
  5975   000836  BE82               	btfsc	3970,7,c	;volatile
  5976   000838  D010               	goto	l304
  5977   00083A  0E02               	movlw	2
  5978   00083C  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5979   00083E  0E04               	movlw	4
  5980   000840  6E05               	movwf	??_keypad_scanner^0,c
  5981   000842  0EBA               	movlw	186
  5982   000844                     u5087:
  5983   000844  2EE8               	decfsz	wreg,f,c
  5984   000846  D7FE               	bra	u5087
  5985   000848  2E05               	decfsz	??_keypad_scanner^0,f,c
  5986   00084A  D7FC               	bra	u5087
  5987   00084C  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5988   00084E  D7FA               	bra	u5087
  5989   000850  D000               	nop2	
  5990   000852                     l305:
  5991   000852  AE82               	btfss	3970,7,c	;volatile
  5992   000854  D7FE               	goto	l305
  5993   000856  0E30               	movlw	48
  5994   000858  0012               	return	
  5995   00085A                     l304:
  5996                           
  5997                           ;keypad.c: 26:             if (RB6 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB6==0); return '.'; }
  5998   00085A  BC81               	btfsc	3969,6,c	;volatile
  5999   00085C  D010               	goto	l308
  6000   00085E  0E02               	movlw	2
  6001   000860  6E06               	movwf	(??_keypad_scanner+1)^0,c
  6002   000862  0E04               	movlw	4
  6003   000864  6E05               	movwf	??_keypad_scanner^0,c
  6004   000866  0EBA               	movlw	186
  6005   000868                     u5097:
  6006   000868  2EE8               	decfsz	wreg,f,c
  6007   00086A  D7FE               	bra	u5097
  6008   00086C  2E05               	decfsz	??_keypad_scanner^0,f,c
  6009   00086E  D7FC               	bra	u5097
  6010   000870  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  6011   000872  D7FA               	bra	u5097
  6012   000874  D000               	nop2	
  6013   000876                     l309:
  6014   000876  AC81               	btfss	3969,6,c	;volatile
  6015   000878  D7FE               	goto	l309
  6016   00087A  0E2E               	movlw	46
  6017   00087C  0012               	return	
  6018   00087E                     l308:
  6019                           
  6020                           ;keypad.c: 27:             if (RB7 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB7==0); return 'd'; }
  6021   00087E  BE81               	btfsc	3969,7,c	;volatile
  6022   000880  D010               	goto	l3952
  6023   000882  0E02               	movlw	2
  6024   000884  6E06               	movwf	(??_keypad_scanner+1)^0,c
  6025   000886  0E04               	movlw	4
  6026   000888  6E05               	movwf	??_keypad_scanner^0,c
  6027   00088A  0EBA               	movlw	186
  6028   00088C                     u5107:
  6029   00088C  2EE8               	decfsz	wreg,f,c
  6030   00088E  D7FE               	bra	u5107
  6031   000890  2E05               	decfsz	??_keypad_scanner^0,f,c
  6032   000892  D7FC               	bra	u5107
  6033   000894  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  6034   000896  D7FA               	bra	u5107
  6035   000898  D000               	nop2	
  6036   00089A                     l313:
  6037   00089A  AE81               	btfss	3969,7,c	;volatile
  6038   00089C  D7FE               	goto	l313
  6039   00089E  0E64               	movlw	100
  6040   0008A0  0012               	return	
  6041   0008A2                     l3952:
  6042                           
  6043                           ;keypad.c: 29:     return 'n';
  6044   0008A2  0E6E               	movlw	110
  6045   0008A4  0012               	return		;funcret
  6046   0008A6                     __end_of_keypad_scanner:
  6047                           	callstack 0
  6048                           
  6049 ;; *************** function _ADC_Read *****************
  6050 ;; Defined at:
  6051 ;;		line 6 in file "helper.c"
  6052 ;; Parameters:    Size  Location     Type
  6053 ;;  channel         1    wreg     char 
  6054 ;; Auto vars:     Size  Location     Type
  6055 ;;  channel         1   10[COMRAM] char 
  6056 ;;  digital         2   11[COMRAM] short 
  6057 ;; Return value:  Size  Location     Type
  6058 ;;                  2    4[COMRAM] short 
  6059 ;; Registers used:
  6060 ;;		wreg, status,2, status,0
  6061 ;; Tracked objects:
  6062 ;;		On entry : 0/0
  6063 ;;		On exit  : 0/0
  6064 ;;		Unchanged: 0/0
  6065 ;; Data sizes:     COMRAM   BANK0   BANK1
  6066 ;;      Params:         2       0       0
  6067 ;;      Locals:         3       0       0
  6068 ;;      Temps:          4       0       0
  6069 ;;      Totals:         9       0       0
  6070 ;;Total ram usage:        9 bytes
  6071 ;; Hardware stack levels used: 1
  6072 ;; Hardware stack levels required when called: 2
  6073 ;; This function calls:
  6074 ;;		Nothing
  6075 ;; This function is called by:
  6076 ;;		_handle_actuator_push
  6077 ;;		_infusion
  6078 ;;		_handle_infusion_setup
  6079 ;; This function uses a non-reentrant model
  6080 ;;
  6081                           
  6082                           	psect	text35
  6083   00166E                     __ptext35:
  6084                           	callstack 0
  6085   00166E                     _ADC_Read:
  6086                           	callstack 25
  6087                           
  6088                           ;incstack = 0
  6089                           ;ADC_Read@channel stored from wreg
  6090   00166E  6E0B               	movwf	ADC_Read@channel^0,c
  6091                           
  6092                           ;helper.c: 6: int16_t ADC_Read(int8_t channel);helper.c: 7: {;helper.c: 8:     int16_t d
      +                          igital;;helper.c: 9:     ADCON0 =(ADCON0 & 0b11000011)|((channel<<2) & 0b00111100);
  6093   001670  C00B  F007         	movff	ADC_Read@channel,??_ADC_Read
  6094   001674  90D8               	bcf	status,0,c
  6095   001676  3607               	rlcf	??_ADC_Read^0,f,c
  6096   001678  90D8               	bcf	status,0,c
  6097   00167A  3607               	rlcf	??_ADC_Read^0,f,c
  6098   00167C  0E3C               	movlw	60
  6099   00167E  1607               	andwf	??_ADC_Read^0,f,c
  6100   001680  50C2               	movf	194,w,c	;volatile
  6101   001682  0BC3               	andlw	195
  6102   001684  1007               	iorwf	??_ADC_Read^0,w,c
  6103   001686  6EC2               	movwf	194,c	;volatile
  6104                           
  6105                           ;helper.c: 10:     ADCON0 |= ((1<<ADON)|(1<<GO));
  6106   001688  A2C2               	btfss	4034,1,c	;volatile
  6107   00168A  D003               	goto	u4270
  6108   00168C  6A07               	clrf	??_ADC_Read^0,c
  6109   00168E  2A07               	incf	??_ADC_Read^0,f,c
  6110   001690  D001               	goto	u4288
  6111   001692                     u4270:
  6112   001692  6A07               	clrf	??_ADC_Read^0,c
  6113   001694                     u4288:
  6114   001694  0E01               	movlw	1
  6115   001696  6E08               	movwf	(??_ADC_Read+1)^0,c
  6116   001698  2A07               	incf	??_ADC_Read^0,f,c
  6117   00169A  D002               	goto	u4294
  6118   00169C                     u4295:
  6119   00169C  90D8               	bcf	status,0,c
  6120   00169E  3608               	rlcf	(??_ADC_Read+1)^0,f,c
  6121   0016A0                     u4294:
  6122   0016A0  2E07               	decfsz	??_ADC_Read^0,f,c
  6123   0016A2  D7FC               	goto	u4295
  6124   0016A4  A0C2               	btfss	4034,0,c	;volatile
  6125   0016A6  D003               	goto	u4300
  6126   0016A8  6A09               	clrf	(??_ADC_Read+2)^0,c
  6127   0016AA  2A09               	incf	(??_ADC_Read+2)^0,f,c
  6128   0016AC  D001               	goto	u4318
  6129   0016AE                     u4300:
  6130   0016AE  6A09               	clrf	(??_ADC_Read+2)^0,c
  6131   0016B0                     u4318:
  6132   0016B0  0E01               	movlw	1
  6133   0016B2  6E0A               	movwf	(??_ADC_Read+3)^0,c
  6134   0016B4  2A09               	incf	(??_ADC_Read+2)^0,f,c
  6135   0016B6  D002               	goto	u4324
  6136   0016B8                     u4325:
  6137   0016B8  90D8               	bcf	status,0,c
  6138   0016BA  360A               	rlcf	(??_ADC_Read+3)^0,f,c
  6139   0016BC                     u4324:
  6140   0016BC  2E09               	decfsz	(??_ADC_Read+2)^0,f,c
  6141   0016BE  D7FC               	goto	u4325
  6142   0016C0  500A               	movf	(??_ADC_Read+3)^0,w,c
  6143   0016C2  1008               	iorwf	(??_ADC_Read+1)^0,w,c
  6144   0016C4  12C2               	iorwf	194,f,c	;volatile
  6145   0016C6                     l130:
  6146   0016C6  B2C2               	btfsc	194,1,c	;volatile
  6147   0016C8  D7FE               	goto	l130
  6148                           
  6149                           ;helper.c: 12:     digital = (ADRESH*256) | (ADRESL);
  6150   0016CA  50C3               	movf	195,w,c	;volatile
  6151   0016CC  CFC4 F007          	movff	4036,??_ADC_Read	;volatile
  6152   0016D0  6A08               	clrf	(??_ADC_Read+1)^0,c
  6153   0016D2  C007  F008         	movff	??_ADC_Read,??_ADC_Read+1
  6154   0016D6  6A07               	clrf	??_ADC_Read^0,c
  6155   0016D8  1007               	iorwf	??_ADC_Read^0,w,c
  6156   0016DA  6E0C               	movwf	ADC_Read@digital^0,c
  6157   0016DC  5008               	movf	(??_ADC_Read+1)^0,w,c
  6158   0016DE  6E0D               	movwf	(ADC_Read@digital+1)^0,c
  6159                           
  6160                           ;helper.c: 13:     return(digital);
  6161   0016E0  C00C  F005         	movff	ADC_Read@digital,?_ADC_Read
  6162   0016E4  C00D  F006         	movff	ADC_Read@digital+1,?_ADC_Read+1
  6163   0016E8  0012               	return		;funcret
  6164   0016EA                     __end_of_ADC_Read:
  6165                           	callstack 0
  6166                           
  6167 ;; *************** function _getExpected *****************
  6168 ;; Defined at:
  6169 ;;		line 367 in file "main.c"
  6170 ;; Parameters:    Size  Location     Type
  6171 ;;		None
  6172 ;; Auto vars:     Size  Location     Type
  6173 ;;  expected        4   91[COMRAM] long 
  6174 ;;  ms              4   87[COMRAM] long 
  6175 ;; Return value:  Size  Location     Type
  6176 ;;                  4   83[COMRAM] long 
  6177 ;; Registers used:
  6178 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6179 ;; Tracked objects:
  6180 ;;		On entry : 0/0
  6181 ;;		On exit  : 0/0
  6182 ;;		Unchanged: 0/0
  6183 ;; Data sizes:     COMRAM   BANK0   BANK1
  6184 ;;      Params:         4       0       0
  6185 ;;      Locals:        16       0       0
  6186 ;;      Temps:          0       0       0
  6187 ;;      Totals:        20       0       0
  6188 ;;Total ram usage:       20 bytes
  6189 ;; Hardware stack levels used: 1
  6190 ;; Hardware stack levels required when called: 4
  6191 ;; This function calls:
  6192 ;;		___lldiv
  6193 ;;		___lmul
  6194 ;;		_calculateBitRatePer10Sec
  6195 ;;		_processTimeToSeconds
  6196 ;; This function is called by:
  6197 ;;		_infusion
  6198 ;; This function uses a non-reentrant model
  6199 ;;
  6200                           
  6201                           	psect	text36
  6202   000BE4                     __ptext36:
  6203                           	callstack 0
  6204   000BE4                     _getExpected:
  6205                           	callstack 24
  6206                           
  6207                           ;main.c: 368:     long ms = mil;
  6208                           
  6209                           ;incstack = 0
  6210   000BE4  C0A8  F058         	movff	_mil,getExpected@ms
  6211   000BE8  C0A9  F059         	movff	_mil+1,getExpected@ms+1
  6212   000BEC  C0AA  F05A         	movff	_mil+2,getExpected@ms+2
  6213   000BF0  C0AB  F05B         	movff	_mil+3,getExpected@ms+3
  6214                           
  6215                           ;main.c: 369:     long expected = 1023 - (((ms/1000UL) * (calculateBitRatePer10Sec(volum
      +                          e, processTimeToSeconds(timeInfusion)))/10)) ;
  6216   000BF4  0E00               	movlw	0
  6217   000BF6  6E0E               	movwf	(processTimeToSeconds@timeInput+1)^0,c
  6218   000BF8  0E64               	movlw	100
  6219   000BFA  6E0D               	movwf	processTimeToSeconds@timeInput^0,c
  6220   000BFC  EC52  F00C         	call	_processTimeToSeconds	;wreg free
  6221   000C00  C00D  F040         	movff	?_processTimeToSeconds,calculateBitRatePer10Sec@totalSeconds
  6222   000C04  C00E  F041         	movff	?_processTimeToSeconds+1,calculateBitRatePer10Sec@totalSeconds+1
  6223   000C08  0E00               	movlw	0
  6224   000C0A  BE41               	btfsc	(calculateBitRatePer10Sec@totalSeconds+1)^0,7,c
  6225   000C0C  0EFF               	movlw	-1
  6226   000C0E  6E42               	movwf	(calculateBitRatePer10Sec@totalSeconds+2)^0,c
  6227   000C10  6E43               	movwf	(calculateBitRatePer10Sec@totalSeconds+3)^0,c
  6228   000C12  C0D2  F03C         	movff	_volume,calculateBitRatePer10Sec@volume_mL
  6229   000C16  C0D3  F03D         	movff	_volume+1,calculateBitRatePer10Sec@volume_mL+1
  6230   000C1A  C0D4  F03E         	movff	_volume+2,calculateBitRatePer10Sec@volume_mL+2
  6231   000C1E  C0D5  F03F         	movff	_volume+3,calculateBitRatePer10Sec@volume_mL+3
  6232   000C22  EC5D  F005         	call	_calculateBitRatePer10Sec	;wreg free
  6233   000C26  C03C  F060         	movff	?_calculateBitRatePer10Sec,_getExpected$1676
  6234   000C2A  C03D  F061         	movff	?_calculateBitRatePer10Sec+1,_getExpected$1676+1
  6235   000C2E  C03E  F062         	movff	?_calculateBitRatePer10Sec+2,_getExpected$1676+2
  6236   000C32  C03F  F063         	movff	?_calculateBitRatePer10Sec+3,_getExpected$1676+3
  6237                           
  6238                           ;main.c: 369:     long expected = 1023 - (((ms/1000UL) * (calculateBitRatePer10Sec(volum
      +                          e, processTimeToSeconds(timeInfusion)))/10)) ;
  6239   000C36  0EE8               	movlw	232
  6240   000C38  6E19               	movwf	___lldiv@divisor^0,c
  6241   000C3A  0E03               	movlw	3
  6242   000C3C  6E1A               	movwf	(___lldiv@divisor+1)^0,c
  6243   000C3E  0E00               	movlw	0
  6244   000C40  6E1B               	movwf	(___lldiv@divisor+2)^0,c
  6245   000C42  0E00               	movlw	0
  6246   000C44  6E1C               	movwf	(___lldiv@divisor+3)^0,c
  6247   000C46  C058  F015         	movff	getExpected@ms,___lldiv@dividend
  6248   000C4A  C059  F016         	movff	getExpected@ms+1,___lldiv@dividend+1
  6249   000C4E  C05A  F017         	movff	getExpected@ms+2,___lldiv@dividend+2
  6250   000C52  C05B  F018         	movff	getExpected@ms+3,___lldiv@dividend+3
  6251   000C56  EC35  F00A         	call	___lldiv	;wreg free
  6252   000C5A  C015  F022         	movff	?___lldiv,___lmul@multiplier
  6253   000C5E  C016  F023         	movff	?___lldiv+1,___lmul@multiplier+1
  6254   000C62  C017  F024         	movff	?___lldiv+2,___lmul@multiplier+2
  6255   000C66  C018  F025         	movff	?___lldiv+3,___lmul@multiplier+3
  6256   000C6A  C060  F026         	movff	_getExpected$1676,___lmul@multiplicand
  6257   000C6E  C061  F027         	movff	_getExpected$1676+1,___lmul@multiplicand+1
  6258   000C72  C062  F028         	movff	_getExpected$1676+2,___lmul@multiplicand+2
  6259   000C76  C063  F029         	movff	_getExpected$1676+3,___lmul@multiplicand+3
  6260   000C7A  ECDC  F00C         	call	___lmul	;wreg free
  6261   000C7E  C022  F064         	movff	?___lmul,_getExpected$1677
  6262   000C82  C023  F065         	movff	?___lmul+1,_getExpected$1677+1
  6263   000C86  C024  F066         	movff	?___lmul+2,_getExpected$1677+2
  6264   000C8A  C025  F067         	movff	?___lmul+3,_getExpected$1677+3
  6265                           
  6266                           ;main.c: 369:     long expected = 1023 - (((ms/1000UL) * (calculateBitRatePer10Sec(volum
      +                          e, processTimeToSeconds(timeInfusion)))/10)) ;
  6267   000C8E  C064  F015         	movff	_getExpected$1677,___lldiv@dividend
  6268   000C92  C065  F016         	movff	_getExpected$1677+1,___lldiv@dividend+1
  6269   000C96  C066  F017         	movff	_getExpected$1677+2,___lldiv@dividend+2
  6270   000C9A  C067  F018         	movff	_getExpected$1677+3,___lldiv@dividend+3
  6271   000C9E  0E0A               	movlw	10
  6272   000CA0  6E19               	movwf	___lldiv@divisor^0,c
  6273   000CA2  0E00               	movlw	0
  6274   000CA4  6E1A               	movwf	(___lldiv@divisor+1)^0,c
  6275   000CA6  0E00               	movlw	0
  6276   000CA8  6E1B               	movwf	(___lldiv@divisor+2)^0,c
  6277   000CAA  0E00               	movlw	0
  6278   000CAC  6E1C               	movwf	(___lldiv@divisor+3)^0,c
  6279   000CAE  EC35  F00A         	call	___lldiv	;wreg free
  6280   000CB2  5015               	movf	?___lldiv^0,w,c
  6281   000CB4  08FF               	sublw	255
  6282   000CB6  6E5C               	movwf	getExpected@expected^0,c
  6283   000CB8  0E03               	movlw	3
  6284   000CBA  5416               	subfwb	(?___lldiv+1)^0,w,c
  6285   000CBC  6E5D               	movwf	(getExpected@expected+1)^0,c
  6286   000CBE  0E00               	movlw	0
  6287   000CC0  5417               	subfwb	(?___lldiv+2)^0,w,c
  6288   000CC2  6E5E               	movwf	(getExpected@expected+2)^0,c
  6289   000CC4  0E00               	movlw	0
  6290   000CC6  5418               	subfwb	(?___lldiv+3)^0,w,c
  6291   000CC8  6E5F               	movwf	(getExpected@expected+3)^0,c
  6292                           
  6293                           ;main.c: 370:     return expected;
  6294   000CCA  C05C  F054         	movff	getExpected@expected,?_getExpected
  6295   000CCE  C05D  F055         	movff	getExpected@expected+1,?_getExpected+1
  6296   000CD2  C05E  F056         	movff	getExpected@expected+2,?_getExpected+2
  6297   000CD6  C05F  F057         	movff	getExpected@expected+3,?_getExpected+3
  6298   000CDA  0012               	return		;funcret
  6299   000CDC                     __end_of_getExpected:
  6300                           	callstack 0
  6301                           
  6302 ;; *************** function _processTimeToSeconds *****************
  6303 ;; Defined at:
  6304 ;;		line 337 in file "main.c"
  6305 ;; Parameters:    Size  Location     Type
  6306 ;;  timeInput       2   12[COMRAM] int 
  6307 ;; Auto vars:     Size  Location     Type
  6308 ;;  totalSeconds    2   18[COMRAM] int 
  6309 ;;  seconds         2   16[COMRAM] int 
  6310 ;;  minutes         2   14[COMRAM] int 
  6311 ;; Return value:  Size  Location     Type
  6312 ;;                  2   12[COMRAM] int 
  6313 ;; Registers used:
  6314 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6315 ;; Tracked objects:
  6316 ;;		On entry : 0/0
  6317 ;;		On exit  : 0/0
  6318 ;;		Unchanged: 0/0
  6319 ;; Data sizes:     COMRAM   BANK0   BANK1
  6320 ;;      Params:         2       0       0
  6321 ;;      Locals:         6       0       0
  6322 ;;      Temps:          0       0       0
  6323 ;;      Totals:         8       0       0
  6324 ;;Total ram usage:        8 bytes
  6325 ;; Hardware stack levels used: 1
  6326 ;; Hardware stack levels required when called: 3
  6327 ;; This function calls:
  6328 ;;		___awdiv
  6329 ;;		___awmod
  6330 ;;		___wmul
  6331 ;; This function is called by:
  6332 ;;		_getExpected
  6333 ;;		_infusion
  6334 ;; This function uses a non-reentrant model
  6335 ;;
  6336                           
  6337                           	psect	text37
  6338   0018A4                     __ptext37:
  6339                           	callstack 0
  6340   0018A4                     _processTimeToSeconds:
  6341                           	callstack 25
  6342                           
  6343                           ;main.c: 339:     int minutes = timeInput / 100;
  6344                           
  6345                           ;incstack = 0
  6346   0018A4  C00D  F005         	movff	processTimeToSeconds@timeInput,___awdiv@dividend
  6347   0018A8  C00E  F006         	movff	processTimeToSeconds@timeInput+1,___awdiv@dividend+1
  6348   0018AC  0E00               	movlw	0
  6349   0018AE  6E08               	movwf	(___awdiv@divisor+1)^0,c
  6350   0018B0  0E64               	movlw	100
  6351   0018B2  6E07               	movwf	___awdiv@divisor^0,c
  6352   0018B4  ECF3  F009         	call	___awdiv	;wreg free
  6353   0018B8  C005  F00F         	movff	?___awdiv,processTimeToSeconds@minutes
  6354   0018BC  C006  F010         	movff	?___awdiv+1,processTimeToSeconds@minutes+1
  6355                           
  6356                           ;main.c: 340:     int seconds = timeInput % 100;
  6357   0018C0  C00D  F005         	movff	processTimeToSeconds@timeInput,___awmod@dividend
  6358   0018C4  C00E  F006         	movff	processTimeToSeconds@timeInput+1,___awmod@dividend+1
  6359   0018C8  0E00               	movlw	0
  6360   0018CA  6E08               	movwf	(___awmod@divisor+1)^0,c
  6361   0018CC  0E64               	movlw	100
  6362   0018CE  6E07               	movwf	___awmod@divisor^0,c
  6363   0018D0  ECE6  F00B         	call	___awmod	;wreg free
  6364   0018D4  C005  F011         	movff	?___awmod,processTimeToSeconds@seconds
  6365   0018D8  C006  F012         	movff	?___awmod+1,processTimeToSeconds@seconds+1
  6366                           
  6367                           ;main.c: 343:     int totalSeconds = (minutes * 60) + seconds;
  6368   0018DC  C00F  F005         	movff	processTimeToSeconds@minutes,___wmul@multiplier
  6369   0018E0  C010  F006         	movff	processTimeToSeconds@minutes+1,___wmul@multiplier+1
  6370   0018E4  0E00               	movlw	0
  6371   0018E6  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  6372   0018E8  0E3C               	movlw	60
  6373   0018EA  6E07               	movwf	___wmul@multiplicand^0,c
  6374   0018EC  EC24  F00E         	call	___wmul	;wreg free
  6375   0018F0  5011               	movf	processTimeToSeconds@seconds^0,w,c
  6376   0018F2  2405               	addwf	?___wmul^0,w,c
  6377   0018F4  6E13               	movwf	processTimeToSeconds@totalSeconds^0,c
  6378   0018F6  5012               	movf	(processTimeToSeconds@seconds+1)^0,w,c
  6379   0018F8  2006               	addwfc	(?___wmul+1)^0,w,c
  6380   0018FA  6E14               	movwf	(processTimeToSeconds@totalSeconds+1)^0,c
  6381                           
  6382                           ;main.c: 345:     return totalSeconds;
  6383   0018FC  C013  F00D         	movff	processTimeToSeconds@totalSeconds,?_processTimeToSeconds
  6384   001900  C014  F00E         	movff	processTimeToSeconds@totalSeconds+1,?_processTimeToSeconds+1
  6385   001904  0012               	return		;funcret
  6386   001906                     __end_of_processTimeToSeconds:
  6387                           	callstack 0
  6388                           
  6389 ;; *************** function ___wmul *****************
  6390 ;; Defined at:
  6391 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
  6392 ;; Parameters:    Size  Location     Type
  6393 ;;  multiplier      2    4[COMRAM] unsigned int 
  6394 ;;  multiplicand    2    6[COMRAM] unsigned int 
  6395 ;; Auto vars:     Size  Location     Type
  6396 ;;  product         2    8[COMRAM] unsigned int 
  6397 ;; Return value:  Size  Location     Type
  6398 ;;                  2    4[COMRAM] unsigned int 
  6399 ;; Registers used:
  6400 ;;		wreg, status,2, status,0, prodl, prodh
  6401 ;; Tracked objects:
  6402 ;;		On entry : 0/0
  6403 ;;		On exit  : 0/0
  6404 ;;		Unchanged: 0/0
  6405 ;; Data sizes:     COMRAM   BANK0   BANK1
  6406 ;;      Params:         4       0       0
  6407 ;;      Locals:         2       0       0
  6408 ;;      Temps:          0       0       0
  6409 ;;      Totals:         6       0       0
  6410 ;;Total ram usage:        6 bytes
  6411 ;; Hardware stack levels used: 1
  6412 ;; Hardware stack levels required when called: 2
  6413 ;; This function calls:
  6414 ;;		Nothing
  6415 ;; This function is called by:
  6416 ;;		_processTimeToSeconds
  6417 ;; This function uses a non-reentrant model
  6418 ;;
  6419                           
  6420                           	psect	text38
  6421   001C48                     __ptext38:
  6422                           	callstack 0
  6423   001C48                     ___wmul:
  6424                           	callstack 25
  6425                           
  6426                           ;incstack = 0
  6427   001C48  5005               	movf	___wmul@multiplier^0,w,c
  6428   001C4A  0207               	mulwf	___wmul@multiplicand^0,c
  6429   001C4C  CFF3 F009          	movff	prodl,___wmul@product
  6430   001C50  CFF4 F00A          	movff	prodh,___wmul@product+1
  6431   001C54  5005               	movf	___wmul@multiplier^0,w,c
  6432   001C56  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  6433   001C58  50F3               	movf	243,w,c
  6434   001C5A  260A               	addwf	(___wmul@product+1)^0,f,c
  6435   001C5C  5006               	movf	(___wmul@multiplier+1)^0,w,c
  6436   001C5E  0207               	mulwf	___wmul@multiplicand^0,c
  6437   001C60  50F3               	movf	243,w,c
  6438   001C62  260A               	addwf	(___wmul@product+1)^0,f,c
  6439   001C64  C009  F005         	movff	___wmul@product,?___wmul
  6440   001C68  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  6441   001C6C  0012               	return		;funcret
  6442   001C6E                     __end_of___wmul:
  6443                           	callstack 0
  6444                           
  6445 ;; *************** function ___awmod *****************
  6446 ;; Defined at:
  6447 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  6448 ;; Parameters:    Size  Location     Type
  6449 ;;  dividend        2    4[COMRAM] int 
  6450 ;;  divisor         2    6[COMRAM] int 
  6451 ;; Auto vars:     Size  Location     Type
  6452 ;;  sign            1    9[COMRAM] unsigned char 
  6453 ;;  counter         1    8[COMRAM] unsigned char 
  6454 ;; Return value:  Size  Location     Type
  6455 ;;                  2    4[COMRAM] int 
  6456 ;; Registers used:
  6457 ;;		wreg, status,2, status,0
  6458 ;; Tracked objects:
  6459 ;;		On entry : 0/0
  6460 ;;		On exit  : 0/0
  6461 ;;		Unchanged: 0/0
  6462 ;; Data sizes:     COMRAM   BANK0   BANK1
  6463 ;;      Params:         4       0       0
  6464 ;;      Locals:         2       0       0
  6465 ;;      Temps:          0       0       0
  6466 ;;      Totals:         6       0       0
  6467 ;;Total ram usage:        6 bytes
  6468 ;; Hardware stack levels used: 1
  6469 ;; Hardware stack levels required when called: 2
  6470 ;; This function calls:
  6471 ;;		Nothing
  6472 ;; This function is called by:
  6473 ;;		_processTimeToSeconds
  6474 ;; This function uses a non-reentrant model
  6475 ;;
  6476                           
  6477                           	psect	text39
  6478   0017CC                     __ptext39:
  6479                           	callstack 0
  6480   0017CC                     ___awmod:
  6481                           	callstack 25
  6482                           
  6483                           ;incstack = 0
  6484   0017CC  0E00               	movlw	0
  6485   0017CE  6E0A               	movwf	___awmod@sign^0,c
  6486   0017D0  AE06               	btfss	(___awmod@dividend+1)^0,7,c
  6487   0017D2  D006               	goto	l4178
  6488   0017D4  6C05               	negf	___awmod@dividend^0,c
  6489   0017D6  1E06               	comf	(___awmod@dividend+1)^0,f,c
  6490   0017D8  B0D8               	btfsc	status,0,c
  6491   0017DA  2A06               	incf	(___awmod@dividend+1)^0,f,c
  6492   0017DC  0E01               	movlw	1
  6493   0017DE  6E0A               	movwf	___awmod@sign^0,c
  6494   0017E0                     l4178:
  6495   0017E0  AE08               	btfss	(___awmod@divisor+1)^0,7,c
  6496   0017E2  D004               	goto	l4182
  6497   0017E4  6C07               	negf	___awmod@divisor^0,c
  6498   0017E6  1E08               	comf	(___awmod@divisor+1)^0,f,c
  6499   0017E8  B0D8               	btfsc	status,0,c
  6500   0017EA  2A08               	incf	(___awmod@divisor+1)^0,f,c
  6501   0017EC                     l4182:
  6502   0017EC  5007               	movf	___awmod@divisor^0,w,c
  6503   0017EE  1008               	iorwf	(___awmod@divisor+1)^0,w,c
  6504   0017F0  B4D8               	btfsc	status,2,c
  6505   0017F2  D018               	goto	l4198
  6506   0017F4  0E01               	movlw	1
  6507   0017F6  6E09               	movwf	___awmod@counter^0,c
  6508   0017F8  D004               	goto	l4188
  6509   0017FA                     l4186:
  6510   0017FA  90D8               	bcf	status,0,c
  6511   0017FC  3607               	rlcf	___awmod@divisor^0,f,c
  6512   0017FE  3608               	rlcf	(___awmod@divisor+1)^0,f,c
  6513   001800  2A09               	incf	___awmod@counter^0,f,c
  6514   001802                     l4188:
  6515   001802  AE08               	btfss	(___awmod@divisor+1)^0,7,c
  6516   001804  D7FA               	goto	l4186
  6517   001806                     u4110:
  6518   001806  5007               	movf	___awmod@divisor^0,w,c
  6519   001808  5C05               	subwf	___awmod@dividend^0,w,c
  6520   00180A  5008               	movf	(___awmod@divisor+1)^0,w,c
  6521   00180C  5806               	subwfb	(___awmod@dividend+1)^0,w,c
  6522   00180E  A0D8               	btfss	status,0,c
  6523   001810  D004               	goto	l4194
  6524   001812  5007               	movf	___awmod@divisor^0,w,c
  6525   001814  5E05               	subwf	___awmod@dividend^0,f,c
  6526   001816  5008               	movf	(___awmod@divisor+1)^0,w,c
  6527   001818  5A06               	subwfb	(___awmod@dividend+1)^0,f,c
  6528   00181A                     l4194:
  6529   00181A  90D8               	bcf	status,0,c
  6530   00181C  3208               	rrcf	(___awmod@divisor+1)^0,f,c
  6531   00181E  3207               	rrcf	___awmod@divisor^0,f,c
  6532   001820  2E09               	decfsz	___awmod@counter^0,f,c
  6533   001822  D7F1               	goto	u4110
  6534   001824                     l4198:
  6535   001824  500A               	movf	___awmod@sign^0,w,c
  6536   001826  B4D8               	btfsc	status,2,c
  6537   001828  D004               	goto	l4202
  6538   00182A  6C05               	negf	___awmod@dividend^0,c
  6539   00182C  1E06               	comf	(___awmod@dividend+1)^0,f,c
  6540   00182E  B0D8               	btfsc	status,0,c
  6541   001830  2A06               	incf	(___awmod@dividend+1)^0,f,c
  6542   001832                     l4202:
  6543   001832  C005  F005         	movff	___awmod@dividend,?___awmod
  6544   001836  C006  F006         	movff	___awmod@dividend+1,?___awmod+1
  6545   00183A  0012               	return		;funcret
  6546   00183C                     __end_of___awmod:
  6547                           	callstack 0
  6548                           
  6549 ;; *************** function ___awdiv *****************
  6550 ;; Defined at:
  6551 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  6552 ;; Parameters:    Size  Location     Type
  6553 ;;  dividend        2    4[COMRAM] int 
  6554 ;;  divisor         2    6[COMRAM] int 
  6555 ;; Auto vars:     Size  Location     Type
  6556 ;;  quotient        2   10[COMRAM] int 
  6557 ;;  sign            1    9[COMRAM] unsigned char 
  6558 ;;  counter         1    8[COMRAM] unsigned char 
  6559 ;; Return value:  Size  Location     Type
  6560 ;;                  2    4[COMRAM] int 
  6561 ;; Registers used:
  6562 ;;		wreg, status,2, status,0
  6563 ;; Tracked objects:
  6564 ;;		On entry : 0/0
  6565 ;;		On exit  : 0/0
  6566 ;;		Unchanged: 0/0
  6567 ;; Data sizes:     COMRAM   BANK0   BANK1
  6568 ;;      Params:         4       0       0
  6569 ;;      Locals:         4       0       0
  6570 ;;      Temps:          0       0       0
  6571 ;;      Totals:         8       0       0
  6572 ;;Total ram usage:        8 bytes
  6573 ;; Hardware stack levels used: 1
  6574 ;; Hardware stack levels required when called: 2
  6575 ;; This function calls:
  6576 ;;		Nothing
  6577 ;; This function is called by:
  6578 ;;		_processTimeToSeconds
  6579 ;; This function uses a non-reentrant model
  6580 ;;
  6581                           
  6582                           	psect	text40
  6583   0013E6                     __ptext40:
  6584                           	callstack 0
  6585   0013E6                     ___awdiv:
  6586                           	callstack 25
  6587                           
  6588                           ;incstack = 0
  6589   0013E6  0E00               	movlw	0
  6590   0013E8  6E0A               	movwf	___awdiv@sign^0,c
  6591   0013EA  AE08               	btfss	(___awdiv@divisor+1)^0,7,c
  6592   0013EC  D006               	goto	l4134
  6593   0013EE  6C07               	negf	___awdiv@divisor^0,c
  6594   0013F0  1E08               	comf	(___awdiv@divisor+1)^0,f,c
  6595   0013F2  B0D8               	btfsc	status,0,c
  6596   0013F4  2A08               	incf	(___awdiv@divisor+1)^0,f,c
  6597   0013F6  0E01               	movlw	1
  6598   0013F8  6E0A               	movwf	___awdiv@sign^0,c
  6599   0013FA                     l4134:
  6600   0013FA  AE06               	btfss	(___awdiv@dividend+1)^0,7,c
  6601   0013FC  D006               	goto	l4140
  6602   0013FE  6C05               	negf	___awdiv@dividend^0,c
  6603   001400  1E06               	comf	(___awdiv@dividend+1)^0,f,c
  6604   001402  B0D8               	btfsc	status,0,c
  6605   001404  2A06               	incf	(___awdiv@dividend+1)^0,f,c
  6606   001406  0E01               	movlw	1
  6607   001408  1A0A               	xorwf	___awdiv@sign^0,f,c
  6608   00140A                     l4140:
  6609   00140A  0E00               	movlw	0
  6610   00140C  6E0C               	movwf	(___awdiv@quotient+1)^0,c
  6611   00140E  0E00               	movlw	0
  6612   001410  6E0B               	movwf	___awdiv@quotient^0,c
  6613   001412  5007               	movf	___awdiv@divisor^0,w,c
  6614   001414  1008               	iorwf	(___awdiv@divisor+1)^0,w,c
  6615   001416  B4D8               	btfsc	status,2,c
  6616   001418  D01C               	goto	l4162
  6617   00141A  0E01               	movlw	1
  6618   00141C  6E09               	movwf	___awdiv@counter^0,c
  6619   00141E  D004               	goto	l4148
  6620   001420                     l4146:
  6621   001420  90D8               	bcf	status,0,c
  6622   001422  3607               	rlcf	___awdiv@divisor^0,f,c
  6623   001424  3608               	rlcf	(___awdiv@divisor+1)^0,f,c
  6624   001426  2A09               	incf	___awdiv@counter^0,f,c
  6625   001428                     l4148:
  6626   001428  AE08               	btfss	(___awdiv@divisor+1)^0,7,c
  6627   00142A  D7FA               	goto	l4146
  6628   00142C                     u4050:
  6629   00142C  90D8               	bcf	status,0,c
  6630   00142E  360B               	rlcf	___awdiv@quotient^0,f,c
  6631   001430  360C               	rlcf	(___awdiv@quotient+1)^0,f,c
  6632   001432  5007               	movf	___awdiv@divisor^0,w,c
  6633   001434  5C05               	subwf	___awdiv@dividend^0,w,c
  6634   001436  5008               	movf	(___awdiv@divisor+1)^0,w,c
  6635   001438  5806               	subwfb	(___awdiv@dividend+1)^0,w,c
  6636   00143A  A0D8               	btfss	status,0,c
  6637   00143C  D005               	goto	l4158
  6638   00143E  5007               	movf	___awdiv@divisor^0,w,c
  6639   001440  5E05               	subwf	___awdiv@dividend^0,f,c
  6640   001442  5008               	movf	(___awdiv@divisor+1)^0,w,c
  6641   001444  5A06               	subwfb	(___awdiv@dividend+1)^0,f,c
  6642   001446  800B               	bsf	___awdiv@quotient^0,0,c
  6643   001448                     l4158:
  6644   001448  90D8               	bcf	status,0,c
  6645   00144A  3208               	rrcf	(___awdiv@divisor+1)^0,f,c
  6646   00144C  3207               	rrcf	___awdiv@divisor^0,f,c
  6647   00144E  2E09               	decfsz	___awdiv@counter^0,f,c
  6648   001450  D7ED               	goto	u4050
  6649   001452                     l4162:
  6650   001452  500A               	movf	___awdiv@sign^0,w,c
  6651   001454  B4D8               	btfsc	status,2,c
  6652   001456  D004               	goto	l4166
  6653   001458  6C0B               	negf	___awdiv@quotient^0,c
  6654   00145A  1E0C               	comf	(___awdiv@quotient+1)^0,f,c
  6655   00145C  B0D8               	btfsc	status,0,c
  6656   00145E  2A0C               	incf	(___awdiv@quotient+1)^0,f,c
  6657   001460                     l4166:
  6658   001460  C00B  F005         	movff	___awdiv@quotient,?___awdiv
  6659   001464  C00C  F006         	movff	___awdiv@quotient+1,?___awdiv+1
  6660   001468  0012               	return		;funcret
  6661   00146A                     __end_of___awdiv:
  6662                           	callstack 0
  6663                           
  6664 ;; *************** function _calculateBitRatePer10Sec *****************
  6665 ;; Defined at:
  6666 ;;		line 348 in file "main.c"
  6667 ;; Parameters:    Size  Location     Type
  6668 ;;  volume_mL       4   59[COMRAM] long 
  6669 ;;  totalSeconds    4   63[COMRAM] long 
  6670 ;; Auto vars:     Size  Location     Type
  6671 ;;  bit_rate_per    4   79[COMRAM] long 
  6672 ;;  bit_rate_per    4   75[COMRAM] long 
  6673 ;;  length_per_m    4   71[COMRAM] long 
  6674 ;;  length_mm_sc    4   67[COMRAM] long 
  6675 ;; Return value:  Size  Location     Type
  6676 ;;                  4   59[COMRAM] long 
  6677 ;; Registers used:
  6678 ;;		wreg, status,2, status,0, cstack
  6679 ;; Tracked objects:
  6680 ;;		On entry : 0/0
  6681 ;;		On exit  : 0/0
  6682 ;;		Unchanged: 0/0
  6683 ;; Data sizes:     COMRAM   BANK0   BANK1
  6684 ;;      Params:         8       0       0
  6685 ;;      Locals:        16       0       0
  6686 ;;      Temps:          0       0       0
  6687 ;;      Totals:        24       0       0
  6688 ;;Total ram usage:       24 bytes
  6689 ;; Hardware stack levels used: 1
  6690 ;; Hardware stack levels required when called: 3
  6691 ;; This function calls:
  6692 ;;		___aldiv
  6693 ;;		___lmul
  6694 ;; This function is called by:
  6695 ;;		_getExpected
  6696 ;; This function uses a non-reentrant model
  6697 ;;
  6698                           
  6699                           	psect	text41
  6700   000ABA                     __ptext41:
  6701                           	callstack 0
  6702   000ABA                     _calculateBitRatePer10Sec:
  6703                           	callstack 24
  6704                           
  6705                           ;main.c: 353:     long length_mm_scaled = (volume_mL * 10000) / 158;
  6706                           
  6707                           ;incstack = 0
  6708   000ABA  C03C  F022         	movff	calculateBitRatePer10Sec@volume_mL,___lmul@multiplier
  6709   000ABE  C03D  F023         	movff	calculateBitRatePer10Sec@volume_mL+1,___lmul@multiplier+1
  6710   000AC2  C03E  F024         	movff	calculateBitRatePer10Sec@volume_mL+2,___lmul@multiplier+2
  6711   000AC6  C03F  F025         	movff	calculateBitRatePer10Sec@volume_mL+3,___lmul@multiplier+3
  6712   000ACA  0E10               	movlw	16
  6713   000ACC  6E26               	movwf	___lmul@multiplicand^0,c
  6714   000ACE  0E27               	movlw	39
  6715   000AD0  6E27               	movwf	(___lmul@multiplicand+1)^0,c
  6716   000AD2  0E00               	movlw	0
  6717   000AD4  6E28               	movwf	(___lmul@multiplicand+2)^0,c
  6718   000AD6  0E00               	movlw	0
  6719   000AD8  6E29               	movwf	(___lmul@multiplicand+3)^0,c
  6720   000ADA  ECDC  F00C         	call	___lmul	;wreg free
  6721   000ADE  C022  F02E         	movff	?___lmul,___aldiv@dividend
  6722   000AE2  C023  F02F         	movff	?___lmul+1,___aldiv@dividend+1
  6723   000AE6  C024  F030         	movff	?___lmul+2,___aldiv@dividend+2
  6724   000AEA  C025  F031         	movff	?___lmul+3,___aldiv@dividend+3
  6725   000AEE  0E9E               	movlw	158
  6726   000AF0  6E32               	movwf	___aldiv@divisor^0,c
  6727   000AF2  0E00               	movlw	0
  6728   000AF4  6E33               	movwf	(___aldiv@divisor+1)^0,c
  6729   000AF6  0E00               	movlw	0
  6730   000AF8  6E34               	movwf	(___aldiv@divisor+2)^0,c
  6731   000AFA  0E00               	movlw	0
  6732   000AFC  6E35               	movwf	(___aldiv@divisor+3)^0,c
  6733   000AFE  ECE6  F006         	call	___aldiv	;wreg free
  6734   000B02  C02E  F044         	movff	?___aldiv,calculateBitRatePer10Sec@length_mm_scaled
  6735   000B06  C02F  F045         	movff	?___aldiv+1,calculateBitRatePer10Sec@length_mm_scaled+1
  6736   000B0A  C030  F046         	movff	?___aldiv+2,calculateBitRatePer10Sec@length_mm_scaled+2
  6737   000B0E  C031  F047         	movff	?___aldiv+3,calculateBitRatePer10Sec@length_mm_scaled+3
  6738                           
  6739                           ;main.c: 356:     long length_per_min_mm_scaled = length_mm_scaled / totalSeconds;
  6740   000B12  C044  F02E         	movff	calculateBitRatePer10Sec@length_mm_scaled,___aldiv@dividend
  6741   000B16  C045  F02F         	movff	calculateBitRatePer10Sec@length_mm_scaled+1,___aldiv@dividend+1
  6742   000B1A  C046  F030         	movff	calculateBitRatePer10Sec@length_mm_scaled+2,___aldiv@dividend+2
  6743   000B1E  C047  F031         	movff	calculateBitRatePer10Sec@length_mm_scaled+3,___aldiv@dividend+3
  6744   000B22  C040  F032         	movff	calculateBitRatePer10Sec@totalSeconds,___aldiv@divisor
  6745   000B26  C041  F033         	movff	calculateBitRatePer10Sec@totalSeconds+1,___aldiv@divisor+1
  6746   000B2A  C042  F034         	movff	calculateBitRatePer10Sec@totalSeconds+2,___aldiv@divisor+2
  6747   000B2E  C043  F035         	movff	calculateBitRatePer10Sec@totalSeconds+3,___aldiv@divisor+3
  6748   000B32  ECE6  F006         	call	___aldiv	;wreg free
  6749   000B36  C02E  F048         	movff	?___aldiv,calculateBitRatePer10Sec@length_per_min_mm_scaled
  6750   000B3A  C02F  F049         	movff	?___aldiv+1,calculateBitRatePer10Sec@length_per_min_mm_scaled+1
  6751   000B3E  C030  F04A         	movff	?___aldiv+2,calculateBitRatePer10Sec@length_per_min_mm_scaled+2
  6752   000B42  C031  F04B         	movff	?___aldiv+3,calculateBitRatePer10Sec@length_per_min_mm_scaled+3
  6753                           
  6754                           ;main.c: 359:     long bit_rate_per_min_scaled = (length_per_min_mm_scaled * 100) / (635
      +                          /60);
  6755   000B46  C048  F022         	movff	calculateBitRatePer10Sec@length_per_min_mm_scaled,___lmul@multiplier
  6756   000B4A  C049  F023         	movff	calculateBitRatePer10Sec@length_per_min_mm_scaled+1,___lmul@multiplier+1
  6757   000B4E  C04A  F024         	movff	calculateBitRatePer10Sec@length_per_min_mm_scaled+2,___lmul@multiplier+2
  6758   000B52  C04B  F025         	movff	calculateBitRatePer10Sec@length_per_min_mm_scaled+3,___lmul@multiplier+3
  6759   000B56  0E64               	movlw	100
  6760   000B58  6E26               	movwf	___lmul@multiplicand^0,c
  6761   000B5A  0E00               	movlw	0
  6762   000B5C  6E27               	movwf	(___lmul@multiplicand+1)^0,c
  6763   000B5E  0E00               	movlw	0
  6764   000B60  6E28               	movwf	(___lmul@multiplicand+2)^0,c
  6765   000B62  0E00               	movlw	0
  6766   000B64  6E29               	movwf	(___lmul@multiplicand+3)^0,c
  6767   000B66  ECDC  F00C         	call	___lmul	;wreg free
  6768   000B6A  C022  F02E         	movff	?___lmul,___aldiv@dividend
  6769   000B6E  C023  F02F         	movff	?___lmul+1,___aldiv@dividend+1
  6770   000B72  C024  F030         	movff	?___lmul+2,___aldiv@dividend+2
  6771   000B76  C025  F031         	movff	?___lmul+3,___aldiv@dividend+3
  6772   000B7A  0E0A               	movlw	10
  6773   000B7C  6E32               	movwf	___aldiv@divisor^0,c
  6774   000B7E  0E00               	movlw	0
  6775   000B80  6E33               	movwf	(___aldiv@divisor+1)^0,c
  6776   000B82  0E00               	movlw	0
  6777   000B84  6E34               	movwf	(___aldiv@divisor+2)^0,c
  6778   000B86  0E00               	movlw	0
  6779   000B88  6E35               	movwf	(___aldiv@divisor+3)^0,c
  6780   000B8A  ECE6  F006         	call	___aldiv	;wreg free
  6781   000B8E  C02E  F04C         	movff	?___aldiv,calculateBitRatePer10Sec@bit_rate_per_min_scaled
  6782   000B92  C02F  F04D         	movff	?___aldiv+1,calculateBitRatePer10Sec@bit_rate_per_min_scaled+1
  6783   000B96  C030  F04E         	movff	?___aldiv+2,calculateBitRatePer10Sec@bit_rate_per_min_scaled+2
  6784   000B9A  C031  F04F         	movff	?___aldiv+3,calculateBitRatePer10Sec@bit_rate_per_min_scaled+3
  6785                           
  6786                           ;main.c: 362:     long bit_rate_per_10sec = bit_rate_per_min_scaled / 6;
  6787   000B9E  C04C  F02E         	movff	calculateBitRatePer10Sec@bit_rate_per_min_scaled,___aldiv@dividend
  6788   000BA2  C04D  F02F         	movff	calculateBitRatePer10Sec@bit_rate_per_min_scaled+1,___aldiv@dividend+1
  6789   000BA6  C04E  F030         	movff	calculateBitRatePer10Sec@bit_rate_per_min_scaled+2,___aldiv@dividend+2
  6790   000BAA  C04F  F031         	movff	calculateBitRatePer10Sec@bit_rate_per_min_scaled+3,___aldiv@dividend+3
  6791   000BAE  0E06               	movlw	6
  6792   000BB0  6E32               	movwf	___aldiv@divisor^0,c
  6793   000BB2  0E00               	movlw	0
  6794   000BB4  6E33               	movwf	(___aldiv@divisor+1)^0,c
  6795   000BB6  0E00               	movlw	0
  6796   000BB8  6E34               	movwf	(___aldiv@divisor+2)^0,c
  6797   000BBA  0E00               	movlw	0
  6798   000BBC  6E35               	movwf	(___aldiv@divisor+3)^0,c
  6799   000BBE  ECE6  F006         	call	___aldiv	;wreg free
  6800   000BC2  C02E  F050         	movff	?___aldiv,calculateBitRatePer10Sec@bit_rate_per_10sec
  6801   000BC6  C02F  F051         	movff	?___aldiv+1,calculateBitRatePer10Sec@bit_rate_per_10sec+1
  6802   000BCA  C030  F052         	movff	?___aldiv+2,calculateBitRatePer10Sec@bit_rate_per_10sec+2
  6803   000BCE  C031  F053         	movff	?___aldiv+3,calculateBitRatePer10Sec@bit_rate_per_10sec+3
  6804                           
  6805                           ;main.c: 364:     return bit_rate_per_10sec;
  6806   000BD2  C050  F03C         	movff	calculateBitRatePer10Sec@bit_rate_per_10sec,?_calculateBitRatePer10Sec
  6807   000BD6  C051  F03D         	movff	calculateBitRatePer10Sec@bit_rate_per_10sec+1,?_calculateBitRatePer10Sec+1
  6808   000BDA  C052  F03E         	movff	calculateBitRatePer10Sec@bit_rate_per_10sec+2,?_calculateBitRatePer10Sec+2
  6809   000BDE  C053  F03F         	movff	calculateBitRatePer10Sec@bit_rate_per_10sec+3,?_calculateBitRatePer10Sec+3
  6810   000BE2  0012               	return		;funcret
  6811   000BE4                     __end_of_calculateBitRatePer10Sec:
  6812                           	callstack 0
  6813                           
  6814 ;; *************** function ___lmul *****************
  6815 ;; Defined at:
  6816 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul32.c"
  6817 ;; Parameters:    Size  Location     Type
  6818 ;;  multiplier      4   33[COMRAM] unsigned long 
  6819 ;;  multiplicand    4   37[COMRAM] unsigned long 
  6820 ;; Auto vars:     Size  Location     Type
  6821 ;;  product         4   41[COMRAM] unsigned long 
  6822 ;; Return value:  Size  Location     Type
  6823 ;;                  4   33[COMRAM] unsigned long 
  6824 ;; Registers used:
  6825 ;;		wreg, status,2, status,0
  6826 ;; Tracked objects:
  6827 ;;		On entry : 0/0
  6828 ;;		On exit  : 0/0
  6829 ;;		Unchanged: 0/0
  6830 ;; Data sizes:     COMRAM   BANK0   BANK1
  6831 ;;      Params:         8       0       0
  6832 ;;      Locals:         4       0       0
  6833 ;;      Temps:          0       0       0
  6834 ;;      Totals:        12       0       0
  6835 ;;Total ram usage:       12 bytes
  6836 ;; Hardware stack levels used: 1
  6837 ;; Hardware stack levels required when called: 2
  6838 ;; This function calls:
  6839 ;;		Nothing
  6840 ;; This function is called by:
  6841 ;;		_string_long_vol
  6842 ;;		_calculateBitRatePer10Sec
  6843 ;;		_getExpected
  6844 ;;		_infusion
  6845 ;; This function uses a non-reentrant model
  6846 ;;
  6847                           
  6848                           	psect	text42
  6849   0019B8                     __ptext42:
  6850                           	callstack 0
  6851   0019B8                     ___lmul:
  6852                           	callstack 26
  6853                           
  6854                           ;incstack = 0
  6855   0019B8  0E00               	movlw	0
  6856   0019BA  6E2A               	movwf	___lmul@product^0,c
  6857   0019BC  0E00               	movlw	0
  6858   0019BE  6E2B               	movwf	(___lmul@product+1)^0,c
  6859   0019C0  0E00               	movlw	0
  6860   0019C2  6E2C               	movwf	(___lmul@product+2)^0,c
  6861   0019C4  0E00               	movlw	0
  6862   0019C6  6E2D               	movwf	(___lmul@product+3)^0,c
  6863   0019C8                     l4118:
  6864   0019C8  A022               	btfss	___lmul@multiplier^0,0,c
  6865   0019CA  D008               	goto	l4122
  6866   0019CC  5026               	movf	___lmul@multiplicand^0,w,c
  6867   0019CE  262A               	addwf	___lmul@product^0,f,c
  6868   0019D0  5027               	movf	(___lmul@multiplicand+1)^0,w,c
  6869   0019D2  222B               	addwfc	(___lmul@product+1)^0,f,c
  6870   0019D4  5028               	movf	(___lmul@multiplicand+2)^0,w,c
  6871   0019D6  222C               	addwfc	(___lmul@product+2)^0,f,c
  6872   0019D8  5029               	movf	(___lmul@multiplicand+3)^0,w,c
  6873   0019DA  222D               	addwfc	(___lmul@product+3)^0,f,c
  6874   0019DC                     l4122:
  6875   0019DC  90D8               	bcf	status,0,c
  6876   0019DE  3626               	rlcf	___lmul@multiplicand^0,f,c
  6877   0019E0  3627               	rlcf	(___lmul@multiplicand+1)^0,f,c
  6878   0019E2  3628               	rlcf	(___lmul@multiplicand+2)^0,f,c
  6879   0019E4  3629               	rlcf	(___lmul@multiplicand+3)^0,f,c
  6880   0019E6  90D8               	bcf	status,0,c
  6881   0019E8  3225               	rrcf	(___lmul@multiplier+3)^0,f,c
  6882   0019EA  3224               	rrcf	(___lmul@multiplier+2)^0,f,c
  6883   0019EC  3223               	rrcf	(___lmul@multiplier+1)^0,f,c
  6884   0019EE  3222               	rrcf	___lmul@multiplier^0,f,c
  6885   0019F0  5022               	movf	___lmul@multiplier^0,w,c
  6886   0019F2  1023               	iorwf	(___lmul@multiplier+1)^0,w,c
  6887   0019F4  1024               	iorwf	(___lmul@multiplier+2)^0,w,c
  6888   0019F6  1025               	iorwf	(___lmul@multiplier+3)^0,w,c
  6889   0019F8  A4D8               	btfss	status,2,c
  6890   0019FA  D7E6               	goto	l4118
  6891   0019FC  C02A  F022         	movff	___lmul@product,?___lmul
  6892   001A00  C02B  F023         	movff	___lmul@product+1,?___lmul+1
  6893   001A04  C02C  F024         	movff	___lmul@product+2,?___lmul+2
  6894   001A08  C02D  F025         	movff	___lmul@product+3,?___lmul+3
  6895   001A0C  0012               	return		;funcret
  6896   001A0E                     __end_of___lmul:
  6897                           	callstack 0
  6898                           
  6899 ;; *************** function ___aldiv *****************
  6900 ;; Defined at:
  6901 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\aldiv.c"
  6902 ;; Parameters:    Size  Location     Type
  6903 ;;  dividend        4   45[COMRAM] long 
  6904 ;;  divisor         4   49[COMRAM] long 
  6905 ;; Auto vars:     Size  Location     Type
  6906 ;;  quotient        4   55[COMRAM] long 
  6907 ;;  sign            1   54[COMRAM] unsigned char 
  6908 ;;  counter         1   53[COMRAM] unsigned char 
  6909 ;; Return value:  Size  Location     Type
  6910 ;;                  4   45[COMRAM] long 
  6911 ;; Registers used:
  6912 ;;		wreg, status,2, status,0
  6913 ;; Tracked objects:
  6914 ;;		On entry : 0/0
  6915 ;;		On exit  : 0/0
  6916 ;;		Unchanged: 0/0
  6917 ;; Data sizes:     COMRAM   BANK0   BANK1
  6918 ;;      Params:         8       0       0
  6919 ;;      Locals:         6       0       0
  6920 ;;      Temps:          0       0       0
  6921 ;;      Totals:        14       0       0
  6922 ;;Total ram usage:       14 bytes
  6923 ;; Hardware stack levels used: 1
  6924 ;; Hardware stack levels required when called: 2
  6925 ;; This function calls:
  6926 ;;		Nothing
  6927 ;; This function is called by:
  6928 ;;		_calculateBitRatePer10Sec
  6929 ;;		_infusion
  6930 ;;		_vfpfcnvrt
  6931 ;; This function uses a non-reentrant model
  6932 ;;
  6933                           
  6934                           	psect	text43
  6935   000DCC                     __ptext43:
  6936                           	callstack 0
  6937   000DCC                     ___aldiv:
  6938                           	callstack 23
  6939                           
  6940                           ;incstack = 0
  6941   000DCC  0E00               	movlw	0
  6942   000DCE  6E37               	movwf	___aldiv@sign^0,c
  6943   000DD0  AE35               	btfss	(___aldiv@divisor+3)^0,7,c
  6944   000DD2  D00A               	goto	l3964
  6945   000DD4  1E35               	comf	(___aldiv@divisor+3)^0,f,c
  6946   000DD6  1E34               	comf	(___aldiv@divisor+2)^0,f,c
  6947   000DD8  1E33               	comf	(___aldiv@divisor+1)^0,f,c
  6948   000DDA  6C32               	negf	___aldiv@divisor^0,c
  6949   000DDC  0E00               	movlw	0
  6950   000DDE  2233               	addwfc	(___aldiv@divisor+1)^0,f,c
  6951   000DE0  2234               	addwfc	(___aldiv@divisor+2)^0,f,c
  6952   000DE2  2235               	addwfc	(___aldiv@divisor+3)^0,f,c
  6953   000DE4  0E01               	movlw	1
  6954   000DE6  6E37               	movwf	___aldiv@sign^0,c
  6955   000DE8                     l3964:
  6956   000DE8  AE31               	btfss	(___aldiv@dividend+3)^0,7,c
  6957   000DEA  D00A               	goto	l3970
  6958   000DEC  1E31               	comf	(___aldiv@dividend+3)^0,f,c
  6959   000DEE  1E30               	comf	(___aldiv@dividend+2)^0,f,c
  6960   000DF0  1E2F               	comf	(___aldiv@dividend+1)^0,f,c
  6961   000DF2  6C2E               	negf	___aldiv@dividend^0,c
  6962   000DF4  0E00               	movlw	0
  6963   000DF6  222F               	addwfc	(___aldiv@dividend+1)^0,f,c
  6964   000DF8  2230               	addwfc	(___aldiv@dividend+2)^0,f,c
  6965   000DFA  2231               	addwfc	(___aldiv@dividend+3)^0,f,c
  6966   000DFC  0E01               	movlw	1
  6967   000DFE  1A37               	xorwf	___aldiv@sign^0,f,c
  6968   000E00                     l3970:
  6969   000E00  0E00               	movlw	0
  6970   000E02  6E38               	movwf	___aldiv@quotient^0,c
  6971   000E04  0E00               	movlw	0
  6972   000E06  6E39               	movwf	(___aldiv@quotient+1)^0,c
  6973   000E08  0E00               	movlw	0
  6974   000E0A  6E3A               	movwf	(___aldiv@quotient+2)^0,c
  6975   000E0C  0E00               	movlw	0
  6976   000E0E  6E3B               	movwf	(___aldiv@quotient+3)^0,c
  6977   000E10  5032               	movf	___aldiv@divisor^0,w,c
  6978   000E12  1033               	iorwf	(___aldiv@divisor+1)^0,w,c
  6979   000E14  1034               	iorwf	(___aldiv@divisor+2)^0,w,c
  6980   000E16  1035               	iorwf	(___aldiv@divisor+3)^0,w,c
  6981   000E18  B4D8               	btfsc	status,2,c
  6982   000E1A  D02A               	goto	l3992
  6983   000E1C  0E01               	movlw	1
  6984   000E1E  6E36               	movwf	___aldiv@counter^0,c
  6985   000E20  D006               	goto	l3978
  6986   000E22                     l3976:
  6987   000E22  90D8               	bcf	status,0,c
  6988   000E24  3632               	rlcf	___aldiv@divisor^0,f,c
  6989   000E26  3633               	rlcf	(___aldiv@divisor+1)^0,f,c
  6990   000E28  3634               	rlcf	(___aldiv@divisor+2)^0,f,c
  6991   000E2A  3635               	rlcf	(___aldiv@divisor+3)^0,f,c
  6992   000E2C  2A36               	incf	___aldiv@counter^0,f,c
  6993   000E2E                     l3978:
  6994   000E2E  AE35               	btfss	(___aldiv@divisor+3)^0,7,c
  6995   000E30  D7F8               	goto	l3976
  6996   000E32                     u3740:
  6997   000E32  90D8               	bcf	status,0,c
  6998   000E34  3638               	rlcf	___aldiv@quotient^0,f,c
  6999   000E36  3639               	rlcf	(___aldiv@quotient+1)^0,f,c
  7000   000E38  363A               	rlcf	(___aldiv@quotient+2)^0,f,c
  7001   000E3A  363B               	rlcf	(___aldiv@quotient+3)^0,f,c
  7002   000E3C  5032               	movf	___aldiv@divisor^0,w,c
  7003   000E3E  5C2E               	subwf	___aldiv@dividend^0,w,c
  7004   000E40  5033               	movf	(___aldiv@divisor+1)^0,w,c
  7005   000E42  582F               	subwfb	(___aldiv@dividend+1)^0,w,c
  7006   000E44  5034               	movf	(___aldiv@divisor+2)^0,w,c
  7007   000E46  5830               	subwfb	(___aldiv@dividend+2)^0,w,c
  7008   000E48  5035               	movf	(___aldiv@divisor+3)^0,w,c
  7009   000E4A  5831               	subwfb	(___aldiv@dividend+3)^0,w,c
  7010   000E4C  A0D8               	btfss	status,0,c
  7011   000E4E  D009               	goto	l3988
  7012   000E50  5032               	movf	___aldiv@divisor^0,w,c
  7013   000E52  5E2E               	subwf	___aldiv@dividend^0,f,c
  7014   000E54  5033               	movf	(___aldiv@divisor+1)^0,w,c
  7015   000E56  5A2F               	subwfb	(___aldiv@dividend+1)^0,f,c
  7016   000E58  5034               	movf	(___aldiv@divisor+2)^0,w,c
  7017   000E5A  5A30               	subwfb	(___aldiv@dividend+2)^0,f,c
  7018   000E5C  5035               	movf	(___aldiv@divisor+3)^0,w,c
  7019   000E5E  5A31               	subwfb	(___aldiv@dividend+3)^0,f,c
  7020   000E60  8038               	bsf	___aldiv@quotient^0,0,c
  7021   000E62                     l3988:
  7022   000E62  90D8               	bcf	status,0,c
  7023   000E64  3235               	rrcf	(___aldiv@divisor+3)^0,f,c
  7024   000E66  3234               	rrcf	(___aldiv@divisor+2)^0,f,c
  7025   000E68  3233               	rrcf	(___aldiv@divisor+1)^0,f,c
  7026   000E6A  3232               	rrcf	___aldiv@divisor^0,f,c
  7027   000E6C  2E36               	decfsz	___aldiv@counter^0,f,c
  7028   000E6E  D7E1               	goto	u3740
  7029   000E70                     l3992:
  7030   000E70  5037               	movf	___aldiv@sign^0,w,c
  7031   000E72  B4D8               	btfsc	status,2,c
  7032   000E74  D008               	goto	l3996
  7033   000E76  1E3B               	comf	(___aldiv@quotient+3)^0,f,c
  7034   000E78  1E3A               	comf	(___aldiv@quotient+2)^0,f,c
  7035   000E7A  1E39               	comf	(___aldiv@quotient+1)^0,f,c
  7036   000E7C  6C38               	negf	___aldiv@quotient^0,c
  7037   000E7E  0E00               	movlw	0
  7038   000E80  2239               	addwfc	(___aldiv@quotient+1)^0,f,c
  7039   000E82  223A               	addwfc	(___aldiv@quotient+2)^0,f,c
  7040   000E84  223B               	addwfc	(___aldiv@quotient+3)^0,f,c
  7041   000E86                     l3996:
  7042   000E86  C038  F02E         	movff	___aldiv@quotient,?___aldiv
  7043   000E8A  C039  F02F         	movff	___aldiv@quotient+1,?___aldiv+1
  7044   000E8E  C03A  F030         	movff	___aldiv@quotient+2,?___aldiv+2
  7045   000E92  C03B  F031         	movff	___aldiv@quotient+3,?___aldiv+3
  7046   000E96  0012               	return		;funcret
  7047   000E98                     __end_of___aldiv:
  7048                           	callstack 0
  7049                           
  7050 ;; *************** function ___lldiv *****************
  7051 ;; Defined at:
  7052 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\__lldiv.c"
  7053 ;; Parameters:    Size  Location     Type
  7054 ;;  dividend        4   20[COMRAM] unsigned long 
  7055 ;;  divisor         4   24[COMRAM] unsigned long 
  7056 ;; Auto vars:     Size  Location     Type
  7057 ;;  quotient        4   28[COMRAM] unsigned long 
  7058 ;;  counter         1   32[COMRAM] unsigned char 
  7059 ;; Return value:  Size  Location     Type
  7060 ;;                  4   20[COMRAM] unsigned long 
  7061 ;; Registers used:
  7062 ;;		wreg, status,2, status,0
  7063 ;; Tracked objects:
  7064 ;;		On entry : 0/0
  7065 ;;		On exit  : 0/0
  7066 ;;		Unchanged: 0/0
  7067 ;; Data sizes:     COMRAM   BANK0   BANK1
  7068 ;;      Params:         8       0       0
  7069 ;;      Locals:         5       0       0
  7070 ;;      Temps:          0       0       0
  7071 ;;      Totals:        13       0       0
  7072 ;;Total ram usage:       13 bytes
  7073 ;; Hardware stack levels used: 1
  7074 ;; Hardware stack levels required when called: 2
  7075 ;; This function calls:
  7076 ;;		Nothing
  7077 ;; This function is called by:
  7078 ;;		_getExpected
  7079 ;; This function uses a non-reentrant model
  7080 ;;
  7081                           
  7082                           	psect	text44
  7083   00146A                     __ptext44:
  7084                           	callstack 0
  7085   00146A                     ___lldiv:
  7086                           	callstack 25
  7087                           
  7088                           ;incstack = 0
  7089   00146A  0E00               	movlw	0
  7090   00146C  6E1D               	movwf	___lldiv@quotient^0,c
  7091   00146E  0E00               	movlw	0
  7092   001470  6E1E               	movwf	(___lldiv@quotient+1)^0,c
  7093   001472  0E00               	movlw	0
  7094   001474  6E1F               	movwf	(___lldiv@quotient+2)^0,c
  7095   001476  0E00               	movlw	0
  7096   001478  6E20               	movwf	(___lldiv@quotient+3)^0,c
  7097   00147A  5019               	movf	___lldiv@divisor^0,w,c
  7098   00147C  101A               	iorwf	(___lldiv@divisor+1)^0,w,c
  7099   00147E  101B               	iorwf	(___lldiv@divisor+2)^0,w,c
  7100   001480  101C               	iorwf	(___lldiv@divisor+3)^0,w,c
  7101   001482  B4D8               	btfsc	status,2,c
  7102   001484  D02A               	goto	l629
  7103   001486  0E01               	movlw	1
  7104   001488  6E21               	movwf	___lldiv@counter^0,c
  7105   00148A  D006               	goto	l4416
  7106   00148C                     l4414:
  7107   00148C  90D8               	bcf	status,0,c
  7108   00148E  3619               	rlcf	___lldiv@divisor^0,f,c
  7109   001490  361A               	rlcf	(___lldiv@divisor+1)^0,f,c
  7110   001492  361B               	rlcf	(___lldiv@divisor+2)^0,f,c
  7111   001494  361C               	rlcf	(___lldiv@divisor+3)^0,f,c
  7112   001496  2A21               	incf	___lldiv@counter^0,f,c
  7113   001498                     l4416:
  7114   001498  AE1C               	btfss	(___lldiv@divisor+3)^0,7,c
  7115   00149A  D7F8               	goto	l4414
  7116   00149C                     u4550:
  7117   00149C  90D8               	bcf	status,0,c
  7118   00149E  361D               	rlcf	___lldiv@quotient^0,f,c
  7119   0014A0  361E               	rlcf	(___lldiv@quotient+1)^0,f,c
  7120   0014A2  361F               	rlcf	(___lldiv@quotient+2)^0,f,c
  7121   0014A4  3620               	rlcf	(___lldiv@quotient+3)^0,f,c
  7122   0014A6  5019               	movf	___lldiv@divisor^0,w,c
  7123   0014A8  5C15               	subwf	___lldiv@dividend^0,w,c
  7124   0014AA  501A               	movf	(___lldiv@divisor+1)^0,w,c
  7125   0014AC  5816               	subwfb	(___lldiv@dividend+1)^0,w,c
  7126   0014AE  501B               	movf	(___lldiv@divisor+2)^0,w,c
  7127   0014B0  5817               	subwfb	(___lldiv@dividend+2)^0,w,c
  7128   0014B2  501C               	movf	(___lldiv@divisor+3)^0,w,c
  7129   0014B4  5818               	subwfb	(___lldiv@dividend+3)^0,w,c
  7130   0014B6  A0D8               	btfss	status,0,c
  7131   0014B8  D009               	goto	l4426
  7132   0014BA  5019               	movf	___lldiv@divisor^0,w,c
  7133   0014BC  5E15               	subwf	___lldiv@dividend^0,f,c
  7134   0014BE  501A               	movf	(___lldiv@divisor+1)^0,w,c
  7135   0014C0  5A16               	subwfb	(___lldiv@dividend+1)^0,f,c
  7136   0014C2  501B               	movf	(___lldiv@divisor+2)^0,w,c
  7137   0014C4  5A17               	subwfb	(___lldiv@dividend+2)^0,f,c
  7138   0014C6  501C               	movf	(___lldiv@divisor+3)^0,w,c
  7139   0014C8  5A18               	subwfb	(___lldiv@dividend+3)^0,f,c
  7140   0014CA  801D               	bsf	___lldiv@quotient^0,0,c
  7141   0014CC                     l4426:
  7142   0014CC  90D8               	bcf	status,0,c
  7143   0014CE  321C               	rrcf	(___lldiv@divisor+3)^0,f,c
  7144   0014D0  321B               	rrcf	(___lldiv@divisor+2)^0,f,c
  7145   0014D2  321A               	rrcf	(___lldiv@divisor+1)^0,f,c
  7146   0014D4  3219               	rrcf	___lldiv@divisor^0,f,c
  7147   0014D6  2E21               	decfsz	___lldiv@counter^0,f,c
  7148   0014D8  D7E1               	goto	u4550
  7149   0014DA                     l629:
  7150   0014DA  C01D  F015         	movff	___lldiv@quotient,?___lldiv
  7151   0014DE  C01E  F016         	movff	___lldiv@quotient+1,?___lldiv+1
  7152   0014E2  C01F  F017         	movff	___lldiv@quotient+2,?___lldiv+2
  7153   0014E6  C020  F018         	movff	___lldiv@quotient+3,?___lldiv+3
  7154   0014EA  0012               	return		;funcret
  7155   0014EC                     __end_of___lldiv:
  7156                           	callstack 0
  7157                           
  7158 ;; *************** function _delay_ms *****************
  7159 ;; Defined at:
  7160 ;;		line 36 in file "main.c"
  7161 ;; Parameters:    Size  Location     Type
  7162 ;;  milliseconds    2    4[COMRAM] unsigned int 
  7163 ;; Auto vars:     Size  Location     Type
  7164 ;;		None
  7165 ;; Return value:  Size  Location     Type
  7166 ;;                  1    wreg      void 
  7167 ;; Registers used:
  7168 ;;		wreg, status,2, status,0
  7169 ;; Tracked objects:
  7170 ;;		On entry : 0/0
  7171 ;;		On exit  : 0/0
  7172 ;;		Unchanged: 0/0
  7173 ;; Data sizes:     COMRAM   BANK0   BANK1
  7174 ;;      Params:         2       0       0
  7175 ;;      Locals:         0       0       0
  7176 ;;      Temps:          1       0       0
  7177 ;;      Totals:         3       0       0
  7178 ;;Total ram usage:        3 bytes
  7179 ;; Hardware stack levels used: 1
  7180 ;; Hardware stack levels required when called: 2
  7181 ;; This function calls:
  7182 ;;		Nothing
  7183 ;; This function is called by:
  7184 ;;		_infusion
  7185 ;; This function uses a non-reentrant model
  7186 ;;
  7187                           
  7188                           	psect	text45
  7189   001CB2                     __ptext45:
  7190                           	callstack 0
  7191   001CB2                     _delay_ms:
  7192                           	callstack 26
  7193                           
  7194                           ;main.c: 37:     while(milliseconds > 0) {
  7195                           
  7196                           ;incstack = 0
  7197   001CB2  D00A               	goto	l447
  7198   001CB4                     l4442:
  7199                           
  7200                           ;main.c: 38:         _delay((unsigned long)((1)*(8000000L/4000.0)));
  7201   001CB4  0E03               	movlw	3
  7202   001CB6  6E07               	movwf	??_delay_ms^0,c
  7203   001CB8  0E98               	movlw	152
  7204   001CBA                     u5117:
  7205   001CBA  2EE8               	decfsz	wreg,f,c
  7206   001CBC  D7FE               	bra	u5117
  7207   001CBE  2E07               	decfsz	??_delay_ms^0,f,c
  7208   001CC0  D7FC               	bra	u5117
  7209                           
  7210                           ;main.c: 39:         milliseconds--;
  7211   001CC2  0605               	decf	delay_ms@milliseconds^0,f,c
  7212   001CC4  A0D8               	btfss	status,0,c
  7213   001CC6  0606               	decf	(delay_ms@milliseconds+1)^0,f,c
  7214   001CC8                     l447:
  7215                           
  7216                           ;main.c: 37:     while(milliseconds > 0) {
  7217   001CC8  5005               	movf	delay_ms@milliseconds^0,w,c
  7218   001CCA  1006               	iorwf	(delay_ms@milliseconds+1)^0,w,c
  7219   001CCC  B4D8               	btfsc	status,2,c
  7220   001CCE  0012               	return	
  7221   001CD0  D7F1               	goto	l4442
  7222   001CD2                     __end_of_delay_ms:
  7223                           	callstack 0
  7224                           
  7225 ;; *************** function _Timer1_start *****************
  7226 ;; Defined at:
  7227 ;;		line 125 in file "main.c"
  7228 ;; Parameters:    Size  Location     Type
  7229 ;;		None
  7230 ;; Auto vars:     Size  Location     Type
  7231 ;;		None
  7232 ;; Return value:  Size  Location     Type
  7233 ;;                  1    wreg      void 
  7234 ;; Registers used:
  7235 ;;		wreg, status,2
  7236 ;; Tracked objects:
  7237 ;;		On entry : 0/0
  7238 ;;		On exit  : 0/0
  7239 ;;		Unchanged: 0/0
  7240 ;; Data sizes:     COMRAM   BANK0   BANK1
  7241 ;;      Params:         0       0       0
  7242 ;;      Locals:         0       0       0
  7243 ;;      Temps:          0       0       0
  7244 ;;      Totals:         0       0       0
  7245 ;;Total ram usage:        0 bytes
  7246 ;; Hardware stack levels used: 1
  7247 ;; Hardware stack levels required when called: 2
  7248 ;; This function calls:
  7249 ;;		Nothing
  7250 ;; This function is called by:
  7251 ;;		_infusion
  7252 ;; This function uses a non-reentrant model
  7253 ;;
  7254                           
  7255                           	psect	text46
  7256   001CD2                     __ptext46:
  7257                           	callstack 0
  7258   001CD2                     _Timer1_start:
  7259                           	callstack 26
  7260                           
  7261                           ;main.c: 127:     GIE=1;
  7262                           
  7263                           ;incstack = 0
  7264   001CD2  8EF2               	bsf	4082,7,c	;volatile
  7265                           
  7266                           ;main.c: 128:     PEIE=1;
  7267   001CD4  8CF2               	bsf	4082,6,c	;volatile
  7268                           
  7269                           ;main.c: 129:     TMR1IE=1;
  7270   001CD6  809D               	bsf	3997,0,c	;volatile
  7271                           
  7272                           ;main.c: 130:     TMR1IF=0;
  7273   001CD8  909E               	bcf	3998,0,c	;volatile
  7274                           
  7275                           ;main.c: 133:     T1CON=0x80;
  7276   001CDA  0E80               	movlw	128
  7277   001CDC  6ECD               	movwf	205,c	;volatile
  7278                           
  7279                           ;main.c: 134:     TMR1=0xF856;
  7280   001CDE  0EF8               	movlw	248
  7281   001CE0  6ECF               	movwf	207,c	;volatile
  7282   001CE2  0E56               	movlw	86
  7283   001CE4  6ECE               	movwf	206,c	;volatile
  7284                           
  7285                           ;main.c: 135:     TMR1ON=1;
  7286   001CE6  80CD               	bsf	4045,0,c	;volatile
  7287   001CE8  0012               	return		;funcret
  7288   001CEA                     __end_of_Timer1_start:
  7289                           	callstack 0
  7290                           
  7291 ;; *************** function _GetNextState *****************
  7292 ;; Defined at:
  7293 ;;		line 587 in file "main.c"
  7294 ;; Parameters:    Size  Location     Type
  7295 ;;  currentState    1    wreg     enum E2620
  7296 ;;  input           1    4[COMRAM] unsigned char 
  7297 ;; Auto vars:     Size  Location     Type
  7298 ;;  currentState    1    7[COMRAM] enum E2620
  7299 ;; Return value:  Size  Location     Type
  7300 ;;                  1    wreg      enum E2620
  7301 ;; Registers used:
  7302 ;;		wreg, status,2, status,0
  7303 ;; Tracked objects:
  7304 ;;		On entry : 3F/0
  7305 ;;		On exit  : 0/0
  7306 ;;		Unchanged: 0/0
  7307 ;; Data sizes:     COMRAM   BANK0   BANK1
  7308 ;;      Params:         1       0       0
  7309 ;;      Locals:         1       0       0
  7310 ;;      Temps:          2       0       0
  7311 ;;      Totals:         4       0       0
  7312 ;;Total ram usage:        4 bytes
  7313 ;; Hardware stack levels used: 1
  7314 ;; Hardware stack levels required when called: 2
  7315 ;; This function calls:
  7316 ;;		Nothing
  7317 ;; This function is called by:
  7318 ;;		_main
  7319 ;; This function uses a non-reentrant model
  7320 ;;
  7321                           
  7322                           	psect	text47
  7323   0014EC                     __ptext47:
  7324                           	callstack 0
  7325   0014EC                     _GetNextState:
  7326                           	callstack 28
  7327                           
  7328                           ;incstack = 0
  7329                           ;GetNextState@currentState stored from wreg
  7330   0014EC  6E08               	movwf	GetNextState@currentState^0,c
  7331                           
  7332                           ;main.c: 588:     switch (currentState) {
  7333   0014EE  D029               	goto	l4892
  7334   0014F0                     l4844:
  7335                           
  7336                           ;main.c: 590:             if (input == '1') return MAIN_MENU;
  7337   0014F0  0E31               	movlw	49
  7338   0014F2  1805               	xorwf	GetNextState@input^0,w,c
  7339   0014F4  A4D8               	btfss	status,2,c
  7340   0014F6  D039               	goto	l4894
  7341   0014F8                     u4730:
  7342   0014F8  0E01               	movlw	1
  7343   0014FA  0012               	return	
  7344   0014FC                     l4850:
  7345                           
  7346                           ;main.c: 593:             if (input == 'b') return MAIN_MENU;
  7347   0014FC  0E62               	movlw	98
  7348   0014FE  1805               	xorwf	GetNextState@input^0,w,c
  7349   001500  B4D8               	btfsc	status,2,c
  7350   001502  D7FA               	goto	u4730
  7351   001504  D032               	goto	l4894
  7352   001506                     l4856:
  7353                           
  7354                           ;main.c: 596:             if (input == '1') return SET_UP_INFUSION;
  7355   001506  0E31               	movlw	49
  7356   001508  1805               	xorwf	GetNextState@input^0,w,c
  7357   00150A  A4D8               	btfss	status,2,c
  7358   00150C  D002               	goto	l4862
  7359   00150E  0E02               	movlw	2
  7360   001510  0012               	return	
  7361   001512                     l4862:
  7362                           
  7363                           ;main.c: 597:             if (input == '2') return MANUAL_SCREEN;
  7364   001512  0E32               	movlw	50
  7365   001514  1805               	xorwf	GetNextState@input^0,w,c
  7366   001516  A4D8               	btfss	status,2,c
  7367   001518  D002               	goto	l4868
  7368   00151A  0E03               	movlw	3
  7369   00151C  0012               	return	
  7370   00151E                     l4868:
  7371                           
  7372                           ;main.c: 598:             if (input == '3') return SETTINGS;
  7373   00151E  0E33               	movlw	51
  7374   001520  1805               	xorwf	GetNextState@input^0,w,c
  7375   001522  A4D8               	btfss	status,2,c
  7376   001524  D002               	goto	l4874
  7377   001526  0E04               	movlw	4
  7378   001528  0012               	return	
  7379   00152A                     l4874:
  7380                           
  7381                           ;main.c: 599:             if (input == '4') return ABOUT_PAGE;
  7382   00152A  0E34               	movlw	52
  7383   00152C  1805               	xorwf	GetNextState@input^0,w,c
  7384   00152E  A4D8               	btfss	status,2,c
  7385   001530  D002               	goto	l4880
  7386   001532  0E05               	movlw	5
  7387   001534  0012               	return	
  7388   001536                     l4880:
  7389                           
  7390                           ;main.c: 600:             if (input == 'b') return WELCOME_SCREEN;
  7391   001536  0E62               	movlw	98
  7392   001538  1805               	xorwf	GetNextState@input^0,w,c
  7393   00153A  A4D8               	btfss	status,2,c
  7394   00153C  D016               	goto	l4894
  7395   00153E  0E00               	movlw	0
  7396   001540  0012               	return	
  7397   001542                     l4892:
  7398   001542  5008               	movf	GetNextState@currentState^0,w,c
  7399   001544  6E06               	movwf	??_GetNextState^0,c
  7400   001546  6A07               	clrf	(??_GetNextState+1)^0,c
  7401                           
  7402                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7403                           ; Switch size 1, requested type "simple"
  7404                           ; Number of cases is 1, Range of values is 0 to 0
  7405                           ; switch strategies available:
  7406                           ; Name         Instructions Cycles
  7407                           ; simple_byte            4     3 (average)
  7408                           ;	Chosen strategy is simple_byte
  7409   001548  5007               	movf	(??_GetNextState+1)^0,w,c
  7410   00154A  0A00               	xorlw	0	; case 0
  7411   00154C  A4D8               	btfss	status,2,c
  7412   00154E  D00D               	goto	l4894
  7413                           
  7414                           ; Switch size 1, requested type "simple"
  7415                           ; Number of cases is 4, Range of values is 0 to 3
  7416                           ; switch strategies available:
  7417                           ; Name         Instructions Cycles
  7418                           ; simple_byte           13     7 (average)
  7419                           ;	Chosen strategy is simple_byte
  7420   001550  5006               	movf	??_GetNextState^0,w,c
  7421   001552  0A00               	xorlw	0	; case 0
  7422   001554  B4D8               	btfsc	status,2,c
  7423   001556  D7CC               	goto	l4844
  7424   001558  0A01               	xorlw	1	; case 1
  7425   00155A  B4D8               	btfsc	status,2,c
  7426   00155C  D7D4               	goto	l4856
  7427   00155E  0A03               	xorlw	3	; case 2
  7428   001560  B4D8               	btfsc	status,2,c
  7429   001562  D7CA               	goto	u4730
  7430   001564  0A01               	xorlw	1	; case 3
  7431   001566  B4D8               	btfsc	status,2,c
  7432   001568  D7C9               	goto	l4850
  7433   00156A                     l4894:
  7434                           
  7435                           ;main.c: 606:     return currentState;
  7436   00156A  5008               	movf	GetNextState@currentState^0,w,c
  7437   00156C  0012               	return		;funcret
  7438   00156E                     __end_of_GetNextState:
  7439                           	callstack 0
  7440                           
  7441 ;; *************** function _Timer1_ISR *****************
  7442 ;; Defined at:
  7443 ;;		line 44 in file "main.c"
  7444 ;; Parameters:    Size  Location     Type
  7445 ;;		None
  7446 ;; Auto vars:     Size  Location     Type
  7447 ;;		None
  7448 ;; Return value:  Size  Location     Type
  7449 ;;                  1    wreg      void 
  7450 ;; Registers used:
  7451 ;;		wreg, status,2, status,0, cstack
  7452 ;; Tracked objects:
  7453 ;;		On entry : 0/0
  7454 ;;		On exit  : 0/0
  7455 ;;		Unchanged: 0/0
  7456 ;; Data sizes:     COMRAM   BANK0   BANK1
  7457 ;;      Params:         0       0       0
  7458 ;;      Locals:         0       0       0
  7459 ;;      Temps:          1       0       0
  7460 ;;      Totals:         1       0       0
  7461 ;;Total ram usage:        1 bytes
  7462 ;; Hardware stack levels used: 1
  7463 ;; Hardware stack levels required when called: 1
  7464 ;; This function calls:
  7465 ;;		_signalServo
  7466 ;; This function is called by:
  7467 ;;		Interrupt level 2
  7468 ;; This function uses a non-reentrant model
  7469 ;;
  7470                           
  7471                           	psect	intcode
  7472   000008                     __pintcode:
  7473                           	callstack 0
  7474   000008                     _Timer1_ISR:
  7475                           	callstack 22
  7476                           
  7477                           ;incstack = 0
  7478   000008  827B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7479                           
  7480                           ;main.c: 46:     if (TMR1IF == 1) {
  7481   00000A  A09E               	btfss	3998,0,c	;volatile
  7482   00000C  D00E               	goto	i2l455
  7483                           
  7484                           ;main.c: 47:         TMR1=0xF856;
  7485   00000E  0EF8               	movlw	248
  7486   000010  6ECF               	movwf	207,c	;volatile
  7487   000012  0E56               	movlw	86
  7488   000014  6ECE               	movwf	206,c	;volatile
  7489                           
  7490                           ;main.c: 48:         LATB = ~LATB;
  7491   000016  1E8A               	comf	138,f,c	;volatile
  7492                           
  7493                           ;main.c: 49:         PIR1bits.TMR1IF=0;
  7494   000018  909E               	bcf	158,0,c	;volatile
  7495                           
  7496                           ;main.c: 50:         mil++;
  7497   00001A  0E01               	movlw	1
  7498   00001C  0100               	movlb	0	; () banked
  7499   00001E  27A8               	addwf	_mil& (0+255),f,b
  7500   000020  0E00               	movlw	0
  7501   000022  23A9               	addwfc	(_mil+1)& (0+255),f,b
  7502   000024  23AA               	addwfc	(_mil+2)& (0+255),f,b
  7503   000026  23AB               	addwfc	(_mil+3)& (0+255),f,b
  7504                           
  7505                           ;main.c: 51:     }
  7506   000028  D0AF               	goto	i2l466
  7507   00002A                     i2l455:
  7508   00002A  A4F2               	btfss	4082,2,c	;volatile
  7509   00002C  D0AD               	goto	i2l466
  7510                           
  7511                           ;main.c: 53:         INTCONbits.TMR0IF=0;
  7512   00002E  94F2               	bcf	242,2,c	;volatile
  7513                           
  7514                           ;main.c: 55:         switch (servo_active){
  7515   000030  D094               	goto	i2l3720
  7516   000032                     i2l3694:
  7517   000032  B28B               	btfsc	139,1,c	;volatile
  7518   000034  D003               	goto	i2u317_40
  7519   000036  6A04               	clrf	??_Timer1_ISR^0,c
  7520   000038  2A04               	incf	??_Timer1_ISR^0,f,c
  7521   00003A  D001               	goto	i2u318_48
  7522   00003C                     i2u317_40:
  7523   00003C  6A04               	clrf	??_Timer1_ISR^0,c
  7524   00003E                     i2u318_48:
  7525   00003E  4604               	rlncf	??_Timer1_ISR^0,f,c
  7526   000040  508B               	movf	139,w,c	;volatile
  7527   000042  1804               	xorwf	??_Timer1_ISR^0,w,c
  7528   000044  0BFD               	andlw	-3
  7529   000046  1804               	xorwf	??_Timer1_ISR^0,w,c
  7530   000048  6E8B               	movwf	139,c	;volatile
  7531   00004A  C0AE  F001         	movff	_pulse,signalServo@pulseServo
  7532   00004E  C0AF  F002         	movff	_pulse+1,signalServo@pulseServo+1
  7533   000052  A28B               	btfss	139,1,c	;volatile
  7534   000054  D002               	goto	i2u319_40
  7535   000056  0E01               	movlw	1
  7536   000058  D001               	goto	i2u319_46
  7537   00005A                     i2u319_40:
  7538   00005A  0E00               	movlw	0
  7539   00005C                     i2u319_46:
  7540   00005C  ECAF  F00D         	call	_signalServo
  7541   000060  D08F               	goto	i2l460
  7542   000062                     i2l3698:
  7543   000062  B28A               	btfsc	138,1,c	;volatile
  7544   000064  D003               	goto	i2u320_40
  7545   000066  6A04               	clrf	??_Timer1_ISR^0,c
  7546   000068  2A04               	incf	??_Timer1_ISR^0,f,c
  7547   00006A  D001               	goto	i2u321_48
  7548   00006C                     i2u320_40:
  7549   00006C  6A04               	clrf	??_Timer1_ISR^0,c
  7550   00006E                     i2u321_48:
  7551   00006E  4604               	rlncf	??_Timer1_ISR^0,f,c
  7552   000070  508A               	movf	138,w,c	;volatile
  7553   000072  1804               	xorwf	??_Timer1_ISR^0,w,c
  7554   000074  0BFD               	andlw	-3
  7555   000076  1804               	xorwf	??_Timer1_ISR^0,w,c
  7556   000078  6E8A               	movwf	138,c	;volatile
  7557   00007A  C0B0  F001         	movff	_pulse+2,signalServo@pulseServo
  7558   00007E  C0B1  F002         	movff	_pulse+3,signalServo@pulseServo+1
  7559   000082  A28A               	btfss	138,1,c	;volatile
  7560   000084  D002               	goto	i2u322_40
  7561   000086  0E01               	movlw	1
  7562   000088  D001               	goto	i2u322_46
  7563   00008A                     i2u322_40:
  7564   00008A  0E00               	movlw	0
  7565   00008C                     i2u322_46:
  7566   00008C  ECAF  F00D         	call	_signalServo
  7567   000090  D077               	goto	i2l460
  7568   000092                     i2l3702:
  7569   000092  B48A               	btfsc	138,2,c	;volatile
  7570   000094  D003               	goto	i2u323_40
  7571   000096  6A04               	clrf	??_Timer1_ISR^0,c
  7572   000098  2A04               	incf	??_Timer1_ISR^0,f,c
  7573   00009A  D001               	goto	i2u324_48
  7574   00009C                     i2u323_40:
  7575   00009C  6A04               	clrf	??_Timer1_ISR^0,c
  7576   00009E                     i2u324_48:
  7577   00009E  4604               	rlncf	??_Timer1_ISR^0,f,c
  7578   0000A0  4604               	rlncf	??_Timer1_ISR^0,f,c
  7579   0000A2  508A               	movf	138,w,c	;volatile
  7580   0000A4  1804               	xorwf	??_Timer1_ISR^0,w,c
  7581   0000A6  0BFB               	andlw	-5
  7582   0000A8  1804               	xorwf	??_Timer1_ISR^0,w,c
  7583   0000AA  6E8A               	movwf	138,c	;volatile
  7584   0000AC  C0B2  F001         	movff	_pulse+4,signalServo@pulseServo
  7585   0000B0  C0B3  F002         	movff	_pulse+5,signalServo@pulseServo+1
  7586   0000B4  A48A               	btfss	138,2,c	;volatile
  7587   0000B6  D002               	goto	i2u325_40
  7588   0000B8  0E01               	movlw	1
  7589   0000BA  D001               	goto	i2u325_46
  7590   0000BC                     i2u325_40:
  7591   0000BC  0E00               	movlw	0
  7592   0000BE                     i2u325_46:
  7593   0000BE  ECAF  F00D         	call	_signalServo
  7594   0000C2  D05E               	goto	i2l460
  7595   0000C4                     i2l3706:
  7596   0000C4  B68A               	btfsc	138,3,c	;volatile
  7597   0000C6  D003               	goto	i2u326_40
  7598   0000C8  6A04               	clrf	??_Timer1_ISR^0,c
  7599   0000CA  2A04               	incf	??_Timer1_ISR^0,f,c
  7600   0000CC  D001               	goto	i2u327_48
  7601   0000CE                     i2u326_40:
  7602   0000CE  6A04               	clrf	??_Timer1_ISR^0,c
  7603   0000D0                     i2u327_48:
  7604   0000D0  4604               	rlncf	??_Timer1_ISR^0,f,c
  7605   0000D2  4604               	rlncf	??_Timer1_ISR^0,f,c
  7606   0000D4  4604               	rlncf	??_Timer1_ISR^0,f,c
  7607   0000D6  508A               	movf	138,w,c	;volatile
  7608   0000D8  1804               	xorwf	??_Timer1_ISR^0,w,c
  7609   0000DA  0BF7               	andlw	-9
  7610   0000DC  1804               	xorwf	??_Timer1_ISR^0,w,c
  7611   0000DE  6E8A               	movwf	138,c	;volatile
  7612   0000E0  C0B4  F001         	movff	_pulse+6,signalServo@pulseServo
  7613   0000E4  C0B5  F002         	movff	_pulse+7,signalServo@pulseServo+1
  7614   0000E8  A68A               	btfss	138,3,c	;volatile
  7615   0000EA  D002               	goto	i2u328_40
  7616   0000EC  0E01               	movlw	1
  7617   0000EE  D001               	goto	i2u328_46
  7618   0000F0                     i2u328_40:
  7619   0000F0  0E00               	movlw	0
  7620   0000F2                     i2u328_46:
  7621   0000F2  ECAF  F00D         	call	_signalServo
  7622   0000F6  D044               	goto	i2l460
  7623   0000F8                     i2l3710:
  7624   0000F8  B88A               	btfsc	138,4,c	;volatile
  7625   0000FA  D003               	goto	i2u329_40
  7626   0000FC  6A04               	clrf	??_Timer1_ISR^0,c
  7627   0000FE  2A04               	incf	??_Timer1_ISR^0,f,c
  7628   000100  D001               	goto	i2u330_48
  7629   000102                     i2u329_40:
  7630   000102  6A04               	clrf	??_Timer1_ISR^0,c
  7631   000104                     i2u330_48:
  7632   000104  3A04               	swapf	??_Timer1_ISR^0,f,c
  7633   000106  508A               	movf	138,w,c	;volatile
  7634   000108  1804               	xorwf	??_Timer1_ISR^0,w,c
  7635   00010A  0BEF               	andlw	-17
  7636   00010C  1804               	xorwf	??_Timer1_ISR^0,w,c
  7637   00010E  6E8A               	movwf	138,c	;volatile
  7638   000110  C0B6  F001         	movff	_pulse+8,signalServo@pulseServo
  7639   000114  C0B7  F002         	movff	_pulse+9,signalServo@pulseServo+1
  7640   000118  A88A               	btfss	138,4,c	;volatile
  7641   00011A  D002               	goto	i2u331_40
  7642   00011C  0E01               	movlw	1
  7643   00011E  D001               	goto	i2u331_46
  7644   000120                     i2u331_40:
  7645   000120  0E00               	movlw	0
  7646   000122                     i2u331_46:
  7647   000122  ECAF  F00D         	call	_signalServo
  7648   000126  D02C               	goto	i2l460
  7649   000128                     i2l3714:
  7650   000128  BA8A               	btfsc	138,5,c	;volatile
  7651   00012A  D003               	goto	i2u332_40
  7652   00012C  6A04               	clrf	??_Timer1_ISR^0,c
  7653   00012E  2A04               	incf	??_Timer1_ISR^0,f,c
  7654   000130  D001               	goto	i2u333_48
  7655   000132                     i2u332_40:
  7656   000132  6A04               	clrf	??_Timer1_ISR^0,c
  7657   000134                     i2u333_48:
  7658   000134  3A04               	swapf	??_Timer1_ISR^0,f,c
  7659   000136  4604               	rlncf	??_Timer1_ISR^0,f,c
  7660   000138  508A               	movf	138,w,c	;volatile
  7661   00013A  1804               	xorwf	??_Timer1_ISR^0,w,c
  7662   00013C  0BDF               	andlw	-33
  7663   00013E  1804               	xorwf	??_Timer1_ISR^0,w,c
  7664   000140  6E8A               	movwf	138,c	;volatile
  7665   000142  C0B8  F001         	movff	_pulse+10,signalServo@pulseServo
  7666   000146  C0B9  F002         	movff	_pulse+11,signalServo@pulseServo+1
  7667   00014A  AA8A               	btfss	138,5,c	;volatile
  7668   00014C  D002               	goto	i2u334_40
  7669   00014E  0E01               	movlw	1
  7670   000150  D001               	goto	i2u334_46
  7671   000152                     i2u334_40:
  7672   000152  0E00               	movlw	0
  7673   000154                     i2u334_46:
  7674   000154  ECAF  F00D         	call	_signalServo
  7675   000158  D013               	goto	i2l460
  7676   00015A                     i2l3720:
  7677   00015A  507A               	movf	_servo_active^0,w,c
  7678                           
  7679                           ; Switch size 1, requested type "simple"
  7680                           ; Number of cases is 6, Range of values is 1 to 6
  7681                           ; switch strategies available:
  7682                           ; Name         Instructions Cycles
  7683                           ; simple_byte           19    10 (average)
  7684                           ;	Chosen strategy is simple_byte
  7685   00015C  0A01               	xorlw	1	; case 1
  7686   00015E  B4D8               	btfsc	status,2,c
  7687   000160  D768               	goto	i2l3694
  7688   000162  0A03               	xorlw	3	; case 2
  7689   000164  B4D8               	btfsc	status,2,c
  7690   000166  D77D               	goto	i2l3698
  7691   000168  0A01               	xorlw	1	; case 3
  7692   00016A  B4D8               	btfsc	status,2,c
  7693   00016C  D792               	goto	i2l3702
  7694   00016E  0A07               	xorlw	7	; case 4
  7695   000170  B4D8               	btfsc	status,2,c
  7696   000172  D7A8               	goto	i2l3706
  7697   000174  0A01               	xorlw	1	; case 5
  7698   000176  B4D8               	btfsc	status,2,c
  7699   000178  D7BF               	goto	i2l3710
  7700   00017A  0A03               	xorlw	3	; case 6
  7701   00017C  B4D8               	btfsc	status,2,c
  7702   00017E  D7D4               	goto	i2l3714
  7703   000180                     i2l460:
  7704                           
  7705                           ;main.c: 63:         {TMR0H=(TMR0_ini>>8); TMR0L=(TMR0_ini&0x00FF);};
  7706   000180  C078  FFD7         	movff	_TMR0_ini+1,4055	;volatile
  7707   000184  C077  FFD6         	movff	_TMR0_ini,4054	;volatile
  7708   000188                     i2l466:
  7709   000188  927B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7710   00018A  0011               	retfie		f
  7711   00018C                     __end_of_Timer1_ISR:
  7712                           	callstack 0
  7713                           
  7714 ;; *************** function _signalServo *****************
  7715 ;; Defined at:
  7716 ;;		line 9 in file "servo.c"
  7717 ;; Parameters:    Size  Location     Type
  7718 ;;  pinServo        1    wreg     unsigned char 
  7719 ;;  pulseServo      2    0[COMRAM] unsigned short 
  7720 ;; Auto vars:     Size  Location     Type
  7721 ;;  pinServo        1    2[COMRAM] unsigned char 
  7722 ;; Return value:  Size  Location     Type
  7723 ;;                  1    wreg      void 
  7724 ;; Registers used:
  7725 ;;		wreg, status,2, status,0
  7726 ;; Tracked objects:
  7727 ;;		On entry : 0/0
  7728 ;;		On exit  : 0/0
  7729 ;;		Unchanged: 0/0
  7730 ;; Data sizes:     COMRAM   BANK0   BANK1
  7731 ;;      Params:         2       0       0
  7732 ;;      Locals:         1       0       0
  7733 ;;      Temps:          0       0       0
  7734 ;;      Totals:         3       0       0
  7735 ;;Total ram usage:        3 bytes
  7736 ;; Hardware stack levels used: 1
  7737 ;; This function calls:
  7738 ;;		Nothing
  7739 ;; This function is called by:
  7740 ;;		_Timer1_ISR
  7741 ;; This function uses a non-reentrant model
  7742 ;;
  7743                           
  7744                           	psect	text49
  7745   001B5E                     __ptext49:
  7746                           	callstack 0
  7747   001B5E                     _signalServo:
  7748                           	callstack 22
  7749                           
  7750                           ;incstack = 0
  7751                           ;signalServo@pinServo stored from wreg
  7752   001B5E  6E03               	movwf	signalServo@pinServo^0,c
  7753                           
  7754                           ;servo.c: 10:     if (pinServo){
  7755   001B60  5003               	movf	signalServo@pinServo^0,w,c
  7756   001B62  B4D8               	btfsc	status,2,c
  7757   001B64  D009               	goto	i2l3560
  7758                           
  7759                           ;servo.c: 11:         TMR0_ini= (uint16_t)(65536-pulseServo+30);
  7760   001B66  5001               	movf	signalServo@pulseServo^0,w,c
  7761   001B68  081E               	sublw	30
  7762   001B6A  6E77               	movwf	_TMR0_ini^0,c
  7763   001B6C  5002               	movf	(signalServo@pulseServo+1)^0,w,c
  7764   001B6E  A0D8               	btfss	status,0,c
  7765   001B70  2AE8               	incf	wreg,f,c
  7766   001B72  0800               	sublw	0
  7767   001B74  6E78               	movwf	(_TMR0_ini+1)^0,c
  7768                           
  7769                           ;servo.c: 12:     }
  7770   001B76  0012               	return	
  7771   001B78                     i2l3560:
  7772                           
  7773                           ;servo.c: 14:         TMR0_ini= (65536-(20000/6)+pulseServo+30);
  7774   001B78  0E19               	movlw	25
  7775   001B7A  2401               	addwf	signalServo@pulseServo^0,w,c
  7776   001B7C  6E77               	movwf	_TMR0_ini^0,c
  7777   001B7E  0EF3               	movlw	243
  7778   001B80  2002               	addwfc	(signalServo@pulseServo+1)^0,w,c
  7779   001B82  6E78               	movwf	(_TMR0_ini+1)^0,c
  7780                           
  7781                           ;servo.c: 16:         if(servo_active == 6) servo_active=1;
  7782   001B84  0E06               	movlw	6
  7783   001B86  187A               	xorwf	_servo_active^0,w,c
  7784   001B88  A4D8               	btfss	status,2,c
  7785   001B8A  D003               	goto	i2l3564
  7786   001B8C  0E01               	movlw	1
  7787   001B8E  6E7A               	movwf	_servo_active^0,c
  7788   001B90  0012               	return	
  7789   001B92                     i2l3564:
  7790   001B92  2A7A               	incf	_servo_active^0,f,c
  7791   001B94  0012               	return		;funcret
  7792   001B96                     __end_of_signalServo:
  7793                           	callstack 0
  7794                           
  7795                           	psect	rparam
  7796   000000                     
  7797                           	psect	temp
  7798   00007B                     btemp:
  7799                           	callstack 0
  7800   00007B                     	ds	1
  7801   000000                     int$flags	set	btemp
  7802   000000                     wtemp8	set	btemp+1
  7803   000000                     ttemp5	set	btemp+1
  7804   000000                     ttemp6	set	btemp+4
  7805   000000                     ttemp7	set	btemp+8
  7806                           
  7807                           	psect	config
  7808                           
  7809                           ; Padding undefined space
  7810   300000                     	org	3145728
  7811   300000  FF                 	db	255
  7812                           
  7813                           ;Config register CONFIG1H @ 0x300001
  7814                           ;	Oscillator
  7815                           ;	OSC = INTIO2, Internal oscillator block, port function on RA6 and RA7
  7816                           ;	Fail-Safe Clock Monitor Enable bit
  7817                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  7818                           ;	Internal/External Oscillator Switchover bit
  7819                           ;	IESO = OFF, Oscillator Switchover mode disabled
  7820   300001                     	org	3145729
  7821   300001  08                 	db	8
  7822                           
  7823                           ;Config register CONFIG2L @ 0x300002
  7824                           ;	Power-up Timer Enable bit
  7825                           ;	PWRT = ON, PWRT enabled
  7826                           ;	Brown-out Reset Enable bits
  7827                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  7828                           ;	Brown-out Reset Voltage bits
  7829                           ;	BORV = 3, Minimum Setting
  7830   300002                     	org	3145730
  7831   300002  1E                 	db	30
  7832                           
  7833                           ;Config register CONFIG2H @ 0x300003
  7834                           ;	Watchdog Timer Enable bit
  7835                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  7836                           ;	Watchdog Timer Postscale Select bits
  7837                           ;	WDTPS = 32768, 1:32768
  7838   300003                     	org	3145731
  7839   300003  1E                 	db	30
  7840                           
  7841                           ; Padding undefined space
  7842   300004                     	org	3145732
  7843   300004  FF                 	db	255
  7844                           
  7845                           ;Config register CONFIG3H @ 0x300005
  7846                           ;	CCP2 MUX bit
  7847                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  7848                           ;	PORTB A/D Enable bit
  7849                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  7850                           ;	Low-Power Timer1 Oscillator Enable bit
  7851                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  7852                           ;	MCLR Pin Enable bit
  7853                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  7854   300005                     	org	3145733
  7855   300005  81                 	db	129
  7856                           
  7857                           ;Config register CONFIG4L @ 0x300006
  7858                           ;	Stack Full/Underflow Reset Enable bit
  7859                           ;	STVREN = ON, Stack full/underflow will cause Reset
  7860                           ;	Single-Supply ICSP Enable bit
  7861                           ;	LVP = OFF, Single-Supply ICSP disabled
  7862                           ;	Boot Block Size Select bits
  7863                           ;	BBSIZ = BB256, 256 Word
  7864                           ;	Extended Instruction Set Enable bit
  7865                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  7866                           ;	Background Debugger Enable bit
  7867                           ;	DEBUG = 0x1, unprogrammed default
  7868   300006                     	org	3145734
  7869   300006  81                 	db	129
  7870                           
  7871                           ; Padding undefined space
  7872   300007                     	org	3145735
  7873   300007  FF                 	db	255
  7874                           
  7875                           ;Config register CONFIG5L @ 0x300008
  7876                           ;	Code Protection bit
  7877                           ;	CP0 = OFF, Block 0 not code-protected
  7878                           ;	Code Protection bit
  7879                           ;	CP1 = OFF, Block 1 not code-protected
  7880   300008                     	org	3145736
  7881   300008  03                 	db	3
  7882                           
  7883                           ;Config register CONFIG5H @ 0x300009
  7884                           ;	Boot Block Code Protection bitProtect Boot
  7885                           ;	CPB = OFF, Boot block not code-protected
  7886                           ;	Data EEPROM Code Protection bit
  7887                           ;	CPD = OFF, Data EEPROM not code-protected
  7888   300009                     	org	3145737
  7889   300009  C0                 	db	192
  7890                           
  7891                           ;Config register CONFIG6L @ 0x30000A
  7892                           ;	Write Protection bit
  7893                           ;	WRT0 = OFF, Block 0 not write-protected
  7894                           ;	Write Protection bit
  7895                           ;	WRT1 = OFF, Block 1 not write-protected
  7896   30000A                     	org	3145738
  7897   30000A  03                 	db	3
  7898                           
  7899                           ;Config register CONFIG6H @ 0x30000B
  7900                           ;	Configuration Register Write Protection bit
  7901                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  7902                           ;	Boot Block Write Protection bit
  7903                           ;	WRTB = OFF, Boot block not write-protected
  7904                           ;	Data EEPROM Write Protection bit
  7905                           ;	WRTD = OFF, Data EEPROM not write-protected
  7906   30000B                     	org	3145739
  7907   30000B  E0                 	db	224
  7908                           
  7909                           ;Config register CONFIG7L @ 0x30000C
  7910                           ;	Table Read Protection bit
  7911                           ;	EBTR0 = OFF, Block 0 not protected from table reads executed in other blocks
  7912                           ;	Table Read Protection bit
  7913                           ;	EBTR1 = OFF, Block 1 not protected from table reads executed in other blocks
  7914   30000C                     	org	3145740
  7915   30000C  03                 	db	3
  7916                           
  7917                           ;Config register CONFIG7H @ 0x30000D
  7918                           ;	Boot Block Table Read Protection bit
  7919                           ;	EBTRB = OFF, Boot block not protected from table reads executed in other blocks
  7920   30000D                     	org	3145741
  7921   30000D  40                 	db	64
  7922                           tosu	equ	0xFFF
  7923                           tosh	equ	0xFFE
  7924                           tosl	equ	0xFFD
  7925                           stkptr	equ	0xFFC
  7926                           pclatu	equ	0xFFB
  7927                           pclath	equ	0xFFA
  7928                           pcl	equ	0xFF9
  7929                           tblptru	equ	0xFF8
  7930                           tblptrh	equ	0xFF7
  7931                           tblptrl	equ	0xFF6
  7932                           tablat	equ	0xFF5
  7933                           prodh	equ	0xFF4
  7934                           prodl	equ	0xFF3
  7935                           indf0	equ	0xFEF
  7936                           postinc0	equ	0xFEE
  7937                           postdec0	equ	0xFED
  7938                           preinc0	equ	0xFEC
  7939                           plusw0	equ	0xFEB
  7940                           fsr0h	equ	0xFEA
  7941                           fsr0l	equ	0xFE9
  7942                           wreg	equ	0xFE8
  7943                           indf1	equ	0xFE7
  7944                           postinc1	equ	0xFE6
  7945                           postdec1	equ	0xFE5
  7946                           preinc1	equ	0xFE4
  7947                           plusw1	equ	0xFE3
  7948                           fsr1h	equ	0xFE2
  7949                           fsr1l	equ	0xFE1
  7950                           bsr	equ	0xFE0
  7951                           indf2	equ	0xFDF
  7952                           postinc2	equ	0xFDE
  7953                           postdec2	equ	0xFDD
  7954                           preinc2	equ	0xFDC
  7955                           plusw2	equ	0xFDB
  7956                           fsr2h	equ	0xFDA
  7957                           fsr2l	equ	0xFD9
  7958                           status	equ	0xFD8

Data Sizes:
    Strings     298
    Constant    24
    Data        41
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    116     122
    BANK0           128     40     126
    BANK1           256      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    handle_infusion_setup@v	PTR const unsigned char  size(2) Largest target is 511
		 -> input_numbers@inputBuffer(COMRAM[5]), RAM(DATA[511]), 

    input_value@initial	PTR unsigned char  size(2) Largest target is 2
		 -> STR_41(CODE[2]), 

    input_value@inputType	PTR unsigned char  size(2) Largest target is 7
		 -> STR_40(CODE[7]), 

    input_value@limit	PTR unsigned char  size(2) Largest target is 3
		 -> STR_42(CODE[3]), 

    input_value@units	PTR unsigned char  size(2) Largest target is 3
		 -> STR_43(CODE[3]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 21
		 -> infusion@buff(BANK0[5]), input_numbers@outputBuffer(COMRAM[2]), STR_1(CODE[7]), STR_10(CODE[11]), 
		 -> STR_11(CODE[12]), STR_12(CODE[7]), STR_13(CODE[6]), STR_14(CODE[5]), 
		 -> STR_15(CODE[15]), STR_16(CODE[7]), STR_17(CODE[7]), STR_18(CODE[6]), 
		 -> STR_19(CODE[5]), STR_2(CODE[12]), STR_20(CODE[14]), STR_21(CODE[21]), 
		 -> STR_22(CODE[9]), STR_23(CODE[21]), STR_24(CODE[17]), STR_25(CODE[5]), 
		 -> STR_26(CODE[8]), STR_27(CODE[11]), STR_28(CODE[8]), STR_29(CODE[11]), 
		 -> STR_3(CODE[2]), STR_30(CODE[9]), STR_31(CODE[7]), STR_33(CODE[5]), 
		 -> STR_35(CODE[5]), STR_37(CODE[4]), STR_39(CODE[19]), STR_4(CODE[3]), 
		 -> STR_40(CODE[7]), STR_41(CODE[2]), STR_42(CODE[3]), STR_43(CODE[3]), 
		 -> STR_5(CODE[5]), STR_6(CODE[15]), STR_7(CODE[10]), STR_8(CODE[8]), 
		 -> STR_9(CODE[15]), 

    S1247$buffer	PTR unsigned char  size(2) Largest target is 0

    S1247$source	PTR const unsigned char  size(2) Largest target is 0

    sp__input_numbers	PTR unsigned char  size(2) Largest target is 511
		 -> input_numbers@inputBuffer(COMRAM[5]), RAM(DATA[511]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_32(CODE[4]), STR_34(CODE[4]), STR_36(CODE[4]), STR_38(CODE[3]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 5
		 -> infusion@buff(BANK0[5]), 

    start_process_screen@word	PTR unsigned char  size(2) Largest target is 9
		 -> STR_26(CODE[8]), STR_28(CODE[8]), STR_30(CODE[9]), 

    string_long_vol@str	PTR const unsigned char  size(2) Largest target is 511
		 -> input_numbers@inputBuffer(COMRAM[5]), RAM(DATA[511]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 4
		 -> STR_32(CODE[4]), STR_34(CODE[4]), STR_36(CODE[4]), STR_38(CODE[3]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 4
		 -> STR_32(CODE[4]), STR_34(CODE[4]), STR_36(CODE[4]), STR_38(CODE[3]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_32(CODE[4]), STR_34(CODE[4]), STR_36(CODE[4]), STR_38(CODE[3]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_handle_infusion_setup
    _system_init->_Lcd_Init
    _system_init->_usePeripheral
    _Lcd_Init->_Lcd_Cmd
    _menu->_Lcd_Write_String
    _manual->_Lcd_Write_String
    _handle_infusion_setup->_infusion
    _string_long_vol->___lmul
    _input_value->_Lcd_Write_String
    _input_numbers->_Lcd_Write_String
    _infusion->_getExpected
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->___aldiv
    _abs->___almod
    _handle_actuator_push->_start_process_screen
    _start_process_screen->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _move_actuator->_change_direction_motion
    _move_actuator->_set_pwm_duty
    _input_option->_switch_press_scan
    _switch_press_scan->_keypad_scanner
    _getExpected->_calculateBitRatePer10Sec
    _processTimeToSeconds->___awdiv
    _calculateBitRatePer10Sec->___aldiv
    ___lmul->___lldiv
    ___aldiv->___lmul
    ___lldiv->_processTimeToSeconds

Critical Paths under _Timer1_ISR in COMRAM

    _Timer1_ISR->_signalServo

Critical Paths under _main in BANK0

    _handle_infusion_setup->_infusion

Critical Paths under _Timer1_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Timer1_ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   97452
                                             36 BANK0      4     4      0
                       _GetNextState
              _handle_infusion_setup
                             _manual
                               _menu
                  _switch_press_scan
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0    3035
                           _ADC_init
                         _InitKeypad
                           _Lcd_Init
                      _init_actuator
                      _usePeripheral
 ---------------------------------------------------------------------------------
 (2) _init_actuator                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             1     1      0     279
                                              7 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _InitKeypad                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _menu                                                 0     0      0    8024
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _manual                                               0     0      0    8024
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _handle_infusion_setup                               12    12      0   77821
                                            111 COMRAM     5     5      0
                           _ADC_Read
                           _infusion
                      _input_numbers
                        _input_value
                    _string_long_vol
 ---------------------------------------------------------------------------------
 (2) _string_long_vol                                     14    10      4    2256
                                             45 COMRAM    14    10      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) _input_value                                          8     0      8    8539
                                             14 COMRAM     8     0      8
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _input_numbers                                       15    13      2    8846
                                             14 COMRAM    15    13      2
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                  _switch_press_scan
 ---------------------------------------------------------------------------------
 (2) _infusion                                            44    44      0   57973
                                            103 COMRAM     8     8      0
                                              0 BANK0     36    36      0
                           _ADC_Read
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                       _Timer1_start
                            ___aldiv
                             ___lmul
                           _delay_ms
                        _getExpected
               _handle_actuator_push
                      _move_actuator
               _processTimeToSeconds
                            _sprintf
                      _usePeripheral
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             22    15      7    6606
                                             78 COMRAM    20    13      7
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             6     2      4    5574
                                             72 COMRAM     6     2      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           13    10      3    5113
                                             59 COMRAM    13    10      3
                            ___aldiv
                            ___almod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                8     5      3     957
                                              4 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                             14 COMRAM     4     2      2
                            ___almod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___almod                                             10     2      8     613
                                              4 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (3) _handle_actuator_push                                 5     3      2   21234
                                             16 COMRAM     5     3      2
                           _ADC_Read
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                       _input_option
                      _move_actuator
               _start_process_screen
                      _usePeripheral
 ---------------------------------------------------------------------------------
 (2) _usePeripheral                                        4     0      4    2756
                                              4 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _start_process_screen                                 2     0      2    8285
                                             14 COMRAM     2     0      2
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     6     4      2    4144
                                              8 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       3     3      0     254
                                              5 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1    3725
                                              7 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     155
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              2     2      0     155
                                              5 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     124
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _move_actuator                                        4     0      4    1698
                                              8 COMRAM     4     0      4
            _change_direction_motion
                       _set_pwm_duty
 ---------------------------------------------------------------------------------
 (4) _set_pwm_duty                                         4     2      2     152
                                              4 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _change_direction_motion                              4     0      4     422
                                              4 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _input_option                                         7     5      2     241
                                              7 COMRAM     7     5      2
                  _switch_press_scan
 ---------------------------------------------------------------------------------
 (1) _switch_press_scan                                    1     1      0      68
                                              6 COMRAM     1     1      0
                     _keypad_scanner
 ---------------------------------------------------------------------------------
 (2) _keypad_scanner                                       2     2      0       0
                                              4 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _ADC_Read                                             9     7      2      65
                                              4 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (3) _getExpected                                         20    16      4    9930
                                             83 COMRAM    20    16      4
                            ___lldiv
                             ___lmul
           _calculateBitRatePer10Sec
               _processTimeToSeconds
 ---------------------------------------------------------------------------------
 (3) _processTimeToSeconds                                 8     6      2    2414
                                             12 COMRAM     8     6      2
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     832
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     613
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     625
                                              4 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) _calculateBitRatePer10Sec                            24    16      8    4603
                                             59 COMRAM    24    16      8
                            ___aldiv
                            ___lldiv (ARG)
                             ___lmul
               _processTimeToSeconds (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8    2036
                                             33 COMRAM    12     4      8
                            ___lldiv (ARG)
               _processTimeToSeconds (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aldiv                                             14     6      8    2189
                                             45 COMRAM    14     6      8
                            ___lldiv (ARG)
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     741
                                             20 COMRAM    13     5      8
               _processTimeToSeconds (ARG)
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             3     1      2     124
                                              4 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _Timer1_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GetNextState                                         4     3      1     369
                                              4 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _Timer1_ISR                                           1     1      0     522
                                              3 COMRAM     1     1      0
                        _signalServo
 ---------------------------------------------------------------------------------
 (9) _signalServo                                          3     1      2     522
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetNextState
   _handle_infusion_setup
     _ADC_Read
     _infusion
       _ADC_Read
       _Lcd_Clear
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Set_Cursor
         _Lcd_Cmd
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _Timer1_start
       ___aldiv
         ___lldiv (ARG)
           _processTimeToSeconds (ARG)
             ___awdiv
             ___awmod
             ___wmul
         ___lmul (ARG)
           ___lldiv (ARG)
           _processTimeToSeconds (ARG)
       ___lmul
       _delay_ms
       _getExpected
         ___lldiv
         ___lmul
         _calculateBitRatePer10Sec
           ___aldiv
           ___lldiv (ARG)
           ___lmul (ARG)
           _processTimeToSeconds (ARG)
         _processTimeToSeconds
       _handle_actuator_push
         _ADC_Read
         _Lcd_Clear
         _Lcd_Set_Cursor
         _Lcd_Write_String
         _input_option
           _switch_press_scan
             _keypad_scanner
         _move_actuator
           _change_direction_motion
           _set_pwm_duty
         _start_process_screen
           _Lcd_Clear
           _Lcd_Set_Cursor
           _Lcd_Write_String
         _usePeripheral
       _move_actuator
       _processTimeToSeconds
       _sprintf
         _vfprintf
           _vfpfcnvrt
             ___aldiv
             ___almod
             _abs
               ___almod (ARG)
             _fputc
               _putch
       _usePeripheral
     _input_numbers
       _Lcd_Set_Cursor
       _Lcd_Write_String
       _switch_press_scan
     _input_value
       _Lcd_Clear
       _Lcd_Set_Cursor
       _Lcd_Write_String
     _string_long_vol
       ___lmul
   _manual
     _Lcd_Clear
     _Lcd_Set_Cursor
     _Lcd_Write_String
   _menu
     _Lcd_Clear
     _Lcd_Set_Cursor
     _Lcd_Write_String
   _switch_press_scan
   _system_init
     _ADC_init
     _InitKeypad
     _Lcd_Init
       _Lcd_Cmd
       _Lcd_Port
     _init_actuator
     _usePeripheral

 _Timer1_ISR (ROOT)
   _signalServo

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     28      7E       5       98.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     74      7A       1       96.8%
BITBIGSFRhhlh       1E      0       0      15        0.0%
BITBIGSFRhhhhlh     19      0       0       9        0.0%
BITBIGSFRhhhhh       D      0       0       8        0.0%
BITBIGSFRhhll        7      0       0      16        0.0%
BITBIGSFRhllhh       6      0       0      17        0.0%
BITBIGSFRhhhlhh      5      0       0      13        0.0%
BITBIGSFRhlll        5      0       0      18        0.0%
BITBIGSFRhhhhlh      3      0       0      11        0.0%
BITBIGSFRhhhhlh      1      0       0      10        0.0%
BITBIGSFRhhhhll      1      0       0      12        0.0%
BITBIGSFRhhhll       1      0       0      14        0.0%
BITBIGSFRl           1      0       0      19        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F8      20        0.0%
DATA                 0      0      F8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Mon Apr 15 22:07:33 2024

                                               _c 00CA          calculateBitRatePer10Sec@length_mm_scaled 0044  
                                              l21 1BEA                                                l23 1BF4  
                                              l17 1BD6                                                l19 1BE0  
                                              _GO 7E11                                                _Kd 00BA  
                                              _Ki 00BE                                                _Kp 00C2  
                                    ___awdiv@sign 000A                                                _dT 00C6  
                             ___wmul@multiplicand 0007                               __end_of_system_init 18A4  
                                             l130 16C6                                               l300 0836  
                                             l301 082E                                               l304 085A  
                                             l313 089A                                               l305 0852  
                                             l251 066E                                               l308 087E  
                                             l260 06B6                                               l252 0666  
                                             l309 0876                                               l261 06AE  
                                             l280 0772                                               l272 072A  
                                             l264 06DA                                               l256 0692  
                                             l281 076A                                               l273 0722  
                                             l265 06D2                                               l257 068A  
                                             l292 07E6                                               l284 079E  
                                             l276 074E                                               l268 0706  
                                             l293 07DE                                               l285 0796  
                                             l277 0746                                               l269 06FE  
                                             l447 1CC8                                               l296 080A  
                                             l288 07C2                                               l297 0802  
                                             l289 07BA                                               l629 14DA  
                                             _GIE 7F97                                               _RB0 7C08  
                                             _RB1 7C09                                               _RB2 7C0A  
                                             _RB3 7C0B                                               _RC2 7C12  
                                             _RD0 7C18                                               _RB4 7C0C  
                                             _RD1 7C19                                               _RD2 7C1A  
                                             _RB6 7C0E                                               _RD3 7C1B  
                                             _RB7 7C0F                                               _RD4 7C1C  
                                             _RD5 7C1D                                               _RC7 7C17  
                                             _RD6 7C1E                                               _RD7 7C1F  
                                             _PR2 0FCB                                    ?_usePeripheral 0005  
                                             _abs 1C20                                               _mil 00A8  
                                    ___awmod@sign 000A                                               wreg 0FE8  
                           __end_of_input_numbers 0DCC                                              ?_abs 000F  
                                            l1338 1C2E                                              l4012 1048  
                                            l4102 1D1A                                              l4032 10B2  
                                            l4024 108E                                              l4016 105A  
                                            l4008 1034                                              l4122 19DC  
                                            l4202 1832                                              l4018 1066  
                                            l4042 1582                                              l4140 140A  
                                            l4028 109C                                              l4220 0900  
                                            l4118 19C8                                              l4134 13FA  
                                            l4302 10D8                                              l4222 0904  
                                            l4080 132E                                              l4072 1306  
                                            l4064 12DE                                              l4320 1114  
                                            l4240 099A                                              l4232 0946  
                                            l4146 1420                                              l4162 1452  
                                            l4090 16F4                                              l4314 1100  
                                            l4234 096A                                              l4218 08FA  
                                            l4226 090A                                              l4148 1428  
                                            l4332 1140                                              l4308 10EC  
                                            l4260 0A66                                              l4228 0920  
                                            l4414 148C                                              l4166 1460  
                                            l4158 1448                                              l4182 17EC  
                                            l4094 1728                                              l4326 112A  
                                            l4246 09C4                                              l4238 098C  
                                            l4270 0A9A                                              l4416 1498  
                                            l4264 0A82                                              l4432 1BA0  
                                            l4442 1CB4                                              l4426 14CC  
                                            l4194 181A                                              l4186 17FA  
                                            l4178 17E0                                              l4370 135C  
                                            l4282 1A34                                              l4338 1156  
                                            l4266 0A8C                                              l4434 1BB0  
                                            l4188 1802                                              l3820 1BEC  
                                            l3812 1BD8                                              l4198 1824  
                                            l4286 1A50                                              l4470 0F28  
                                            l4384 13AE                                              l4392 13D4  
                                            l3816 1BE2                                              l4464 0ED4  
                                            l4378 1388                                              l4626 0D98  
                                            l4742 05AA                                              l4662 01DE  
                                            l4726 0520                                              l4646 1006  
                                            l4830 128A                                              l4822 124A  
                                            l4910 1914                                              l3952 08A2  
                                            l4584 0CF6                                              l4816 121E  
                                            l4920 1928                                              l4850 14FC  
                                            l3970 0E00                                              l4682 03A0  
                                            l4594 0D0E                                              l4834 1290  
                                            l4914 191C                                              l4922 194A  
                                            l4844 14F0                                              l3964 0DE8  
                                            l4836 12AC                                              l4908 190E  
                                            l4862 1512                                              l4678 037C  
                                            l4880 1536                                              l4856 1506  
                                            l3976 0E22                                              l3992 0E70  
                                            l4874 152A                                              l3978 0E2E  
                                            l4868 151E                                              l4892 1542  
                                            l3996 0E86                                              l3988 0E62  
                                            l4894 156A                                              _ADON 7E10  
                                            STR_1 1FC9                                              STR_2 1F4F  
                                            STR_3 1FEE                                              STR_4 1FED  
                                            STR_5 1FE7                                              STR_6 1F32  
                                            STR_7 1F88                                              STR_8 1FAC  
                                            STR_9 1F23                                              _LATB 0F8A  
                                            u4110 1806                                              u4200 0A4A  
                                            u4050 142C                                              u4300 16AE  
                                            u5007 0714                                              u5017 0738  
                                            u4170 09C0                                              u5107 088C  
                                            u5027 075C                                              u4324 16BC  
                                            u4180 09C2                                              u5117 1CBA  
                                            u4325 16B8                                              u5037 0788  
                                            u4318 16B0                                              u4270 1692  
                                            u5047 07AC                                              u4600 0F38  
                                            u3800 106A                                              u5057 07D0  
                                            u5067 07F4                                              _PEIE 7F96  
                                            u3740 0E32                                              u5077 0820  
                                            u4550 149C                                              u4294 16A0  
                                            u4295 169C                                              u5087 0844  
                                            u4288 1694                                              u3920 1720  
                                            u3840 157A                                              u5097 0868  
                                            u4730 14F8                                              u3930 1754  
                                            u3860 15BC                                              u3950 1D08  
                                            u3927 1716                                              u4807 1768  
                                            u4680 0390                                              u3937 174A  
                                            u4817 177C                                              u3970 1D12  
                                            u4907 1B54                                              u4827 1790  
                                            u3965 1D0A                                              u4917 1CA4  
                                            u4837 0D24                                              u4927 1374  
                                            u4847 0DB6                                              u4937 139A  
                                            u4857 05DC                                              u4947 13C0  
                                            u4867 061A                                              u4957 0658  
                                            u4877 0EFC                                              u4967 067C  
                                            u4887 0F1E                                              u4977 06A0  
                                            u4897 1B42                                              u4987 06C4  
                                            u4997 06F0                                              _RBPU 7F8F  
                                            _TMR1 0FCE                                              abs@a 000F  
                               ?_Lcd_Write_String 0009                                              _dbuf 0080  
                          input_numbers@separator 001A                                              _main 1906  
                                            _menu 1A5E                                              _prec 0075  
                                            fsr1h 0FE2                                              fsr2h 0FDA  
                                            indf1 0FE7                                              indf2 0FDF  
                                            fsr1l 0FE1                                              fsr2l 0FD9  
                                            btemp 007B                                  __end_of_ADC_Read 16EA  
                                            prodh 0FF4                                              prodl 0FF3  
                                            start 018C                                ??_Lcd_Write_String 000B  
                                __end_of_ADC_init 1D40                                   __end_of_Lcd_Cmd 1CB2  
                                    ___param_bank 0000                              __end_of_GetNextState 156E  
                                           ??_abs 0011                            input_numbers@userInput 001B  
               handle_infusion_setup@currentState 0074                                   __end_of___aldiv 0E98  
                                 __end_of___almod 10C4                                             ?_main 0001  
                                           ?_menu 0001                                   __end_of___awdiv 146A  
                                           STR_10 1F7D                                             STR_11 1F5B  
                                           STR_12 1FD0                                             STR_20 1F41  
                                           STR_13 1FD7                                             STR_21 1ED5  
                                           STR_22 1F9B                                             STR_30 1F92  
                                           STR_15 1F23                                             STR_31 1FB4  
                                           STR_23 1EEA                                             STR_32 1FF0  
                                           STR_16 1FC2                                             STR_40 1FBB  
                                           STR_24 1F12                                             STR_25 1FE7  
                                           STR_17 1FD0                                             STR_41 1FFD  
                                           STR_33 1FE2                                             STR_26 1FAC  
                                           STR_18 1FD7                                             STR_34 1FF0  
                                           STR_42 1FF4                                             STR_19 1FE7  
                                           STR_43 1FFA                                             STR_35 1FDD  
                                           STR_27 1F67                                             STR_36 1FF0  
                                           STR_28 1FA4                                   __end_of___awmod 183C  
                                           STR_37 1FEC                                             STR_29 1F72  
                                           STR_38 1FF7                                             STR_39 1EFF  
                                 __end_of___lldiv 14EC                                             _T0CON 0FD5  
                                 ___awdiv@divisor 0007                                             _T1CON 0FCD  
                                           _T2CON 0FCA                                             _LATA2 7C4A  
                                           _LATC4 7C5C                                             _LATC5 7C5D  
                                           _LATC6 7C5E                                             i2l460 0180  
                     handle_actuator_push@act_pos 0011                                             i2l455 002A  
                                           i2l466 0188                                   ___awdiv@counter 0009  
                                    vfpfcnvrt@fmt 003D                                             _TMR0H 0FD7  
                                           _TMR0L 0FD6                                             _PORTB 0F81  
                                           _PORTD 0F83                                             _TRISA 0F92  
                                           _TRISB 0F93                                             _TRISC 0F94  
                                           _TRISD 0F95                               ___lmul@multiplicand 0026  
                        GetNextState@currentState 0008                                  ??_keypad_scanner 0005  
                                           _flags 0079                                             _fputc 156E  
                                           _width 00AC                                             _pulse 00AE  
                                           _putch 1D5C                                  _getExpected$1676 0060  
                                _getExpected$1677 0064                             infusion@analogReading 00E9  
                                           tablat 0FF5                                             ttemp5 007C  
                                           ttemp6 007F                                             ttemp7 0083  
                                           status 0FD8                                             wtemp8 007C  
                                 __end_of_sprintf 1B26                                  __end_of_Lcd_Init 17CC  
                                __end_of_Lcd_Port 1BF8                                        _InitKeypad 1D40  
                                 __initialization 1962                                       _system_init 183C  
                                    __end_of_main 1962                                      __end_of_menu 1AA6  
                          move_actuator@direction 0009                                      ?_input_value 000F  
                        input_numbers@inputBuffer 0013                                   ??_usePeripheral 0009  
                                          ??_main 00FA                                            ??_menu 000F  
                                   __activetblptr 0002                                            _ADCON0 0FC2  
                                          _ADCON1 0FC1                                            _ADCON2 0FC0  
                    __end_of_processTimeToSeconds 1906                                            ?_fputc 0005  
                                          _ADRESH 0FC4                                            _ADRESL 0FC3  
                                          _CCPR1L 0FBE                                  ___awdiv@dividend 0005  
                                          ?_putch 0001                                            i2l3710 00F8  
                                          i2l3702 0092                                            i2l3560 1B78  
                                          i2l3720 015A                                            i2l3714 0128  
                                          i2l3706 00C4                                            i2l3564 1B92  
                                          i2l3694 0032                                            i2l3698 0062  
                                          _OSCCON 0FD3                      handle_actuator_push@decision 0014  
                                 _string_long_vol 0F62                                         ??_Lcd_Cmd 0006  
                                   vfpfcnvrt@done 0041                                            _TMR0IF 7F92  
                                          _TMR1IE 7CE8                                            _TMR1IF 7CF0  
                                          _TMR2IF 7CF1                                            _TMR1ON 7E68  
                                          _TRISA2 7C92                                            _TRISC2 7CA2  
                                          _TRISC4 7CA4                                            _TRISC5 7CA5  
                                          _TRISC6 7CA6                                            _TRISC7 7CA7  
                               GetNextState@input 0005                                  __end_of_delay_ms 1CD2  
                           input_option@userInput 000E                                      ?_signalServo 0001  
                            delay_ms@milliseconds 0005                                        _Timer1_ISR 0008  
                                    vfprintf@cfmt 004D                                            ___lmul 19B8  
                                       ??___aldiv 0036                                         ??___almod 000D  
                                          ___wmul 1C48                                         ??___awdiv 0009  
                                       ??___awmod 0009                                         ??___lldiv 001D  
                                 ADC_Read@channel 000B                                            _manual 1AA6  
                         _change_direction_motion 1D00                                   ADC_Read@digital 000C  
                                          clear_0 199A                                  __end_of_infusion 0642  
                                ___awdiv@quotient 000B                                   ___awmod@divisor 0007  
                           __end_of_move_actuator 1A5E                                            isa$std 0001  
                                 ___awmod@counter 0009                                            _volume 00D2  
                                          fputc@c 0005                                      __pdataCOMRAM 007A  
                                       ?_ADC_Read 0005                                input_value@initial 0011  
                                    __mediumconst 1EBC                                            tblptrh 0FF7  
                                          tblptrl 0FF6                                            tblptru 0FF8  
                                       ?_ADC_init 0001                                  __end_of_pulseMax 1EC9  
                                __end_of_pulseMin 1ED5                                            putch@c 0001  
                                __end_of_vfprintf 1BCC                                         ??_sprintf 0056  
                                   main@userInput 00FC                                   Lcd_Set_Cursor@a 0009  
                                 Lcd_Set_Cursor@b 0008                                   Lcd_Set_Cursor@y 000B  
                                 Lcd_Set_Cursor@z 000A                         input_numbers@outputBuffer 0018  
                                      __accesstop 0080                           __end_of__initialization 19AA  
                            input_numbers@counter 001C                                 __end_of_Lcd_Clear 1D5C  
                                   ___rparam_used 0001                                       ?_InitKeypad 0001  
                                  __pcstackCOMRAM 0001                          _calculateBitRatePer10Sec 0ABA  
                                    __pidataBANK0 1BF8                     __end_of_handle_infusion_setup 12B6  
                                   __end_of_fputc 15EE                                     __end_of_putch 1D5E  
                    __end_of_start_process_screen 166E                               usePeripheral@action 0007  
                                   ?_input_option 0008                                     _init_actuator 1CEA  
                                  _Lcd_Set_Cursor 12B6                                        ??_ADC_Read 0007  
                                      ??_ADC_init 0005                           __end_of_string_long_vol 1018  
                                       ?_Lcd_Init 0001                                         ?_Lcd_Port 0001  
                                         ??_fputc 0008                                  input_value@limit 0013  
                                         ??_putch 0005                                      _GetNextState 14EC  
                                input_value@units 0015                                        __pbssBANK0 0080  
calculateBitRatePer10Sec@length_per_min_mm_scaled 0048                                     _infusion$1679 00DA  
                                     ?_Timer1_ISR 0001                         ??_change_direction_motion 0009  
                                         ?___lmul 0022                                     ?_Timer1_start 0001  
                                         ?___wmul 0005                              _processTimeToSeconds 18A4  
 calculateBitRatePer10Sec@bit_rate_per_min_scaled 004C                                           _CCP1CON 0FBD  
                                         ?_manual 0001                                    ___lmul@product 002A  
                          __end_of_Lcd_Set_Cursor 1356                                    ??_input_option 000A  
                                  ?_init_actuator 0001                                         ?_delay_ms 0005  
                                      ??_Lcd_Init 0008                                 infusion@expectedX 00E5  
                                      ??_Lcd_Port 0005                 calculateBitRatePer10Sec@volume_mL 003C  
                                  _Lcd_Write_Char 1B26                                           _Lcd_Cmd 1C92  
                                       ?_infusion 0001                               getExpected@expected 005C  
                                         __Hparam 0000                                input_option@option 000C  
                                         __Lparam 0000                                    ??_Timer1_start 0005  
                                    ?_system_init 0001                                           ___aldiv 0DCC  
                                         ___almod 1018                                           ___awdiv 13E6  
                                         ___awmod 17CC                             ?_processTimeToSeconds 000D  
                                         ___lldiv 146A                      __end_of_handle_actuator_push 0F62  
                                       ?_vfprintf 0049                                           __pcinit 1962  
                                         __ramtop 0200                                   ?_Lcd_Set_Cursor 0008  
                                         __ptext0 1906                                           __ptext1 183C  
                                         __ptext2 1CEA                                           __ptext3 175C  
                                         __ptext4 1D40                                           __ptext5 1D2C  
                                         __ptext6 1A5E                                           __ptext7 1AA6  
                                         __ptext8 1212                                           __ptext9 0F62  
                                   ?_set_pwm_duty 0005                                  ___awmod@dividend 0005  
                                ___aldiv@dividend 002E                                        ??_delay_ms 0007  
                     processTimeToSeconds@minutes 000F                       processTimeToSeconds@seconds 0011  
                 __end_of_change_direction_motion 1D16                                  ?_string_long_vol 002E  
               change_direction_motion@hDriverIn1 0005                 change_direction_motion@hDriverIn2 0007  
                                         _sprintf 1AEE                            __end_of_Lcd_Write_Char 1B5E  
                            end_of_initialization 19AA                               signalServo@pinServo 0003  
                                         fputc@fp 0007                                     __Lmediumconst 1EBC  
                            _start_process_screen 15EE                                        ??_infusion 0068  
                                 ___lldiv@divisor 0019                                   ___lldiv@counter 0021  
                               __end_of_vfpfcnvrt 0ABA                                  ___aldiv@quotient 0038  
                                         postdec1 0FE5                                           postdec2 0FDD  
                                         postinc0 0FEE                                           postinc1 0FE6  
                                         postinc2 0FDE                                  vfpfcnvrt@convarg 0044  
                                       Lcd_Port@a 0005                                        ??_vfprintf 004D  
                                 ??_init_actuator 0005                                      infusion@buff 00E0  
                                  ??_set_pwm_duty 0007                                     ??_getExpected 0058  
                           __end_of_usePeripheral 116C                                         _TRISCbits 0F94  
                            switch_press_scan@key 0007                                   ?_Lcd_Write_Char 0001  
                                   _input_numbers 0CDC                                 Lcd_Write_String@a 0009  
                               Lcd_Write_String@i 000D                        ??_calculateBitRatePer10Sec 0044  
                           ?_start_process_screen 000F                                  main@currentState 00FD  
                            __end_of_input_option 13E6                     processTimeToSeconds@timeInput 000D  
                                    ??_InitKeypad 0005        calculateBitRatePer10Sec@bit_rate_per_10sec 0050  
                          ??_processTimeToSeconds 000F                                         _Lcd_Clear 1D4E  
                                  __end_of___lmul 1A0E                                       vfpfcnvrt@ap 003E  
                                     vfpfcnvrt@cp 0042                                       vfpfcnvrt@fp 003C  
                                  __end_of___wmul 1C6E                                  _Lcd_Write_String 16EA  
                                   __pidataCOMRAM 1D5E                                    __end_of_manual 1AEE  
                             start_initialization 1962                                       __end_of_abs 1C48  
                            __end_of_Timer1_start 1CEA                                    ?_input_numbers 000F  
                              __end_of_InitKeypad 1D4E                               __end_of_getExpected 0CDC  
                            _handle_actuator_push 0E98                                string_long_vol@str 002E  
                                    ??_Timer1_ISR 0004                                       vfprintf@fmt 004A  
                                      ?_Lcd_Clear 0001                                          ??___lmul 002A  
                                        ??___wmul 0009                                       __pdataBANK0 00AE  
                                        ??_manual 000F                                   Lcd_Write_Char@a 0008  
                                 Lcd_Write_Char@y 0007                             _handle_infusion_setup 1212  
                           infusion@controlSignal 00F2                     input_numbers@number_of_digits 000F  
                                     __pbssCOMRAM 0075                                     __pcstackBANK0 00D6  
                              move_actuator@speed 000B                                __end_of_Timer1_ISR 018C  
                           ?_handle_actuator_push 0011              calculateBitRatePer10Sec@totalSeconds 0040  
                           string_long_vol@result 0038                            ??_start_process_screen 0011  
                                        ?_Lcd_Cmd 0001                          start_process_screen@word 000F  
                            __end_of_set_pwm_duty 1C92                                  ??_Lcd_Set_Cursor 0009  
                                       __pintcode 0008                                     __pmediumconst 1EBC  
                                        ?___aldiv 002E                                          ?___almod 0005  
                                        ?___awdiv 0005                                          ?___awmod 0005  
                                   ??_input_value 0017                                          ?___lldiv 0015  
                         usePeripheral@peripheral 0005                                  ___almod@dividend 0005  
                                   _move_actuator 1A0E                                       _getExpected 0BE4  
                                        _ADC_Read 166E                                         _lastError 00A0  
                                 ??_input_numbers 0011                                          _ADC_init 1D2C  
                                        ?_sprintf 004F                                  infusion@stopTime 00ED  
                __end_of_calculateBitRatePer10Sec 0BE4                                   ___aldiv@divisor 0032  
                                 ___aldiv@counter 0036                                    ___wmul@product 0009  
                                        _LATBbits 0F8A                                          _LATCbits 0F8B  
                                  _keypad_scanner 0642                          ?_change_direction_motion 0005  
                                   ??_signalServo 0003                                          i2u320_40 006C  
                                        i2u322_40 008A                                          i2u321_48 006E  
                                        Lcd_Cmd@a 0007                                          i2u322_46 008C  
                                        i2u331_40 0120                                          i2u330_48 0104  
                                        i2u323_40 009C                                          i2u331_46 0122  
                                        i2u332_40 0132                                          i2u325_40 00BC  
                                        i2u324_48 009E                                          i2u317_40 003C  
                                        i2u325_46 00BE                                          i2u334_40 0152  
                                        i2u333_48 0134                                          i2u326_40 00CE  
                                        i2u334_46 0154                                          i2u319_40 005A  
                                        i2u318_48 003E                                          i2u319_46 005C  
                                        i2u328_40 00F0                                          i2u327_48 00D0  
                                        i2u328_46 00F2                                          i2u329_40 0102  
                                        _PIR1bits 0F9E                                       ??_Lcd_Clear 0008  
                                        _TMR0_ini 0077                            ?_handle_infusion_setup 0001  
                          handle_infusion_setup@v 0072                                 _switch_press_scan 1D16  
                                       _vfpfcnvrt 08A6                                    ?_move_actuator 0009  
                                      _ADCON0bits 0FC2                                 ___wmul@multiplier 0005  
                              ?_switch_press_scan 0001                                      _input_option 1356  
                             __end_of_input_value 1212                                  ??_Lcd_Write_Char 0006  
                                        _Lcd_Init 175C                               ??_switch_press_scan 0007  
                                        _Lcd_Port 1BCC                            ??_handle_actuator_push 0013  
                                      vfpfcnvrt@c 0048                                 ___lmul@multiplier 0022  
                                       copy_data0 1976                          __end_of_Lcd_Write_String 175C  
                          __end_of_keypad_scanner 08A6                                          __Hrparam 0000  
                                      vfprintf@ap 004C                                          __Lrparam 0000  
                                      vfprintf@fp 0049                                     getExpected@ms 0058  
                       __end_of_switch_press_scan 1D2C                                      _Timer1_start 1CD2  
                                       infusion@i 00F1                               __end_of_signalServo 1B96  
                                      ?_vfpfcnvrt 003C                             __end_of_init_actuator 1D00  
                                      sprintf@fmt 0050                                   infusion@act_pos 00DE  
                                        _delay_ms 1CB2                                          __ptext10 116C  
                                        __ptext11 0CDC                                          __ptext20 0E98  
                                        __ptext12 0190                                          __ptext21 10C4  
                                        __ptext13 1AEE                                          __ptext30 1C6E  
                                        __ptext22 15EE                                          __ptext14 1B96  
                                        __ptext31 1D00                                          __ptext23 16EA  
                                        __ptext15 08A6                                          __ptext40 13E6  
                                        __ptext32 1356                                          __ptext24 1B26  
                                        __ptext16 156E                                          __ptext41 0ABA  
                                        __ptext33 1D16                                          __ptext25 12B6  
                                        __ptext17 1D5C                                          __ptext42 19B8  
                                        __ptext34 0642                                          __ptext26 1D4E  
                                        __ptext18 1C20                                          __ptext43 0DCC  
                                        __ptext35 166E                                          __ptext27 1C92  
                                        __ptext19 1018                                          __ptext44 146A  
                                        __ptext36 0BE4                                          __ptext28 1BCC  
                                        __ptext45 1CB2                                          __ptext37 18A4  
                                        __ptext29 1A0E                                          __ptext46 1CD2  
                                        __ptext38 1C48                                          __ptext47 14EC  
                                        __ptext39 17CC                                          __ptext49 1B5E  
                                   ?_GetNextState 0005                                   ___almod@divisor 0009  
                                 ___almod@counter 000D                                   ?_keypad_scanner 0001  
                                        _errorSum 00A4                                          _infusion 0190  
                           signalServo@pulseServo 0001                                          isa$xinst 0000  
                                    _timeInfusion 00CE                                          int$flags 007B  
                                        _pulseMax 1EBD                                          _pulseMin 1EC9  
                                 ??_move_actuator 000D                                          _vfprintf 1B96  
                                     _input_value 116C                         ?_calculateBitRatePer10Sec 003C  
                                    _set_pwm_duty 1C6E                                        _INTCONbits 0FF2  
                processTimeToSeconds@totalSeconds 0013                                    ??_GetNextState 0006  
                                  infusion@dError 00D6                                Lcd_Write_Char@temp 0006  
                                        intlevel2 0000                                         sprintf@ap 0056  
                                ___lldiv@dividend 0015                              set_pwm_duty@pwm_duty 0005  
                                     _signalServo 1B5E                              input_value@inputType 000F  
                                   ??_system_init 0009                                 ??_string_long_vol 0032  
                                    _servo_active 007A                                       ??_vfpfcnvrt 003F  
                              Lcd_Set_Cursor@temp 000C                                          sprintf@f 0057  
                                        sprintf@s 004F                                      ?_getExpected 0054  
                                ___lldiv@quotient 001D                                     infusion@error 00F6  
                                   _usePeripheral 10C4                                      ___aldiv@sign 0037  
                                    ___almod@sign 000E                           ??_handle_infusion_setup 0070  
