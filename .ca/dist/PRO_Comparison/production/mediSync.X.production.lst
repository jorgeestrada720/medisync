

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Mon Apr 15 20:45:19 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og9 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=3
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    65                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    66                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    67   000000                     
    68                           ; Generated 17/10/2023 GMT
    69                           ; 
    70                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    71                           ; All rights reserved.
    72                           ; 
    73                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    74                           ; 
    75                           ; Redistribution and use in source and binary forms, with or without modification, are
    76                           ; permitted provided that the following conditions are met:
    77                           ; 
    78                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    79                           ;        conditions and the following disclaimer.
    80                           ; 
    81                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    82                           ;        of conditions and the following disclaimer in the documentation and/or other
    83                           ;        materials provided with the distribution. Publication is not required when
    84                           ;        this file is used in an embedded application.
    85                           ; 
    86                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    87                           ;        software without specific prior written permission.
    88                           ; 
    89                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    90                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    91                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    92                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    93                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    94                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    95                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    96                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    97                           ; 
    98                           ; 
    99                           ; Code-generator required, PIC18F4321 Definitions
   100                           ; 
   101                           ; SFR Addresses
   102   000000                     
   103                           	psect	idataCOMRAM
   104   001B6C                     __pidataCOMRAM:
   105                           	callstack 0
   106                           
   107                           ;initializer for _servo_active
   108   001B6C  01                 	db	1
   109                           
   110                           	psect	idataBANK0
   111   001A06                     __pidataBANK0:
   112                           	callstack 0
   113                           
   114                           ;initializer for _pulse
   115   001A06  0032               	dw	50
   116   001A08  0032               	dw	50
   117   001A0A  0032               	dw	50
   118   001A0C  0032               	dw	50
   119   001A0E  0032               	dw	50
   120   001A10  0032               	dw	50
   121                           
   122                           ;initializer for _Kd
   123   001A12  07D0               	dw	2000
   124   001A14  0000               	dw	0
   125                           
   126                           ;initializer for _Ki
   127   001A16  07D0               	dw	2000
   128   001A18  0000               	dw	0
   129                           
   130                           ;initializer for _Kp
   131   001A1A  1D4C               	dw	7500
   132   001A1C  0000               	dw	0
   133                           
   134                           ;initializer for _dT
   135   001A1E  0064               	dw	100
   136   001A20  0000               	dw	0
   137                           
   138                           ;initializer for _c
   139   001A22  03E8               	dw	1000
   140   001A24  0000               	dw	0
   141                           
   142                           ;initializer for _timeInfusion
   143   001A26  0064               	dw	100
   144   001A28  0000               	dw	0
   145                           
   146                           ;initializer for _volume
   147   001A2A  000A               	dw	10
   148   001A2C  0000               	dw	0
   149                           
   150                           	psect	mediumconst
   151   001EBC                     __pmediumconst:
   152                           	callstack 0
   153   001EBC  00                 	db	0
   154   001EBD  09C4               	dw	2500
   155   001EBF  09C4               	dw	2500
   156   001EC1  09C4               	dw	2500
   157   001EC3  09C4               	dw	2500
   158   001EC5  09C4               	dw	2500
   159   001EC7  09C4               	dw	2500
   160   001EC9                     __end_of_pulseMax:
   161                           	callstack 0
   162   001EC9  01F4               	dw	500
   163   001ECB  01F4               	dw	500
   164   001ECD  01F4               	dw	500
   165   001ECF  01F4               	dw	500
   166   001ED1  01F4               	dw	500
   167   001ED3  01F4               	dw	500
   168   001ED5                     __end_of_pulseMin:
   169                           	callstack 0
   170   000000                     _LATB	set	3978
   171   000000                     _TRISB	set	3987
   172   000000                     _ADRESL	set	4035
   173   000000                     _ADRESH	set	4036
   174   000000                     _LATC6	set	31838
   175   000000                     _TRISCbits	set	3988
   176   000000                     _TRISC	set	3988
   177   000000                     _PORTD	set	3971
   178   000000                     _LATBbits	set	3978
   179   000000                     _LATCbits	set	3979
   180   000000                     _INTCONbits	set	4082
   181   000000                     _PIR1bits	set	3998
   182   000000                     _PORTB	set	3969
   183   000000                     _ADCON0bits	set	4034
   184   000000                     _TRISC4	set	31908
   185   000000                     _TRISC5	set	31909
   186   000000                     _TRISC6	set	31910
   187   000000                     _TRISA2	set	31890
   188   000000                     _TMR1ON	set	32360
   189   000000                     _PEIE	set	32662
   190   000000                     _GIE	set	32663
   191   000000                     _TMR1IF	set	31984
   192   000000                     _TRISC7	set	31911
   193   000000                     _RB7	set	31759
   194   000000                     _RB6	set	31758
   195   000000                     _RC7	set	31767
   196   000000                     _RB4	set	31756
   197   000000                     _RB3	set	31755
   198   000000                     _RB2	set	31754
   199   000000                     _RB1	set	31753
   200   000000                     _LATC4	set	31836
   201   000000                     _LATC5	set	31837
   202   000000                     _GO	set	32273
   203   000000                     _ADON	set	32272
   204   000000                     _RD0	set	31768
   205   000000                     _RD1	set	31769
   206   000000                     _RD3	set	31771
   207   000000                     _RD2	set	31770
   208   000000                     _RD7	set	31775
   209   000000                     _RD6	set	31774
   210   000000                     _RD5	set	31773
   211   000000                     _RB0	set	31752
   212   000000                     _RC2	set	31762
   213   000000                     _RD4	set	31772
   214   000000                     _TRISA	set	3986
   215   000000                     _LATA2	set	31818
   216   000000                     _TRISC2	set	31906
   217   000000                     _TRISD	set	3989
   218   000000                     _CCP1CON	set	4029
   219   000000                     _TMR1IE	set	31976
   220   000000                     _TMR2IF	set	31985
   221   000000                     _ADCON2	set	4032
   222   000000                     _ADCON1	set	4033
   223   000000                     _ADCON0	set	4034
   224   000000                     _T2CON	set	4042
   225   000000                     _CCPR1L	set	4030
   226   000000                     _TMR1	set	4046
   227   000000                     _T1CON	set	4045
   228   000000                     _PR2	set	4043
   229   000000                     _RBPU	set	32655
   230   000000                     _TMR0IF	set	32658
   231   000000                     _OSCCON	set	4051
   232   000000                     _T0CON	set	4053
   233   000000                     _TMR0L	set	4054
   234   000000                     _TMR0H	set	4055
   235   001ED5                     STR_21:
   236   001ED5  31                 	db	49	;'1'
   237   001ED6  2E                 	db	46
   238   001ED7  53                 	db	83	;'S'
   239   001ED8  74                 	db	116	;'t'
   240   001ED9  61                 	db	97	;'a'
   241   001EDA  72                 	db	114	;'r'
   242   001EDB  74                 	db	116	;'t'
   243   001EDC  20                 	db	32
   244   001EDD  4E                 	db	78	;'N'
   245   001EDE  65                 	db	101	;'e'
   246   001EDF  77                 	db	119	;'w'
   247   001EE0  20                 	db	32
   248   001EE1  49                 	db	73	;'I'
   249   001EE2  6E                 	db	110	;'n'
   250   001EE3  66                 	db	102	;'f'
   251   001EE4  75                 	db	117	;'u'
   252   001EE5  73                 	db	115	;'s'
   253   001EE6  69                 	db	105	;'i'
   254   001EE7  6F                 	db	111	;'o'
   255   001EE8  6E                 	db	110	;'n'
   256   001EE9  00                 	db	0
   257   001EEA                     STR_23:
   258   001EEA  46                 	db	70	;'F'
   259   001EEB  6F                 	db	111	;'o'
   260   001EEC  72                 	db	114	;'r'
   261   001EED  20                 	db	32
   262   001EEE  6D                 	db	109	;'m'
   263   001EEF  6F                 	db	111	;'o'
   264   001EF0  72                 	db	114	;'r'
   265   001EF1  65                 	db	101	;'e'
   266   001EF2  20                 	db	32
   267   001EF3  69                 	db	105	;'i'
   268   001EF4  6E                 	db	110	;'n'
   269   001EF5  66                 	db	102	;'f'
   270   001EF6  6F                 	db	111	;'o'
   271   001EF7  72                 	db	114	;'r'
   272   001EF8  6D                 	db	109	;'m'
   273   001EF9  61                 	db	97	;'a'
   274   001EFA  74                 	db	116	;'t'
   275   001EFB  69                 	db	105	;'i'
   276   001EFC  6F                 	db	111	;'o'
   277   001EFD  6E                 	db	110	;'n'
   278   001EFE  00                 	db	0
   279   001EFF                     STR_39:
   280   001EFF  49                 	db	73	;'I'
   281   001F00  4E                 	db	78	;'N'
   282   001F01  46                 	db	70	;'F'
   283   001F02  55                 	db	85	;'U'
   284   001F03  53                 	db	83	;'S'
   285   001F04  49                 	db	73	;'I'
   286   001F05  4F                 	db	79	;'O'
   287   001F06  4E                 	db	78	;'N'
   288   001F07  20                 	db	32
   289   001F08  43                 	db	67	;'C'
   290   001F09  4F                 	db	79	;'O'
   291   001F0A  4D                 	db	77	;'M'
   292   001F0B  50                 	db	80	;'P'
   293   001F0C  4C                 	db	76	;'L'
   294   001F0D  45                 	db	69	;'E'
   295   001F0E  54                 	db	84	;'T'
   296   001F0F  45                 	db	69	;'E'
   297   001F10  44                 	db	68	;'D'
   298   001F11  00                 	db	0
   299   001F12                     STR_24:
   300   001F12  56                 	db	86	;'V'
   301   001F13  69                 	db	105	;'i'
   302   001F14  73                 	db	115	;'s'
   303   001F15  69                 	db	105	;'i'
   304   001F16  74                 	db	116	;'t'
   305   001F17  3A                 	db	58	;':'
   306   001F18  20                 	db	32
   307   001F19  68                 	db	104	;'h'
   308   001F1A  61                 	db	97	;'a'
   309   001F1B  72                 	db	114	;'r'
   310   001F1C  64                 	db	100	;'d'
   311   001F1D  6E                 	db	110	;'n'
   312   001F1E  67                 	db	103	;'g'
   313   001F1F  2E                 	db	46
   314   001F20  65                 	db	101	;'e'
   315   001F21  64                 	db	100	;'d'
   316   001F22  00                 	db	0
   317   001F23                     STR_9:
   318   001F23  44                 	db	68	;'D'
   319   001F24  4F                 	db	79	;'O'
   320   001F25  20                 	db	32
   321   001F26  59                 	db	89	;'Y'
   322   001F27  4F                 	db	79	;'O'
   323   001F28  55                 	db	85	;'U'
   324   001F29  20                 	db	32
   325   001F2A  57                 	db	87	;'W'
   326   001F2B  41                 	db	65	;'A'
   327   001F2C  4E                 	db	78	;'N'
   328   001F2D  54                 	db	84	;'T'
   329   001F2E  20                 	db	32
   330   001F2F  54                 	db	84	;'T'
   331   001F30  4F                 	db	79	;'O'
   332   001F31  00                 	db	0
   333   001F32  53                 	db	83	;'S'
   334   001F33  59                 	db	89	;'Y'
   335   001F34  52                 	db	82	;'R'
   336   001F35  49                 	db	73	;'I'
   337   001F36  4E                 	db	78	;'N'
   338   001F37  47                 	db	71	;'G'
   339   001F38  45                 	db	69	;'E'
   340   001F39  20                 	db	32
   341   001F3A  49                 	db	73	;'I'
   342   001F3B  53                 	db	83	;'S'
   343   001F3C  20                 	db	32
   344   001F3D  4E                 	db	78	;'N'
   345   001F3E  4F                 	db	79	;'O'
   346   001F3F  54                 	db	84	;'T'
   347   001F40  00                 	db	0
   348   001F41                     STR_20:
   349   001F41  4D                 	db	77	;'M'
   350   001F42  65                 	db	101	;'e'
   351   001F43  64                 	db	100	;'d'
   352   001F44  69                 	db	105	;'i'
   353   001F45  53                 	db	83	;'S'
   354   001F46  79                 	db	121	;'y'
   355   001F47  6E                 	db	110	;'n'
   356   001F48  63                 	db	99	;'c'
   357   001F49  20                 	db	32
   358   001F4A  4D                 	db	77	;'M'
   359   001F4B  65                 	db	101	;'e'
   360   001F4C  6E                 	db	110	;'n'
   361   001F4D  75                 	db	117	;'u'
   362   001F4E  00                 	db	0
   363   001F4F                     STR_2:
   364   001F4F  20                 	db	32
   365   001F50  42                 	db	66	;'B'
   366   001F51  45                 	db	69	;'E'
   367   001F52  54                 	db	84	;'T'
   368   001F53  57                 	db	87	;'W'
   369   001F54  45                 	db	69	;'E'
   370   001F55  45                 	db	69	;'E'
   371   001F56  4E                 	db	78	;'N'
   372   001F57  20                 	db	32
   373   001F58  30                 	db	48	;'0'
   374   001F59  2D                 	db	45
   375   001F5A  00                 	db	0
   376   001F5B  43                 	db	67	;'C'
   377   001F5C  4C                 	db	76	;'L'
   378   001F5D  4F                 	db	79	;'O'
   379   001F5E  53                 	db	83	;'S'
   380   001F5F  45                 	db	69	;'E'
   381   001F60  20                 	db	32
   382   001F61  56                 	db	86	;'V'
   383   001F62  41                 	db	65	;'A'
   384   001F63  4C                 	db	76	;'L'
   385   001F64  56                 	db	86	;'V'
   386   001F65  45                 	db	69	;'E'
   387   001F66  00                 	db	0
   388   001F67                     STR_27:
   389   001F67  50                 	db	80	;'P'
   390   001F68  55                 	db	85	;'U'
   391   001F69  53                 	db	83	;'S'
   392   001F6A  48                 	db	72	;'H'
   393   001F6B  49                 	db	73	;'I'
   394   001F6C  4E                 	db	78	;'N'
   395   001F6D  47                 	db	71	;'G'
   396   001F6E  2E                 	db	46
   397   001F6F  2E                 	db	46
   398   001F70  2E                 	db	46
   399   001F71  00                 	db	0
   400   001F72  50                 	db	80	;'P'
   401   001F73  55                 	db	85	;'U'
   402   001F74  4C                 	db	76	;'L'
   403   001F75  4C                 	db	76	;'L'
   404   001F76  49                 	db	73	;'I'
   405   001F77  4E                 	db	78	;'N'
   406   001F78  47                 	db	71	;'G'
   407   001F79  2E                 	db	46
   408   001F7A  2E                 	db	46
   409   001F7B  2E                 	db	46
   410   001F7C  00                 	db	0
   411   001F7D  4F                 	db	79	;'O'
   412   001F7E  50                 	db	80	;'P'
   413   001F7F  45                 	db	69	;'E'
   414   001F80  4E                 	db	78	;'N'
   415   001F81  20                 	db	32
   416   001F82  56                 	db	86	;'V'
   417   001F83  41                 	db	65	;'A'
   418   001F84  4C                 	db	76	;'L'
   419   001F85  56                 	db	86	;'V'
   420   001F86  45                 	db	69	;'E'
   421   001F87  00                 	db	0
   422   001F88  50                 	db	80	;'P'
   423   001F89  55                 	db	85	;'U'
   424   001F8A  53                 	db	83	;'S'
   425   001F8B  48                 	db	72	;'H'
   426   001F8C  45                 	db	69	;'E'
   427   001F8D  44                 	db	68	;'D'
   428   001F8E  20                 	db	32
   429   001F8F  49                 	db	73	;'I'
   430   001F90  4E                 	db	78	;'N'
   431   001F91  00                 	db	0
   432   001F92  49                 	db	73	;'I'
   433   001F93  4E                 	db	78	;'N'
   434   001F94  46                 	db	70	;'F'
   435   001F95  55                 	db	85	;'U'
   436   001F96  53                 	db	83	;'S'
   437   001F97  49                 	db	73	;'I'
   438   001F98  4F                 	db	79	;'O'
   439   001F99  4E                 	db	78	;'N'
   440   001F9A  00                 	db	0
   441   001F9B                     STR_22:
   442   001F9B  32                 	db	50	;'2'
   443   001F9C  2E                 	db	46
   444   001F9D  4D                 	db	77	;'M'
   445   001F9E  61                 	db	97	;'a'
   446   001F9F  6E                 	db	110	;'n'
   447   001FA0  75                 	db	117	;'u'
   448   001FA1  61                 	db	97	;'a'
   449   001FA2  6C                 	db	108	;'l'
   450   001FA3  00                 	db	0
   451   001FA4  46                 	db	70	;'F'
   452   001FA5  49                 	db	73	;'I'
   453   001FA6  4C                 	db	76	;'L'
   454   001FA7  4C                 	db	76	;'L'
   455   001FA8  49                 	db	73	;'I'
   456   001FA9  4E                 	db	78	;'N'
   457   001FAA  47                 	db	71	;'G'
   458   001FAB  00                 	db	0
   459   001FAC                     STR_8:
   460   001FAC  50                 	db	80	;'P'
   461   001FAD  55                 	db	85	;'U'
   462   001FAE  53                 	db	83	;'S'
   463   001FAF  48                 	db	72	;'H'
   464   001FB0  49                 	db	73	;'I'
   465   001FB1  4E                 	db	78	;'N'
   466   001FB2  47                 	db	71	;'G'
   467   001FB3  00                 	db	0
   468   001FB4                     STR_31:
   469   001FB4  45                 	db	69	;'E'
   470   001FB5  72                 	db	114	;'r'
   471   001FB6  72                 	db	114	;'r'
   472   001FB7  6F                 	db	111	;'o'
   473   001FB8  72                 	db	114	;'r'
   474   001FB9  3A                 	db	58	;':'
   475   001FBA  00                 	db	0
   476   001FBB                     STR_40:
   477   001FBB  56                 	db	86	;'V'
   478   001FBC  4F                 	db	79	;'O'
   479   001FBD  4C                 	db	76	;'L'
   480   001FBE  55                 	db	85	;'U'
   481   001FBF  4D                 	db	77	;'M'
   482   001FC0  45                 	db	69	;'E'
   483   001FC1  00                 	db	0
   484   001FC2                     STR_16:
   485   001FC2  53                 	db	83	;'S'
   486   001FC3  54                 	db	84	;'T'
   487   001FC4  41                 	db	65	;'A'
   488   001FC5  52                 	db	82	;'R'
   489   001FC6  54                 	db	84	;'T'
   490   001FC7  20                 	db	32
   491   001FC8  00                 	db	0
   492   001FC9                     STR_1:
   493   001FC9  49                 	db	73	;'I'
   494   001FCA  4E                 	db	78	;'N'
   495   001FCB  50                 	db	80	;'P'
   496   001FCC  55                 	db	85	;'U'
   497   001FCD  54                 	db	84	;'T'
   498   001FCE  20                 	db	32
   499   001FCF  00                 	db	0
   500   001FD0                     STR_12:
   501   001FD0  31                 	db	49	;'1'
   502   001FD1  2E                 	db	46
   503   001FD2  20                 	db	32
   504   001FD3  59                 	db	89	;'Y'
   505   001FD4  45                 	db	69	;'E'
   506   001FD5  53                 	db	83	;'S'
   507   001FD6  00                 	db	0
   508   001FD7                     STR_13:
   509   001FD7  32                 	db	50	;'2'
   510   001FD8  2E                 	db	46
   511   001FD9  20                 	db	32
   512   001FDA  4E                 	db	78	;'N'
   513   001FDB  4F                 	db	79	;'O'
   514   001FDC  00                 	db	0
   515   001FDD                     STR_35:
   516   001FDD  45                 	db	69	;'E'
   517   001FDE  78                 	db	120	;'x'
   518   001FDF  70                 	db	112	;'p'
   519   001FE0  3A                 	db	58	;':'
   520   001FE1  00                 	db	0
   521   001FE2                     STR_33:
   522   001FE2  50                 	db	80	;'P'
   523   001FE3  6F                 	db	111	;'o'
   524   001FE4  73                 	db	115	;'s'
   525   001FE5  3A                 	db	58	;':'
   526   001FE6  00                 	db	0
   527   001FE7                     STR_5:
   528   001FE7  42                 	db	66	;'B'
   529   001FE8  41                 	db	65	;'A'
   530   001FE9  43                 	db	67	;'C'
   531   001FEA  4B                 	db	75	;'K'
   532   001FEB  00                 	db	0
   533   001FEC                     STR_37:
   534   001FEC  54                 	db	84	;'T'
   535   001FED  3A                 	db	58	;':'
   536   001FEE  20                 	db	32
   537   001FEF  00                 	db	0
   538   001FF0                     STR_32:
   539   001FF0  25                 	db	37
   540   001FF1  6C                 	db	108	;'l'
   541   001FF2  64                 	db	100	;'d'
   542   001FF3  00                 	db	0
   543   001FF4                     STR_42:
   544   001FF4  31                 	db	49	;'1'
   545   001FF5  30                 	db	48	;'0'
   546   001FF6  00                 	db	0
   547   001FF7                     STR_38:
   548   001FF7  25                 	db	37
   549   001FF8  64                 	db	100	;'d'
   550   001FF9  00                 	db	0
   551   001FFA                     STR_43:
   552   001FFA  6D                 	db	109	;'m'
   553   001FFB  6C                 	db	108	;'l'
   554   001FFC  00                 	db	0
   555   001FFD                     STR_41:
   556   001FFD  56                 	db	86	;'V'
   557   001FFE  00                 	db	0
   558   001FFF  00                 	db	0	; dummy byte at the end
   559   000000                     
   560                           ; #config settings
   561                           
   562                           	psect	cinit
   563   00176E                     __pcinit:
   564                           	callstack 0
   565   00176E                     start_initialization:
   566                           	callstack 0
   567   00176E                     __initialization:
   568                           	callstack 0
   569                           
   570                           ; Initialize objects allocated to BANK0 (40 bytes)
   571                           ; load TBLPTR registers with __pidataBANK0
   572   00176E  0E06               	movlw	low __pidataBANK0
   573   001770  6EF6               	movwf	tblptrl,c
   574   001772  0E1A               	movlw	high __pidataBANK0
   575   001774  6EF7               	movwf	tblptrh,c
   576   001776  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   577   001778  6EF8               	movwf	tblptru,c
   578   00177A  EE00  F0AC         	lfsr	0,__pdataBANK0
   579   00177E  EE10 F028          	lfsr	1,40
   580   001782                     copy_data0:
   581   001782  0009               	tblrd		*+
   582   001784  CFF5 FFEE          	movff	tablat,postinc0
   583   001788  50E5               	movf	postdec1,w,c
   584   00178A  50E1               	movf	fsr1l,w,c
   585   00178C  E1FA               	bnz	copy_data0
   586                           
   587                           ; Initialize objects allocated to COMRAM (1 bytes)
   588                           ; load TBLPTR registers with __pidataCOMRAM
   589   00178E  0E6C               	movlw	low __pidataCOMRAM
   590   001790  6EF6               	movwf	tblptrl,c
   591   001792  0E1B               	movlw	high __pidataCOMRAM
   592   001794  6EF7               	movwf	tblptrh,c
   593   001796  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   594   001798  6EF8               	movwf	tblptru,c
   595   00179A  0009               	tblrd		*+	;fetch initializer
   596   00179C  CFF5 F07A          	movff	tablat,__pdataCOMRAM
   597                           
   598                           ; Clear objects allocated to BANK0 (44 bytes)
   599   0017A0  EE00  F080         	lfsr	0,__pbssBANK0
   600   0017A4  0E2C               	movlw	44
   601   0017A6                     clear_0:
   602   0017A6  6AEE               	clrf	postinc0,c
   603   0017A8  06E8               	decf	wreg,f,c
   604   0017AA  E1FD               	bnz	clear_0
   605                           
   606                           ; Clear objects allocated to COMRAM (7 bytes)
   607   0017AC  EE00  F073         	lfsr	0,__pbssCOMRAM
   608   0017B0  0E07               	movlw	7
   609   0017B2                     clear_1:
   610   0017B2  6AEE               	clrf	postinc0,c
   611   0017B4  06E8               	decf	wreg,f,c
   612   0017B6  E1FD               	bnz	clear_1
   613   0017B8                     end_of_initialization:
   614                           	callstack 0
   615   0017B8                     __end_of__initialization:
   616                           	callstack 0
   617   0017B8  907B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   618   0017BA  927B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   619   0017BC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   620   0017BE  6EF8               	movwf	tblptru,c
   621   0017C0  0100               	movlb	0
   622   0017C2  EF5C  F00B         	goto	_main	;jump to C main() function
   623                           
   624                           	psect	bssCOMRAM
   625   000073                     __pbssCOMRAM:
   626                           	callstack 0
   627   000073                     _mil:
   628                           	callstack 0
   629   000073                     	ds	4
   630   000077                     _TMR0_ini:
   631                           	callstack 0
   632   000077                     	ds	2
   633   000079                     _flags:
   634                           	callstack 0
   635   000079                     	ds	1
   636                           
   637                           	psect	dataCOMRAM
   638   00007A                     __pdataCOMRAM:
   639                           	callstack 0
   640   00007A                     _servo_active:
   641                           	callstack 0
   642   00007A                     	ds	1
   643                           
   644                           	psect	bssBANK0
   645   000080                     __pbssBANK0:
   646                           	callstack 0
   647   000080                     _dbuf:
   648                           	callstack 0
   649   000080                     	ds	32
   650   0000A0                     _lastError:
   651                           	callstack 0
   652   0000A0                     	ds	4
   653   0000A4                     _errorSum:
   654                           	callstack 0
   655   0000A4                     	ds	4
   656   0000A8                     _width:
   657                           	callstack 0
   658   0000A8                     	ds	2
   659   0000AA                     _prec:
   660                           	callstack 0
   661   0000AA                     	ds	2
   662                           
   663                           	psect	dataBANK0
   664   0000AC                     __pdataBANK0:
   665                           	callstack 0
   666   0000AC                     _pulse:
   667                           	callstack 0
   668   0000AC                     	ds	12
   669   0000B8                     _Kd:
   670                           	callstack 0
   671   0000B8                     	ds	4
   672   0000BC                     _Ki:
   673                           	callstack 0
   674   0000BC                     	ds	4
   675   0000C0                     _Kp:
   676                           	callstack 0
   677   0000C0                     	ds	4
   678   0000C4                     _dT:
   679                           	callstack 0
   680   0000C4                     	ds	4
   681   0000C8                     _c:
   682                           	callstack 0
   683   0000C8                     	ds	4
   684   0000CC                     _timeInfusion:
   685                           	callstack 0
   686   0000CC                     	ds	4
   687   0000D0                     _volume:
   688                           	callstack 0
   689   0000D0                     	ds	4
   690                           
   691                           	psect	cstackBANK0
   692   0000D4                     __pcstackBANK0:
   693                           	callstack 0
   694   0000D4                     infusion@dError:
   695                           	callstack 0
   696                           
   697                           ; 4 bytes @ 0x0
   698   0000D4                     	ds	4
   699   0000D8                     _infusion$1678:
   700                           	callstack 0
   701                           
   702                           ; 4 bytes @ 0x4
   703   0000D8                     	ds	4
   704   0000DC                     infusion@act_pos:
   705                           	callstack 0
   706                           
   707                           ; 2 bytes @ 0x8
   708   0000DC                     	ds	2
   709   0000DE                     infusion@buff:
   710                           	callstack 0
   711                           
   712                           ; 5 bytes @ 0xA
   713   0000DE                     	ds	5
   714   0000E3                     infusion@expectedX:
   715                           	callstack 0
   716                           
   717                           ; 4 bytes @ 0xF
   718   0000E3                     	ds	4
   719   0000E7                     infusion@analogReading:
   720                           	callstack 0
   721                           
   722                           ; 4 bytes @ 0x13
   723   0000E7                     	ds	4
   724   0000EB                     infusion@stopTime:
   725                           	callstack 0
   726                           
   727                           ; 4 bytes @ 0x17
   728   0000EB                     	ds	4
   729   0000EF                     infusion@i:
   730                           	callstack 0
   731                           
   732                           ; 1 bytes @ 0x1B
   733   0000EF                     	ds	1
   734   0000F0                     infusion@controlSignal:
   735                           	callstack 0
   736                           
   737                           ; 4 bytes @ 0x1C
   738   0000F0                     	ds	4
   739   0000F4                     infusion@error:
   740                           	callstack 0
   741                           
   742                           ; 4 bytes @ 0x20
   743   0000F4                     	ds	4
   744   0000F8                     ??_main:
   745                           
   746                           ; 1 bytes @ 0x24
   747   0000F8                     	ds	2
   748   0000FA                     main@userInput:
   749                           	callstack 0
   750                           
   751                           ; 1 bytes @ 0x26
   752   0000FA                     	ds	1
   753   0000FB                     main@currentState:
   754                           	callstack 0
   755                           
   756                           ; 1 bytes @ 0x27
   757   0000FB                     	ds	1
   758                           
   759                           	psect	cstackCOMRAM
   760   000001                     __pcstackCOMRAM:
   761                           	callstack 0
   762   000001                     signalServo@pulseServo:
   763                           	callstack 0
   764                           
   765                           ; 2 bytes @ 0x0
   766   000001                     	ds	2
   767   000003                     signalServo@pinServo:
   768                           	callstack 0
   769                           
   770                           ; 1 bytes @ 0x2
   771   000003                     	ds	1
   772   000004                     ??_Timer1_ISR:
   773                           
   774                           ; 1 bytes @ 0x3
   775   000004                     	ds	1
   776   000005                     ??_keypad_scanner:
   777   000005                     ?_ADC_Read:
   778                           	callstack 0
   779   000005                     ?___wmul:
   780                           	callstack 0
   781   000005                     ?___awdiv:
   782                           	callstack 0
   783   000005                     ?___awmod:
   784                           	callstack 0
   785   000005                     ?___almod:
   786                           	callstack 0
   787   000005                     Lcd_Port@a:
   788                           	callstack 0
   789   000005                     GetNextState@input:
   790                           	callstack 0
   791   000005                     set_pwm_duty@pwm_duty:
   792                           	callstack 0
   793   000005                     change_direction_motion@hDriverIn1:
   794                           	callstack 0
   795   000005                     usePeripheral@peripheral:
   796                           	callstack 0
   797   000005                     delay_ms@milliseconds:
   798                           	callstack 0
   799   000005                     ___wmul@multiplier:
   800                           	callstack 0
   801   000005                     ___awdiv@dividend:
   802                           	callstack 0
   803   000005                     ___awmod@dividend:
   804                           	callstack 0
   805   000005                     fputc@c:
   806                           	callstack 0
   807   000005                     ___almod@dividend:
   808                           	callstack 0
   809                           
   810                           ; 4 bytes @ 0x4
   811   000005                     	ds	1
   812   000006                     ??_Lcd_Cmd:
   813   000006                     ??_GetNextState:
   814   000006                     Lcd_Write_Char@temp:
   815                           	callstack 0
   816                           
   817                           ; 1 bytes @ 0x5
   818   000006                     	ds	1
   819   000007                     ??_set_pwm_duty:
   820   000007                     ??_ADC_Read:
   821   000007                     ??_delay_ms:
   822   000007                     Lcd_Cmd@a:
   823                           	callstack 0
   824   000007                     Lcd_Write_Char@y:
   825                           	callstack 0
   826   000007                     switch_press_scan@key:
   827                           	callstack 0
   828   000007                     fputc@fp:
   829                           	callstack 0
   830   000007                     change_direction_motion@hDriverIn2:
   831                           	callstack 0
   832   000007                     usePeripheral@action:
   833                           	callstack 0
   834   000007                     ___wmul@multiplicand:
   835                           	callstack 0
   836   000007                     ___awdiv@divisor:
   837                           	callstack 0
   838   000007                     ___awmod@divisor:
   839                           	callstack 0
   840                           
   841                           ; 2 bytes @ 0x6
   842   000007                     	ds	1
   843   000008                     ??_fputc:
   844   000008                     ??_Lcd_Init:
   845   000008                     ?_input_option:
   846                           	callstack 0
   847   000008                     Lcd_Set_Cursor@b:
   848                           	callstack 0
   849   000008                     Lcd_Write_Char@a:
   850                           	callstack 0
   851   000008                     GetNextState@currentState:
   852                           	callstack 0
   853                           
   854                           ; 1 bytes @ 0x7
   855   000008                     	ds	1
   856   000009                     Lcd_Set_Cursor@a:
   857                           	callstack 0
   858   000009                     ___awdiv@counter:
   859                           	callstack 0
   860   000009                     ___awmod@counter:
   861                           	callstack 0
   862   000009                     Lcd_Write_String@a:
   863                           	callstack 0
   864   000009                     move_actuator@direction:
   865                           	callstack 0
   866   000009                     ___wmul@product:
   867                           	callstack 0
   868   000009                     ___almod@divisor:
   869                           	callstack 0
   870                           
   871                           ; 4 bytes @ 0x8
   872   000009                     	ds	1
   873   00000A                     ??_input_option:
   874   00000A                     Lcd_Set_Cursor@z:
   875                           	callstack 0
   876   00000A                     ___awdiv@sign:
   877                           	callstack 0
   878   00000A                     ___awmod@sign:
   879                           	callstack 0
   880                           
   881                           ; 1 bytes @ 0x9
   882   00000A                     	ds	1
   883   00000B                     ??_Lcd_Write_String:
   884   00000B                     Lcd_Set_Cursor@y:
   885                           	callstack 0
   886   00000B                     ADC_Read@channel:
   887                           	callstack 0
   888   00000B                     move_actuator@speed:
   889                           	callstack 0
   890   00000B                     ___awdiv@quotient:
   891                           	callstack 0
   892                           
   893                           ; 2 bytes @ 0xA
   894   00000B                     	ds	1
   895   00000C                     Lcd_Set_Cursor@temp:
   896                           	callstack 0
   897   00000C                     ADC_Read@digital:
   898                           	callstack 0
   899   00000C                     input_option@option:
   900                           	callstack 0
   901                           
   902                           ; 2 bytes @ 0xB
   903   00000C                     	ds	1
   904   00000D                     ?_processTimeToSeconds:
   905                           	callstack 0
   906   00000D                     ___almod@counter:
   907                           	callstack 0
   908   00000D                     Lcd_Write_String@i:
   909                           	callstack 0
   910   00000D                     processTimeToSeconds@timeInput:
   911                           	callstack 0
   912                           
   913                           ; 2 bytes @ 0xC
   914   00000D                     	ds	1
   915   00000E                     input_option@userInput:
   916                           	callstack 0
   917   00000E                     ___almod@sign:
   918                           	callstack 0
   919                           
   920                           ; 1 bytes @ 0xD
   921   00000E                     	ds	1
   922   00000F                     ?_abs:
   923                           	callstack 0
   924   00000F                     input_value@inputType:
   925                           	callstack 0
   926   00000F                     start_process_screen@word:
   927                           	callstack 0
   928   00000F                     processTimeToSeconds@minutes:
   929                           	callstack 0
   930   00000F                     abs@a:
   931                           	callstack 0
   932                           
   933                           ; 2 bytes @ 0xE
   934   00000F                     	ds	2
   935   000011                     ??_abs:
   936   000011                     input_value@initial:
   937                           	callstack 0
   938   000011                     handle_actuator_push@act_pos:
   939                           	callstack 0
   940   000011                     processTimeToSeconds@seconds:
   941                           	callstack 0
   942                           
   943                           ; 2 bytes @ 0x10
   944   000011                     	ds	2
   945   000013                     ??_handle_actuator_push:
   946   000013                     input_value@limit:
   947                           	callstack 0
   948   000013                     processTimeToSeconds@totalSeconds:
   949                           	callstack 0
   950                           
   951                           ; 2 bytes @ 0x12
   952   000013                     	ds	1
   953   000014                     handle_actuator_push@decision:
   954                           	callstack 0
   955                           
   956                           ; 2 bytes @ 0x13
   957   000014                     	ds	1
   958   000015                     ?___lldiv:
   959                           	callstack 0
   960   000015                     input_value@units:
   961                           	callstack 0
   962   000015                     ___lldiv@dividend:
   963                           	callstack 0
   964                           
   965                           ; 4 bytes @ 0x14
   966   000015                     	ds	2
   967   000017                     
   968                           ; 1 bytes @ 0x16
   969   000017                     	ds	2
   970   000019                     ___lldiv@divisor:
   971                           	callstack 0
   972                           
   973                           ; 4 bytes @ 0x18
   974   000019                     	ds	4
   975   00001D                     ___lldiv@quotient:
   976                           	callstack 0
   977                           
   978                           ; 4 bytes @ 0x1C
   979   00001D                     	ds	4
   980   000021                     ___lldiv@counter:
   981                           	callstack 0
   982                           
   983                           ; 1 bytes @ 0x20
   984   000021                     	ds	1
   985   000022                     ?___lmul:
   986                           	callstack 0
   987   000022                     ___lmul@multiplier:
   988                           	callstack 0
   989                           
   990                           ; 4 bytes @ 0x21
   991   000022                     	ds	4
   992   000026                     ___lmul@multiplicand:
   993                           	callstack 0
   994                           
   995                           ; 4 bytes @ 0x25
   996   000026                     	ds	4
   997   00002A                     ___lmul@product:
   998                           	callstack 0
   999                           
  1000                           ; 4 bytes @ 0x29
  1001   00002A                     	ds	4
  1002   00002E                     ?___aldiv:
  1003                           	callstack 0
  1004   00002E                     ___aldiv@dividend:
  1005                           	callstack 0
  1006                           
  1007                           ; 4 bytes @ 0x2D
  1008   00002E                     	ds	4
  1009   000032                     ___aldiv@divisor:
  1010                           	callstack 0
  1011                           
  1012                           ; 4 bytes @ 0x31
  1013   000032                     	ds	4
  1014   000036                     ___aldiv@counter:
  1015                           	callstack 0
  1016                           
  1017                           ; 1 bytes @ 0x35
  1018   000036                     	ds	1
  1019   000037                     ___aldiv@sign:
  1020                           	callstack 0
  1021                           
  1022                           ; 1 bytes @ 0x36
  1023   000037                     	ds	1
  1024   000038                     ___aldiv@quotient:
  1025                           	callstack 0
  1026                           
  1027                           ; 4 bytes @ 0x37
  1028   000038                     	ds	4
  1029   00003C                     ?_calculateBitRatePer10Sec:
  1030                           	callstack 0
  1031   00003C                     vfpfcnvrt@fp:
  1032                           	callstack 0
  1033   00003C                     calculateBitRatePer10Sec@volume_mL:
  1034                           	callstack 0
  1035                           
  1036                           ; 4 bytes @ 0x3B
  1037   00003C                     	ds	1
  1038   00003D                     vfpfcnvrt@fmt:
  1039                           	callstack 0
  1040                           
  1041                           ; 1 bytes @ 0x3C
  1042   00003D                     	ds	1
  1043   00003E                     vfpfcnvrt@ap:
  1044                           	callstack 0
  1045                           
  1046                           ; 1 bytes @ 0x3D
  1047   00003E                     	ds	1
  1048   00003F                     ??_vfpfcnvrt:
  1049                           
  1050                           ; 1 bytes @ 0x3E
  1051   00003F                     	ds	1
  1052   000040                     calculateBitRatePer10Sec@totalSeconds:
  1053                           	callstack 0
  1054                           
  1055                           ; 4 bytes @ 0x3F
  1056   000040                     	ds	1
  1057   000041                     vfpfcnvrt@done:
  1058                           	callstack 0
  1059                           
  1060                           ; 1 bytes @ 0x40
  1061   000041                     	ds	1
  1062   000042                     vfpfcnvrt@cp:
  1063                           	callstack 0
  1064                           
  1065                           ; 2 bytes @ 0x41
  1066   000042                     	ds	2
  1067   000044                     calculateBitRatePer10Sec@length_mm_scaled:
  1068                           	callstack 0
  1069   000044                     vfpfcnvrt@convarg:
  1070                           	callstack 0
  1071                           
  1072                           ; 4 bytes @ 0x43
  1073   000044                     	ds	4
  1074   000048                     vfpfcnvrt@c:
  1075                           	callstack 0
  1076   000048                     calculateBitRatePer10Sec@length_per_min_mm_scaled:
  1077                           	callstack 0
  1078                           
  1079                           ; 4 bytes @ 0x47
  1080   000048                     	ds	1
  1081   000049                     ?_vfprintf:
  1082                           	callstack 0
  1083   000049                     vfprintf@fp:
  1084                           	callstack 0
  1085                           
  1086                           ; 1 bytes @ 0x48
  1087   000049                     	ds	1
  1088   00004A                     vfprintf@fmt:
  1089                           	callstack 0
  1090                           
  1091                           ; 2 bytes @ 0x49
  1092   00004A                     	ds	2
  1093   00004C                     vfprintf@ap:
  1094                           	callstack 0
  1095   00004C                     calculateBitRatePer10Sec@bit_rate_per_min_scaled:
  1096                           	callstack 0
  1097                           
  1098                           ; 4 bytes @ 0x4B
  1099   00004C                     	ds	1
  1100   00004D                     vfprintf@cfmt:
  1101                           	callstack 0
  1102                           
  1103                           ; 2 bytes @ 0x4C
  1104   00004D                     	ds	2
  1105   00004F                     ?_sprintf:
  1106                           	callstack 0
  1107   00004F                     sprintf@s:
  1108                           	callstack 0
  1109                           
  1110                           ; 1 bytes @ 0x4E
  1111   00004F                     	ds	1
  1112   000050                     sprintf@fmt:
  1113                           	callstack 0
  1114   000050                     calculateBitRatePer10Sec@bit_rate_per_10sec:
  1115                           	callstack 0
  1116                           
  1117                           ; 4 bytes @ 0x4F
  1118   000050                     	ds	4
  1119   000054                     ?_getExpected:
  1120                           	callstack 0
  1121                           
  1122                           ; 4 bytes @ 0x53
  1123   000054                     	ds	2
  1124   000056                     sprintf@ap:
  1125                           	callstack 0
  1126                           
  1127                           ; 1 bytes @ 0x55
  1128   000056                     	ds	1
  1129   000057                     sprintf@f:
  1130                           	callstack 0
  1131                           
  1132                           ; 12 bytes @ 0x56
  1133   000057                     	ds	1
  1134   000058                     getExpected@ms:
  1135                           	callstack 0
  1136                           
  1137                           ; 4 bytes @ 0x57
  1138   000058                     	ds	4
  1139   00005C                     getExpected@expected:
  1140                           	callstack 0
  1141                           
  1142                           ; 4 bytes @ 0x5B
  1143   00005C                     	ds	4
  1144   000060                     _getExpected$1675:
  1145                           	callstack 0
  1146                           
  1147                           ; 4 bytes @ 0x5F
  1148   000060                     	ds	4
  1149   000064                     _getExpected$1676:
  1150                           	callstack 0
  1151                           
  1152                           ; 4 bytes @ 0x63
  1153   000064                     	ds	4
  1154   000068                     ??_infusion:
  1155                           
  1156                           ; 1 bytes @ 0x67
  1157   000068                     	ds	8
  1158   000070                     ??_handle_infusion_setup:
  1159                           
  1160                           ; 1 bytes @ 0x6F
  1161   000070                     	ds	2
  1162   000072                     handle_infusion_setup@currentState:
  1163                           	callstack 0
  1164                           
  1165                           ; 1 bytes @ 0x71
  1166   000072                     	ds	1
  1167                           
  1168 ;;
  1169 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1170 ;;
  1171 ;; *************** function _main *****************
  1172 ;; Defined at:
  1173 ;;		line 611 in file "main.c"
  1174 ;; Parameters:    Size  Location     Type
  1175 ;;		None
  1176 ;; Auto vars:     Size  Location     Type
  1177 ;;  currentState    1   39[BANK0 ] enum E2620
  1178 ;;  userInput       1   38[BANK0 ] unsigned char 
  1179 ;; Return value:  Size  Location     Type
  1180 ;;                  1    wreg      void 
  1181 ;; Registers used:
  1182 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1183 ;; Tracked objects:
  1184 ;;		On entry : 0/0
  1185 ;;		On exit  : 3F/0
  1186 ;;		Unchanged: 0/0
  1187 ;; Data sizes:     COMRAM   BANK0   BANK1
  1188 ;;      Params:         0       0       0
  1189 ;;      Locals:         0       2       0
  1190 ;;      Temps:          0       2       0
  1191 ;;      Totals:         0       4       0
  1192 ;;Total ram usage:        4 bytes
  1193 ;; Hardware stack levels required when called: 9
  1194 ;; This function calls:
  1195 ;;		_GetNextState
  1196 ;;		_handle_infusion_setup
  1197 ;;		_manual
  1198 ;;		_menu
  1199 ;;		_switch_press_scan
  1200 ;;		_system_init
  1201 ;; This function is called by:
  1202 ;;		Startup code after reset
  1203 ;; This function uses a non-reentrant model
  1204 ;;
  1205                           
  1206                           	psect	text0
  1207   0016B8                     __ptext0:
  1208                           	callstack 0
  1209   0016B8                     _main:
  1210                           	callstack 22
  1211                           
  1212                           ;main.c: 612:     system_init();
  1213                           
  1214                           ;incstack = 0
  1215   0016B8  ECF7  F00A         	call	_system_init	;wreg free
  1216                           
  1217                           ;main.c: 613:     ScreenState currentState = MAIN_MENU;
  1218   0016BC  0E01               	movlw	1
  1219   0016BE  D027               	goto	L1
  1220   0016C0                     l4653:
  1221                           
  1222                           ; BSR set to: 0
  1223                           ;main.c: 619:                 menu();
  1224   0016C0  EC36  F00C         	call	_menu	;wreg free
  1225                           
  1226                           ;main.c: 620:                 break;
  1227   0016C4  D01B               	goto	l4667
  1228   0016C6                     l4655:
  1229                           
  1230                           ; BSR set to: 0
  1231                           ;main.c: 622:                 handle_infusion_setup();
  1232   0016C6  EC8A  F00B         	call	_handle_infusion_setup	;wreg free
  1233                           
  1234                           ;main.c: 623:                 currentState = MAIN_MENU;
  1235   0016CA  0E01               	movlw	1
  1236   0016CC  D003               	goto	L2
  1237   0016CE                     l4659:
  1238                           
  1239                           ; BSR set to: 0
  1240                           ;main.c: 626:                 manual();
  1241   0016CE  EC5A  F00C         	call	_manual	;wreg free
  1242                           
  1243                           ;main.c: 627:                 currentState = MANUAL_SCREEN;
  1244   0016D2  0E03               	movlw	3
  1245   0016D4                     L2:
  1246   0016D4  0100               	movlb	0	; () banked
  1247   0016D6  6FFB               	movwf	main@currentState& (0+255),b
  1248                           
  1249                           ;main.c: 628:                 break;
  1250   0016D8  D011               	goto	l4667
  1251   0016DA                     l4665:
  1252                           
  1253                           ; BSR set to: 0
  1254   0016DA  51FB               	movf	main@currentState& (0+255),w,b
  1255   0016DC  6FF8               	movwf	??_main& (0+255),b
  1256   0016DE  6BF9               	clrf	(??_main+1)& (0+255),b
  1257                           
  1258                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1259                           ; Switch size 1, requested type "simple"
  1260                           ; Number of cases is 1, Range of values is 0 to 0
  1261                           ; switch strategies available:
  1262                           ; Name         Instructions Cycles
  1263                           ; simple_byte            4     3 (average)
  1264                           ;	Chosen strategy is simple_byte
  1265   0016E0  51F9               	movf	(??_main+1)& (0+255),w,b
  1266   0016E2  0A00               	xorlw	0	; case 0
  1267   0016E4  A4D8               	btfss	status,2,c
  1268   0016E6  D00A               	goto	l4667
  1269                           
  1270                           ; BSR set to: 0
  1271                           ; Switch size 1, requested type "simple"
  1272                           ; Number of cases is 3, Range of values is 1 to 3
  1273                           ; switch strategies available:
  1274                           ; Name         Instructions Cycles
  1275                           ; simple_byte           10     6 (average)
  1276                           ;	Chosen strategy is simple_byte
  1277   0016E8  51F8               	movf	??_main& (0+255),w,b
  1278   0016EA  0A01               	xorlw	1	; case 1
  1279   0016EC  B4D8               	btfsc	status,2,c
  1280   0016EE  D7E8               	goto	l4653
  1281   0016F0  0A03               	xorlw	3	; case 2
  1282   0016F2  B4D8               	btfsc	status,2,c
  1283   0016F4  D7E8               	goto	l4655
  1284   0016F6  0A01               	xorlw	1	; case 3
  1285   0016F8  B4D8               	btfsc	status,2,c
  1286   0016FA  D7E9               	goto	l4659
  1287   0016FC                     l4667:
  1288                           
  1289                           ;main.c: 633:         userInput = switch_press_scan();
  1290   0016FC  EC92  F00D         	call	_switch_press_scan	;wreg free
  1291   001700  0100               	movlb	0	; () banked
  1292   001702  6FFA               	movwf	main@userInput& (0+255),b
  1293                           
  1294                           ;main.c: 636:         currentState = GetNextState(currentState, userInput);
  1295   001704  C0FA  F005         	movff	main@userInput,GetNextState@input
  1296   001708  51FB               	movf	main@currentState& (0+255),w,b
  1297   00170A  EC4F  F009         	call	_GetNextState
  1298   00170E                     L1:
  1299   00170E  0100               	movlb	0	; () banked
  1300   001710  6FFB               	movwf	main@currentState& (0+255),b
  1301   001712  D7E3               	goto	l4665
  1302   001714                     __end_of_main:
  1303                           	callstack 0
  1304                           
  1305 ;; *************** function _system_init *****************
  1306 ;; Defined at:
  1307 ;;		line 139 in file "main.c"
  1308 ;; Parameters:    Size  Location     Type
  1309 ;;		None
  1310 ;; Auto vars:     Size  Location     Type
  1311 ;;		None
  1312 ;; Return value:  Size  Location     Type
  1313 ;;                  1    wreg      void 
  1314 ;; Registers used:
  1315 ;;		wreg, status,2, status,0, cstack
  1316 ;; Tracked objects:
  1317 ;;		On entry : 0/0
  1318 ;;		On exit  : 0/0
  1319 ;;		Unchanged: 0/0
  1320 ;; Data sizes:     COMRAM   BANK0   BANK1
  1321 ;;      Params:         0       0       0
  1322 ;;      Locals:         0       0       0
  1323 ;;      Temps:          0       0       0
  1324 ;;      Totals:         0       0       0
  1325 ;;Total ram usage:        0 bytes
  1326 ;; Hardware stack levels used: 1
  1327 ;; Hardware stack levels required when called: 5
  1328 ;; This function calls:
  1329 ;;		_ADC_init
  1330 ;;		_InitKeypad
  1331 ;;		_Lcd_Init
  1332 ;;		_init_actuator
  1333 ;;		_usePeripheral
  1334 ;; This function is called by:
  1335 ;;		_main
  1336 ;; This function uses a non-reentrant model
  1337 ;;
  1338                           
  1339                           	psect	text1
  1340   0015EE                     __ptext1:
  1341                           	callstack 0
  1342   0015EE                     _system_init:
  1343                           	callstack 25
  1344                           
  1345                           ;main.c: 141:     OSCCON = 0x72;
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;incstack = 0
  1349   0015EE  0E72               	movlw	114
  1350   0015F0  6ED3               	movwf	211,c	;volatile
  1351                           
  1352                           ;main.c: 143:     PORTD = 0x00;
  1353   0015F2  0E00               	movlw	0
  1354   0015F4  6E83               	movwf	131,c	;volatile
  1355                           
  1356                           ;main.c: 145:     TRISD = 0x00;
  1357   0015F6  0E00               	movlw	0
  1358   0015F8  6E95               	movwf	149,c	;volatile
  1359                           
  1360                           ;main.c: 147:     TRISC = 0x00;
  1361   0015FA  0E00               	movlw	0
  1362   0015FC  6E94               	movwf	148,c	;volatile
  1363                           
  1364                           ;main.c: 149:     Lcd_Init();
  1365   0015FE  EC87  F00A         	call	_Lcd_Init	;wreg free
  1366                           
  1367                           ;main.c: 151:     InitKeypad();
  1368   001602  ECA7  F00D         	call	_InitKeypad	;wreg free
  1369                           
  1370                           ;main.c: 154:     ADC_init();
  1371   001606  EC9D  F00D         	call	_ADC_init	;wreg free
  1372                           
  1373                           ;main.c: 157:     init_actuator();
  1374   00160A  EC7C  F00D         	call	_init_actuator	;wreg free
  1375                           
  1376                           ;main.c: 159:     TRISA2 = 0;
  1377   00160E  9492               	bcf	3986,2,c	;volatile
  1378                           
  1379                           ;main.c: 160:     TRISC6 = 0;
  1380   001610  9C94               	bcf	3988,6,c	;volatile
  1381                           
  1382                           ;main.c: 161:     TRISC5 = 0;
  1383   001612  9A94               	bcf	3988,5,c	;volatile
  1384                           
  1385                           ;main.c: 162:     TRISC4 = 0;
  1386   001614  9894               	bcf	3988,4,c	;volatile
  1387                           
  1388                           ;main.c: 164:     usePeripheral(green_led, on);
  1389   001616  0E00               	movlw	0
  1390   001618  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  1391   00161A  0E00               	movlw	0
  1392   00161C  6E05               	movwf	usePeripheral@peripheral^0,c
  1393   00161E  0E00               	movlw	0
  1394   001620  6E08               	movwf	(usePeripheral@action+1)^0,c
  1395   001622  0E01               	movlw	1
  1396   001624  6E07               	movwf	usePeripheral@action^0,c
  1397   001626  EC8D  F007         	call	_usePeripheral	;wreg free
  1398                           
  1399                           ;main.c: 165:     usePeripheral(orange_led, off);
  1400   00162A  0E00               	movlw	0
  1401   00162C  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  1402   00162E  0E01               	movlw	1
  1403   001630  6E05               	movwf	usePeripheral@peripheral^0,c
  1404   001632  0E00               	movlw	0
  1405   001634  6E08               	movwf	(usePeripheral@action+1)^0,c
  1406   001636  0E00               	movlw	0
  1407   001638  6E07               	movwf	usePeripheral@action^0,c
  1408   00163A  EC8D  F007         	call	_usePeripheral	;wreg free
  1409                           
  1410                           ;main.c: 166:     usePeripheral(red_led, off);
  1411   00163E  0E00               	movlw	0
  1412   001640  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  1413   001642  0E02               	movlw	2
  1414   001644  6E05               	movwf	usePeripheral@peripheral^0,c
  1415   001646  0E00               	movlw	0
  1416   001648  6E08               	movwf	(usePeripheral@action+1)^0,c
  1417   00164A  0E00               	movlw	0
  1418   00164C  6E07               	movwf	usePeripheral@action^0,c
  1419   00164E  EC8D  F007         	call	_usePeripheral	;wreg free
  1420                           
  1421                           ;main.c: 170:     TRISCbits.RC1 = 0;
  1422   001652  9294               	bcf	148,1,c	;volatile
  1423   001654  0012               	return		;funcret
  1424   001656                     __end_of_system_init:
  1425                           	callstack 0
  1426                           
  1427 ;; *************** function _init_actuator *****************
  1428 ;; Defined at:
  1429 ;;		line 3 in file "actuator.c"
  1430 ;; Parameters:    Size  Location     Type
  1431 ;;		None
  1432 ;; Auto vars:     Size  Location     Type
  1433 ;;		None
  1434 ;; Return value:  Size  Location     Type
  1435 ;;                  1    wreg      void 
  1436 ;; Registers used:
  1437 ;;		wreg, status,2
  1438 ;; Tracked objects:
  1439 ;;		On entry : 0/0
  1440 ;;		On exit  : 0/0
  1441 ;;		Unchanged: 0/0
  1442 ;; Data sizes:     COMRAM   BANK0   BANK1
  1443 ;;      Params:         0       0       0
  1444 ;;      Locals:         0       0       0
  1445 ;;      Temps:          0       0       0
  1446 ;;      Totals:         0       0       0
  1447 ;;Total ram usage:        0 bytes
  1448 ;; Hardware stack levels used: 1
  1449 ;; Hardware stack levels required when called: 2
  1450 ;; This function calls:
  1451 ;;		Nothing
  1452 ;; This function is called by:
  1453 ;;		_system_init
  1454 ;; This function uses a non-reentrant model
  1455 ;;
  1456                           
  1457                           	psect	text2
  1458   001AF8                     __ptext2:
  1459                           	callstack 0
  1460   001AF8                     _init_actuator:
  1461                           	callstack 27
  1462                           
  1463                           ;actuator.c: 6:     RC2 = 0;
  1464                           
  1465                           ;incstack = 0
  1466   001AF8  9482               	bcf	3970,2,c	;volatile
  1467                           
  1468                           ;actuator.c: 7:     TRISC2 = 0;
  1469   001AFA  9494               	bcf	3988,2,c	;volatile
  1470                           
  1471                           ;actuator.c: 8:     CCP1CON = 0x0C;
  1472   001AFC  0E0C               	movlw	12
  1473   001AFE  6EBD               	movwf	189,c	;volatile
  1474                           
  1475                           ;actuator.c: 9:     CCPR1L = 0;
  1476   001B00  0E00               	movlw	0
  1477   001B02  6EBE               	movwf	190,c	;volatile
  1478                           
  1479                           ;actuator.c: 12:     TMR2IF = 0;
  1480   001B04  929E               	bcf	3998,1,c	;volatile
  1481                           
  1482                           ;actuator.c: 13:     T2CON = 0x05;
  1483   001B06  0E05               	movlw	5
  1484   001B08  6ECA               	movwf	202,c	;volatile
  1485                           
  1486                           ;actuator.c: 14:     PR2 = 0xFF;
  1487   001B0A  68CB               	setf	203,c	;volatile
  1488   001B0C  0012               	return		;funcret
  1489   001B0E                     __end_of_init_actuator:
  1490                           	callstack 0
  1491                           
  1492 ;; *************** function _Lcd_Init *****************
  1493 ;; Defined at:
  1494 ;;		line 88 in file "lcd.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;		None
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;		None
  1499 ;; Return value:  Size  Location     Type
  1500 ;;                  1    wreg      void 
  1501 ;; Registers used:
  1502 ;;		wreg, status,2, cstack
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMRAM   BANK0   BANK1
  1508 ;;      Params:         0       0       0
  1509 ;;      Locals:         0       0       0
  1510 ;;      Temps:          1       0       0
  1511 ;;      Totals:         1       0       0
  1512 ;;Total ram usage:        1 bytes
  1513 ;; Hardware stack levels used: 1
  1514 ;; Hardware stack levels required when called: 4
  1515 ;; This function calls:
  1516 ;;		_Lcd_Cmd
  1517 ;;		_Lcd_Port
  1518 ;; This function is called by:
  1519 ;;		_system_init
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           	psect	text3
  1524   00150E                     __ptext3:
  1525                           	callstack 0
  1526   00150E                     _Lcd_Init:
  1527                           	callstack 25
  1528                           
  1529                           ;lcd.c: 90:   Lcd_Port(0x00);
  1530                           
  1531                           ;incstack = 0
  1532   00150E  0E00               	movlw	0
  1533   001510  ECED  F00C         	call	_Lcd_Port
  1534                           
  1535                           ;lcd.c: 91:    _delay((unsigned long)((20)*(8000000L/4000.0)));
  1536   001514  0E34               	movlw	52
  1537   001516  6E08               	movwf	??_Lcd_Init^0,c
  1538   001518  0EF2               	movlw	242
  1539   00151A                     u4597:
  1540   00151A  2EE8               	decfsz	wreg,f,c
  1541   00151C  D7FE               	bra	u4597
  1542   00151E  2E08               	decfsz	??_Lcd_Init^0,f,c
  1543   001520  D7FC               	bra	u4597
  1544                           
  1545                           ;lcd.c: 92:   Lcd_Cmd(0x03);
  1546   001522  0E03               	movlw	3
  1547   001524  EC50  F00D         	call	_Lcd_Cmd
  1548                           
  1549                           ;lcd.c: 93:  _delay((unsigned long)((5)*(8000000L/4000.0)));
  1550   001528  0E0D               	movlw	13
  1551   00152A  6E08               	movwf	??_Lcd_Init^0,c
  1552   00152C  0EFC               	movlw	252
  1553   00152E                     u4607:
  1554   00152E  2EE8               	decfsz	wreg,f,c
  1555   001530  D7FE               	bra	u4607
  1556   001532  2E08               	decfsz	??_Lcd_Init^0,f,c
  1557   001534  D7FC               	bra	u4607
  1558                           
  1559                           ;lcd.c: 94:   Lcd_Cmd(0x03);
  1560   001536  0E03               	movlw	3
  1561   001538  EC50  F00D         	call	_Lcd_Cmd
  1562                           
  1563                           ;lcd.c: 95:  _delay((unsigned long)((11)*(8000000L/4000.0)));
  1564   00153C  0E1D               	movlw	29
  1565   00153E  6E08               	movwf	??_Lcd_Init^0,c
  1566   001540  0E91               	movlw	145
  1567   001542                     u4617:
  1568   001542  2EE8               	decfsz	wreg,f,c
  1569   001544  D7FE               	bra	u4617
  1570   001546  2E08               	decfsz	??_Lcd_Init^0,f,c
  1571   001548  D7FC               	bra	u4617
  1572   00154A  0000               	nop	
  1573                           
  1574                           ;lcd.c: 96:   Lcd_Cmd(0x03);
  1575   00154C  0E03               	movlw	3
  1576   00154E  EC50  F00D         	call	_Lcd_Cmd
  1577                           
  1578                           ;lcd.c: 98:   Lcd_Cmd(0x02);
  1579   001552  0E02               	movlw	2
  1580   001554  EC50  F00D         	call	_Lcd_Cmd
  1581                           
  1582                           ;lcd.c: 99:   Lcd_Cmd(0x02);
  1583   001558  0E02               	movlw	2
  1584   00155A  EC50  F00D         	call	_Lcd_Cmd
  1585                           
  1586                           ;lcd.c: 100:   Lcd_Cmd(0x08);
  1587   00155E  0E08               	movlw	8
  1588   001560  EC50  F00D         	call	_Lcd_Cmd
  1589                           
  1590                           ;lcd.c: 101:   Lcd_Cmd(0x00);
  1591   001564  0E00               	movlw	0
  1592   001566  EC50  F00D         	call	_Lcd_Cmd
  1593                           
  1594                           ;lcd.c: 102:   Lcd_Cmd(0x0C);
  1595   00156A  0E0C               	movlw	12
  1596   00156C  EC50  F00D         	call	_Lcd_Cmd
  1597                           
  1598                           ;lcd.c: 103:   Lcd_Cmd(0x00);
  1599   001570  0E00               	movlw	0
  1600   001572  EC50  F00D         	call	_Lcd_Cmd
  1601                           
  1602                           ;lcd.c: 104:   Lcd_Cmd(0x06);
  1603   001576  0E06               	movlw	6
  1604   001578  EC50  F00D         	call	_Lcd_Cmd
  1605   00157C  0012               	return		;funcret
  1606   00157E                     __end_of_Lcd_Init:
  1607                           	callstack 0
  1608                           
  1609 ;; *************** function _InitKeypad *****************
  1610 ;; Defined at:
  1611 ;;		line 40 in file "keypad.c"
  1612 ;; Parameters:    Size  Location     Type
  1613 ;;		None
  1614 ;; Auto vars:     Size  Location     Type
  1615 ;;		None
  1616 ;; Return value:  Size  Location     Type
  1617 ;;                  1    wreg      void 
  1618 ;; Registers used:
  1619 ;;		wreg, status,2
  1620 ;; Tracked objects:
  1621 ;;		On entry : 0/0
  1622 ;;		On exit  : 0/0
  1623 ;;		Unchanged: 0/0
  1624 ;; Data sizes:     COMRAM   BANK0   BANK1
  1625 ;;      Params:         0       0       0
  1626 ;;      Locals:         0       0       0
  1627 ;;      Temps:          0       0       0
  1628 ;;      Totals:         0       0       0
  1629 ;;Total ram usage:        0 bytes
  1630 ;; Hardware stack levels used: 1
  1631 ;; Hardware stack levels required when called: 2
  1632 ;; This function calls:
  1633 ;;		Nothing
  1634 ;; This function is called by:
  1635 ;;		_system_init
  1636 ;; This function uses a non-reentrant model
  1637 ;;
  1638                           
  1639                           	psect	text4
  1640   001B4E                     __ptext4:
  1641                           	callstack 0
  1642   001B4E                     _InitKeypad:
  1643                           	callstack 27
  1644                           
  1645                           ;keypad.c: 42:             PORTB = 0x00;
  1646                           
  1647                           ;incstack = 0
  1648   001B4E  0E00               	movlw	0
  1649   001B50  6E81               	movwf	129,c	;volatile
  1650                           
  1651                           ;keypad.c: 43:             TRISB = 0xF0;
  1652   001B52  0EF0               	movlw	240
  1653   001B54  6E93               	movwf	147,c	;volatile
  1654                           
  1655                           ;keypad.c: 44:             TRISC7=1;
  1656   001B56  8E94               	bsf	3988,7,c	;volatile
  1657                           
  1658                           ;keypad.c: 45:             RBPU = 0;
  1659   001B58  9EF1               	bcf	4081,7,c	;volatile
  1660   001B5A  0012               	return		;funcret
  1661   001B5C                     __end_of_InitKeypad:
  1662                           	callstack 0
  1663                           
  1664 ;; *************** function _ADC_init *****************
  1665 ;; Defined at:
  1666 ;;		line 16 in file "helper.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;		None
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;		None
  1671 ;; Return value:  Size  Location     Type
  1672 ;;                  1    wreg      void 
  1673 ;; Registers used:
  1674 ;;		wreg, status,2
  1675 ;; Tracked objects:
  1676 ;;		On entry : 0/0
  1677 ;;		On exit  : 0/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMRAM   BANK0   BANK1
  1680 ;;      Params:         0       0       0
  1681 ;;      Locals:         0       0       0
  1682 ;;      Temps:          0       0       0
  1683 ;;      Totals:         0       0       0
  1684 ;;Total ram usage:        0 bytes
  1685 ;; Hardware stack levels used: 1
  1686 ;; Hardware stack levels required when called: 2
  1687 ;; This function calls:
  1688 ;;		Nothing
  1689 ;; This function is called by:
  1690 ;;		_system_init
  1691 ;; This function uses a non-reentrant model
  1692 ;;
  1693                           
  1694                           	psect	text5
  1695   001B3A                     __ptext5:
  1696                           	callstack 0
  1697   001B3A                     _ADC_init:
  1698                           	callstack 27
  1699                           
  1700                           ;helper.c: 18:     TRISA = 0xff;
  1701                           
  1702                           ;incstack = 0
  1703   001B3A  6892               	setf	146,c	;volatile
  1704                           
  1705                           ;helper.c: 19:     ADCON1 = 0x0e;
  1706   001B3C  0E0E               	movlw	14
  1707   001B3E  6EC1               	movwf	193,c	;volatile
  1708                           
  1709                           ;helper.c: 20:     ADCON2 = 0x92;
  1710   001B40  0E92               	movlw	146
  1711   001B42  6EC0               	movwf	192,c	;volatile
  1712                           
  1713                           ;helper.c: 21:     ADRESH = 0;
  1714   001B44  0E00               	movlw	0
  1715   001B46  6EC4               	movwf	196,c	;volatile
  1716                           
  1717                           ;helper.c: 22:     ADRESL = 0;
  1718   001B48  0E00               	movlw	0
  1719   001B4A  6EC3               	movwf	195,c	;volatile
  1720   001B4C  0012               	return		;funcret
  1721   001B4E                     __end_of_ADC_init:
  1722                           	callstack 0
  1723                           
  1724 ;; *************** function _menu *****************
  1725 ;; Defined at:
  1726 ;;		line 120 in file "helper.c"
  1727 ;; Parameters:    Size  Location     Type
  1728 ;;		None
  1729 ;; Auto vars:     Size  Location     Type
  1730 ;;		None
  1731 ;; Return value:  Size  Location     Type
  1732 ;;                  1    wreg      void 
  1733 ;; Registers used:
  1734 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1735 ;; Tracked objects:
  1736 ;;		On entry : 0/0
  1737 ;;		On exit  : 0/0
  1738 ;;		Unchanged: 0/0
  1739 ;; Data sizes:     COMRAM   BANK0   BANK1
  1740 ;;      Params:         0       0       0
  1741 ;;      Locals:         0       0       0
  1742 ;;      Temps:          0       0       0
  1743 ;;      Totals:         0       0       0
  1744 ;;Total ram usage:        0 bytes
  1745 ;; Hardware stack levels used: 1
  1746 ;; Hardware stack levels required when called: 5
  1747 ;; This function calls:
  1748 ;;		_Lcd_Clear
  1749 ;;		_Lcd_Set_Cursor
  1750 ;;		_Lcd_Write_String
  1751 ;; This function is called by:
  1752 ;;		_main
  1753 ;; This function uses a non-reentrant model
  1754 ;;
  1755                           
  1756                           	psect	text6
  1757   00186C                     __ptext6:
  1758                           	callstack 0
  1759   00186C                     _menu:
  1760                           	callstack 25
  1761                           
  1762                           ;helper.c: 121:     Lcd_Clear();
  1763                           
  1764                           ;incstack = 0
  1765   00186C  ECAE  F00D         	call	_Lcd_Clear	;wreg free
  1766                           
  1767                           ;helper.c: 122:     Lcd_Set_Cursor(position_row_1,position_column_1 );
  1768   001870  0E01               	movlw	1
  1769   001872  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  1770   001874  0E01               	movlw	1
  1771   001876  EC34  F008         	call	_Lcd_Set_Cursor
  1772                           
  1773                           ;helper.c: 123:     Lcd_Write_String("MediSync Menu");
  1774   00187A  0E41               	movlw	low STR_20
  1775   00187C  6E09               	movwf	Lcd_Write_String@a^0,c
  1776   00187E  0E1F               	movlw	high STR_20
  1777   001880  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  1778   001882  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  1779                           
  1780                           ;helper.c: 124:     Lcd_Set_Cursor(position_row_2,position_column_1);
  1781   001886  0E01               	movlw	1
  1782   001888  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  1783   00188A  0E02               	movlw	2
  1784   00188C  EC34  F008         	call	_Lcd_Set_Cursor
  1785                           
  1786                           ;helper.c: 125:     Lcd_Write_String("1.Start New Infusion");
  1787   001890  0ED5               	movlw	low STR_21
  1788   001892  6E09               	movwf	Lcd_Write_String@a^0,c
  1789   001894  0E1E               	movlw	high STR_21
  1790   001896  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  1791   001898  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  1792                           
  1793                           ;helper.c: 126:     Lcd_Set_Cursor(position_row_3,position_column_1);
  1794   00189C  0E01               	movlw	1
  1795   00189E  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  1796   0018A0  0E03               	movlw	3
  1797   0018A2  EC34  F008         	call	_Lcd_Set_Cursor
  1798                           
  1799                           ;helper.c: 127:     Lcd_Write_String("2.Manual");
  1800   0018A6  0E9B               	movlw	low STR_22
  1801   0018A8  6E09               	movwf	Lcd_Write_String@a^0,c
  1802   0018AA  0E1F               	movlw	high STR_22
  1803   0018AC  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  1804   0018AE  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  1805   0018B2  0012               	return		;funcret
  1806   0018B4                     __end_of_menu:
  1807                           	callstack 0
  1808                           
  1809 ;; *************** function _manual *****************
  1810 ;; Defined at:
  1811 ;;		line 130 in file "helper.c"
  1812 ;; Parameters:    Size  Location     Type
  1813 ;;		None
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;		None
  1816 ;; Return value:  Size  Location     Type
  1817 ;;                  1    wreg      void 
  1818 ;; Registers used:
  1819 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1820 ;; Tracked objects:
  1821 ;;		On entry : 0/0
  1822 ;;		On exit  : 0/0
  1823 ;;		Unchanged: 0/0
  1824 ;; Data sizes:     COMRAM   BANK0   BANK1
  1825 ;;      Params:         0       0       0
  1826 ;;      Locals:         0       0       0
  1827 ;;      Temps:          0       0       0
  1828 ;;      Totals:         0       0       0
  1829 ;;Total ram usage:        0 bytes
  1830 ;; Hardware stack levels used: 1
  1831 ;; Hardware stack levels required when called: 5
  1832 ;; This function calls:
  1833 ;;		_Lcd_Clear
  1834 ;;		_Lcd_Set_Cursor
  1835 ;;		_Lcd_Write_String
  1836 ;; This function is called by:
  1837 ;;		_main
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           	psect	text7
  1842   0018B4                     __ptext7:
  1843                           	callstack 0
  1844   0018B4                     _manual:
  1845                           	callstack 25
  1846                           
  1847                           ;helper.c: 131:     Lcd_Clear();
  1848                           
  1849                           ;incstack = 0
  1850   0018B4  ECAE  F00D         	call	_Lcd_Clear	;wreg free
  1851                           
  1852                           ;helper.c: 132:     Lcd_Set_Cursor( position_row_1,position_column_1);
  1853   0018B8  0E01               	movlw	1
  1854   0018BA  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  1855   0018BC  0E01               	movlw	1
  1856   0018BE  EC34  F008         	call	_Lcd_Set_Cursor
  1857                           
  1858                           ;helper.c: 133:     Lcd_Write_String("For more information");
  1859   0018C2  0EEA               	movlw	low STR_23
  1860   0018C4  6E09               	movwf	Lcd_Write_String@a^0,c
  1861   0018C6  0E1E               	movlw	high STR_23
  1862   0018C8  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  1863   0018CA  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  1864                           
  1865                           ;helper.c: 134:     Lcd_Set_Cursor( position_row_2,position_column_2);
  1866   0018CE  0E02               	movlw	2
  1867   0018D0  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  1868   0018D2  0E02               	movlw	2
  1869   0018D4  EC34  F008         	call	_Lcd_Set_Cursor
  1870                           
  1871                           ;helper.c: 135:     Lcd_Write_String("Visit: hardng.ed");
  1872   0018D8  0E12               	movlw	low STR_24
  1873   0018DA  6E09               	movwf	Lcd_Write_String@a^0,c
  1874   0018DC  0E1F               	movlw	high STR_24
  1875   0018DE  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  1876   0018E0  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  1877                           
  1878                           ;helper.c: 136:     Lcd_Set_Cursor( position_row_4,position_column_1 );
  1879   0018E4  0E01               	movlw	1
  1880   0018E6  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  1881   0018E8  0E04               	movlw	4
  1882   0018EA  EC34  F008         	call	_Lcd_Set_Cursor
  1883                           
  1884                           ;helper.c: 137:     Lcd_Write_String("BACK");
  1885   0018EE  0EE7               	movlw	low STR_5
  1886   0018F0  6E09               	movwf	Lcd_Write_String@a^0,c
  1887   0018F2  0E1F               	movlw	high STR_5
  1888   0018F4  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  1889   0018F6  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  1890   0018FA  0012               	return		;funcret
  1891   0018FC                     __end_of_manual:
  1892                           	callstack 0
  1893                           
  1894 ;; *************** function _handle_infusion_setup *****************
  1895 ;; Defined at:
  1896 ;;		line 462 in file "main.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;		None
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;  t               3    0        PTR const unsigned char 
  1901 ;;  v               3    0        PTR const unsigned char 
  1902 ;;  actuator_pos    2    0        int 
  1903 ;;  decision        2    0        int 
  1904 ;;  currentState    1  113[COMRAM] enum E2634
  1905 ;; Return value:  Size  Location     Type
  1906 ;;                  1    wreg      void 
  1907 ;; Registers used:
  1908 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1909 ;; Tracked objects:
  1910 ;;		On entry : 0/0
  1911 ;;		On exit  : 0/0
  1912 ;;		Unchanged: 0/0
  1913 ;; Data sizes:     COMRAM   BANK0   BANK1
  1914 ;;      Params:         0       0       0
  1915 ;;      Locals:         1       0       0
  1916 ;;      Temps:          2       0       0
  1917 ;;      Totals:         3       0       0
  1918 ;;Total ram usage:        3 bytes
  1919 ;; Hardware stack levels used: 1
  1920 ;; Hardware stack levels required when called: 8
  1921 ;; This function calls:
  1922 ;;		_ADC_Read
  1923 ;;		_infusion
  1924 ;;		_input_value
  1925 ;; This function is called by:
  1926 ;;		_main
  1927 ;; This function uses a non-reentrant model
  1928 ;;
  1929                           
  1930                           	psect	text8
  1931   001714                     __ptext8:
  1932                           	callstack 0
  1933   001714                     _handle_infusion_setup:
  1934                           	callstack 22
  1935                           
  1936                           ;main.c: 463:     InfusionSetupState currentState = START_INFUSION_SETUP;
  1937                           
  1938                           ;incstack = 0
  1939   001714  0E00               	movlw	0
  1940   001716  6E72               	movwf	handle_infusion_setup@currentState^0,c
  1941   001718  0E00               	movlw	0
  1942   00171A  EC10  F00A         	call	_ADC_Read
  1943                           
  1944                           ;main.c: 466:     const char* v;;main.c: 467:     const char* t;;main.c: 468:     while 
      +                          (currentState != FINISH_INFUSION_SETUP) {
  1945   00171E  D022               	goto	l4581
  1946   001720                     l4571:
  1947                           
  1948                           ;main.c: 471:                 infusion();
  1949   001720  ECC7  F000         	call	_infusion	;wreg free
  1950                           
  1951                           ;main.c: 472:                 input_value("VOLUME", "V", "10", "ml");
  1952   001724  0EBB               	movlw	low STR_40
  1953   001726  6E0F               	movwf	input_value@inputType^0,c
  1954   001728  0E1F               	movlw	high STR_40
  1955   00172A  6E10               	movwf	(input_value@inputType+1)^0,c
  1956   00172C  0EFD               	movlw	low STR_41
  1957   00172E  6E11               	movwf	input_value@initial^0,c
  1958   001730  0E1F               	movlw	high STR_41
  1959   001732  6E12               	movwf	(input_value@initial+1)^0,c
  1960   001734  0EF4               	movlw	low STR_42
  1961   001736  6E13               	movwf	input_value@limit^0,c
  1962   001738  0E1F               	movlw	high STR_42
  1963   00173A  6E14               	movwf	(input_value@limit+1)^0,c
  1964   00173C  0EFA               	movlw	low STR_43
  1965   00173E  6E15               	movwf	input_value@units^0,c
  1966   001740  0E1F               	movlw	high STR_43
  1967   001742  6E16               	movwf	(input_value@units+1)^0,c
  1968   001744  ECE1  F007         	call	_input_value	;wreg free
  1969                           
  1970                           ;main.c: 474:                 currentState = INPUT_VOLUME_STATE;
  1971   001748  0E01               	movlw	1
  1972   00174A  6E72               	movwf	handle_infusion_setup@currentState^0,c
  1973                           
  1974                           ;main.c: 475:                 break;
  1975   00174C  D00B               	goto	l4581
  1976   00174E                     l4579:
  1977   00174E  5072               	movf	handle_infusion_setup@currentState^0,w,c
  1978   001750  6E70               	movwf	??_handle_infusion_setup^0,c
  1979   001752  6A71               	clrf	(??_handle_infusion_setup+1)^0,c
  1980                           
  1981                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1982                           ; Switch size 1, requested type "simple"
  1983                           ; Number of cases is 1, Range of values is 0 to 0
  1984                           ; switch strategies available:
  1985                           ; Name         Instructions Cycles
  1986                           ; simple_byte            4     3 (average)
  1987                           ;	Chosen strategy is simple_byte
  1988   001754  5071               	movf	(??_handle_infusion_setup+1)^0,w,c
  1989   001756  0A00               	xorlw	0	; case 0
  1990   001758  A4D8               	btfss	status,2,c
  1991   00175A  D004               	goto	l4581
  1992                           
  1993                           ; Switch size 1, requested type "simple"
  1994                           ; Number of cases is 1, Range of values is 0 to 0
  1995                           ; switch strategies available:
  1996                           ; Name         Instructions Cycles
  1997                           ; simple_byte            4     3 (average)
  1998                           ;	Chosen strategy is simple_byte
  1999   00175C  5070               	movf	??_handle_infusion_setup^0,w,c
  2000   00175E  0A00               	xorlw	0	; case 0
  2001   001760  B4D8               	btfsc	status,2,c
  2002   001762  D7DE               	goto	l4571
  2003   001764                     l4581:
  2004                           
  2005                           ;main.c: 468:     while (currentState != FINISH_INFUSION_SETUP) {
  2006   001764  0E0A               	movlw	10
  2007   001766  1872               	xorwf	handle_infusion_setup@currentState^0,w,c
  2008   001768  B4D8               	btfsc	status,2,c
  2009   00176A  0012               	return	
  2010   00176C  D7F0               	goto	l4579
  2011   00176E                     __end_of_handle_infusion_setup:
  2012                           	callstack 0
  2013                           
  2014 ;; *************** function _input_value *****************
  2015 ;; Defined at:
  2016 ;;		line 48 in file "helper.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;  inputType       2   14[COMRAM] PTR unsigned char 
  2019 ;;		 -> STR_40(7), 
  2020 ;;  initial         2   16[COMRAM] PTR unsigned char 
  2021 ;;		 -> STR_41(2), 
  2022 ;;  limit           2   18[COMRAM] PTR unsigned char 
  2023 ;;		 -> STR_42(3), 
  2024 ;;  units           2   20[COMRAM] PTR unsigned char 
  2025 ;;		 -> STR_43(3), 
  2026 ;; Auto vars:     Size  Location     Type
  2027 ;;		None
  2028 ;; Return value:  Size  Location     Type
  2029 ;;                  1    wreg      void 
  2030 ;; Registers used:
  2031 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2032 ;; Tracked objects:
  2033 ;;		On entry : 0/0
  2034 ;;		On exit  : 0/0
  2035 ;;		Unchanged: 0/0
  2036 ;; Data sizes:     COMRAM   BANK0   BANK1
  2037 ;;      Params:         8       0       0
  2038 ;;      Locals:         0       0       0
  2039 ;;      Temps:          0       0       0
  2040 ;;      Totals:         8       0       0
  2041 ;;Total ram usage:        8 bytes
  2042 ;; Hardware stack levels used: 1
  2043 ;; Hardware stack levels required when called: 5
  2044 ;; This function calls:
  2045 ;;		_Lcd_Clear
  2046 ;;		_Lcd_Set_Cursor
  2047 ;;		_Lcd_Write_String
  2048 ;; This function is called by:
  2049 ;;		_handle_infusion_setup
  2050 ;; This function uses a non-reentrant model
  2051 ;;
  2052                           
  2053                           	psect	text9
  2054   000FC2                     __ptext9:
  2055                           	callstack 0
  2056   000FC2                     _input_value:
  2057                           	callstack 24
  2058                           
  2059                           ;helper.c: 49:     Lcd_Clear();;
  2060                           
  2061                           ;incstack = 0
  2062   000FC2  ECAE  F00D         	call	_Lcd_Clear	;wreg free
  2063                           
  2064                           ;helper.c: 50:     Lcd_Set_Cursor(position_row_1,position_column_1 );
  2065   000FC6  0E01               	movlw	1
  2066   000FC8  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2067   000FCA  0E01               	movlw	1
  2068   000FCC  EC34  F008         	call	_Lcd_Set_Cursor
  2069                           
  2070                           ;helper.c: 51:     Lcd_Write_String("INPUT ");
  2071   000FD0  0EC9               	movlw	low STR_1
  2072   000FD2  6E09               	movwf	Lcd_Write_String@a^0,c
  2073   000FD4  0E1F               	movlw	high STR_1
  2074   000FD6  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2075   000FD8  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2076                           
  2077                           ;helper.c: 52:     Lcd_Write_String(inputType);
  2078   000FDC  C00F  F009         	movff	input_value@inputType,Lcd_Write_String@a
  2079   000FE0  C010  F00A         	movff	input_value@inputType+1,Lcd_Write_String@a+1
  2080   000FE4  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2081                           
  2082                           ;helper.c: 53:     Lcd_Set_Cursor(position_row_2,position_column_1 );
  2083   000FE8  0E01               	movlw	1
  2084   000FEA  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2085   000FEC  0E02               	movlw	2
  2086   000FEE  EC34  F008         	call	_Lcd_Set_Cursor
  2087                           
  2088                           ;helper.c: 54:     Lcd_Write_String(initial);
  2089   000FF2  C011  F009         	movff	input_value@initial,Lcd_Write_String@a
  2090   000FF6  C012  F00A         	movff	input_value@initial+1,Lcd_Write_String@a+1
  2091   000FFA  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2092                           
  2093                           ;helper.c: 55:     Lcd_Write_String(" BETWEEN 0-");
  2094   000FFE  0E4F               	movlw	low STR_2
  2095   001000  6E09               	movwf	Lcd_Write_String@a^0,c
  2096   001002  0E1F               	movlw	high STR_2
  2097   001004  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2098   001006  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2099                           
  2100                           ;helper.c: 56:     Lcd_Write_String(limit);
  2101   00100A  C013  F009         	movff	input_value@limit,Lcd_Write_String@a
  2102   00100E  C014  F00A         	movff	input_value@limit+1,Lcd_Write_String@a+1
  2103   001012  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2104                           
  2105                           ;helper.c: 57:     Lcd_Write_String(" ");
  2106   001016  0EEE               	movlw	low (STR_37+2)
  2107   001018  6E09               	movwf	Lcd_Write_String@a^0,c
  2108   00101A  0E1F               	movlw	high (STR_37+2)
  2109   00101C  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2110   00101E  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2111                           
  2112                           ;helper.c: 58:     Lcd_Write_String(units);
  2113   001022  C015  F009         	movff	input_value@units,Lcd_Write_String@a
  2114   001026  C016  F00A         	movff	input_value@units+1,Lcd_Write_String@a+1
  2115   00102A  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2116                           
  2117                           ;helper.c: 59:     Lcd_Set_Cursor(position_row_3, position_column_1);
  2118   00102E  0E01               	movlw	1
  2119   001030  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2120   001032  0E03               	movlw	3
  2121   001034  EC34  F008         	call	_Lcd_Set_Cursor
  2122                           
  2123                           ;helper.c: 60:     Lcd_Write_String(initial);
  2124   001038  C011  F009         	movff	input_value@initial,Lcd_Write_String@a
  2125   00103C  C012  F00A         	movff	input_value@initial+1,Lcd_Write_String@a+1
  2126   001040  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2127                           
  2128                           ;helper.c: 61:     Lcd_Write_String(": ");
  2129   001044  0EED               	movlw	low (STR_37+1)
  2130   001046  6E09               	movwf	Lcd_Write_String@a^0,c
  2131   001048  0E1F               	movlw	high (STR_37+1)
  2132   00104A  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2133   00104C  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2134                           
  2135                           ;helper.c: 62:     Lcd_Set_Cursor(position_row_4,position_column_17 );
  2136   001050  0E11               	movlw	17
  2137   001052  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2138   001054  0E04               	movlw	4
  2139   001056  EC34  F008         	call	_Lcd_Set_Cursor
  2140                           
  2141                           ;helper.c: 63:     Lcd_Write_String("BACK");
  2142   00105A  0EE7               	movlw	low STR_5
  2143   00105C  6E09               	movwf	Lcd_Write_String@a^0,c
  2144   00105E  0E1F               	movlw	high STR_5
  2145   001060  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2146   001062  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2147   001066  0012               	return		;funcret
  2148   001068                     __end_of_input_value:
  2149                           	callstack 0
  2150                           
  2151 ;; *************** function _infusion *****************
  2152 ;; Defined at:
  2153 ;;		line 376 in file "main.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;		None
  2156 ;; Auto vars:     Size  Location     Type
  2157 ;;  i               1   27[BANK0 ] char 
  2158 ;;  buff            5   10[BANK0 ] unsigned char [5]
  2159 ;;  error           4   32[BANK0 ] long 
  2160 ;;  controlSigna    4   28[BANK0 ] long 
  2161 ;;  stopTime        4   23[BANK0 ] long 
  2162 ;;  analogReadin    4   19[BANK0 ] long 
  2163 ;;  expectedX       4   15[BANK0 ] long 
  2164 ;;  dError          4    0[BANK0 ] long 
  2165 ;;  act_pos         2    8[BANK0 ] int 
  2166 ;; Return value:  Size  Location     Type
  2167 ;;                  1    wreg      void 
  2168 ;; Registers used:
  2169 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2170 ;; Tracked objects:
  2171 ;;		On entry : 0/0
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMRAM   BANK0   BANK1
  2175 ;;      Params:         0       0       0
  2176 ;;      Locals:         0      36       0
  2177 ;;      Temps:          8       0       0
  2178 ;;      Totals:         8      36       0
  2179 ;;Total ram usage:       44 bytes
  2180 ;; Hardware stack levels used: 1
  2181 ;; Hardware stack levels required when called: 7
  2182 ;; This function calls:
  2183 ;;		_ADC_Read
  2184 ;;		_Lcd_Clear
  2185 ;;		_Lcd_Set_Cursor
  2186 ;;		_Lcd_Write_String
  2187 ;;		_Timer1_start
  2188 ;;		___aldiv
  2189 ;;		___lmul
  2190 ;;		_delay_ms
  2191 ;;		_getExpected
  2192 ;;		_handle_actuator_push
  2193 ;;		_move_actuator
  2194 ;;		_processTimeToSeconds
  2195 ;;		_sprintf
  2196 ;;		_usePeripheral
  2197 ;; This function is called by:
  2198 ;;		_handle_infusion_setup
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202                           	psect	text10
  2203   00018E                     __ptext10:
  2204                           	callstack 0
  2205   00018E                     _infusion:
  2206                           	callstack 22
  2207                           
  2208                           ;main.c: 378:     Timer1_start();
  2209                           
  2210                           ;incstack = 0
  2211   00018E  EC70  F00D         	call	_Timer1_start	;wreg free
  2212                           
  2213                           ;main.c: 379:     LATB = 0xff;
  2214   000192  688A               	setf	138,c	;volatile
  2215                           
  2216                           ;main.c: 380:     int act_pos = ADC_Read(0);
  2217   000194  0E00               	movlw	0
  2218   000196  EC10  F00A         	call	_ADC_Read
  2219   00019A  C005  F0DC         	movff	?_ADC_Read,infusion@act_pos
  2220   00019E  C006  F0DD         	movff	?_ADC_Read+1,infusion@act_pos+1
  2221                           
  2222                           ;main.c: 382:     char buff[5];;main.c: 383:     long expectedX, analogReading, error, d
      +                          Error, controlSignal;;main.c: 385:     long stopTime = processTimeToSeconds(timeInfusion
      +                          );
  2223   0001A2  0E00               	movlw	0
  2224   0001A4  6E0E               	movwf	(processTimeToSeconds@timeInput+1)^0,c
  2225   0001A6  0E64               	movlw	100
  2226   0001A8  6E0D               	movwf	processTimeToSeconds@timeInput^0,c
  2227   0001AA  EC2B  F00B         	call	_processTimeToSeconds	;wreg free
  2228   0001AE  C00D  F0EB         	movff	?_processTimeToSeconds,infusion@stopTime
  2229   0001B2  C00E  F0EC         	movff	?_processTimeToSeconds+1,infusion@stopTime+1
  2230   0001B6  0100               	movlb	0	; () banked
  2231   0001B8  0E00               	movlw	0
  2232   0001BA  BFEC               	btfsc	(infusion@stopTime+1)& (0+255),7,b
  2233   0001BC  0EFF               	movlw	-1
  2234   0001BE  6FED               	movwf	(infusion@stopTime+2)& (0+255),b
  2235   0001C0  6FEE               	movwf	(infusion@stopTime+3)& (0+255),b
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;main.c: 386:     Lcd_Clear();
  2239   0001C2  ECAE  F00D         	call	_Lcd_Clear	;wreg free
  2240                           
  2241                           ;main.c: 387:     usePeripheral(orange_led, on);
  2242   0001C6  0E00               	movlw	0
  2243   0001C8  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  2244   0001CA  0E01               	movlw	1
  2245   0001CC  6E05               	movwf	usePeripheral@peripheral^0,c
  2246   0001CE  0E00               	movlw	0
  2247   0001D0  6E08               	movwf	(usePeripheral@action+1)^0,c
  2248   0001D2  0E01               	movlw	1
  2249   0001D4  6E07               	movwf	usePeripheral@action^0,c
  2250   0001D6  EC8D  F007         	call	_usePeripheral	;wreg free
  2251                           
  2252                           ;main.c: 390:     while( (mil) < stopTime*1000){
  2253   0001DA  D1A1               	goto	l4481
  2254   0001DC                     l4417:
  2255                           
  2256                           ;main.c: 391:         expectedX = getExpected();
  2257   0001DC  ECF0  F005         	call	_getExpected	;wreg free
  2258   0001E0  C054  F0E3         	movff	?_getExpected,infusion@expectedX
  2259   0001E4  C055  F0E4         	movff	?_getExpected+1,infusion@expectedX+1
  2260   0001E8  C056  F0E5         	movff	?_getExpected+2,infusion@expectedX+2
  2261   0001EC  C057  F0E6         	movff	?_getExpected+3,infusion@expectedX+3
  2262                           
  2263                           ;main.c: 392:         analogReading = ADC_Read(0);
  2264   0001F0  0E00               	movlw	0
  2265   0001F2  EC10  F00A         	call	_ADC_Read
  2266   0001F6  C005  F0E7         	movff	?_ADC_Read,infusion@analogReading
  2267   0001FA  C006  F0E8         	movff	?_ADC_Read+1,infusion@analogReading+1
  2268   0001FE  0100               	movlb	0	; () banked
  2269   000200  0E00               	movlw	0
  2270   000202  BFE8               	btfsc	(infusion@analogReading+1)& (0+255),7,b
  2271   000204  0EFF               	movlw	-1
  2272   000206  6FE9               	movwf	(infusion@analogReading+2)& (0+255),b
  2273   000208  6FEA               	movwf	(infusion@analogReading+3)& (0+255),b
  2274                           
  2275                           ; BSR set to: 0
  2276                           ;main.c: 393:         error = (analogReading - expectedX);
  2277   00020A  51E3               	movf	infusion@expectedX& (0+255),w,b
  2278   00020C  5DE7               	subwf	infusion@analogReading& (0+255),w,b
  2279   00020E  6FF4               	movwf	infusion@error& (0+255),b
  2280   000210  51E4               	movf	(infusion@expectedX+1)& (0+255),w,b
  2281   000212  59E8               	subwfb	(infusion@analogReading+1)& (0+255),w,b
  2282   000214  6FF5               	movwf	(infusion@error+1)& (0+255),b
  2283   000216  51E5               	movf	(infusion@expectedX+2)& (0+255),w,b
  2284   000218  59E9               	subwfb	(infusion@analogReading+2)& (0+255),w,b
  2285   00021A  6FF6               	movwf	(infusion@error+2)& (0+255),b
  2286   00021C  51E6               	movf	(infusion@expectedX+3)& (0+255),w,b
  2287   00021E  59EA               	subwfb	(infusion@analogReading+3)& (0+255),w,b
  2288   000220  6FF7               	movwf	(infusion@error+3)& (0+255),b
  2289                           
  2290                           ; BSR set to: 0
  2291                           ;main.c: 395:         dError = (error - lastError)/(dT/1000);
  2292   000222  51A0               	movf	_lastError& (0+255),w,b
  2293   000224  5DF4               	subwf	infusion@error& (0+255),w,b
  2294   000226  6E2E               	movwf	___aldiv@dividend^0,c
  2295   000228  51A1               	movf	(_lastError+1)& (0+255),w,b
  2296   00022A  59F5               	subwfb	(infusion@error+1)& (0+255),w,b
  2297   00022C  6E2F               	movwf	(___aldiv@dividend+1)^0,c
  2298   00022E  51A2               	movf	(_lastError+2)& (0+255),w,b
  2299   000230  59F6               	subwfb	(infusion@error+2)& (0+255),w,b
  2300   000232  6E30               	movwf	(___aldiv@dividend+2)^0,c
  2301   000234  51A3               	movf	(_lastError+3)& (0+255),w,b
  2302   000236  59F7               	subwfb	(infusion@error+3)& (0+255),w,b
  2303   000238  6E31               	movwf	(___aldiv@dividend+3)^0,c
  2304   00023A  0E00               	movlw	0
  2305   00023C  6E32               	movwf	___aldiv@divisor^0,c
  2306   00023E  0E00               	movlw	0
  2307   000240  6E33               	movwf	(___aldiv@divisor+1)^0,c
  2308   000242  0E00               	movlw	0
  2309   000244  6E34               	movwf	(___aldiv@divisor+2)^0,c
  2310   000246  0E00               	movlw	0
  2311   000248  6E35               	movwf	(___aldiv@divisor+3)^0,c
  2312   00024A  EC6C  F006         	call	___aldiv	;wreg free
  2313   00024E  C02E  F0D4         	movff	?___aldiv,infusion@dError
  2314   000252  C02F  F0D5         	movff	?___aldiv+1,infusion@dError+1
  2315   000256  C030  F0D6         	movff	?___aldiv+2,infusion@dError+2
  2316   00025A  C031  F0D7         	movff	?___aldiv+3,infusion@dError+3
  2317                           
  2318                           ;main.c: 396:         errorSum += (error * (dT / 1000));
  2319   00025E  C0F4  F022         	movff	infusion@error,___lmul@multiplier
  2320   000262  C0F5  F023         	movff	infusion@error+1,___lmul@multiplier+1
  2321   000266  C0F6  F024         	movff	infusion@error+2,___lmul@multiplier+2
  2322   00026A  C0F7  F025         	movff	infusion@error+3,___lmul@multiplier+3
  2323   00026E  0E00               	movlw	0
  2324   000270  6E26               	movwf	___lmul@multiplicand^0,c
  2325   000272  0E00               	movlw	0
  2326   000274  6E27               	movwf	(___lmul@multiplicand+1)^0,c
  2327   000276  0E00               	movlw	0
  2328   000278  6E28               	movwf	(___lmul@multiplicand+2)^0,c
  2329   00027A  0E00               	movlw	0
  2330   00027C  6E29               	movwf	(___lmul@multiplicand+3)^0,c
  2331   00027E  ECE3  F00B         	call	___lmul	;wreg free
  2332   000282  5022               	movf	?___lmul^0,w,c
  2333   000284  0100               	movlb	0	; () banked
  2334   000286  27A4               	addwf	_errorSum& (0+255),f,b
  2335   000288  5023               	movf	(?___lmul+1)^0,w,c
  2336   00028A  23A5               	addwfc	(_errorSum+1)& (0+255),f,b
  2337   00028C  5024               	movf	(?___lmul+2)^0,w,c
  2338   00028E  23A6               	addwfc	(_errorSum+2)& (0+255),f,b
  2339   000290  5025               	movf	(?___lmul+3)^0,w,c
  2340   000292  23A7               	addwfc	(_errorSum+3)& (0+255),f,b
  2341                           
  2342                           ; BSR set to: 0
  2343                           ;main.c: 398:         controlSignal = (Kp * error + Ki * errorSum + Kd * dError) / 100;
  2344   000294  C0F4  F022         	movff	infusion@error,___lmul@multiplier
  2345   000298  C0F5  F023         	movff	infusion@error+1,___lmul@multiplier+1
  2346   00029C  C0F6  F024         	movff	infusion@error+2,___lmul@multiplier+2
  2347   0002A0  C0F7  F025         	movff	infusion@error+3,___lmul@multiplier+3
  2348   0002A4  0E4C               	movlw	76
  2349   0002A6  6E26               	movwf	___lmul@multiplicand^0,c
  2350   0002A8  0E1D               	movlw	29
  2351   0002AA  6E27               	movwf	(___lmul@multiplicand+1)^0,c
  2352   0002AC  0E00               	movlw	0
  2353   0002AE  6E28               	movwf	(___lmul@multiplicand+2)^0,c
  2354   0002B0  0E00               	movlw	0
  2355   0002B2  6E29               	movwf	(___lmul@multiplicand+3)^0,c
  2356   0002B4  ECE3  F00B         	call	___lmul	;wreg free
  2357   0002B8  C022  F068         	movff	?___lmul,??_infusion
  2358   0002BC  C023  F069         	movff	?___lmul+1,??_infusion+1
  2359   0002C0  C024  F06A         	movff	?___lmul+2,??_infusion+2
  2360   0002C4  C025  F06B         	movff	?___lmul+3,??_infusion+3
  2361   0002C8  C0A4  F022         	movff	_errorSum,___lmul@multiplier
  2362   0002CC  C0A5  F023         	movff	_errorSum+1,___lmul@multiplier+1
  2363   0002D0  C0A6  F024         	movff	_errorSum+2,___lmul@multiplier+2
  2364   0002D4  C0A7  F025         	movff	_errorSum+3,___lmul@multiplier+3
  2365   0002D8  0ED0               	movlw	208
  2366   0002DA  6E26               	movwf	___lmul@multiplicand^0,c
  2367   0002DC  0E07               	movlw	7
  2368   0002DE  6E27               	movwf	(___lmul@multiplicand+1)^0,c
  2369   0002E0  0E00               	movlw	0
  2370   0002E2  6E28               	movwf	(___lmul@multiplicand+2)^0,c
  2371   0002E4  0E00               	movlw	0
  2372   0002E6  6E29               	movwf	(___lmul@multiplicand+3)^0,c
  2373   0002E8  ECE3  F00B         	call	___lmul	;wreg free
  2374   0002EC  5022               	movf	?___lmul^0,w,c
  2375   0002EE  2468               	addwf	??_infusion^0,w,c
  2376   0002F0  6E6C               	movwf	(??_infusion+4)^0,c
  2377   0002F2  5023               	movf	(?___lmul+1)^0,w,c
  2378   0002F4  2069               	addwfc	(??_infusion+1)^0,w,c
  2379   0002F6  6E6D               	movwf	(??_infusion+5)^0,c
  2380   0002F8  5024               	movf	(?___lmul+2)^0,w,c
  2381   0002FA  206A               	addwfc	(??_infusion+2)^0,w,c
  2382   0002FC  6E6E               	movwf	(??_infusion+6)^0,c
  2383   0002FE  5025               	movf	(?___lmul+3)^0,w,c
  2384   000300  206B               	addwfc	(??_infusion+3)^0,w,c
  2385   000302  6E6F               	movwf	(??_infusion+7)^0,c
  2386   000304  C0D4  F022         	movff	infusion@dError,___lmul@multiplier
  2387   000308  C0D5  F023         	movff	infusion@dError+1,___lmul@multiplier+1
  2388   00030C  C0D6  F024         	movff	infusion@dError+2,___lmul@multiplier+2
  2389   000310  C0D7  F025         	movff	infusion@dError+3,___lmul@multiplier+3
  2390   000314  0ED0               	movlw	208
  2391   000316  6E26               	movwf	___lmul@multiplicand^0,c
  2392   000318  0E07               	movlw	7
  2393   00031A  6E27               	movwf	(___lmul@multiplicand+1)^0,c
  2394   00031C  0E00               	movlw	0
  2395   00031E  6E28               	movwf	(___lmul@multiplicand+2)^0,c
  2396   000320  0E00               	movlw	0
  2397   000322  6E29               	movwf	(___lmul@multiplicand+3)^0,c
  2398   000324  ECE3  F00B         	call	___lmul	;wreg free
  2399   000328  5022               	movf	?___lmul^0,w,c
  2400   00032A  246C               	addwf	(??_infusion+4)^0,w,c
  2401   00032C  6E2E               	movwf	___aldiv@dividend^0,c
  2402   00032E  5023               	movf	(?___lmul+1)^0,w,c
  2403   000330  206D               	addwfc	(??_infusion+5)^0,w,c
  2404   000332  6E2F               	movwf	(___aldiv@dividend+1)^0,c
  2405   000334  5024               	movf	(?___lmul+2)^0,w,c
  2406   000336  206E               	addwfc	(??_infusion+6)^0,w,c
  2407   000338  6E30               	movwf	(___aldiv@dividend+2)^0,c
  2408   00033A  5025               	movf	(?___lmul+3)^0,w,c
  2409   00033C  206F               	addwfc	(??_infusion+7)^0,w,c
  2410   00033E  6E31               	movwf	(___aldiv@dividend+3)^0,c
  2411   000340  0E64               	movlw	100
  2412   000342  6E32               	movwf	___aldiv@divisor^0,c
  2413   000344  0E00               	movlw	0
  2414   000346  6E33               	movwf	(___aldiv@divisor+1)^0,c
  2415   000348  0E00               	movlw	0
  2416   00034A  6E34               	movwf	(___aldiv@divisor+2)^0,c
  2417   00034C  0E00               	movlw	0
  2418   00034E  6E35               	movwf	(___aldiv@divisor+3)^0,c
  2419   000350  EC6C  F006         	call	___aldiv	;wreg free
  2420   000354  C02E  F0F0         	movff	?___aldiv,infusion@controlSignal
  2421   000358  C02F  F0F1         	movff	?___aldiv+1,infusion@controlSignal+1
  2422   00035C  C030  F0F2         	movff	?___aldiv+2,infusion@controlSignal+2
  2423   000360  C031  F0F3         	movff	?___aldiv+3,infusion@controlSignal+3
  2424                           
  2425                           ;main.c: 401:         if (controlSignal < 0) {
  2426   000364  0100               	movlb	0	; () banked
  2427   000366  AFF3               	btfss	(infusion@controlSignal+3)& (0+255),7,b
  2428   000368  D008               	goto	l4433
  2429                           
  2430                           ; BSR set to: 0
  2431                           ;main.c: 402:             controlSignal = 0;
  2432   00036A  0E00               	movlw	0
  2433   00036C  6FF0               	movwf	infusion@controlSignal& (0+255),b
  2434   00036E  0E00               	movlw	0
  2435   000370  6FF1               	movwf	(infusion@controlSignal+1)& (0+255),b
  2436   000372  0E00               	movlw	0
  2437   000374  6FF2               	movwf	(infusion@controlSignal+2)& (0+255),b
  2438   000376  0E00               	movlw	0
  2439   000378  6FF3               	movwf	(infusion@controlSignal+3)& (0+255),b
  2440   00037A                     l4433:
  2441                           
  2442                           ; BSR set to: 0
  2443                           ;main.c: 404:         if (controlSignal > 510) {
  2444   00037A  BFF3               	btfsc	(infusion@controlSignal+3)& (0+255),7,b
  2445   00037C  D010               	goto	l4437
  2446   00037E  51F3               	movf	(infusion@controlSignal+3)& (0+255),w,b
  2447   000380  11F2               	iorwf	(infusion@controlSignal+2)& (0+255),w,b
  2448   000382  E105               	bnz	u4480
  2449   000384  29F0               	incf	infusion@controlSignal& (0+255),w,b
  2450   000386  0E01               	movlw	1
  2451   000388  59F1               	subwfb	(infusion@controlSignal+1)& (0+255),w,b
  2452   00038A  A0D8               	btfss	status,0,c
  2453   00038C  D008               	goto	l4437
  2454   00038E                     u4480:
  2455                           
  2456                           ; BSR set to: 0
  2457                           ;main.c: 405:             controlSignal = 510;
  2458   00038E  0EFE               	movlw	254
  2459   000390  6FF0               	movwf	infusion@controlSignal& (0+255),b
  2460   000392  0E01               	movlw	1
  2461   000394  6FF1               	movwf	(infusion@controlSignal+1)& (0+255),b
  2462   000396  0E00               	movlw	0
  2463   000398  6FF2               	movwf	(infusion@controlSignal+2)& (0+255),b
  2464   00039A  0E00               	movlw	0
  2465   00039C  6FF3               	movwf	(infusion@controlSignal+3)& (0+255),b
  2466   00039E                     l4437:
  2467                           
  2468                           ; BSR set to: 0
  2469                           ;main.c: 408:         move_actuator(backwards, controlSignal);
  2470   00039E  0E00               	movlw	0
  2471   0003A0  6E0A               	movwf	(move_actuator@direction+1)^0,c
  2472   0003A2  0E00               	movlw	0
  2473   0003A4  6E09               	movwf	move_actuator@direction^0,c
  2474   0003A6  C0F0  F00B         	movff	infusion@controlSignal,move_actuator@speed
  2475   0003AA  C0F1  F00C         	movff	infusion@controlSignal+1,move_actuator@speed+1
  2476   0003AE  EC0E  F00C         	call	_move_actuator	;wreg free
  2477                           
  2478                           ;main.c: 409:         lastError = error;
  2479   0003B2  C0F4  F0A0         	movff	infusion@error,_lastError
  2480   0003B6  C0F5  F0A1         	movff	infusion@error+1,_lastError+1
  2481   0003BA  C0F6  F0A2         	movff	infusion@error+2,_lastError+2
  2482   0003BE  C0F7  F0A3         	movff	infusion@error+3,_lastError+3
  2483                           
  2484                           ;main.c: 411:         Lcd_Set_Cursor(1,1);
  2485   0003C2  0E01               	movlw	1
  2486   0003C4  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2487   0003C6  0E01               	movlw	1
  2488   0003C8  EC34  F008         	call	_Lcd_Set_Cursor
  2489                           
  2490                           ;main.c: 412:         Lcd_Write_String("Error:");
  2491   0003CC  0EB4               	movlw	low STR_31
  2492   0003CE  6E09               	movwf	Lcd_Write_String@a^0,c
  2493   0003D0  0E1F               	movlw	high STR_31
  2494   0003D2  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2495   0003D4  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2496                           
  2497                           ;main.c: 413:         sprintf(buff, "%ld", error);
  2498   0003D8  0EDE               	movlw	low infusion@buff
  2499   0003DA  6E4F               	movwf	sprintf@s^0,c
  2500   0003DC  0EF0               	movlw	low STR_32
  2501   0003DE  6E50               	movwf	sprintf@fmt^0,c
  2502   0003E0  0E1F               	movlw	high STR_32
  2503   0003E2  6E51               	movwf	(sprintf@fmt+1)^0,c
  2504   0003E4  C0F4  F052         	movff	infusion@error,?_sprintf+3
  2505   0003E8  C0F5  F053         	movff	infusion@error+1,?_sprintf+4
  2506   0003EC  C0F6  F054         	movff	infusion@error+2,?_sprintf+5
  2507   0003F0  C0F7  F055         	movff	infusion@error+3,?_sprintf+6
  2508   0003F4  EC7E  F00C         	call	_sprintf	;wreg free
  2509                           
  2510                           ;main.c: 414:         Lcd_Write_String(buff);
  2511   0003F8  0EDE               	movlw	low infusion@buff
  2512   0003FA  6E09               	movwf	Lcd_Write_String@a^0,c
  2513   0003FC  6A0A               	clrf	(Lcd_Write_String@a+1)^0,c
  2514   0003FE  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2515                           
  2516                           ;main.c: 416:         Lcd_Set_Cursor(2,1);
  2517   000402  0E01               	movlw	1
  2518   000404  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2519   000406  0E02               	movlw	2
  2520   000408  EC34  F008         	call	_Lcd_Set_Cursor
  2521                           
  2522                           ;main.c: 417:         Lcd_Write_String("Pos:");
  2523   00040C  0EE2               	movlw	low STR_33
  2524   00040E  6E09               	movwf	Lcd_Write_String@a^0,c
  2525   000410  0E1F               	movlw	high STR_33
  2526   000412  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2527   000414  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2528                           
  2529                           ;main.c: 418:         sprintf(buff, "%ld", analogReading);
  2530   000418  0EDE               	movlw	low infusion@buff
  2531   00041A  6E4F               	movwf	sprintf@s^0,c
  2532   00041C  0EF0               	movlw	low STR_32
  2533   00041E  6E50               	movwf	sprintf@fmt^0,c
  2534   000420  0E1F               	movlw	high STR_32
  2535   000422  6E51               	movwf	(sprintf@fmt+1)^0,c
  2536   000424  C0E7  F052         	movff	infusion@analogReading,?_sprintf+3
  2537   000428  C0E8  F053         	movff	infusion@analogReading+1,?_sprintf+4
  2538   00042C  C0E9  F054         	movff	infusion@analogReading+2,?_sprintf+5
  2539   000430  C0EA  F055         	movff	infusion@analogReading+3,?_sprintf+6
  2540   000434  EC7E  F00C         	call	_sprintf	;wreg free
  2541                           
  2542                           ;main.c: 419:         Lcd_Write_String(buff);
  2543   000438  0EDE               	movlw	low infusion@buff
  2544   00043A  6E09               	movwf	Lcd_Write_String@a^0,c
  2545   00043C  6A0A               	clrf	(Lcd_Write_String@a+1)^0,c
  2546   00043E  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2547                           
  2548                           ;main.c: 422:         Lcd_Set_Cursor(3,1);
  2549   000442  0E01               	movlw	1
  2550   000444  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2551   000446  0E03               	movlw	3
  2552   000448  EC34  F008         	call	_Lcd_Set_Cursor
  2553                           
  2554                           ;main.c: 423:         Lcd_Write_String("Exp:");
  2555   00044C  0EDD               	movlw	low STR_35
  2556   00044E  6E09               	movwf	Lcd_Write_String@a^0,c
  2557   000450  0E1F               	movlw	high STR_35
  2558   000452  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2559   000454  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2560                           
  2561                           ;main.c: 424:         sprintf(buff, "%ld", expectedX);
  2562   000458  0EDE               	movlw	low infusion@buff
  2563   00045A  6E4F               	movwf	sprintf@s^0,c
  2564   00045C  0EF0               	movlw	low STR_32
  2565   00045E  6E50               	movwf	sprintf@fmt^0,c
  2566   000460  0E1F               	movlw	high STR_32
  2567   000462  6E51               	movwf	(sprintf@fmt+1)^0,c
  2568   000464  C0E3  F052         	movff	infusion@expectedX,?_sprintf+3
  2569   000468  C0E4  F053         	movff	infusion@expectedX+1,?_sprintf+4
  2570   00046C  C0E5  F054         	movff	infusion@expectedX+2,?_sprintf+5
  2571   000470  C0E6  F055         	movff	infusion@expectedX+3,?_sprintf+6
  2572   000474  EC7E  F00C         	call	_sprintf	;wreg free
  2573                           
  2574                           ;main.c: 425:         Lcd_Write_String(buff);
  2575   000478  0EDE               	movlw	low infusion@buff
  2576   00047A  6E09               	movwf	Lcd_Write_String@a^0,c
  2577   00047C  6A0A               	clrf	(Lcd_Write_String@a+1)^0,c
  2578   00047E  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2579                           
  2580                           ;main.c: 428:         Lcd_Set_Cursor(4,10);
  2581   000482  0E0A               	movlw	10
  2582   000484  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2583   000486  0E04               	movlw	4
  2584   000488  EC34  F008         	call	_Lcd_Set_Cursor
  2585                           
  2586                           ;main.c: 429:         Lcd_Write_String("T: ");
  2587   00048C  0EEC               	movlw	low STR_37
  2588   00048E  6E09               	movwf	Lcd_Write_String@a^0,c
  2589   000490  0E1F               	movlw	high STR_37
  2590   000492  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2591   000494  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2592                           
  2593                           ;main.c: 431:         sprintf(buff, "%d", stopTime - (mil/1000));
  2594   000498  C073  F02E         	movff	_mil,___aldiv@dividend
  2595   00049C  C074  F02F         	movff	_mil+1,___aldiv@dividend+1
  2596   0004A0  C075  F030         	movff	_mil+2,___aldiv@dividend+2
  2597   0004A4  C076  F031         	movff	_mil+3,___aldiv@dividend+3
  2598   0004A8  0EE8               	movlw	232
  2599   0004AA  6E32               	movwf	___aldiv@divisor^0,c
  2600   0004AC  0E03               	movlw	3
  2601   0004AE  6E33               	movwf	(___aldiv@divisor+1)^0,c
  2602   0004B0  0E00               	movlw	0
  2603   0004B2  6E34               	movwf	(___aldiv@divisor+2)^0,c
  2604   0004B4  0E00               	movlw	0
  2605   0004B6  6E35               	movwf	(___aldiv@divisor+3)^0,c
  2606   0004B8  EC6C  F006         	call	___aldiv	;wreg free
  2607   0004BC  502E               	movf	?___aldiv^0,w,c
  2608   0004BE  0100               	movlb	0	; () banked
  2609   0004C0  5DEB               	subwf	infusion@stopTime& (0+255),w,b
  2610   0004C2  6FD8               	movwf	_infusion$1678& (0+255),b
  2611   0004C4  502F               	movf	(?___aldiv+1)^0,w,c
  2612   0004C6  59EC               	subwfb	(infusion@stopTime+1)& (0+255),w,b
  2613   0004C8  6FD9               	movwf	(_infusion$1678+1)& (0+255),b
  2614   0004CA  5030               	movf	(?___aldiv+2)^0,w,c
  2615   0004CC  59ED               	subwfb	(infusion@stopTime+2)& (0+255),w,b
  2616   0004CE  6FDA               	movwf	(_infusion$1678+2)& (0+255),b
  2617   0004D0  5031               	movf	(?___aldiv+3)^0,w,c
  2618   0004D2  59EE               	subwfb	(infusion@stopTime+3)& (0+255),w,b
  2619   0004D4  6FDB               	movwf	(_infusion$1678+3)& (0+255),b
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;main.c: 431:         sprintf(buff, "%d", stopTime - (mil/1000));
  2623   0004D6  0EDE               	movlw	low infusion@buff
  2624   0004D8  6E4F               	movwf	sprintf@s^0,c
  2625   0004DA  0EF7               	movlw	low STR_38
  2626   0004DC  6E50               	movwf	sprintf@fmt^0,c
  2627   0004DE  0E1F               	movlw	high STR_38
  2628   0004E0  6E51               	movwf	(sprintf@fmt+1)^0,c
  2629   0004E2  C0D8  F052         	movff	_infusion$1678,?_sprintf+3
  2630   0004E6  C0D9  F053         	movff	_infusion$1678+1,?_sprintf+4
  2631   0004EA  C0DA  F054         	movff	_infusion$1678+2,?_sprintf+5
  2632   0004EE  C0DB  F055         	movff	_infusion$1678+3,?_sprintf+6
  2633   0004F2  EC7E  F00C         	call	_sprintf	;wreg free
  2634                           
  2635                           ;main.c: 432:         Lcd_Write_String(buff);
  2636   0004F6  0EDE               	movlw	low infusion@buff
  2637   0004F8  6E09               	movwf	Lcd_Write_String@a^0,c
  2638   0004FA  6A0A               	clrf	(Lcd_Write_String@a+1)^0,c
  2639   0004FC  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2640                           
  2641                           ;main.c: 435:         delay_ms(dT);
  2642   000500  0E00               	movlw	0
  2643   000502  6E06               	movwf	(delay_ms@milliseconds+1)^0,c
  2644   000504  0E64               	movlw	100
  2645   000506  6E05               	movwf	delay_ms@milliseconds^0,c
  2646   000508  EC60  F00D         	call	_delay_ms	;wreg free
  2647                           
  2648                           ;main.c: 436:         Lcd_Clear();
  2649   00050C  ECAE  F00D         	call	_Lcd_Clear	;wreg free
  2650                           
  2651                           ;main.c: 438:         act_pos = ADC_Read(0);
  2652   000510  0E00               	movlw	0
  2653   000512  EC10  F00A         	call	_ADC_Read
  2654   000516  C005  F0DC         	movff	?_ADC_Read,infusion@act_pos
  2655   00051A  C006  F0DD         	movff	?_ADC_Read+1,infusion@act_pos+1
  2656   00051E                     l4481:
  2657                           
  2658                           ;main.c: 390:     while( (mil) < stopTime*1000){
  2659   00051E  C0EB  F022         	movff	infusion@stopTime,___lmul@multiplier
  2660   000522  C0EC  F023         	movff	infusion@stopTime+1,___lmul@multiplier+1
  2661   000526  C0ED  F024         	movff	infusion@stopTime+2,___lmul@multiplier+2
  2662   00052A  C0EE  F025         	movff	infusion@stopTime+3,___lmul@multiplier+3
  2663   00052E  0EE8               	movlw	232
  2664   000530  6E26               	movwf	___lmul@multiplicand^0,c
  2665   000532  0E03               	movlw	3
  2666   000534  6E27               	movwf	(___lmul@multiplicand+1)^0,c
  2667   000536  0E00               	movlw	0
  2668   000538  6E28               	movwf	(___lmul@multiplicand+2)^0,c
  2669   00053A  0E00               	movlw	0
  2670   00053C  6E29               	movwf	(___lmul@multiplicand+3)^0,c
  2671   00053E  ECE3  F00B         	call	___lmul	;wreg free
  2672   000542  5022               	movf	?___lmul^0,w,c
  2673   000544  5C73               	subwf	_mil^0,w,c
  2674   000546  5023               	movf	(?___lmul+1)^0,w,c
  2675   000548  5874               	subwfb	(_mil+1)^0,w,c
  2676   00054A  5024               	movf	(?___lmul+2)^0,w,c
  2677   00054C  5875               	subwfb	(_mil+2)^0,w,c
  2678   00054E  5076               	movf	(_mil+3)^0,w,c
  2679   000550  0A80               	xorlw	128
  2680   000552  6E68               	movwf	??_infusion^0,c
  2681   000554  5025               	movf	(?___lmul+3)^0,w,c
  2682   000556  0A80               	xorlw	128
  2683   000558  5868               	subwfb	??_infusion^0,w,c
  2684   00055A  A0D8               	btfss	status,0,c
  2685   00055C  D63F               	goto	l4417
  2686                           
  2687                           ;main.c: 441:     usePeripheral(orange_led, off);
  2688   00055E  0E00               	movlw	0
  2689   000560  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  2690   000562  0E01               	movlw	1
  2691   000564  6E05               	movwf	usePeripheral@peripheral^0,c
  2692   000566  0E00               	movlw	0
  2693   000568  6E08               	movwf	(usePeripheral@action+1)^0,c
  2694   00056A  0E00               	movlw	0
  2695   00056C  6E07               	movwf	usePeripheral@action^0,c
  2696   00056E  EC8D  F007         	call	_usePeripheral	;wreg free
  2697                           
  2698                           ;main.c: 442:     move_actuator(forward, 0);
  2699   000572  0E00               	movlw	0
  2700   000574  6E0A               	movwf	(move_actuator@direction+1)^0,c
  2701   000576  0E01               	movlw	1
  2702   000578  6E09               	movwf	move_actuator@direction^0,c
  2703   00057A  0E00               	movlw	0
  2704   00057C  6E0C               	movwf	(move_actuator@speed+1)^0,c
  2705   00057E  0E00               	movlw	0
  2706   000580  6E0B               	movwf	move_actuator@speed^0,c
  2707   000582  EC0E  F00C         	call	_move_actuator	;wreg free
  2708                           
  2709                           ;main.c: 443:     Lcd_Clear();
  2710   000586  ECAE  F00D         	call	_Lcd_Clear	;wreg free
  2711                           
  2712                           ;main.c: 444:     Lcd_Set_Cursor(1,1);
  2713   00058A  0E01               	movlw	1
  2714   00058C  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2715   00058E  0E01               	movlw	1
  2716   000590  EC34  F008         	call	_Lcd_Set_Cursor
  2717                           
  2718                           ;main.c: 445:     Lcd_Write_String("INFUSION COMPLETED");
  2719   000594  0EFF               	movlw	low STR_39
  2720   000596  6E09               	movwf	Lcd_Write_String@a^0,c
  2721   000598  0E1E               	movlw	high STR_39
  2722   00059A  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2723   00059C  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2724                           
  2725                           ;main.c: 447:     for(int8_t i = 0; i < 5; i++){
  2726   0005A0  0E00               	movlw	0
  2727   0005A2  0100               	movlb	0	; () banked
  2728   0005A4  6FEF               	movwf	infusion@i& (0+255),b
  2729   0005A6                     l4497:
  2730                           
  2731                           ; BSR set to: 0
  2732                           ;main.c: 448:         usePeripheral(buzzer, on);
  2733   0005A6  0E00               	movlw	0
  2734   0005A8  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  2735   0005AA  0E03               	movlw	3
  2736   0005AC  6E05               	movwf	usePeripheral@peripheral^0,c
  2737   0005AE  0E00               	movlw	0
  2738   0005B0  6E08               	movwf	(usePeripheral@action+1)^0,c
  2739   0005B2  0E01               	movlw	1
  2740   0005B4  6E07               	movwf	usePeripheral@action^0,c
  2741   0005B6  EC8D  F007         	call	_usePeripheral	;wreg free
  2742                           
  2743                           ;main.c: 449:         usePeripheral(red_led, on);
  2744   0005BA  0E00               	movlw	0
  2745   0005BC  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  2746   0005BE  0E02               	movlw	2
  2747   0005C0  6E05               	movwf	usePeripheral@peripheral^0,c
  2748   0005C2  0E00               	movlw	0
  2749   0005C4  6E08               	movwf	(usePeripheral@action+1)^0,c
  2750   0005C6  0E01               	movlw	1
  2751   0005C8  6E07               	movwf	usePeripheral@action^0,c
  2752   0005CA  EC8D  F007         	call	_usePeripheral	;wreg free
  2753                           
  2754                           ;main.c: 450:         _delay((unsigned long)((1000)*(8000000L/4000.0)));
  2755   0005CE  0E0B               	movlw	11
  2756   0005D0  6E69               	movwf	(??_infusion+1)^0,c
  2757   0005D2  0E26               	movlw	38
  2758   0005D4  6E68               	movwf	??_infusion^0,c
  2759   0005D6  0E5E               	movlw	94
  2760   0005D8                     u4627:
  2761   0005D8  2EE8               	decfsz	wreg,f,c
  2762   0005DA  D7FE               	bra	u4627
  2763   0005DC  2E68               	decfsz	??_infusion^0,f,c
  2764   0005DE  D7FC               	bra	u4627
  2765   0005E0  2E69               	decfsz	(??_infusion+1)^0,f,c
  2766   0005E2  D7FA               	bra	u4627
  2767                           
  2768                           ;main.c: 451:         usePeripheral(buzzer, off);
  2769   0005E4  0E00               	movlw	0
  2770   0005E6  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  2771   0005E8  0E03               	movlw	3
  2772   0005EA  6E05               	movwf	usePeripheral@peripheral^0,c
  2773   0005EC  0E00               	movlw	0
  2774   0005EE  6E08               	movwf	(usePeripheral@action+1)^0,c
  2775   0005F0  0E00               	movlw	0
  2776   0005F2  6E07               	movwf	usePeripheral@action^0,c
  2777   0005F4  EC8D  F007         	call	_usePeripheral	;wreg free
  2778                           
  2779                           ;main.c: 452:         usePeripheral(red_led, off);
  2780   0005F8  0E00               	movlw	0
  2781   0005FA  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  2782   0005FC  0E02               	movlw	2
  2783   0005FE  6E05               	movwf	usePeripheral@peripheral^0,c
  2784   000600  0E00               	movlw	0
  2785   000602  6E08               	movwf	(usePeripheral@action+1)^0,c
  2786   000604  0E00               	movlw	0
  2787   000606  6E07               	movwf	usePeripheral@action^0,c
  2788   000608  EC8D  F007         	call	_usePeripheral	;wreg free
  2789                           
  2790                           ;main.c: 453:         _delay((unsigned long)((1000)*(8000000L/4000.0)));
  2791   00060C  0E0B               	movlw	11
  2792   00060E  6E69               	movwf	(??_infusion+1)^0,c
  2793   000610  0E26               	movlw	38
  2794   000612  6E68               	movwf	??_infusion^0,c
  2795   000614  0E5E               	movlw	94
  2796   000616                     u4637:
  2797   000616  2EE8               	decfsz	wreg,f,c
  2798   000618  D7FE               	bra	u4637
  2799   00061A  2E68               	decfsz	??_infusion^0,f,c
  2800   00061C  D7FC               	bra	u4637
  2801   00061E  2E69               	decfsz	(??_infusion+1)^0,f,c
  2802   000620  D7FA               	bra	u4637
  2803                           
  2804                           ;main.c: 454:     }
  2805   000622  0100               	movlb	0	; () banked
  2806   000624  2BEF               	incf	infusion@i& (0+255),f,b
  2807                           
  2808                           ; BSR set to: 0
  2809   000626  51EF               	movf	infusion@i& (0+255),w,b
  2810   000628  0A80               	xorlw	128
  2811   00062A  0F7B               	addlw	-133
  2812   00062C  A0D8               	btfss	status,0,c
  2813   00062E  D7BB               	goto	l4497
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;main.c: 456:     handle_actuator_push(act_pos);
  2817   000630  C0DC  F011         	movff	infusion@act_pos,handle_actuator_push@act_pos
  2818   000634  C0DD  F012         	movff	infusion@act_pos+1,handle_actuator_push@act_pos+1
  2819   000638  ECD2  F006         	call	_handle_actuator_push	;wreg free
  2820   00063C  0012               	return		;funcret
  2821   00063E                     __end_of_infusion:
  2822                           	callstack 0
  2823                           
  2824 ;; *************** function _sprintf *****************
  2825 ;; Defined at:
  2826 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_sprintf.c"
  2827 ;; Parameters:    Size  Location     Type
  2828 ;;  s               1   78[COMRAM] PTR unsigned char 
  2829 ;;		 -> infusion@buff(5), 
  2830 ;;  fmt             2   79[COMRAM] PTR const unsigned char 
  2831 ;;		 -> STR_38(3), STR_36(4), STR_34(4), STR_32(4), 
  2832 ;; Auto vars:     Size  Location     Type
  2833 ;;  f              12   86[COMRAM] struct _IO_FILE
  2834 ;;  ret             2    0        int 
  2835 ;;  ap              1   85[COMRAM] PTR void [1]
  2836 ;;		 -> ?_sprintf(2), 
  2837 ;; Return value:  Size  Location     Type
  2838 ;;                  2   78[COMRAM] int 
  2839 ;; Registers used:
  2840 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2841 ;; Tracked objects:
  2842 ;;		On entry : 0/0
  2843 ;;		On exit  : 0/0
  2844 ;;		Unchanged: 0/0
  2845 ;; Data sizes:     COMRAM   BANK0   BANK1
  2846 ;;      Params:         7       0       0
  2847 ;;      Locals:        13       0       0
  2848 ;;      Temps:          0       0       0
  2849 ;;      Totals:        20       0       0
  2850 ;;Total ram usage:       20 bytes
  2851 ;; Hardware stack levels used: 1
  2852 ;; Hardware stack levels required when called: 6
  2853 ;; This function calls:
  2854 ;;		_vfprintf
  2855 ;; This function is called by:
  2856 ;;		_infusion
  2857 ;; This function uses a non-reentrant model
  2858 ;;
  2859                           
  2860                           	psect	text11
  2861   0018FC                     __ptext11:
  2862                           	callstack 0
  2863   0018FC                     _sprintf:
  2864                           	callstack 22
  2865                           
  2866                           ;incstack = 0
  2867   0018FC  0E52               	movlw	low (?_sprintf+3)
  2868   0018FE  6E56               	movwf	sprintf@ap^0,c
  2869   001900  C04F  F057         	movff	sprintf@s,sprintf@f
  2870   001904  0E00               	movlw	0
  2871   001906  6E5B               	movwf	(sprintf@f+4)^0,c
  2872   001908  0E00               	movlw	0
  2873   00190A  6E5A               	movwf	(sprintf@f+3)^0,c
  2874   00190C  0E00               	movlw	0
  2875   00190E  6E62               	movwf	(sprintf@f+11)^0,c
  2876   001910  0E00               	movlw	0
  2877   001912  6E61               	movwf	(sprintf@f+10)^0,c
  2878   001914  0E57               	movlw	low sprintf@f
  2879   001916  6E49               	movwf	vfprintf@fp^0,c
  2880   001918  C050  F04A         	movff	sprintf@fmt,vfprintf@fmt
  2881   00191C  C051  F04B         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2882   001920  0E56               	movlw	low sprintf@ap
  2883   001922  6E4C               	movwf	vfprintf@ap^0,c
  2884   001924  ECD2  F00C         	call	_vfprintf	;wreg free
  2885   001928  504F               	movf	sprintf@s^0,w,c
  2886   00192A  245A               	addwf	(sprintf@f+3)^0,w,c
  2887   00192C  6ED9               	movwf	fsr2l,c
  2888   00192E  6ADA               	clrf	fsr2h,c
  2889   001930  6ADF               	clrf	indf2,c
  2890   001932  0012               	return		;funcret
  2891   001934                     __end_of_sprintf:
  2892                           	callstack 0
  2893                           
  2894 ;; *************** function _vfprintf *****************
  2895 ;; Defined at:
  2896 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;  fp              1   72[COMRAM] PTR struct _IO_FILE
  2899 ;;		 -> sprintf@f(12), 
  2900 ;;  fmt             2   73[COMRAM] PTR const unsigned char 
  2901 ;;		 -> STR_38(3), STR_36(4), STR_34(4), STR_32(4), 
  2902 ;;  ap              1   75[COMRAM] PTR PTR void 
  2903 ;;		 -> sprintf@ap(1), 
  2904 ;; Auto vars:     Size  Location     Type
  2905 ;;  cfmt            2   76[COMRAM] PTR unsigned char 
  2906 ;;		 -> STR_38(3), STR_36(4), STR_34(4), STR_32(4), 
  2907 ;; Return value:  Size  Location     Type
  2908 ;;                  2   72[COMRAM] int 
  2909 ;; Registers used:
  2910 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2911 ;; Tracked objects:
  2912 ;;		On entry : 0/0
  2913 ;;		On exit  : 0/0
  2914 ;;		Unchanged: 0/0
  2915 ;; Data sizes:     COMRAM   BANK0   BANK1
  2916 ;;      Params:         4       0       0
  2917 ;;      Locals:         2       0       0
  2918 ;;      Temps:          0       0       0
  2919 ;;      Totals:         6       0       0
  2920 ;;Total ram usage:        6 bytes
  2921 ;; Hardware stack levels used: 1
  2922 ;; Hardware stack levels required when called: 5
  2923 ;; This function calls:
  2924 ;;		_vfpfcnvrt
  2925 ;; This function is called by:
  2926 ;;		_sprintf
  2927 ;; This function uses a non-reentrant model
  2928 ;;
  2929                           
  2930                           	psect	text12
  2931   0019A4                     __ptext12:
  2932                           	callstack 0
  2933   0019A4                     _vfprintf:
  2934                           	callstack 22
  2935                           
  2936                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  2937                           
  2938                           ;incstack = 0
  2939   0019A4  C04A  F04D         	movff	vfprintf@fmt,vfprintf@cfmt
  2940   0019A8  C04B  F04E         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2941                           
  2942                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2943   0019AC  D008               	goto	l4263
  2944   0019AE                     l4261:
  2945                           
  2946                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2947   0019AE  C049  F03C         	movff	vfprintf@fp,vfpfcnvrt@fp
  2948   0019B2  0E4D               	movlw	low vfprintf@cfmt
  2949   0019B4  6E3D               	movwf	vfpfcnvrt@fmt^0,c
  2950   0019B6  C04C  F03E         	movff	vfprintf@ap,vfpfcnvrt@ap
  2951   0019BA  EC51  F004         	call	_vfpfcnvrt	;wreg free
  2952   0019BE                     l4263:
  2953                           
  2954                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2955   0019BE  C04D  FFF6         	movff	vfprintf@cfmt,tblptrl
  2956   0019C2  C04E  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2957   0019C6                     	if	0	;tblptru may be non-zero
  2958   0019C6                     	endif
  2959   0019C6                     	if	0	;tblptru may be non-zero
  2960   0019C6                     	endif
  2961   0019C6  0008               	tblrd		*
  2962   0019C8  50F5               	movf	tablat,w,c
  2963   0019CA  0900               	iorlw	0
  2964   0019CC  A4D8               	btfss	status,2,c
  2965   0019CE  D7EF               	goto	l4261
  2966                           
  2967                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  2968   0019D0  0E00               	movlw	0
  2969   0019D2  6E4A               	movwf	(?_vfprintf+1)^0,c
  2970   0019D4  0E00               	movlw	0
  2971   0019D6  6E49               	movwf	?_vfprintf^0,c
  2972   0019D8  0012               	return		;funcret
  2973   0019DA                     __end_of_vfprintf:
  2974                           	callstack 0
  2975                           
  2976 ;; *************** function _vfpfcnvrt *****************
  2977 ;; Defined at:
  2978 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;  fp              1   59[COMRAM] PTR struct _IO_FILE
  2981 ;;		 -> sprintf@f(12), 
  2982 ;;  fmt             1   60[COMRAM] PTR PTR unsigned char 
  2983 ;;		 -> vfprintf@cfmt(2), 
  2984 ;;  ap              1   61[COMRAM] PTR PTR void 
  2985 ;;		 -> sprintf@ap(1), 
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;  convarg         4   67[COMRAM] struct .
  2988 ;;  cp              2   65[COMRAM] PTR unsigned char 
  2989 ;;		 -> STR_38(3), STR_36(4), STR_34(4), STR_32(4), 
  2990 ;;  c               1   71[COMRAM] unsigned char 
  2991 ;;  done            1   64[COMRAM] _Bool 
  2992 ;; Return value:  Size  Location     Type
  2993 ;;                  1    wreg      void 
  2994 ;; Registers used:
  2995 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2996 ;; Tracked objects:
  2997 ;;		On entry : 0/0
  2998 ;;		On exit  : 0/0
  2999 ;;		Unchanged: 0/0
  3000 ;; Data sizes:     COMRAM   BANK0   BANK1
  3001 ;;      Params:         3       0       0
  3002 ;;      Locals:         8       0       0
  3003 ;;      Temps:          2       0       0
  3004 ;;      Totals:        13       0       0
  3005 ;;Total ram usage:       13 bytes
  3006 ;; Hardware stack levels used: 1
  3007 ;; Hardware stack levels required when called: 4
  3008 ;; This function calls:
  3009 ;;		___aldiv
  3010 ;;		___almod
  3011 ;;		_abs
  3012 ;;		_fputc
  3013 ;; This function is called by:
  3014 ;;		_vfprintf
  3015 ;; This function uses a non-reentrant model
  3016 ;;
  3017                           
  3018                           	psect	text13
  3019   0008A2                     __ptext13:
  3020                           	callstack 0
  3021   0008A2                     _vfpfcnvrt:
  3022                           	callstack 22
  3023                           
  3024                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  3025                           
  3026                           ;incstack = 0
  3027   0008A2  503D               	movf	vfpfcnvrt@fmt^0,w,c
  3028   0008A4  6ED9               	movwf	fsr2l,c
  3029   0008A6  6ADA               	clrf	fsr2h,c
  3030   0008A8  CFDE FFF6          	movff	postinc2,tblptrl
  3031   0008AC  CFDD FFF7          	movff	postdec2,tblptrh
  3032   0008B0                     	if	0	;tblptru may be non-zero
  3033   0008B0                     	endif
  3034   0008B0                     	if	0	;tblptru may be non-zero
  3035   0008B0                     	endif
  3036   0008B0  0008               	tblrd		*
  3037   0008B2  50F5               	movf	tablat,w,c
  3038   0008B4  0A25               	xorlw	37
  3039   0008B6  A4D8               	btfss	status,2,c
  3040   0008B8  D0EE               	goto	l4099
  3041                           
  3042                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  3043   0008BA  503D               	movf	vfpfcnvrt@fmt^0,w,c
  3044   0008BC  6ED9               	movwf	fsr2l,c
  3045   0008BE  6ADA               	clrf	fsr2h,c
  3046   0008C0  2ADE               	incf	postinc2,f,c
  3047   0008C2  0E00               	movlw	0
  3048   0008C4  22DD               	addwfc	postdec2,f,c
  3049                           
  3050                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  3051   0008C6  0E00               	movlw	0
  3052   0008C8  0100               	movlb	0	; () banked
  3053   0008CA  6FA9               	movwf	(_width+1)& (0+255),b
  3054   0008CC  0E00               	movlw	0
  3055   0008CE  6FA8               	movwf	_width& (0+255),b
  3056   0008D0  C0A8  F079         	movff	_width,_flags
  3057                           
  3058                           ; BSR set to: 0
  3059                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  3060   0008D4  69AA               	setf	_prec& (0+255),b
  3061   0008D6  69AB               	setf	(_prec+1)& (0+255),b
  3062                           
  3063                           ; BSR set to: 0
  3064                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  3065   0008D8  503D               	movf	vfpfcnvrt@fmt^0,w,c
  3066   0008DA  6ED9               	movwf	fsr2l,c
  3067   0008DC  6ADA               	clrf	fsr2h,c
  3068   0008DE  CFDE F042          	movff	postinc2,vfpfcnvrt@cp
  3069   0008E2  CFDD F043          	movff	postdec2,vfpfcnvrt@cp+1
  3070                           
  3071                           ; BSR set to: 0
  3072                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1293:   c = *cp;
  3073   0008E6  C042  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3074   0008EA  C043  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  3075   0008EE                     	if	0	;tblptru may be non-zero
  3076   0008EE                     	endif
  3077   0008EE                     	if	0	;tblptru may be non-zero
  3078   0008EE                     	endif
  3079   0008EE  0008               	tblrd		*
  3080   0008F0  CFF5 F048          	movff	tablat,vfpfcnvrt@c
  3081                           
  3082                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1294:   switch(c)
      +                           {
  3083   0008F4  D008               	goto	l4055
  3084   0008F6                     l4047:
  3085                           
  3086                           ; BSR set to: 0
  3087                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1309:     cp++;
  3088   0008F6  4A42               	infsnz	vfpfcnvrt@cp^0,f,c
  3089   0008F8  2A43               	incf	(vfpfcnvrt@cp+1)^0,f,c
  3090                           
  3091                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1316:     break;
  3092   0008FA  D010               	goto	l4057
  3093   0008FC                     l4049:
  3094                           
  3095                           ; BSR set to: 0
  3096                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1350:     c = 'i'
      +                          ;
  3097   0008FC  0E69               	movlw	105
  3098   0008FE  D001               	goto	L3
  3099   000900                     l4051:
  3100                           
  3101                           ; BSR set to: 0
  3102                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1353:     c = 0;
  3103   000900  0E00               	movlw	0
  3104   000902                     L3:
  3105   000902  6E48               	movwf	vfpfcnvrt@c^0,c
  3106                           
  3107                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1354:     break;
  3108   000904  D00B               	goto	l4057
  3109   000906                     l4055:
  3110                           
  3111                           ; BSR set to: 0
  3112   000906  5048               	movf	vfpfcnvrt@c^0,w,c
  3113                           
  3114                           ; Switch size 1, requested type "simple"
  3115                           ; Number of cases is 3, Range of values is 100 to 108
  3116                           ; switch strategies available:
  3117                           ; Name         Instructions Cycles
  3118                           ; simple_byte           10     6 (average)
  3119                           ;	Chosen strategy is simple_byte
  3120   000908  0A64               	xorlw	100	; case 100
  3121   00090A  B4D8               	btfsc	status,2,c
  3122   00090C  D7F7               	goto	l4049
  3123   00090E  0A0D               	xorlw	13	; case 105
  3124   000910  B4D8               	btfsc	status,2,c
  3125   000912  D7F4               	goto	l4049
  3126   000914  0A05               	xorlw	5	; case 108
  3127   000916  B4D8               	btfsc	status,2,c
  3128   000918  D7EE               	goto	l4047
  3129   00091A  D7F2               	goto	l4051
  3130   00091C                     l4057:
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  3134   00091C  C042  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3135   000920  C043  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  3136   000924                     	if	0	;tblptru may be non-zero
  3137   000924                     	endif
  3138   000924                     	if	0	;tblptru may be non-zero
  3139   000924                     	endif
  3140   000924  0008               	tblrd		*
  3141   000926  50F5               	movf	tablat,w,c
  3142   000928  0A64               	xorlw	100
  3143   00092A  B4D8               	btfsc	status,2,c
  3144   00092C  D02D               	goto	l4067
  3145                           
  3146                           ; BSR set to: 0
  3147   00092E  C042  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3148   000932  C043  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  3149   000936                     	if	0	;tblptru may be non-zero
  3150   000936                     	endif
  3151   000936                     	if	0	;tblptru may be non-zero
  3152   000936                     	endif
  3153   000936  0008               	tblrd		*
  3154   000938  50F5               	movf	tablat,w,c
  3155   00093A  0A69               	xorlw	105
  3156   00093C  B4D8               	btfsc	status,2,c
  3157   00093E  D024               	goto	l4067
  3158   000940  D0A3               	goto	l4095
  3159   000942                     l4061:
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1365:      convar
      +                          g.sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  3163   000942  503E               	movf	vfpfcnvrt@ap^0,w,c
  3164   000944  6ED9               	movwf	fsr2l,c
  3165   000946  6ADA               	clrf	fsr2h,c
  3166   000948  50DF               	movf	indf2,w,c
  3167   00094A  2ADF               	incf	indf2,f,c
  3168   00094C  2ADF               	incf	indf2,f,c
  3169   00094E  6ED9               	movwf	fsr2l,c
  3170   000950  6ADA               	clrf	fsr2h,c
  3171   000952  CFDE F044          	movff	postinc2,vfpfcnvrt@convarg
  3172   000956  CFDD F045          	movff	postdec2,vfpfcnvrt@convarg+1
  3173   00095A  0E00               	movlw	0
  3174   00095C  BE45               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  3175   00095E  0EFF               	movlw	-1
  3176   000960  6E46               	movwf	(vfpfcnvrt@convarg+2)^0,c
  3177   000962  6E47               	movwf	(vfpfcnvrt@convarg+3)^0,c
  3178                           
  3179                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1366:      break;
  3180   000964  D018               	goto	l4069
  3181   000966                     l4063:
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1379:      convar
      +                          g.sint = (vfpf_sint_t)(*(long *)__va_arg(*(long **)ap, (long)0));
  3185   000966  503E               	movf	vfpfcnvrt@ap^0,w,c
  3186   000968  6ED9               	movwf	fsr2l,c
  3187   00096A  6ADA               	clrf	fsr2h,c
  3188   00096C  0E04               	movlw	4
  3189   00096E  26DF               	addwf	indf2,f,c
  3190   000970  5CDF               	subwf	indf2,w,c
  3191   000972  6ED9               	movwf	fsr2l,c
  3192   000974  6ADA               	clrf	fsr2h,c
  3193   000976  CFDE F044          	movff	postinc2,vfpfcnvrt@convarg
  3194   00097A  CFDE F045          	movff	postinc2,vfpfcnvrt@convarg+1
  3195   00097E  CFDE F046          	movff	postinc2,vfpfcnvrt@convarg+2
  3196   000982  CFDE F047          	movff	postinc2,vfpfcnvrt@convarg+3
  3197                           
  3198                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1380:      break;
  3199   000986  D007               	goto	l4069
  3200   000988                     l4067:
  3201                           
  3202                           ; BSR set to: 0
  3203   000988  5048               	movf	vfpfcnvrt@c^0,w,c
  3204                           
  3205                           ; Switch size 1, requested type "simple"
  3206                           ; Number of cases is 2, Range of values is 105 to 108
  3207                           ; switch strategies available:
  3208                           ; Name         Instructions Cycles
  3209                           ; simple_byte            7     4 (average)
  3210                           ;	Chosen strategy is simple_byte
  3211   00098A  0A69               	xorlw	105	; case 105
  3212   00098C  B4D8               	btfsc	status,2,c
  3213   00098E  D7D9               	goto	l4061
  3214   000990  0A05               	xorlw	5	; case 108
  3215   000992  B4D8               	btfsc	status,2,c
  3216   000994  D7E8               	goto	l4063
  3217   000996                     l4069:
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  3221   000996  0E01               	movlw	1
  3222   000998  2442               	addwf	vfpfcnvrt@cp^0,w,c
  3223   00099A  6E3F               	movwf	??_vfpfcnvrt^0,c
  3224   00099C  0E00               	movlw	0
  3225   00099E  2043               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  3226   0009A0  6E40               	movwf	(??_vfpfcnvrt+1)^0,c
  3227   0009A2  503D               	movf	vfpfcnvrt@fmt^0,w,c
  3228   0009A4  6ED9               	movwf	fsr2l,c
  3229   0009A6  6ADA               	clrf	fsr2h,c
  3230   0009A8  C03F  FFDE         	movff	??_vfpfcnvrt,postinc2
  3231   0009AC  C040  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  3232                           
  3233                           ; BSR set to: 0
  3234                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  3235   0009B0  0E20               	movlw	32
  3236   0009B2  6E48               	movwf	vfpfcnvrt@c^0,c
  3237                           
  3238                           ; BSR set to: 0
  3239                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  3240   0009B4  AE47               	btfss	(vfpfcnvrt@convarg+3)^0,7,c
  3241   0009B6  D002               	goto	u4030
  3242   0009B8  0E01               	movlw	1
  3243   0009BA  D001               	goto	u4040
  3244   0009BC                     u4030:
  3245   0009BC  0E00               	movlw	0
  3246   0009BE                     u4040:
  3247   0009BE  6E41               	movwf	vfpfcnvrt@done^0,c
  3248   0009C0                     l4075:
  3249                           
  3250                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  3251   0009C0  0648               	decf	vfpfcnvrt@c^0,f,c
  3252   0009C2  5048               	movf	vfpfcnvrt@c^0,w,c
  3253   0009C4  0F80               	addlw	low _dbuf
  3254   0009C6  6ED9               	movwf	fsr2l,c
  3255   0009C8  6ADA               	clrf	fsr2h,c
  3256   0009CA  C044  F005         	movff	vfpfcnvrt@convarg,___almod@dividend
  3257   0009CE  C045  F006         	movff	vfpfcnvrt@convarg+1,___almod@dividend+1
  3258   0009D2  C046  F007         	movff	vfpfcnvrt@convarg+2,___almod@dividend+2
  3259   0009D6  C047  F008         	movff	vfpfcnvrt@convarg+3,___almod@dividend+3
  3260   0009DA  0E0A               	movlw	10
  3261   0009DC  6E09               	movwf	___almod@divisor^0,c
  3262   0009DE  0E00               	movlw	0
  3263   0009E0  6E0A               	movwf	(___almod@divisor+1)^0,c
  3264   0009E2  0E00               	movlw	0
  3265   0009E4  6E0B               	movwf	(___almod@divisor+2)^0,c
  3266   0009E6  0E00               	movlw	0
  3267   0009E8  6E0C               	movwf	(___almod@divisor+3)^0,c
  3268   0009EA  EC37  F007         	call	___almod	;wreg free
  3269   0009EE  C005  F00F         	movff	?___almod,abs@a
  3270   0009F2  C006  F010         	movff	?___almod+1,abs@a+1
  3271   0009F6  EC17  F00D         	call	_abs	;wreg free
  3272   0009FA  500F               	movf	?_abs^0,w,c
  3273   0009FC  0F30               	addlw	48
  3274   0009FE  6EDF               	movwf	indf2,c
  3275                           
  3276                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  3277   000A00  C044  F02E         	movff	vfpfcnvrt@convarg,___aldiv@dividend
  3278   000A04  C045  F02F         	movff	vfpfcnvrt@convarg+1,___aldiv@dividend+1
  3279   000A08  C046  F030         	movff	vfpfcnvrt@convarg+2,___aldiv@dividend+2
  3280   000A0C  C047  F031         	movff	vfpfcnvrt@convarg+3,___aldiv@dividend+3
  3281   000A10  0E0A               	movlw	10
  3282   000A12  6E32               	movwf	___aldiv@divisor^0,c
  3283   000A14  0E00               	movlw	0
  3284   000A16  6E33               	movwf	(___aldiv@divisor+1)^0,c
  3285   000A18  0E00               	movlw	0
  3286   000A1A  6E34               	movwf	(___aldiv@divisor+2)^0,c
  3287   000A1C  0E00               	movlw	0
  3288   000A1E  6E35               	movwf	(___aldiv@divisor+3)^0,c
  3289   000A20  EC6C  F006         	call	___aldiv	;wreg free
  3290   000A24  C02E  F044         	movff	?___aldiv,vfpfcnvrt@convarg
  3291   000A28  C02F  F045         	movff	?___aldiv+1,vfpfcnvrt@convarg+1
  3292   000A2C  C030  F046         	movff	?___aldiv+2,vfpfcnvrt@convarg+2
  3293   000A30  C031  F047         	movff	?___aldiv+3,vfpfcnvrt@convarg+3
  3294                           
  3295                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  3296   000A34  5044               	movf	vfpfcnvrt@convarg^0,w,c
  3297   000A36  1045               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  3298   000A38  1046               	iorwf	(vfpfcnvrt@convarg+2)^0,w,c
  3299   000A3A  1047               	iorwf	(vfpfcnvrt@convarg+3)^0,w,c
  3300   000A3C  B4D8               	btfsc	status,2,c
  3301   000A3E  D003               	goto	u4060
  3302   000A40  5048               	movf	vfpfcnvrt@c^0,w,c
  3303   000A42  A4D8               	btfss	status,2,c
  3304   000A44  D7BD               	goto	l4075
  3305   000A46                     u4060:
  3306                           
  3307                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  3308   000A46  5048               	movf	vfpfcnvrt@c^0,w,c
  3309   000A48  B4D8               	btfsc	status,2,c
  3310   000A4A  D019               	goto	l4093
  3311   000A4C  5041               	movf	vfpfcnvrt@done^0,w,c
  3312   000A4E  B4D8               	btfsc	status,2,c
  3313   000A50  D016               	goto	l4093
  3314                           
  3315                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  3316   000A52  0648               	decf	vfpfcnvrt@c^0,f,c
  3317   000A54  5048               	movf	vfpfcnvrt@c^0,w,c
  3318   000A56  0F80               	addlw	low _dbuf
  3319   000A58  6ED9               	movwf	fsr2l,c
  3320   000A5A  6ADA               	clrf	fsr2h,c
  3321   000A5C  0E2D               	movlw	45
  3322   000A5E  6EDF               	movwf	indf2,c
  3323   000A60  D00E               	goto	l4093
  3324   000A62                     l4089:
  3325                           
  3326                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  3327   000A62  5048               	movf	vfpfcnvrt@c^0,w,c
  3328   000A64  0F80               	addlw	low _dbuf
  3329   000A66  6ED9               	movwf	fsr2l,c
  3330   000A68  6ADA               	clrf	fsr2h,c
  3331   000A6A  50DF               	movf	indf2,w,c
  3332   000A6C  6E3F               	movwf	??_vfpfcnvrt^0,c
  3333   000A6E  503F               	movf	??_vfpfcnvrt^0,w,c
  3334   000A70  6E05               	movwf	fputc@c^0,c
  3335   000A72  6A06               	clrf	(fputc@c+1)^0,c
  3336   000A74  C03C  F007         	movff	vfpfcnvrt@fp,fputc@fp
  3337   000A78  EC90  F009         	call	_fputc	;wreg free
  3338   000A7C  2A48               	incf	vfpfcnvrt@c^0,f,c
  3339   000A7E                     l4093:
  3340                           
  3341                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  3342   000A7E  0E20               	movlw	32
  3343   000A80  1848               	xorwf	vfpfcnvrt@c^0,w,c
  3344   000A82  B4D8               	btfsc	status,2,c
  3345   000A84  0012               	return	
  3346   000A86  D7ED               	goto	l4089
  3347   000A88                     l4095:
  3348                           
  3349                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  3350   000A88  503D               	movf	vfpfcnvrt@fmt^0,w,c
  3351   000A8A  6ED9               	movwf	fsr2l,c
  3352   000A8C  6ADA               	clrf	fsr2h,c
  3353   000A8E  2ADE               	incf	postinc2,f,c
  3354   000A90  0E00               	movlw	0
  3355   000A92  22DD               	addwfc	postdec2,f,c
  3356   000A94  0012               	return	
  3357   000A96                     l4099:
  3358                           
  3359                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  3360   000A96  503D               	movf	vfpfcnvrt@fmt^0,w,c
  3361   000A98  6ED9               	movwf	fsr2l,c
  3362   000A9A  6ADA               	clrf	fsr2h,c
  3363   000A9C  CFDE FFF6          	movff	postinc2,tblptrl
  3364   000AA0  CFDD FFF7          	movff	postdec2,tblptrh
  3365   000AA4                     	if	0	;tblptru may be non-zero
  3366   000AA4                     	endif
  3367   000AA4                     	if	0	;tblptru may be non-zero
  3368   000AA4                     	endif
  3369   000AA4  0008               	tblrd		*
  3370   000AA6  50F5               	movf	tablat,w,c
  3371   000AA8  6E05               	movwf	fputc@c^0,c
  3372   000AAA  6A06               	clrf	(fputc@c+1)^0,c
  3373   000AAC  C03C  F007         	movff	vfpfcnvrt@fp,fputc@fp
  3374   000AB0  EC90  F009         	call	_fputc	;wreg free
  3375   000AB4  D7E9               	goto	l4095
  3376   000AB6                     __end_of_vfpfcnvrt:
  3377                           	callstack 0
  3378                           
  3379 ;; *************** function _fputc *****************
  3380 ;; Defined at:
  3381 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_fputc.c"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;  c               2    4[COMRAM] int 
  3384 ;;  fp              1    6[COMRAM] PTR struct _IO_FILE
  3385 ;;		 -> sprintf@f(12), 
  3386 ;; Auto vars:     Size  Location     Type
  3387 ;;		None
  3388 ;; Return value:  Size  Location     Type
  3389 ;;                  2    4[COMRAM] int 
  3390 ;; Registers used:
  3391 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3392 ;; Tracked objects:
  3393 ;;		On entry : 0/0
  3394 ;;		On exit  : 0/0
  3395 ;;		Unchanged: 0/0
  3396 ;; Data sizes:     COMRAM   BANK0   BANK1
  3397 ;;      Params:         3       0       0
  3398 ;;      Locals:         0       0       0
  3399 ;;      Temps:          5       0       0
  3400 ;;      Totals:         8       0       0
  3401 ;;Total ram usage:        8 bytes
  3402 ;; Hardware stack levels used: 1
  3403 ;; Hardware stack levels required when called: 3
  3404 ;; This function calls:
  3405 ;;		_putch
  3406 ;; This function is called by:
  3407 ;;		_vfpfcnvrt
  3408 ;; This function uses a non-reentrant model
  3409 ;;
  3410                           
  3411                           	psect	text14
  3412   001320                     __ptext14:
  3413                           	callstack 0
  3414   001320                     _fputc:
  3415                           	callstack 22
  3416                           
  3417                           ;incstack = 0
  3418   001320  5007               	movf	fputc@fp^0,w,c
  3419   001322  B4D8               	btfsc	status,2,c
  3420   001324  D003               	goto	u3700
  3421   001326  5007               	movf	fputc@fp^0,w,c
  3422   001328  A4D8               	btfss	status,2,c
  3423   00132A  D004               	goto	l3871
  3424   00132C                     u3700:
  3425   00132C  5005               	movf	fputc@c^0,w,c
  3426   00132E  ECB5  F00D         	call	_putch
  3427   001332  0012               	return	
  3428   001334                     l3871:
  3429   001334  5007               	movf	fputc@fp^0,w,c
  3430   001336  6ED9               	movwf	fsr2l,c
  3431   001338  6ADA               	clrf	fsr2h,c
  3432   00133A  0E0A               	movlw	10
  3433   00133C  26D9               	addwf	fsr2l,f,c
  3434   00133E  50DE               	movf	postinc2,w,c
  3435   001340  10DE               	iorwf	postinc2,w,c
  3436   001342  B4D8               	btfsc	status,2,c
  3437   001344  D014               	goto	u3720
  3438   001346  5007               	movf	fputc@fp^0,w,c
  3439   001348  6ED9               	movwf	fsr2l,c
  3440   00134A  6ADA               	clrf	fsr2h,c
  3441   00134C  0E0A               	movlw	10
  3442   00134E  26D9               	addwf	fsr2l,f,c
  3443   001350  5007               	movf	fputc@fp^0,w,c
  3444   001352  6EE1               	movwf	fsr1l,c
  3445   001354  6AE2               	clrf	fsr1h,c
  3446   001356  0E03               	movlw	3
  3447   001358  26E1               	addwf	fsr1l,f,c
  3448   00135A  50DE               	movf	postinc2,w,c
  3449   00135C  5CE6               	subwf	postinc1,w,c
  3450   00135E  50E6               	movf	postinc1,w,c
  3451   001360  0A80               	xorlw	128
  3452   001362  6E0C               	movwf	(??_fputc+4)^0,c
  3453   001364  50DE               	movf	postinc2,w,c
  3454   001366  0A80               	xorlw	128
  3455   001368  580C               	subwfb	(??_fputc+4)^0,w,c
  3456   00136A  B0D8               	btfsc	status,0,c
  3457   00136C  0012               	return	
  3458   00136E                     u3720:
  3459   00136E  5007               	movf	fputc@fp^0,w,c
  3460   001370  6ED9               	movwf	fsr2l,c
  3461   001372  6ADA               	clrf	fsr2h,c
  3462   001374  0E03               	movlw	3
  3463   001376  26D9               	addwf	fsr2l,f,c
  3464   001378  50DF               	movf	indf2,w,c
  3465   00137A  6E08               	movwf	??_fputc^0,c
  3466   00137C  5007               	movf	fputc@fp^0,w,c
  3467   00137E  6ED9               	movwf	fsr2l,c
  3468   001380  6ADA               	clrf	fsr2h,c
  3469   001382  50DF               	movf	indf2,w,c
  3470   001384  2408               	addwf	??_fputc^0,w,c
  3471   001386  6ED9               	movwf	fsr2l,c
  3472   001388  6ADA               	clrf	fsr2h,c
  3473   00138A  C005  FFDF         	movff	fputc@c,indf2
  3474   00138E  5007               	movf	fputc@fp^0,w,c
  3475   001390  6ED9               	movwf	fsr2l,c
  3476   001392  6ADA               	clrf	fsr2h,c
  3477   001394  0E03               	movlw	3
  3478   001396  26D9               	addwf	fsr2l,f,c
  3479   001398  2ADE               	incf	postinc2,f,c
  3480   00139A  0E00               	movlw	0
  3481   00139C  22DD               	addwfc	postdec2,f,c
  3482   00139E  0012               	return		;funcret
  3483   0013A0                     __end_of_fputc:
  3484                           	callstack 0
  3485                           
  3486 ;; *************** function _putch *****************
  3487 ;; Defined at:
  3488 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\putch.c"
  3489 ;; Parameters:    Size  Location     Type
  3490 ;;  c               1    wreg     unsigned char 
  3491 ;; Auto vars:     Size  Location     Type
  3492 ;;  c               1    0[COMRAM] unsigned char 
  3493 ;; Return value:  Size  Location     Type
  3494 ;;                  1    wreg      void 
  3495 ;; Registers used:
  3496 ;;		wreg
  3497 ;; Tracked objects:
  3498 ;;		On entry : 0/0
  3499 ;;		On exit  : 0/0
  3500 ;;		Unchanged: 0/0
  3501 ;; Data sizes:     COMRAM   BANK0   BANK1
  3502 ;;      Params:         0       0       0
  3503 ;;      Locals:         0       0       0
  3504 ;;      Temps:          0       0       0
  3505 ;;      Totals:         0       0       0
  3506 ;;Total ram usage:        0 bytes
  3507 ;; Hardware stack levels used: 1
  3508 ;; Hardware stack levels required when called: 2
  3509 ;; This function calls:
  3510 ;;		Nothing
  3511 ;; This function is called by:
  3512 ;;		_fputc
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           	psect	text15
  3517   001B6A                     __ptext15:
  3518                           	callstack 0
  3519   001B6A                     _putch:
  3520                           	callstack 22
  3521                           
  3522                           ;incstack = 0
  3523   001B6A  0012               	return		;funcret
  3524   001B6C                     __end_of_putch:
  3525                           	callstack 0
  3526                           
  3527 ;; *************** function _abs *****************
  3528 ;; Defined at:
  3529 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\abs.c"
  3530 ;; Parameters:    Size  Location     Type
  3531 ;;  a               2   14[COMRAM] int 
  3532 ;; Auto vars:     Size  Location     Type
  3533 ;;		None
  3534 ;; Return value:  Size  Location     Type
  3535 ;;                  2   14[COMRAM] int 
  3536 ;; Registers used:
  3537 ;;		wreg, status,2, status,0
  3538 ;; Tracked objects:
  3539 ;;		On entry : 0/0
  3540 ;;		On exit  : 0/0
  3541 ;;		Unchanged: 0/0
  3542 ;; Data sizes:     COMRAM   BANK0   BANK1
  3543 ;;      Params:         2       0       0
  3544 ;;      Locals:         0       0       0
  3545 ;;      Temps:          2       0       0
  3546 ;;      Totals:         4       0       0
  3547 ;;Total ram usage:        4 bytes
  3548 ;; Hardware stack levels used: 1
  3549 ;; Hardware stack levels required when called: 2
  3550 ;; This function calls:
  3551 ;;		Nothing
  3552 ;; This function is called by:
  3553 ;;		_vfpfcnvrt
  3554 ;; This function uses a non-reentrant model
  3555 ;;
  3556                           
  3557                           	psect	text16
  3558   001A2E                     __ptext16:
  3559                           	callstack 0
  3560   001A2E                     _abs:
  3561                           	callstack 23
  3562                           
  3563                           ;incstack = 0
  3564   001A2E  BE10               	btfsc	(abs@a+1)^0,7,c
  3565   001A30  D005               	goto	l1335
  3566   001A32  C00F  F00F         	movff	abs@a,?_abs
  3567   001A36  C010  F010         	movff	abs@a+1,?_abs+1
  3568   001A3A  0012               	return	
  3569   001A3C                     l1335:
  3570   001A3C  C00F  F011         	movff	abs@a,??_abs
  3571   001A40  C010  F012         	movff	abs@a+1,??_abs+1
  3572   001A44  1E11               	comf	??_abs^0,f,c
  3573   001A46  1E12               	comf	(??_abs+1)^0,f,c
  3574   001A48  4A11               	infsnz	??_abs^0,f,c
  3575   001A4A  2A12               	incf	(??_abs+1)^0,f,c
  3576   001A4C  C011  F00F         	movff	??_abs,?_abs
  3577   001A50  C012  F010         	movff	??_abs+1,?_abs+1
  3578   001A54  0012               	return		;funcret
  3579   001A56                     __end_of_abs:
  3580                           	callstack 0
  3581                           
  3582 ;; *************** function ___almod *****************
  3583 ;; Defined at:
  3584 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\almod.c"
  3585 ;; Parameters:    Size  Location     Type
  3586 ;;  dividend        4    4[COMRAM] long 
  3587 ;;  divisor         4    8[COMRAM] long 
  3588 ;; Auto vars:     Size  Location     Type
  3589 ;;  sign            1   13[COMRAM] unsigned char 
  3590 ;;  counter         1   12[COMRAM] unsigned char 
  3591 ;; Return value:  Size  Location     Type
  3592 ;;                  4    4[COMRAM] long 
  3593 ;; Registers used:
  3594 ;;		wreg, status,2, status,0
  3595 ;; Tracked objects:
  3596 ;;		On entry : 0/0
  3597 ;;		On exit  : 0/0
  3598 ;;		Unchanged: 0/0
  3599 ;; Data sizes:     COMRAM   BANK0   BANK1
  3600 ;;      Params:         8       0       0
  3601 ;;      Locals:         2       0       0
  3602 ;;      Temps:          0       0       0
  3603 ;;      Totals:        10       0       0
  3604 ;;Total ram usage:       10 bytes
  3605 ;; Hardware stack levels used: 1
  3606 ;; Hardware stack levels required when called: 2
  3607 ;; This function calls:
  3608 ;;		Nothing
  3609 ;; This function is called by:
  3610 ;;		_vfpfcnvrt
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           	psect	text17
  3615   000E6E                     __ptext17:
  3616                           	callstack 0
  3617   000E6E                     ___almod:
  3618                           	callstack 23
  3619                           
  3620                           ;incstack = 0
  3621   000E6E  0E00               	movlw	0
  3622   000E70  6E0E               	movwf	___almod@sign^0,c
  3623   000E72  AE08               	btfss	(___almod@dividend+3)^0,7,c
  3624   000E74  D00A               	goto	l3837
  3625   000E76  1E08               	comf	(___almod@dividend+3)^0,f,c
  3626   000E78  1E07               	comf	(___almod@dividend+2)^0,f,c
  3627   000E7A  1E06               	comf	(___almod@dividend+1)^0,f,c
  3628   000E7C  6C05               	negf	___almod@dividend^0,c
  3629   000E7E  0E00               	movlw	0
  3630   000E80  2206               	addwfc	(___almod@dividend+1)^0,f,c
  3631   000E82  2207               	addwfc	(___almod@dividend+2)^0,f,c
  3632   000E84  2208               	addwfc	(___almod@dividend+3)^0,f,c
  3633   000E86  0E01               	movlw	1
  3634   000E88  6E0E               	movwf	___almod@sign^0,c
  3635   000E8A                     l3837:
  3636   000E8A  AE0C               	btfss	(___almod@divisor+3)^0,7,c
  3637   000E8C  D008               	goto	l3841
  3638   000E8E  1E0C               	comf	(___almod@divisor+3)^0,f,c
  3639   000E90  1E0B               	comf	(___almod@divisor+2)^0,f,c
  3640   000E92  1E0A               	comf	(___almod@divisor+1)^0,f,c
  3641   000E94  6C09               	negf	___almod@divisor^0,c
  3642   000E96  0E00               	movlw	0
  3643   000E98  220A               	addwfc	(___almod@divisor+1)^0,f,c
  3644   000E9A  220B               	addwfc	(___almod@divisor+2)^0,f,c
  3645   000E9C  220C               	addwfc	(___almod@divisor+3)^0,f,c
  3646   000E9E                     l3841:
  3647   000E9E  5009               	movf	___almod@divisor^0,w,c
  3648   000EA0  100A               	iorwf	(___almod@divisor+1)^0,w,c
  3649   000EA2  100B               	iorwf	(___almod@divisor+2)^0,w,c
  3650   000EA4  100C               	iorwf	(___almod@divisor+3)^0,w,c
  3651   000EA6  B4D8               	btfsc	status,2,c
  3652   000EA8  D024               	goto	l3857
  3653   000EAA  0E01               	movlw	1
  3654   000EAC  6E0D               	movwf	___almod@counter^0,c
  3655   000EAE  D006               	goto	l3847
  3656   000EB0                     l3845:
  3657   000EB0  90D8               	bcf	status,0,c
  3658   000EB2  3609               	rlcf	___almod@divisor^0,f,c
  3659   000EB4  360A               	rlcf	(___almod@divisor+1)^0,f,c
  3660   000EB6  360B               	rlcf	(___almod@divisor+2)^0,f,c
  3661   000EB8  360C               	rlcf	(___almod@divisor+3)^0,f,c
  3662   000EBA  2A0D               	incf	___almod@counter^0,f,c
  3663   000EBC                     l3847:
  3664   000EBC  AE0C               	btfss	(___almod@divisor+3)^0,7,c
  3665   000EBE  D7F8               	goto	l3845
  3666   000EC0                     u3660:
  3667   000EC0  5009               	movf	___almod@divisor^0,w,c
  3668   000EC2  5C05               	subwf	___almod@dividend^0,w,c
  3669   000EC4  500A               	movf	(___almod@divisor+1)^0,w,c
  3670   000EC6  5806               	subwfb	(___almod@dividend+1)^0,w,c
  3671   000EC8  500B               	movf	(___almod@divisor+2)^0,w,c
  3672   000ECA  5807               	subwfb	(___almod@dividend+2)^0,w,c
  3673   000ECC  500C               	movf	(___almod@divisor+3)^0,w,c
  3674   000ECE  5808               	subwfb	(___almod@dividend+3)^0,w,c
  3675   000ED0  A0D8               	btfss	status,0,c
  3676   000ED2  D008               	goto	l3853
  3677   000ED4  5009               	movf	___almod@divisor^0,w,c
  3678   000ED6  5E05               	subwf	___almod@dividend^0,f,c
  3679   000ED8  500A               	movf	(___almod@divisor+1)^0,w,c
  3680   000EDA  5A06               	subwfb	(___almod@dividend+1)^0,f,c
  3681   000EDC  500B               	movf	(___almod@divisor+2)^0,w,c
  3682   000EDE  5A07               	subwfb	(___almod@dividend+2)^0,f,c
  3683   000EE0  500C               	movf	(___almod@divisor+3)^0,w,c
  3684   000EE2  5A08               	subwfb	(___almod@dividend+3)^0,f,c
  3685   000EE4                     l3853:
  3686   000EE4  90D8               	bcf	status,0,c
  3687   000EE6  320C               	rrcf	(___almod@divisor+3)^0,f,c
  3688   000EE8  320B               	rrcf	(___almod@divisor+2)^0,f,c
  3689   000EEA  320A               	rrcf	(___almod@divisor+1)^0,f,c
  3690   000EEC  3209               	rrcf	___almod@divisor^0,f,c
  3691   000EEE  2E0D               	decfsz	___almod@counter^0,f,c
  3692   000EF0  D7E7               	goto	u3660
  3693   000EF2                     l3857:
  3694   000EF2  500E               	movf	___almod@sign^0,w,c
  3695   000EF4  B4D8               	btfsc	status,2,c
  3696   000EF6  D008               	goto	l3861
  3697   000EF8  1E08               	comf	(___almod@dividend+3)^0,f,c
  3698   000EFA  1E07               	comf	(___almod@dividend+2)^0,f,c
  3699   000EFC  1E06               	comf	(___almod@dividend+1)^0,f,c
  3700   000EFE  6C05               	negf	___almod@dividend^0,c
  3701   000F00  0E00               	movlw	0
  3702   000F02  2206               	addwfc	(___almod@dividend+1)^0,f,c
  3703   000F04  2207               	addwfc	(___almod@dividend+2)^0,f,c
  3704   000F06  2208               	addwfc	(___almod@dividend+3)^0,f,c
  3705   000F08                     l3861:
  3706   000F08  C005  F005         	movff	___almod@dividend,?___almod
  3707   000F0C  C006  F006         	movff	___almod@dividend+1,?___almod+1
  3708   000F10  C007  F007         	movff	___almod@dividend+2,?___almod+2
  3709   000F14  C008  F008         	movff	___almod@dividend+3,?___almod+3
  3710   000F18  0012               	return		;funcret
  3711   000F1A                     __end_of___almod:
  3712                           	callstack 0
  3713                           
  3714 ;; *************** function _handle_actuator_push *****************
  3715 ;; Defined at:
  3716 ;;		line 235 in file "main.c"
  3717 ;; Parameters:    Size  Location     Type
  3718 ;;  act_pos         2   16[COMRAM] int 
  3719 ;; Auto vars:     Size  Location     Type
  3720 ;;  decision        2   19[COMRAM] int 
  3721 ;; Return value:  Size  Location     Type
  3722 ;;                  2   16[COMRAM] int 
  3723 ;; Registers used:
  3724 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3725 ;; Tracked objects:
  3726 ;;		On entry : 3F/0
  3727 ;;		On exit  : 0/0
  3728 ;;		Unchanged: 0/0
  3729 ;; Data sizes:     COMRAM   BANK0   BANK1
  3730 ;;      Params:         2       0       0
  3731 ;;      Locals:         2       0       0
  3732 ;;      Temps:          1       0       0
  3733 ;;      Totals:         5       0       0
  3734 ;;Total ram usage:        5 bytes
  3735 ;; Hardware stack levels used: 1
  3736 ;; Hardware stack levels required when called: 6
  3737 ;; This function calls:
  3738 ;;		_ADC_Read
  3739 ;;		_Lcd_Clear
  3740 ;;		_Lcd_Set_Cursor
  3741 ;;		_Lcd_Write_String
  3742 ;;		_input_option
  3743 ;;		_move_actuator
  3744 ;;		_start_process_screen
  3745 ;;		_usePeripheral
  3746 ;; This function is called by:
  3747 ;;		_infusion
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751                           	psect	text18
  3752   000DA4                     __ptext18:
  3753                           	callstack 0
  3754   000DA4                     _handle_actuator_push:
  3755                           	callstack 22
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;main.c: 236:     int decision;;main.c: 237:     start_process_screen("PUSHING");
  3759                           
  3760                           ;incstack = 0
  3761   000DA4  0EAC               	movlw	low STR_8
  3762   000DA6  6E0F               	movwf	start_process_screen@word^0,c
  3763   000DA8  0E1F               	movlw	high STR_8
  3764   000DAA  6E10               	movwf	(start_process_screen@word+1)^0,c
  3765   000DAC  ECD0  F009         	call	_start_process_screen	;wreg free
  3766                           
  3767                           ;main.c: 238:     decision = input_option();
  3768   000DB0  EC84  F008         	call	_input_option	;wreg free
  3769   000DB4  C008  F014         	movff	?_input_option,handle_actuator_push@decision
  3770   000DB8  C009  F015         	movff	?_input_option+1,handle_actuator_push@decision+1
  3771                           
  3772                           ;main.c: 240:     if(decision == 1){
  3773   000DBC  0414               	decf	handle_actuator_push@decision^0,w,c
  3774   000DBE  1015               	iorwf	(handle_actuator_push@decision+1)^0,w,c
  3775   000DC0  A4D8               	btfss	status,2,c
  3776   000DC2  0012               	return	
  3777                           
  3778                           ;main.c: 241:         Lcd_Clear();
  3779   000DC4  ECAE  F00D         	call	_Lcd_Clear	;wreg free
  3780                           
  3781                           ;main.c: 242:         Lcd_Set_Cursor( position_row_1,position_column_1);
  3782   000DC8  0E01               	movlw	1
  3783   000DCA  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  3784   000DCC  0E01               	movlw	1
  3785   000DCE  EC34  F008         	call	_Lcd_Set_Cursor
  3786                           
  3787                           ;main.c: 243:         Lcd_Write_String("PUSHING...");
  3788   000DD2  0E67               	movlw	low STR_27
  3789   000DD4  6E09               	movwf	Lcd_Write_String@a^0,c
  3790   000DD6  0E1F               	movlw	high STR_27
  3791   000DD8  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  3792   000DDA  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  3793                           
  3794                           ;main.c: 245:         while(act_pos > 20){
  3795   000DDE  D02A               	goto	l4299
  3796   000DE0                     l4293:
  3797                           
  3798                           ;main.c: 246:             act_pos = ADC_Read(0);
  3799   000DE0  0E00               	movlw	0
  3800   000DE2  EC10  F00A         	call	_ADC_Read
  3801   000DE6  C005  F011         	movff	?_ADC_Read,handle_actuator_push@act_pos
  3802   000DEA  C006  F012         	movff	?_ADC_Read+1,handle_actuator_push@act_pos+1
  3803                           
  3804                           ;main.c: 247:             usePeripheral(orange_led, on);
  3805   000DEE  0E00               	movlw	0
  3806   000DF0  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  3807   000DF2  0E01               	movlw	1
  3808   000DF4  6E05               	movwf	usePeripheral@peripheral^0,c
  3809   000DF6  0E00               	movlw	0
  3810   000DF8  6E08               	movwf	(usePeripheral@action+1)^0,c
  3811   000DFA  0E01               	movlw	1
  3812   000DFC  6E07               	movwf	usePeripheral@action^0,c
  3813   000DFE  EC8D  F007         	call	_usePeripheral	;wreg free
  3814                           
  3815                           ;main.c: 248:             _delay((unsigned long)((25)*(8000000L/4000.0)));
  3816   000E02  0E41               	movlw	65
  3817   000E04  6E13               	movwf	??_handle_actuator_push^0,c
  3818   000E06  0EEE               	movlw	238
  3819   000E08                     u4647:
  3820   000E08  2EE8               	decfsz	wreg,f,c
  3821   000E0A  D7FE               	bra	u4647
  3822   000E0C  2E13               	decfsz	??_handle_actuator_push^0,f,c
  3823   000E0E  D7FC               	bra	u4647
  3824   000E10  D000               	nop2	
  3825                           
  3826                           ;main.c: 249:             move_actuator(backwards, 1023);
  3827   000E12  0E00               	movlw	0
  3828   000E14  6E0A               	movwf	(move_actuator@direction+1)^0,c
  3829   000E16  0E00               	movlw	0
  3830   000E18  6E09               	movwf	move_actuator@direction^0,c
  3831   000E1A  0E03               	movlw	3
  3832   000E1C  6E0C               	movwf	(move_actuator@speed+1)^0,c
  3833   000E1E  680B               	setf	move_actuator@speed^0,c
  3834   000E20  EC0E  F00C         	call	_move_actuator	;wreg free
  3835                           
  3836                           ;main.c: 250:             _delay((unsigned long)((25)*(8000000L/4000.0)));
  3837   000E24  0E41               	movlw	65
  3838   000E26  6E13               	movwf	??_handle_actuator_push^0,c
  3839   000E28  0EEE               	movlw	238
  3840   000E2A                     u4657:
  3841   000E2A  2EE8               	decfsz	wreg,f,c
  3842   000E2C  D7FE               	bra	u4657
  3843   000E2E  2E13               	decfsz	??_handle_actuator_push^0,f,c
  3844   000E30  D7FC               	bra	u4657
  3845   000E32  D000               	nop2	
  3846   000E34                     l4299:
  3847                           
  3848                           ;main.c: 245:         while(act_pos > 20){
  3849   000E34  BE12               	btfsc	(handle_actuator_push@act_pos+1)^0,7,c
  3850   000E36  D006               	goto	u4460
  3851   000E38  5012               	movf	(handle_actuator_push@act_pos+1)^0,w,c
  3852   000E3A  E1D2               	bnz	l4293
  3853   000E3C  0E15               	movlw	21
  3854   000E3E  5C11               	subwf	handle_actuator_push@act_pos^0,w,c
  3855   000E40  B0D8               	btfsc	status,0,c
  3856   000E42  D7CE               	goto	l4293
  3857   000E44                     u4460:
  3858                           
  3859                           ;main.c: 253:         move_actuator(forward, 0);
  3860   000E44  0E00               	movlw	0
  3861   000E46  6E0A               	movwf	(move_actuator@direction+1)^0,c
  3862   000E48  0E01               	movlw	1
  3863   000E4A  6E09               	movwf	move_actuator@direction^0,c
  3864   000E4C  0E00               	movlw	0
  3865   000E4E  6E0C               	movwf	(move_actuator@speed+1)^0,c
  3866   000E50  0E00               	movlw	0
  3867   000E52  6E0B               	movwf	move_actuator@speed^0,c
  3868   000E54  EC0E  F00C         	call	_move_actuator	;wreg free
  3869                           
  3870                           ;main.c: 254:         usePeripheral(orange_led, off);
  3871   000E58  0E00               	movlw	0
  3872   000E5A  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  3873   000E5C  0E01               	movlw	1
  3874   000E5E  6E05               	movwf	usePeripheral@peripheral^0,c
  3875   000E60  0E00               	movlw	0
  3876   000E62  6E08               	movwf	(usePeripheral@action+1)^0,c
  3877   000E64  0E00               	movlw	0
  3878   000E66  6E07               	movwf	usePeripheral@action^0,c
  3879   000E68  EC8D  F007         	call	_usePeripheral	;wreg free
  3880   000E6C  0012               	return		;funcret
  3881   000E6E                     __end_of_handle_actuator_push:
  3882                           	callstack 0
  3883                           
  3884 ;; *************** function _usePeripheral *****************
  3885 ;; Defined at:
  3886 ;;		line 25 in file "helper.c"
  3887 ;; Parameters:    Size  Location     Type
  3888 ;;  peripheral      2    4[COMRAM] int 
  3889 ;;  action          2    6[COMRAM] int 
  3890 ;; Auto vars:     Size  Location     Type
  3891 ;;		None
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  1    wreg      void 
  3894 ;; Registers used:
  3895 ;;		wreg, status,2, status,0
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMRAM   BANK0   BANK1
  3901 ;;      Params:         4       0       0
  3902 ;;      Locals:         0       0       0
  3903 ;;      Temps:          0       0       0
  3904 ;;      Totals:         4       0       0
  3905 ;;Total ram usage:        4 bytes
  3906 ;; Hardware stack levels used: 1
  3907 ;; Hardware stack levels required when called: 2
  3908 ;; This function calls:
  3909 ;;		Nothing
  3910 ;; This function is called by:
  3911 ;;		_system_init
  3912 ;;		_handle_actuator_push
  3913 ;;		_infusion
  3914 ;; This function uses a non-reentrant model
  3915 ;;
  3916                           
  3917                           	psect	text19
  3918   000F1A                     __ptext19:
  3919                           	callstack 0
  3920   000F1A                     _usePeripheral:
  3921                           	callstack 27
  3922                           
  3923                           ;helper.c: 27:     if(peripheral == green_led && action == on){
  3924                           
  3925                           ;incstack = 0
  3926   000F1A  5005               	movf	usePeripheral@peripheral^0,w,c
  3927   000F1C  1006               	iorwf	(usePeripheral@peripheral+1)^0,w,c
  3928   000F1E  A4D8               	btfss	status,2,c
  3929   000F20  D006               	goto	l4131
  3930   000F22  0407               	decf	usePeripheral@action^0,w,c
  3931   000F24  1008               	iorwf	(usePeripheral@action+1)^0,w,c
  3932   000F26  A4D8               	btfss	status,2,c
  3933   000F28  D002               	goto	l4131
  3934                           
  3935                           ;helper.c: 28:         LATA2 = on;
  3936   000F2A  8489               	bsf	3977,2,c	;volatile
  3937                           
  3938                           ;helper.c: 29:     }else if(peripheral == green_led && action == off){
  3939   000F2C  0012               	return	
  3940   000F2E                     l4131:
  3941   000F2E  5005               	movf	usePeripheral@peripheral^0,w,c
  3942   000F30  1006               	iorwf	(usePeripheral@peripheral+1)^0,w,c
  3943   000F32  A4D8               	btfss	status,2,c
  3944   000F34  D006               	goto	l4137
  3945   000F36  5007               	movf	usePeripheral@action^0,w,c
  3946   000F38  1008               	iorwf	(usePeripheral@action+1)^0,w,c
  3947   000F3A  A4D8               	btfss	status,2,c
  3948   000F3C  D002               	goto	l4137
  3949                           
  3950                           ;helper.c: 30:         LATA2 = off;
  3951   000F3E  9489               	bcf	3977,2,c	;volatile
  3952                           
  3953                           ;helper.c: 31:     }else if(peripheral == orange_led && action == on){
  3954   000F40  0012               	return	
  3955   000F42                     l4137:
  3956   000F42  0405               	decf	usePeripheral@peripheral^0,w,c
  3957   000F44  1006               	iorwf	(usePeripheral@peripheral+1)^0,w,c
  3958   000F46  A4D8               	btfss	status,2,c
  3959   000F48  D006               	goto	l4143
  3960   000F4A  0407               	decf	usePeripheral@action^0,w,c
  3961   000F4C  1008               	iorwf	(usePeripheral@action+1)^0,w,c
  3962   000F4E  A4D8               	btfss	status,2,c
  3963   000F50  D002               	goto	l4143
  3964                           
  3965                           ;helper.c: 32:         LATC6 = on;
  3966   000F52  8C8B               	bsf	3979,6,c	;volatile
  3967                           
  3968                           ;helper.c: 33:     }else if(peripheral == orange_led && action == off){
  3969   000F54  0012               	return	
  3970   000F56                     l4143:
  3971   000F56  0405               	decf	usePeripheral@peripheral^0,w,c
  3972   000F58  1006               	iorwf	(usePeripheral@peripheral+1)^0,w,c
  3973   000F5A  A4D8               	btfss	status,2,c
  3974   000F5C  D006               	goto	l4149
  3975   000F5E  5007               	movf	usePeripheral@action^0,w,c
  3976   000F60  1008               	iorwf	(usePeripheral@action+1)^0,w,c
  3977   000F62  A4D8               	btfss	status,2,c
  3978   000F64  D002               	goto	l4149
  3979                           
  3980                           ;helper.c: 34:         LATC6 = off;
  3981   000F66  9C8B               	bcf	3979,6,c	;volatile
  3982                           
  3983                           ;helper.c: 35:     }
  3984   000F68  0012               	return	
  3985   000F6A                     l4149:
  3986   000F6A  0E02               	movlw	2
  3987   000F6C  1805               	xorwf	usePeripheral@peripheral^0,w,c
  3988   000F6E  1006               	iorwf	(usePeripheral@peripheral+1)^0,w,c
  3989   000F70  A4D8               	btfss	status,2,c
  3990   000F72  D006               	goto	l4155
  3991   000F74  0407               	decf	usePeripheral@action^0,w,c
  3992   000F76  1008               	iorwf	(usePeripheral@action+1)^0,w,c
  3993   000F78  A4D8               	btfss	status,2,c
  3994   000F7A  D002               	goto	l4155
  3995                           
  3996                           ;helper.c: 37:         LATC5 = on;
  3997   000F7C  8A8B               	bsf	3979,5,c	;volatile
  3998                           
  3999                           ;helper.c: 38:     }else if(peripheral == red_led && action == off){
  4000   000F7E  0012               	return	
  4001   000F80                     l4155:
  4002   000F80  0E02               	movlw	2
  4003   000F82  1805               	xorwf	usePeripheral@peripheral^0,w,c
  4004   000F84  1006               	iorwf	(usePeripheral@peripheral+1)^0,w,c
  4005   000F86  A4D8               	btfss	status,2,c
  4006   000F88  D006               	goto	l4161
  4007   000F8A  5007               	movf	usePeripheral@action^0,w,c
  4008   000F8C  1008               	iorwf	(usePeripheral@action+1)^0,w,c
  4009   000F8E  A4D8               	btfss	status,2,c
  4010   000F90  D002               	goto	l4161
  4011                           
  4012                           ;helper.c: 39:         LATC5 = off;
  4013   000F92  9A8B               	bcf	3979,5,c	;volatile
  4014                           
  4015                           ;helper.c: 40:     }else if(peripheral == buzzer && action == on){
  4016   000F94  0012               	return	
  4017   000F96                     l4161:
  4018   000F96  0E03               	movlw	3
  4019   000F98  1805               	xorwf	usePeripheral@peripheral^0,w,c
  4020   000F9A  1006               	iorwf	(usePeripheral@peripheral+1)^0,w,c
  4021   000F9C  A4D8               	btfss	status,2,c
  4022   000F9E  D006               	goto	l4167
  4023   000FA0  0407               	decf	usePeripheral@action^0,w,c
  4024   000FA2  1008               	iorwf	(usePeripheral@action+1)^0,w,c
  4025   000FA4  A4D8               	btfss	status,2,c
  4026   000FA6  D002               	goto	l4167
  4027                           
  4028                           ;helper.c: 41:         LATC4 = on;
  4029   000FA8  888B               	bsf	3979,4,c	;volatile
  4030                           
  4031                           ;helper.c: 42:     }else if(peripheral == buzzer && action == off){
  4032   000FAA  0012               	return	
  4033   000FAC                     l4167:
  4034   000FAC  0E03               	movlw	3
  4035   000FAE  1805               	xorwf	usePeripheral@peripheral^0,w,c
  4036   000FB0  1006               	iorwf	(usePeripheral@peripheral+1)^0,w,c
  4037   000FB2  A4D8               	btfss	status,2,c
  4038   000FB4  0012               	return	
  4039   000FB6  5007               	movf	usePeripheral@action^0,w,c
  4040   000FB8  1008               	iorwf	(usePeripheral@action+1)^0,w,c
  4041   000FBA  A4D8               	btfss	status,2,c
  4042   000FBC  0012               	return	
  4043                           
  4044                           ;helper.c: 43:         LATC4 = off;
  4045   000FBE  988B               	bcf	3979,4,c	;volatile
  4046   000FC0  0012               	return	
  4047   000FC2                     __end_of_usePeripheral:
  4048                           	callstack 0
  4049                           
  4050 ;; *************** function _start_process_screen *****************
  4051 ;; Defined at:
  4052 ;;		line 101 in file "helper.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;  word            2   14[COMRAM] PTR unsigned char 
  4055 ;;		 -> STR_30(9), STR_28(8), STR_26(8), 
  4056 ;; Auto vars:     Size  Location     Type
  4057 ;;		None
  4058 ;; Return value:  Size  Location     Type
  4059 ;;                  1    wreg      void 
  4060 ;; Registers used:
  4061 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4062 ;; Tracked objects:
  4063 ;;		On entry : 3F/0
  4064 ;;		On exit  : 0/0
  4065 ;;		Unchanged: 0/0
  4066 ;; Data sizes:     COMRAM   BANK0   BANK1
  4067 ;;      Params:         2       0       0
  4068 ;;      Locals:         0       0       0
  4069 ;;      Temps:          0       0       0
  4070 ;;      Totals:         2       0       0
  4071 ;;Total ram usage:        2 bytes
  4072 ;; Hardware stack levels used: 1
  4073 ;; Hardware stack levels required when called: 5
  4074 ;; This function calls:
  4075 ;;		_Lcd_Clear
  4076 ;;		_Lcd_Set_Cursor
  4077 ;;		_Lcd_Write_String
  4078 ;; This function is called by:
  4079 ;;		_handle_actuator_push
  4080 ;; This function uses a non-reentrant model
  4081 ;;
  4082                           
  4083                           	psect	text20
  4084   0013A0                     __ptext20:
  4085                           	callstack 0
  4086   0013A0                     _start_process_screen:
  4087                           	callstack 22
  4088                           
  4089                           ; BSR set to: 0
  4090                           ;helper.c: 103:     Lcd_Clear();
  4091                           
  4092                           ;incstack = 0
  4093   0013A0  ECAE  F00D         	call	_Lcd_Clear	;wreg free
  4094                           
  4095                           ;helper.c: 104:     Lcd_Set_Cursor(position_row_1, position_column_1);
  4096   0013A4  0E01               	movlw	1
  4097   0013A6  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  4098   0013A8  0E01               	movlw	1
  4099   0013AA  EC34  F008         	call	_Lcd_Set_Cursor
  4100                           
  4101                           ;helper.c: 105:     Lcd_Write_String("DO YOU WANT TO");
  4102   0013AE  0E23               	movlw	low STR_9
  4103   0013B0  6E09               	movwf	Lcd_Write_String@a^0,c
  4104   0013B2  0E1F               	movlw	high STR_9
  4105   0013B4  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  4106   0013B6  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  4107                           
  4108                           ;helper.c: 106:     Lcd_Set_Cursor( position_row_2,position_column_1);
  4109   0013BA  0E01               	movlw	1
  4110   0013BC  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  4111   0013BE  0E02               	movlw	2
  4112   0013C0  EC34  F008         	call	_Lcd_Set_Cursor
  4113                           
  4114                           ;helper.c: 107:     Lcd_Write_String("START ");
  4115   0013C4  0EC2               	movlw	low STR_16
  4116   0013C6  6E09               	movwf	Lcd_Write_String@a^0,c
  4117   0013C8  0E1F               	movlw	high STR_16
  4118   0013CA  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  4119   0013CC  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  4120                           
  4121                           ;helper.c: 108:     Lcd_Write_String(word);
  4122   0013D0  C00F  F009         	movff	start_process_screen@word,Lcd_Write_String@a
  4123   0013D4  C010  F00A         	movff	start_process_screen@word+1,Lcd_Write_String@a+1
  4124   0013D8  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  4125                           
  4126                           ;helper.c: 109:     Lcd_Set_Cursor( position_row_3,position_column_1);
  4127   0013DC  0E01               	movlw	1
  4128   0013DE  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  4129   0013E0  0E03               	movlw	3
  4130   0013E2  EC34  F008         	call	_Lcd_Set_Cursor
  4131                           
  4132                           ;helper.c: 110:     Lcd_Write_String("1. YES");
  4133   0013E6  0ED0               	movlw	low STR_12
  4134   0013E8  6E09               	movwf	Lcd_Write_String@a^0,c
  4135   0013EA  0E1F               	movlw	high STR_12
  4136   0013EC  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  4137   0013EE  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  4138                           
  4139                           ;helper.c: 111:     Lcd_Set_Cursor(position_row_4, position_column_1);
  4140   0013F2  0E01               	movlw	1
  4141   0013F4  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  4142   0013F6  0E04               	movlw	4
  4143   0013F8  EC34  F008         	call	_Lcd_Set_Cursor
  4144                           
  4145                           ;helper.c: 112:     Lcd_Write_String("2. NO");
  4146   0013FC  0ED7               	movlw	low STR_13
  4147   0013FE  6E09               	movwf	Lcd_Write_String@a^0,c
  4148   001400  0E1F               	movlw	high STR_13
  4149   001402  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  4150   001404  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  4151                           
  4152                           ;helper.c: 113:     Lcd_Set_Cursor(position_row_4,position_column_17 );
  4153   001408  0E11               	movlw	17
  4154   00140A  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  4155   00140C  0E04               	movlw	4
  4156   00140E  EC34  F008         	call	_Lcd_Set_Cursor
  4157                           
  4158                           ;helper.c: 114:     Lcd_Write_String("BACK");
  4159   001412  0EE7               	movlw	low STR_5
  4160   001414  6E09               	movwf	Lcd_Write_String@a^0,c
  4161   001416  0E1F               	movlw	high STR_5
  4162   001418  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  4163   00141A  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  4164   00141E  0012               	return		;funcret
  4165   001420                     __end_of_start_process_screen:
  4166                           	callstack 0
  4167                           
  4168 ;; *************** function _Lcd_Write_String *****************
  4169 ;; Defined at:
  4170 ;;		line 123 in file "lcd.c"
  4171 ;; Parameters:    Size  Location     Type
  4172 ;;  a               2    8[COMRAM] PTR unsigned char 
  4173 ;;		 -> STR_43(3), STR_42(3), STR_41(2), STR_40(7), 
  4174 ;;		 -> STR_39(19), STR_37(4), STR_35(5), STR_33(5), 
  4175 ;;		 -> infusion@buff(5), STR_31(7), STR_30(9), STR_29(11), 
  4176 ;;		 -> STR_28(8), STR_27(11), STR_26(8), input_numbers@outputBuffer(2), 
  4177 ;;		 -> STR_25(5), STR_24(17), STR_23(21), STR_22(9), 
  4178 ;;		 -> STR_21(21), STR_20(14), STR_19(5), STR_18(6), 
  4179 ;;		 -> STR_17(7), STR_16(7), STR_15(15), STR_14(5), 
  4180 ;;		 -> STR_13(6), STR_12(7), STR_11(12), STR_10(11), 
  4181 ;;		 -> STR_9(15), STR_8(8), STR_7(10), STR_6(15), 
  4182 ;;		 -> STR_5(5), STR_4(3), STR_3(2), STR_2(12), 
  4183 ;;		 -> STR_1(7), 
  4184 ;; Auto vars:     Size  Location     Type
  4185 ;;  i               2   12[COMRAM] int 
  4186 ;; Return value:  Size  Location     Type
  4187 ;;                  1    wreg      void 
  4188 ;; Registers used:
  4189 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4190 ;; Tracked objects:
  4191 ;;		On entry : 0/0
  4192 ;;		On exit  : 0/0
  4193 ;;		Unchanged: 0/0
  4194 ;; Data sizes:     COMRAM   BANK0   BANK1
  4195 ;;      Params:         2       0       0
  4196 ;;      Locals:         2       0       0
  4197 ;;      Temps:          2       0       0
  4198 ;;      Totals:         6       0       0
  4199 ;;Total ram usage:        6 bytes
  4200 ;; Hardware stack levels used: 1
  4201 ;; Hardware stack levels required when called: 4
  4202 ;; This function calls:
  4203 ;;		_Lcd_Write_Char
  4204 ;; This function is called by:
  4205 ;;		_input_value
  4206 ;;		_start_process_screen
  4207 ;;		_menu
  4208 ;;		_manual
  4209 ;;		_handle_actuator_push
  4210 ;;		_infusion
  4211 ;; This function uses a non-reentrant model
  4212 ;;
  4213                           
  4214                           	psect	text21
  4215   00149C                     __ptext21:
  4216                           	callstack 0
  4217   00149C                     _Lcd_Write_String:
  4218                           	callstack 25
  4219                           
  4220                           ;lcd.c: 123: void Lcd_Write_String(char *a);lcd.c: 124: {;lcd.c: 125:  int i;;lcd.c: 126
      +                          :  for(i=0;a[i]!='\0';i++)
  4221                           
  4222                           ;incstack = 0
  4223   00149C  0E00               	movlw	0
  4224   00149E  6E0E               	movwf	(Lcd_Write_String@i+1)^0,c
  4225   0014A0  0E00               	movlw	0
  4226   0014A2  6E0D               	movwf	Lcd_Write_String@i^0,c
  4227   0014A4  D01A               	goto	l3923
  4228   0014A6                     l3919:
  4229                           
  4230                           ;lcd.c: 127:     Lcd_Write_Char(a[i]);
  4231   0014A6  500D               	movf	Lcd_Write_String@i^0,w,c
  4232   0014A8  2409               	addwf	Lcd_Write_String@a^0,w,c
  4233   0014AA  6E0B               	movwf	??_Lcd_Write_String^0,c
  4234   0014AC  500E               	movf	(Lcd_Write_String@i+1)^0,w,c
  4235   0014AE  200A               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  4236   0014B0  6E0C               	movwf	(??_Lcd_Write_String+1)^0,c
  4237   0014B2  C00B  FFF6         	movff	??_Lcd_Write_String,tblptrl
  4238   0014B6  C00C  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  4239   0014BA  6AF8               	clrf	tblptru,c
  4240   0014BC  0E01               	movlw	(high __ramtop+-1)
  4241   0014BE  64F7               	cpfsgt	tblptrh,c
  4242   0014C0  D003               	bra	u3787
  4243   0014C2  0008               	tblrd		*
  4244   0014C4  50F5               	movf	tablat,w,c
  4245   0014C6  D005               	bra	u3780
  4246   0014C8                     u3787:
  4247   0014C8  CFF6 FFE1          	movff	tblptrl,fsr1l
  4248   0014CC  CFF7 FFE2          	movff	tblptrh,fsr1h
  4249   0014D0  50E7               	movf	indf1,w,c
  4250   0014D2                     u3780:
  4251   0014D2  EC9A  F00C         	call	_Lcd_Write_Char
  4252   0014D6  4A0D               	infsnz	Lcd_Write_String@i^0,f,c
  4253   0014D8  2A0E               	incf	(Lcd_Write_String@i+1)^0,f,c
  4254   0014DA                     l3923:
  4255   0014DA  500D               	movf	Lcd_Write_String@i^0,w,c
  4256   0014DC  2409               	addwf	Lcd_Write_String@a^0,w,c
  4257   0014DE  6E0B               	movwf	??_Lcd_Write_String^0,c
  4258   0014E0  500E               	movf	(Lcd_Write_String@i+1)^0,w,c
  4259   0014E2  200A               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  4260   0014E4  6E0C               	movwf	(??_Lcd_Write_String+1)^0,c
  4261   0014E6  C00B  FFF6         	movff	??_Lcd_Write_String,tblptrl
  4262   0014EA  C00C  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  4263   0014EE  6AF8               	clrf	tblptru,c
  4264   0014F0  0E01               	movlw	(high __ramtop+-1)
  4265   0014F2  64F7               	cpfsgt	tblptrh,c
  4266   0014F4  D003               	bra	u3797
  4267   0014F6  0008               	tblrd		*
  4268   0014F8  50F5               	movf	tablat,w,c
  4269   0014FA  D005               	bra	u3790
  4270   0014FC                     u3797:
  4271   0014FC  CFF6 FFE1          	movff	tblptrl,fsr1l
  4272   001500  CFF7 FFE2          	movff	tblptrh,fsr1h
  4273   001504  50E7               	movf	indf1,w,c
  4274   001506                     u3790:
  4275   001506  0900               	iorlw	0
  4276   001508  B4D8               	btfsc	status,2,c
  4277   00150A  0012               	return	
  4278   00150C  D7CC               	goto	l3919
  4279   00150E                     __end_of_Lcd_Write_String:
  4280                           	callstack 0
  4281                           
  4282 ;; *************** function _Lcd_Write_Char *****************
  4283 ;; Defined at:
  4284 ;;		line 107 in file "lcd.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;  a               1    wreg     unsigned char 
  4287 ;; Auto vars:     Size  Location     Type
  4288 ;;  a               1    7[COMRAM] unsigned char 
  4289 ;;  y               1    6[COMRAM] unsigned char 
  4290 ;;  temp            1    5[COMRAM] unsigned char 
  4291 ;; Return value:  Size  Location     Type
  4292 ;;                  1    wreg      void 
  4293 ;; Registers used:
  4294 ;;		wreg, status,2, status,0, cstack
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMRAM   BANK0   BANK1
  4300 ;;      Params:         0       0       0
  4301 ;;      Locals:         3       0       0
  4302 ;;      Temps:          0       0       0
  4303 ;;      Totals:         3       0       0
  4304 ;;Total ram usage:        3 bytes
  4305 ;; Hardware stack levels used: 1
  4306 ;; Hardware stack levels required when called: 3
  4307 ;; This function calls:
  4308 ;;		_Lcd_Port
  4309 ;; This function is called by:
  4310 ;;		_Lcd_Write_String
  4311 ;; This function uses a non-reentrant model
  4312 ;;
  4313                           
  4314                           	psect	text22
  4315   001934                     __ptext22:
  4316                           	callstack 0
  4317   001934                     _Lcd_Write_Char:
  4318                           	callstack 25
  4319                           
  4320                           ;incstack = 0
  4321                           ;Lcd_Write_Char@a stored from wreg
  4322   001934  6E08               	movwf	Lcd_Write_Char@a^0,c
  4323                           
  4324                           ;lcd.c: 107: void Lcd_Write_Char(char a);lcd.c: 108: {;lcd.c: 109:    char temp,y;;lcd.c
      +                          : 110:    temp = a&0x0F;
  4325   001936  5008               	movf	Lcd_Write_Char@a^0,w,c
  4326   001938  0B0F               	andlw	15
  4327   00193A  6E06               	movwf	Lcd_Write_Char@temp^0,c
  4328                           
  4329                           ;lcd.c: 111:    y = a&0xF0;
  4330   00193C  5008               	movf	Lcd_Write_Char@a^0,w,c
  4331   00193E  0BF0               	andlw	240
  4332   001940  6E07               	movwf	Lcd_Write_Char@y^0,c
  4333                           
  4334                           ;lcd.c: 112:    RD2 = 1;
  4335   001942  8483               	bsf	3971,2,c	;volatile
  4336                           
  4337                           ;lcd.c: 113:    Lcd_Port(y>>4);
  4338   001944  3807               	swapf	Lcd_Write_Char@y^0,w,c
  4339   001946  0B0F               	andlw	15
  4340   001948  ECED  F00C         	call	_Lcd_Port
  4341                           
  4342                           ;lcd.c: 114:    RD3 = 1;
  4343   00194C  8683               	bsf	3971,3,c	;volatile
  4344                           
  4345                           ;lcd.c: 115:    _delay((unsigned long)((40)*(8000000L/4000000.0)));
  4346   00194E  0E1A               	movlw	26
  4347   001950                     u4667:
  4348   001950  2EE8               	decfsz	wreg,f,c
  4349   001952  D7FE               	bra	u4667
  4350   001954  D000               	nop2	
  4351                           
  4352                           ;lcd.c: 116:    RD3 = 0;
  4353   001956  9683               	bcf	3971,3,c	;volatile
  4354                           
  4355                           ;lcd.c: 117:    Lcd_Port(temp);
  4356   001958  5006               	movf	Lcd_Write_Char@temp^0,w,c
  4357   00195A  ECED  F00C         	call	_Lcd_Port
  4358                           
  4359                           ;lcd.c: 118:    RD3 = 1;
  4360   00195E  8683               	bsf	3971,3,c	;volatile
  4361                           
  4362                           ;lcd.c: 119:    _delay((unsigned long)((40)*(8000000L/4000000.0)));
  4363   001960  0E1A               	movlw	26
  4364   001962                     u4677:
  4365   001962  2EE8               	decfsz	wreg,f,c
  4366   001964  D7FE               	bra	u4677
  4367   001966  D000               	nop2	
  4368                           
  4369                           ;lcd.c: 120:    RD3 = 0;
  4370   001968  9683               	bcf	3971,3,c	;volatile
  4371   00196A  0012               	return		;funcret
  4372   00196C                     __end_of_Lcd_Write_Char:
  4373                           	callstack 0
  4374                           
  4375 ;; *************** function _Lcd_Set_Cursor *****************
  4376 ;; Defined at:
  4377 ;;		line 52 in file "lcd.c"
  4378 ;; Parameters:    Size  Location     Type
  4379 ;;  a               1    wreg     unsigned char 
  4380 ;;  b               1    7[COMRAM] unsigned char 
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;  a               1    8[COMRAM] unsigned char 
  4383 ;;  temp            1   11[COMRAM] unsigned char 
  4384 ;;  y               1   10[COMRAM] unsigned char 
  4385 ;;  z               1    9[COMRAM] unsigned char 
  4386 ;; Return value:  Size  Location     Type
  4387 ;;                  1    wreg      void 
  4388 ;; Registers used:
  4389 ;;		wreg, status,2, status,0, cstack
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMRAM   BANK0   BANK1
  4395 ;;      Params:         1       0       0
  4396 ;;      Locals:         4       0       0
  4397 ;;      Temps:          0       0       0
  4398 ;;      Totals:         5       0       0
  4399 ;;Total ram usage:        5 bytes
  4400 ;; Hardware stack levels used: 1
  4401 ;; Hardware stack levels required when called: 4
  4402 ;; This function calls:
  4403 ;;		_Lcd_Cmd
  4404 ;; This function is called by:
  4405 ;;		_input_value
  4406 ;;		_start_process_screen
  4407 ;;		_menu
  4408 ;;		_manual
  4409 ;;		_handle_actuator_push
  4410 ;;		_infusion
  4411 ;; This function uses a non-reentrant model
  4412 ;;
  4413                           
  4414                           	psect	text23
  4415   001068                     __ptext23:
  4416                           	callstack 0
  4417   001068                     _Lcd_Set_Cursor:
  4418                           	callstack 25
  4419                           
  4420                           ;incstack = 0
  4421                           ;Lcd_Set_Cursor@a stored from wreg
  4422   001068  6E09               	movwf	Lcd_Set_Cursor@a^0,c
  4423                           
  4424                           ;lcd.c: 52: void Lcd_Set_Cursor(char a, char b);lcd.c: 53: {;lcd.c: 54:  char temp,z,y;;
      +                          lcd.c: 55:  if(a == 1)
  4425   00106A  0409               	decf	Lcd_Set_Cursor@a^0,w,c
  4426   00106C  A4D8               	btfss	status,2,c
  4427   00106E  D010               	goto	l3893
  4428                           
  4429                           ;lcd.c: 56:  {;lcd.c: 57:    temp = 0x80 + b - 1;
  4430   001070  5008               	movf	Lcd_Set_Cursor@b^0,w,c
  4431   001072  0F7F               	addlw	127
  4432   001074  6E0C               	movwf	Lcd_Set_Cursor@temp^0,c
  4433                           
  4434                           ;lcd.c: 58:   z = temp>>4;
  4435   001076  380C               	swapf	Lcd_Set_Cursor@temp^0,w,c
  4436   001078  0B0F               	andlw	15
  4437   00107A  6E0A               	movwf	Lcd_Set_Cursor@z^0,c
  4438                           
  4439                           ;lcd.c: 59:   y = temp & 0x0F;
  4440   00107C  500C               	movf	Lcd_Set_Cursor@temp^0,w,c
  4441   00107E  0B0F               	andlw	15
  4442   001080  6E0B               	movwf	Lcd_Set_Cursor@y^0,c
  4443                           
  4444                           ;lcd.c: 60:   Lcd_Cmd(z);
  4445   001082  500A               	movf	Lcd_Set_Cursor@z^0,w,c
  4446   001084  EC50  F00D         	call	_Lcd_Cmd
  4447                           
  4448                           ;lcd.c: 61:   Lcd_Cmd(y);
  4449   001088  500B               	movf	Lcd_Set_Cursor@y^0,w,c
  4450   00108A  EC50  F00D         	call	_Lcd_Cmd
  4451                           
  4452                           ;lcd.c: 62:  }
  4453   00108E  0012               	return	
  4454   001090                     l3893:
  4455   001090  0E02               	movlw	2
  4456   001092  1809               	xorwf	Lcd_Set_Cursor@a^0,w,c
  4457   001094  A4D8               	btfss	status,2,c
  4458   001096  D010               	goto	l3901
  4459                           
  4460                           ;lcd.c: 64:  {;lcd.c: 65:   temp = 0xC0 + b - 1;
  4461   001098  5008               	movf	Lcd_Set_Cursor@b^0,w,c
  4462   00109A  0FBF               	addlw	191
  4463   00109C  6E0C               	movwf	Lcd_Set_Cursor@temp^0,c
  4464                           
  4465                           ;lcd.c: 66:   z = temp>>4;
  4466   00109E  380C               	swapf	Lcd_Set_Cursor@temp^0,w,c
  4467   0010A0  0B0F               	andlw	15
  4468   0010A2  6E0A               	movwf	Lcd_Set_Cursor@z^0,c
  4469                           
  4470                           ;lcd.c: 67:   y = temp & 0x0F;
  4471   0010A4  500C               	movf	Lcd_Set_Cursor@temp^0,w,c
  4472   0010A6  0B0F               	andlw	15
  4473   0010A8  6E0B               	movwf	Lcd_Set_Cursor@y^0,c
  4474                           
  4475                           ;lcd.c: 68:   Lcd_Cmd(z);
  4476   0010AA  500A               	movf	Lcd_Set_Cursor@z^0,w,c
  4477   0010AC  EC50  F00D         	call	_Lcd_Cmd
  4478                           
  4479                           ;lcd.c: 69:   Lcd_Cmd(y);
  4480   0010B0  500B               	movf	Lcd_Set_Cursor@y^0,w,c
  4481   0010B2  EC50  F00D         	call	_Lcd_Cmd
  4482                           
  4483                           ;lcd.c: 70:  }else if(a == 3)
  4484   0010B6  0012               	return	
  4485   0010B8                     l3901:
  4486   0010B8  0E03               	movlw	3
  4487   0010BA  1809               	xorwf	Lcd_Set_Cursor@a^0,w,c
  4488   0010BC  A4D8               	btfss	status,2,c
  4489   0010BE  D010               	goto	l3909
  4490                           
  4491                           ;lcd.c: 71:  {;lcd.c: 72:   temp = 0x94 + b - 1;
  4492   0010C0  5008               	movf	Lcd_Set_Cursor@b^0,w,c
  4493   0010C2  0F93               	addlw	147
  4494   0010C4  6E0C               	movwf	Lcd_Set_Cursor@temp^0,c
  4495                           
  4496                           ;lcd.c: 73:   z = temp>>4;
  4497   0010C6  380C               	swapf	Lcd_Set_Cursor@temp^0,w,c
  4498   0010C8  0B0F               	andlw	15
  4499   0010CA  6E0A               	movwf	Lcd_Set_Cursor@z^0,c
  4500                           
  4501                           ;lcd.c: 74:   y = temp & 0x0F;
  4502   0010CC  500C               	movf	Lcd_Set_Cursor@temp^0,w,c
  4503   0010CE  0B0F               	andlw	15
  4504   0010D0  6E0B               	movwf	Lcd_Set_Cursor@y^0,c
  4505                           
  4506                           ;lcd.c: 75:   Lcd_Cmd(z);
  4507   0010D2  500A               	movf	Lcd_Set_Cursor@z^0,w,c
  4508   0010D4  EC50  F00D         	call	_Lcd_Cmd
  4509                           
  4510                           ;lcd.c: 76:   Lcd_Cmd(y);
  4511   0010D8  500B               	movf	Lcd_Set_Cursor@y^0,w,c
  4512   0010DA  EC50  F00D         	call	_Lcd_Cmd
  4513                           
  4514                           ;lcd.c: 77:  }
  4515   0010DE  0012               	return	
  4516   0010E0                     l3909:
  4517   0010E0  0E04               	movlw	4
  4518   0010E2  1809               	xorwf	Lcd_Set_Cursor@a^0,w,c
  4519   0010E4  A4D8               	btfss	status,2,c
  4520   0010E6  0012               	return	
  4521                           
  4522                           ;lcd.c: 79:  {;lcd.c: 80:   temp = 0xD4 + b - 1;
  4523   0010E8  5008               	movf	Lcd_Set_Cursor@b^0,w,c
  4524   0010EA  0FD3               	addlw	211
  4525   0010EC  6E0C               	movwf	Lcd_Set_Cursor@temp^0,c
  4526                           
  4527                           ;lcd.c: 81:   z = temp>>4;
  4528   0010EE  380C               	swapf	Lcd_Set_Cursor@temp^0,w,c
  4529   0010F0  0B0F               	andlw	15
  4530   0010F2  6E0A               	movwf	Lcd_Set_Cursor@z^0,c
  4531                           
  4532                           ;lcd.c: 82:   y = temp & 0x0F;
  4533   0010F4  500C               	movf	Lcd_Set_Cursor@temp^0,w,c
  4534   0010F6  0B0F               	andlw	15
  4535   0010F8  6E0B               	movwf	Lcd_Set_Cursor@y^0,c
  4536                           
  4537                           ;lcd.c: 83:   Lcd_Cmd(z);
  4538   0010FA  500A               	movf	Lcd_Set_Cursor@z^0,w,c
  4539   0010FC  EC50  F00D         	call	_Lcd_Cmd
  4540                           
  4541                           ;lcd.c: 84:   Lcd_Cmd(y);
  4542   001100  500B               	movf	Lcd_Set_Cursor@y^0,w,c
  4543   001102  EC50  F00D         	call	_Lcd_Cmd
  4544   001106  0012               	return	
  4545   001108                     __end_of_Lcd_Set_Cursor:
  4546                           	callstack 0
  4547                           
  4548 ;; *************** function _Lcd_Clear *****************
  4549 ;; Defined at:
  4550 ;;		line 46 in file "lcd.c"
  4551 ;; Parameters:    Size  Location     Type
  4552 ;;		None
  4553 ;; Auto vars:     Size  Location     Type
  4554 ;;		None
  4555 ;; Return value:  Size  Location     Type
  4556 ;;                  1    wreg      void 
  4557 ;; Registers used:
  4558 ;;		wreg, status,2, cstack
  4559 ;; Tracked objects:
  4560 ;;		On entry : 0/0
  4561 ;;		On exit  : 0/0
  4562 ;;		Unchanged: 0/0
  4563 ;; Data sizes:     COMRAM   BANK0   BANK1
  4564 ;;      Params:         0       0       0
  4565 ;;      Locals:         0       0       0
  4566 ;;      Temps:          0       0       0
  4567 ;;      Totals:         0       0       0
  4568 ;;Total ram usage:        0 bytes
  4569 ;; Hardware stack levels used: 1
  4570 ;; Hardware stack levels required when called: 4
  4571 ;; This function calls:
  4572 ;;		_Lcd_Cmd
  4573 ;; This function is called by:
  4574 ;;		_input_value
  4575 ;;		_start_process_screen
  4576 ;;		_menu
  4577 ;;		_manual
  4578 ;;		_handle_actuator_push
  4579 ;;		_infusion
  4580 ;; This function uses a non-reentrant model
  4581 ;;
  4582                           
  4583                           	psect	text24
  4584   001B5C                     __ptext24:
  4585                           	callstack 0
  4586   001B5C                     _Lcd_Clear:
  4587                           	callstack 25
  4588                           
  4589                           ;lcd.c: 48:  Lcd_Cmd(0);
  4590                           
  4591                           ;incstack = 0
  4592   001B5C  0E00               	movlw	0
  4593   001B5E  EC50  F00D         	call	_Lcd_Cmd
  4594                           
  4595                           ;lcd.c: 49:  Lcd_Cmd(1);
  4596   001B62  0E01               	movlw	1
  4597   001B64  EC50  F00D         	call	_Lcd_Cmd
  4598   001B68  0012               	return		;funcret
  4599   001B6A                     __end_of_Lcd_Clear:
  4600                           	callstack 0
  4601                           
  4602 ;; *************** function _Lcd_Cmd *****************
  4603 ;; Defined at:
  4604 ;;		line 37 in file "lcd.c"
  4605 ;; Parameters:    Size  Location     Type
  4606 ;;  a               1    wreg     unsigned char 
  4607 ;; Auto vars:     Size  Location     Type
  4608 ;;  a               1    6[COMRAM] unsigned char 
  4609 ;; Return value:  Size  Location     Type
  4610 ;;                  1    wreg      void 
  4611 ;; Registers used:
  4612 ;;		wreg, status,2, cstack
  4613 ;; Tracked objects:
  4614 ;;		On entry : 0/0
  4615 ;;		On exit  : 0/0
  4616 ;;		Unchanged: 0/0
  4617 ;; Data sizes:     COMRAM   BANK0   BANK1
  4618 ;;      Params:         0       0       0
  4619 ;;      Locals:         1       0       0
  4620 ;;      Temps:          1       0       0
  4621 ;;      Totals:         2       0       0
  4622 ;;Total ram usage:        2 bytes
  4623 ;; Hardware stack levels used: 1
  4624 ;; Hardware stack levels required when called: 3
  4625 ;; This function calls:
  4626 ;;		_Lcd_Port
  4627 ;; This function is called by:
  4628 ;;		_Lcd_Clear
  4629 ;;		_Lcd_Set_Cursor
  4630 ;;		_Lcd_Init
  4631 ;; This function uses a non-reentrant model
  4632 ;;
  4633                           
  4634                           	psect	text25
  4635   001AA0                     __ptext25:
  4636                           	callstack 0
  4637   001AA0                     _Lcd_Cmd:
  4638                           	callstack 25
  4639                           
  4640                           ;incstack = 0
  4641                           ;Lcd_Cmd@a stored from wreg
  4642   001AA0  6E07               	movwf	Lcd_Cmd@a^0,c
  4643                           
  4644                           ;lcd.c: 37: void Lcd_Cmd(char a);lcd.c: 38: {;lcd.c: 39:  RD2 = 0;
  4645   001AA2  9483               	bcf	3971,2,c	;volatile
  4646                           
  4647                           ;lcd.c: 40:  Lcd_Port(a);
  4648   001AA4  5007               	movf	Lcd_Cmd@a^0,w,c
  4649   001AA6  ECED  F00C         	call	_Lcd_Port
  4650                           
  4651                           ;lcd.c: 41:  RD3 = 1;
  4652   001AAA  8683               	bsf	3971,3,c	;volatile
  4653                           
  4654                           ;lcd.c: 42:         _delay((unsigned long)((4)*(8000000L/4000.0)));
  4655   001AAC  0E0B               	movlw	11
  4656   001AAE  6E06               	movwf	??_Lcd_Cmd^0,c
  4657   001AB0  0E62               	movlw	98
  4658   001AB2                     u4687:
  4659   001AB2  2EE8               	decfsz	wreg,f,c
  4660   001AB4  D7FE               	bra	u4687
  4661   001AB6  2E06               	decfsz	??_Lcd_Cmd^0,f,c
  4662   001AB8  D7FC               	bra	u4687
  4663   001ABA  D000               	nop2	
  4664                           
  4665                           ;lcd.c: 43:         RD3 = 0;
  4666   001ABC  9683               	bcf	3971,3,c	;volatile
  4667   001ABE  0012               	return		;funcret
  4668   001AC0                     __end_of_Lcd_Cmd:
  4669                           	callstack 0
  4670                           
  4671 ;; *************** function _Lcd_Port *****************
  4672 ;; Defined at:
  4673 ;;		line 15 in file "lcd.c"
  4674 ;; Parameters:    Size  Location     Type
  4675 ;;  a               1    wreg     unsigned char 
  4676 ;; Auto vars:     Size  Location     Type
  4677 ;;  a               1    4[COMRAM] unsigned char 
  4678 ;; Return value:  Size  Location     Type
  4679 ;;                  1    wreg      void 
  4680 ;; Registers used:
  4681 ;;		wreg
  4682 ;; Tracked objects:
  4683 ;;		On entry : 0/0
  4684 ;;		On exit  : 0/0
  4685 ;;		Unchanged: 0/0
  4686 ;; Data sizes:     COMRAM   BANK0   BANK1
  4687 ;;      Params:         0       0       0
  4688 ;;      Locals:         1       0       0
  4689 ;;      Temps:          0       0       0
  4690 ;;      Totals:         1       0       0
  4691 ;;Total ram usage:        1 bytes
  4692 ;; Hardware stack levels used: 1
  4693 ;; Hardware stack levels required when called: 2
  4694 ;; This function calls:
  4695 ;;		Nothing
  4696 ;; This function is called by:
  4697 ;;		_Lcd_Cmd
  4698 ;;		_Lcd_Init
  4699 ;;		_Lcd_Write_Char
  4700 ;; This function uses a non-reentrant model
  4701 ;;
  4702                           
  4703                           	psect	text26
  4704   0019DA                     __ptext26:
  4705                           	callstack 0
  4706   0019DA                     _Lcd_Port:
  4707                           	callstack 26
  4708                           
  4709                           ;incstack = 0
  4710                           ;Lcd_Port@a stored from wreg
  4711   0019DA  6E05               	movwf	Lcd_Port@a^0,c
  4712                           
  4713                           ;lcd.c: 15: void Lcd_Port(char a);lcd.c: 16: {;lcd.c: 17:  if(a & 1)
  4714   0019DC  A005               	btfss	Lcd_Port@a^0,0,c
  4715   0019DE  D002               	goto	l17
  4716                           
  4717                           ;lcd.c: 18:   RD4 = 1;
  4718   0019E0  8883               	bsf	3971,4,c	;volatile
  4719   0019E2  D001               	goto	l3641
  4720   0019E4                     l17:
  4721                           
  4722                           ;lcd.c: 20:   RD4 = 0;
  4723   0019E4  9883               	bcf	3971,4,c	;volatile
  4724   0019E6                     l3641:
  4725                           
  4726                           ;lcd.c: 22:  if(a & 2)
  4727   0019E6  A205               	btfss	Lcd_Port@a^0,1,c
  4728   0019E8  D002               	goto	l19
  4729                           
  4730                           ;lcd.c: 23:   RD5 = 1;
  4731   0019EA  8A83               	bsf	3971,5,c	;volatile
  4732   0019EC  D001               	goto	l3645
  4733   0019EE                     l19:
  4734                           
  4735                           ;lcd.c: 25:   RD5 = 0;
  4736   0019EE  9A83               	bcf	3971,5,c	;volatile
  4737   0019F0                     l3645:
  4738                           
  4739                           ;lcd.c: 27:  if(a & 4)
  4740   0019F0  A405               	btfss	Lcd_Port@a^0,2,c
  4741   0019F2  D002               	goto	l21
  4742                           
  4743                           ;lcd.c: 28:   RD6 = 1;
  4744   0019F4  8C83               	bsf	3971,6,c	;volatile
  4745   0019F6  D001               	goto	l3649
  4746   0019F8                     l21:
  4747                           
  4748                           ;lcd.c: 30:   RD6 = 0;
  4749   0019F8  9C83               	bcf	3971,6,c	;volatile
  4750   0019FA                     l3649:
  4751                           
  4752                           ;lcd.c: 32:  if(a & 8)
  4753   0019FA  A605               	btfss	Lcd_Port@a^0,3,c
  4754   0019FC  D002               	goto	l23
  4755                           
  4756                           ;lcd.c: 33:   RD7 = 1;
  4757   0019FE  8E83               	bsf	3971,7,c	;volatile
  4758   001A00  0012               	return	
  4759   001A02                     l23:
  4760                           
  4761                           ;lcd.c: 35:   RD7 = 0;
  4762   001A02  9E83               	bcf	3971,7,c	;volatile
  4763   001A04  0012               	return		;funcret
  4764   001A06                     __end_of_Lcd_Port:
  4765                           	callstack 0
  4766                           
  4767 ;; *************** function _move_actuator *****************
  4768 ;; Defined at:
  4769 ;;		line 29 in file "actuator.c"
  4770 ;; Parameters:    Size  Location     Type
  4771 ;;  direction       2    8[COMRAM] int 
  4772 ;;  speed           2   10[COMRAM] unsigned short 
  4773 ;; Auto vars:     Size  Location     Type
  4774 ;;		None
  4775 ;; Return value:  Size  Location     Type
  4776 ;;                  1    wreg      void 
  4777 ;; Registers used:
  4778 ;;		wreg, status,2, status,0, cstack
  4779 ;; Tracked objects:
  4780 ;;		On entry : 0/0
  4781 ;;		On exit  : 0/0
  4782 ;;		Unchanged: 0/0
  4783 ;; Data sizes:     COMRAM   BANK0   BANK1
  4784 ;;      Params:         4       0       0
  4785 ;;      Locals:         0       0       0
  4786 ;;      Temps:          0       0       0
  4787 ;;      Totals:         4       0       0
  4788 ;;Total ram usage:        4 bytes
  4789 ;; Hardware stack levels used: 1
  4790 ;; Hardware stack levels required when called: 3
  4791 ;; This function calls:
  4792 ;;		_change_direction_motion
  4793 ;;		_set_pwm_duty
  4794 ;; This function is called by:
  4795 ;;		_handle_actuator_push
  4796 ;;		_infusion
  4797 ;; This function uses a non-reentrant model
  4798 ;;
  4799                           
  4800                           	psect	text27
  4801   00181C                     __ptext27:
  4802                           	callstack 0
  4803   00181C                     _move_actuator:
  4804                           	callstack 25
  4805                           
  4806                           ;actuator.c: 31:     if(speed > 0) {
  4807                           
  4808                           ;incstack = 0
  4809   00181C  500B               	movf	move_actuator@speed^0,w,c
  4810   00181E  100C               	iorwf	(move_actuator@speed+1)^0,w,c
  4811   001820  B4D8               	btfsc	status,2,c
  4812   001822  D01D               	goto	l4115
  4813                           
  4814                           ;actuator.c: 32:         if(direction == forward){
  4815   001824  0409               	decf	move_actuator@direction^0,w,c
  4816   001826  100A               	iorwf	(move_actuator@direction+1)^0,w,c
  4817   001828  A4D8               	btfss	status,2,c
  4818   00182A  D00B               	goto	l4111
  4819                           
  4820                           ;actuator.c: 33:             change_direction_motion(0,1);
  4821   00182C  0E00               	movlw	0
  4822   00182E  6E06               	movwf	(change_direction_motion@hDriverIn1+1)^0,c
  4823   001830  0E00               	movlw	0
  4824   001832  6E05               	movwf	change_direction_motion@hDriverIn1^0,c
  4825   001834  0E00               	movlw	0
  4826   001836  6E08               	movwf	(change_direction_motion@hDriverIn2+1)^0,c
  4827   001838  0E01               	movlw	1
  4828   00183A  6E07               	movwf	change_direction_motion@hDriverIn2^0,c
  4829   00183C  EC87  F00D         	call	_change_direction_motion	;wreg free
  4830                           
  4831                           ;actuator.c: 34:         }else if(direction == backwards){
  4832   001840  D00E               	goto	l4115
  4833   001842                     l4111:
  4834   001842  5009               	movf	move_actuator@direction^0,w,c
  4835   001844  100A               	iorwf	(move_actuator@direction+1)^0,w,c
  4836   001846  A4D8               	btfss	status,2,c
  4837   001848  D00A               	goto	l4115
  4838                           
  4839                           ;actuator.c: 35:             change_direction_motion(1,0);
  4840   00184A  0E00               	movlw	0
  4841   00184C  6E06               	movwf	(change_direction_motion@hDriverIn1+1)^0,c
  4842   00184E  0E01               	movlw	1
  4843   001850  6E05               	movwf	change_direction_motion@hDriverIn1^0,c
  4844   001852  0E00               	movlw	0
  4845   001854  6E08               	movwf	(change_direction_motion@hDriverIn2+1)^0,c
  4846   001856  0E00               	movlw	0
  4847   001858  6E07               	movwf	change_direction_motion@hDriverIn2^0,c
  4848   00185A  EC87  F00D         	call	_change_direction_motion	;wreg free
  4849   00185E                     l4115:
  4850                           
  4851                           ;actuator.c: 38:     set_pwm_duty(speed);
  4852   00185E  C00B  F005         	movff	move_actuator@speed,set_pwm_duty@pwm_duty
  4853   001862  C00C  F006         	movff	move_actuator@speed+1,set_pwm_duty@pwm_duty+1
  4854   001866  EC3E  F00D         	call	_set_pwm_duty	;wreg free
  4855   00186A  0012               	return		;funcret
  4856   00186C                     __end_of_move_actuator:
  4857                           	callstack 0
  4858                           
  4859 ;; *************** function _set_pwm_duty *****************
  4860 ;; Defined at:
  4861 ;;		line 18 in file "actuator.c"
  4862 ;; Parameters:    Size  Location     Type
  4863 ;;  pwm_duty        2    4[COMRAM] unsigned short 
  4864 ;; Auto vars:     Size  Location     Type
  4865 ;;		None
  4866 ;; Return value:  Size  Location     Type
  4867 ;;                  1    wreg      void 
  4868 ;; Registers used:
  4869 ;;		wreg, status,2, status,0
  4870 ;; Tracked objects:
  4871 ;;		On entry : 0/0
  4872 ;;		On exit  : 0/0
  4873 ;;		Unchanged: 0/0
  4874 ;; Data sizes:     COMRAM   BANK0   BANK1
  4875 ;;      Params:         2       0       0
  4876 ;;      Locals:         0       0       0
  4877 ;;      Temps:          2       0       0
  4878 ;;      Totals:         4       0       0
  4879 ;;Total ram usage:        4 bytes
  4880 ;; Hardware stack levels used: 1
  4881 ;; Hardware stack levels required when called: 2
  4882 ;; This function calls:
  4883 ;;		Nothing
  4884 ;; This function is called by:
  4885 ;;		_move_actuator
  4886 ;; This function uses a non-reentrant model
  4887 ;;
  4888                           
  4889                           	psect	text28
  4890   001A7C                     __ptext28:
  4891                           	callstack 0
  4892   001A7C                     _set_pwm_duty:
  4893                           	callstack 25
  4894                           
  4895                           ;actuator.c: 18: void set_pwm_duty(uint16_t pwm_duty);actuator.c: 19: {;actuator.c: 20: 
      +                            CCP1CON = ((pwm_duty << 4) & 0x30) | 0x0C;
  4896                           
  4897                           ;incstack = 0
  4898   001A7C  3805               	swapf	set_pwm_duty@pwm_duty^0,w,c
  4899   001A7E  0BF0               	andlw	240
  4900   001A80  0B30               	andlw	48
  4901   001A82  090C               	iorlw	12
  4902   001A84  6EBD               	movwf	189,c	;volatile
  4903                           
  4904                           ;actuator.c: 21:   CCPR1L = pwm_duty>>2;
  4905   001A86  C005  F007         	movff	set_pwm_duty@pwm_duty,??_set_pwm_duty
  4906   001A8A  C006  F008         	movff	set_pwm_duty@pwm_duty+1,??_set_pwm_duty+1
  4907   001A8E  90D8               	bcf	status,0,c
  4908   001A90  3208               	rrcf	(??_set_pwm_duty+1)^0,f,c
  4909   001A92  3207               	rrcf	??_set_pwm_duty^0,f,c
  4910   001A94  90D8               	bcf	status,0,c
  4911   001A96  3208               	rrcf	(??_set_pwm_duty+1)^0,f,c
  4912   001A98  3207               	rrcf	??_set_pwm_duty^0,f,c
  4913   001A9A  5007               	movf	??_set_pwm_duty^0,w,c
  4914   001A9C  6EBE               	movwf	190,c	;volatile
  4915   001A9E  0012               	return		;funcret
  4916   001AA0                     __end_of_set_pwm_duty:
  4917                           	callstack 0
  4918                           
  4919 ;; *************** function _change_direction_motion *****************
  4920 ;; Defined at:
  4921 ;;		line 24 in file "actuator.c"
  4922 ;; Parameters:    Size  Location     Type
  4923 ;;  hDriverIn1      2    4[COMRAM] int 
  4924 ;;  hDriverIn2      2    6[COMRAM] int 
  4925 ;; Auto vars:     Size  Location     Type
  4926 ;;		None
  4927 ;; Return value:  Size  Location     Type
  4928 ;;                  1    wreg      void 
  4929 ;; Registers used:
  4930 ;;		None
  4931 ;; Tracked objects:
  4932 ;;		On entry : 0/0
  4933 ;;		On exit  : 0/0
  4934 ;;		Unchanged: 0/0
  4935 ;; Data sizes:     COMRAM   BANK0   BANK1
  4936 ;;      Params:         4       0       0
  4937 ;;      Locals:         0       0       0
  4938 ;;      Temps:          0       0       0
  4939 ;;      Totals:         4       0       0
  4940 ;;Total ram usage:        4 bytes
  4941 ;; Hardware stack levels used: 1
  4942 ;; Hardware stack levels required when called: 2
  4943 ;; This function calls:
  4944 ;;		Nothing
  4945 ;; This function is called by:
  4946 ;;		_move_actuator
  4947 ;; This function uses a non-reentrant model
  4948 ;;
  4949                           
  4950                           	psect	text29
  4951   001B0E                     __ptext29:
  4952                           	callstack 0
  4953   001B0E                     _change_direction_motion:
  4954                           	callstack 25
  4955                           
  4956                           ;actuator.c: 25:         RD1 = hDriverIn1;
  4957                           
  4958                           ;incstack = 0
  4959   001B0E  A005               	btfss	change_direction_motion@hDriverIn1^0,0,c
  4960   001B10  D002               	goto	u3810
  4961   001B12  8283               	bsf	3971,1,c	;volatile
  4962   001B14  D001               	goto	u3825
  4963   001B16                     u3810:
  4964   001B16  9283               	bcf	3971,1,c	;volatile
  4965   001B18                     u3825:
  4966                           
  4967                           ;actuator.c: 26:         RD0= hDriverIn2;
  4968   001B18  A007               	btfss	change_direction_motion@hDriverIn2^0,0,c
  4969   001B1A  D002               	goto	u3830
  4970   001B1C  8083               	bsf	3971,0,c	;volatile
  4971   001B1E  0012               	return	
  4972   001B20                     u3830:
  4973   001B20  9083               	bcf	3971,0,c	;volatile
  4974   001B22  0012               	return		;funcret
  4975   001B24                     __end_of_change_direction_motion:
  4976                           	callstack 0
  4977                           
  4978 ;; *************** function _input_option *****************
  4979 ;; Defined at:
  4980 ;;		line 190 in file "main.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;		None
  4983 ;; Auto vars:     Size  Location     Type
  4984 ;;  option          2   11[COMRAM] int 
  4985 ;;  userInput       1   13[COMRAM] unsigned char 
  4986 ;; Return value:  Size  Location     Type
  4987 ;;                  2    7[COMRAM] int 
  4988 ;; Registers used:
  4989 ;;		wreg, status,2, status,0, cstack
  4990 ;; Tracked objects:
  4991 ;;		On entry : 0/0
  4992 ;;		On exit  : 0/0
  4993 ;;		Unchanged: 0/0
  4994 ;; Data sizes:     COMRAM   BANK0   BANK1
  4995 ;;      Params:         2       0       0
  4996 ;;      Locals:         3       0       0
  4997 ;;      Temps:          2       0       0
  4998 ;;      Totals:         7       0       0
  4999 ;;Total ram usage:        7 bytes
  5000 ;; Hardware stack levels used: 1
  5001 ;; Hardware stack levels required when called: 4
  5002 ;; This function calls:
  5003 ;;		_switch_press_scan
  5004 ;; This function is called by:
  5005 ;;		_handle_actuator_push
  5006 ;; This function uses a non-reentrant model
  5007 ;;
  5008                           
  5009                           	psect	text30
  5010   001108                     __ptext30:
  5011                           	callstack 0
  5012   001108                     _input_option:
  5013                           	callstack 23
  5014                           
  5015                           ;main.c: 191:     char userInput = 'n';
  5016                           
  5017                           ;incstack = 0
  5018   001108  0E6E               	movlw	110
  5019   00110A  6E0E               	movwf	input_option@userInput^0,c
  5020                           
  5021                           ;main.c: 192:     int option;;main.c: 194:     while(userInput == 'n'){
  5022   00110C  D03C               	goto	l4221
  5023   00110E                     l4199:
  5024                           
  5025                           ;main.c: 195:         userInput = switch_press_scan();
  5026   00110E  EC92  F00D         	call	_switch_press_scan	;wreg free
  5027   001112  6E0E               	movwf	input_option@userInput^0,c
  5028                           
  5029                           ;main.c: 196:         if(userInput == '1'){
  5030   001114  0E31               	movlw	49
  5031   001116  180E               	xorwf	input_option@userInput^0,w,c
  5032   001118  A4D8               	btfss	status,2,c
  5033   00111A  D00F               	goto	l4207
  5034                           
  5035                           ;main.c: 197:             _delay((unsigned long)((1000)*(8000000L/4000.0)));
  5036   00111C  0E0B               	movlw	11
  5037   00111E  6E0B               	movwf	(??_input_option+1)^0,c
  5038   001120  0E26               	movlw	38
  5039   001122  6E0A               	movwf	??_input_option^0,c
  5040   001124  0E5E               	movlw	94
  5041   001126                     u4697:
  5042   001126  2EE8               	decfsz	wreg,f,c
  5043   001128  D7FE               	bra	u4697
  5044   00112A  2E0A               	decfsz	??_input_option^0,f,c
  5045   00112C  D7FC               	bra	u4697
  5046   00112E  2E0B               	decfsz	(??_input_option+1)^0,f,c
  5047   001130  D7FA               	bra	u4697
  5048                           
  5049                           ;main.c: 198:             option = 1;
  5050   001132  0E00               	movlw	0
  5051   001134  6E0D               	movwf	(input_option@option+1)^0,c
  5052   001136  0E01               	movlw	1
  5053   001138  D025               	goto	L4
  5054   00113A                     l4207:
  5055   00113A  0E32               	movlw	50
  5056   00113C  180E               	xorwf	input_option@userInput^0,w,c
  5057   00113E  A4D8               	btfss	status,2,c
  5058   001140  D00F               	goto	l4213
  5059                           
  5060                           ;main.c: 200:             _delay((unsigned long)((1000)*(8000000L/4000.0)));
  5061   001142  0E0B               	movlw	11
  5062   001144  6E0B               	movwf	(??_input_option+1)^0,c
  5063   001146  0E26               	movlw	38
  5064   001148  6E0A               	movwf	??_input_option^0,c
  5065   00114A  0E5E               	movlw	94
  5066   00114C                     u4707:
  5067   00114C  2EE8               	decfsz	wreg,f,c
  5068   00114E  D7FE               	bra	u4707
  5069   001150  2E0A               	decfsz	??_input_option^0,f,c
  5070   001152  D7FC               	bra	u4707
  5071   001154  2E0B               	decfsz	(??_input_option+1)^0,f,c
  5072   001156  D7FA               	bra	u4707
  5073                           
  5074                           ;main.c: 201:             option = 2;
  5075   001158  0E00               	movlw	0
  5076   00115A  6E0D               	movwf	(input_option@option+1)^0,c
  5077   00115C  0E02               	movlw	2
  5078   00115E  D012               	goto	L4
  5079   001160                     l4213:
  5080   001160  0E62               	movlw	98
  5081   001162  180E               	xorwf	input_option@userInput^0,w,c
  5082   001164  A4D8               	btfss	status,2,c
  5083   001166  D7D0               	goto	__ptext30
  5084                           
  5085                           ;main.c: 203:             _delay((unsigned long)((1000)*(8000000L/4000.0)));
  5086   001168  0E0B               	movlw	11
  5087   00116A  6E0B               	movwf	(??_input_option+1)^0,c
  5088   00116C  0E26               	movlw	38
  5089   00116E  6E0A               	movwf	??_input_option^0,c
  5090   001170  0E5E               	movlw	94
  5091   001172                     u4717:
  5092   001172  2EE8               	decfsz	wreg,f,c
  5093   001174  D7FE               	bra	u4717
  5094   001176  2E0A               	decfsz	??_input_option^0,f,c
  5095   001178  D7FC               	bra	u4717
  5096   00117A  2E0B               	decfsz	(??_input_option+1)^0,f,c
  5097   00117C  D7FA               	bra	u4717
  5098                           
  5099                           ;main.c: 204:             option = 'b';
  5100   00117E  0E00               	movlw	0
  5101   001180  6E0D               	movwf	(input_option@option+1)^0,c
  5102   001182  0E62               	movlw	98
  5103   001184                     L4:
  5104   001184  6E0C               	movwf	input_option@option^0,c
  5105   001186                     l4221:
  5106                           
  5107                           ;main.c: 194:     while(userInput == 'n'){
  5108   001186  0E6E               	movlw	110
  5109   001188  180E               	xorwf	input_option@userInput^0,w,c
  5110   00118A  B4D8               	btfsc	status,2,c
  5111   00118C  D7C0               	goto	l4199
  5112                           
  5113                           ;main.c: 209:     return option;
  5114   00118E  C00C  F008         	movff	input_option@option,?_input_option
  5115   001192  C00D  F009         	movff	input_option@option+1,?_input_option+1
  5116   001196  0012               	return		;funcret
  5117   001198                     __end_of_input_option:
  5118                           	callstack 0
  5119                           
  5120 ;; *************** function _switch_press_scan *****************
  5121 ;; Defined at:
  5122 ;;		line 31 in file "keypad.c"
  5123 ;; Parameters:    Size  Location     Type
  5124 ;;		None
  5125 ;; Auto vars:     Size  Location     Type
  5126 ;;  key             1    6[COMRAM] unsigned char 
  5127 ;; Return value:  Size  Location     Type
  5128 ;;                  1    wreg      unsigned char 
  5129 ;; Registers used:
  5130 ;;		wreg, status,2, status,0, cstack
  5131 ;; Tracked objects:
  5132 ;;		On entry : 0/0
  5133 ;;		On exit  : 0/0
  5134 ;;		Unchanged: 0/0
  5135 ;; Data sizes:     COMRAM   BANK0   BANK1
  5136 ;;      Params:         0       0       0
  5137 ;;      Locals:         1       0       0
  5138 ;;      Temps:          0       0       0
  5139 ;;      Totals:         1       0       0
  5140 ;;Total ram usage:        1 bytes
  5141 ;; Hardware stack levels used: 1
  5142 ;; Hardware stack levels required when called: 3
  5143 ;; This function calls:
  5144 ;;		_keypad_scanner
  5145 ;; This function is called by:
  5146 ;;		_input_option
  5147 ;;		_main
  5148 ;; This function uses a non-reentrant model
  5149 ;;
  5150                           
  5151                           	psect	text31
  5152   001B24                     __ptext31:
  5153                           	callstack 0
  5154   001B24                     _switch_press_scan:
  5155                           	callstack 27
  5156                           
  5157                           ;keypad.c: 33:             char key = 'n';
  5158                           
  5159                           ;incstack = 0
  5160   001B24  0E6E               	movlw	110
  5161   001B26  D002               	goto	L5
  5162   001B28                     l3931:
  5163                           
  5164                           ;keypad.c: 35:             key = keypad_scanner();
  5165   001B28  EC1F  F003         	call	_keypad_scanner	;wreg free
  5166   001B2C                     L5:
  5167   001B2C  6E07               	movwf	switch_press_scan@key^0,c
  5168                           
  5169                           ;keypad.c: 34:             while(key=='n')
  5170   001B2E  0E6E               	movlw	110
  5171   001B30  1807               	xorwf	switch_press_scan@key^0,w,c
  5172   001B32  B4D8               	btfsc	status,2,c
  5173   001B34  D7F9               	goto	l3931
  5174                           
  5175                           ;keypad.c: 36:             return key;
  5176   001B36  5007               	movf	switch_press_scan@key^0,w,c
  5177   001B38  0012               	return		;funcret
  5178   001B3A                     __end_of_switch_press_scan:
  5179                           	callstack 0
  5180                           
  5181 ;; *************** function _keypad_scanner *****************
  5182 ;; Defined at:
  5183 ;;		line 3 in file "keypad.c"
  5184 ;; Parameters:    Size  Location     Type
  5185 ;;		None
  5186 ;; Auto vars:     Size  Location     Type
  5187 ;;		None
  5188 ;; Return value:  Size  Location     Type
  5189 ;;                  1    wreg      unsigned char 
  5190 ;; Registers used:
  5191 ;;		wreg
  5192 ;; Tracked objects:
  5193 ;;		On entry : 0/0
  5194 ;;		On exit  : 0/0
  5195 ;;		Unchanged: 0/0
  5196 ;; Data sizes:     COMRAM   BANK0   BANK1
  5197 ;;      Params:         0       0       0
  5198 ;;      Locals:         0       0       0
  5199 ;;      Temps:          2       0       0
  5200 ;;      Totals:         2       0       0
  5201 ;;Total ram usage:        2 bytes
  5202 ;; Hardware stack levels used: 1
  5203 ;; Hardware stack levels required when called: 2
  5204 ;; This function calls:
  5205 ;;		Nothing
  5206 ;; This function is called by:
  5207 ;;		_switch_press_scan
  5208 ;; This function uses a non-reentrant model
  5209 ;;
  5210                           
  5211                           	psect	text32
  5212   00063E                     __ptext32:
  5213                           	callstack 0
  5214   00063E                     _keypad_scanner:
  5215                           	callstack 27
  5216                           
  5217                           ;keypad.c: 5:             RB0 = 0; RB1 = 1; RB2 = 1; RB3 = 1;
  5218                           
  5219                           ;incstack = 0
  5220   00063E  9081               	bcf	3969,0,c	;volatile
  5221   000640  8281               	bsf	3969,1,c	;volatile
  5222   000642  8481               	bsf	3969,2,c	;volatile
  5223   000644  8681               	bsf	3969,3,c	;volatile
  5224                           
  5225                           ;keypad.c: 6:             if (RB4 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0)
      +                          )); while (RB4==0); return '7'; }
  5226   000646  B881               	btfsc	3969,4,c	;volatile
  5227   000648  D010               	goto	l251
  5228   00064A  0E02               	movlw	2
  5229   00064C  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5230   00064E  0E04               	movlw	4
  5231   000650  6E05               	movwf	??_keypad_scanner^0,c
  5232   000652  0EBA               	movlw	186
  5233   000654                     u4727:
  5234   000654  2EE8               	decfsz	wreg,f,c
  5235   000656  D7FE               	bra	u4727
  5236   000658  2E05               	decfsz	??_keypad_scanner^0,f,c
  5237   00065A  D7FC               	bra	u4727
  5238   00065C  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5239   00065E  D7FA               	bra	u4727
  5240   000660  D000               	nop2	
  5241   000662                     l252:
  5242   000662  A881               	btfss	3969,4,c	;volatile
  5243   000664  D7FE               	goto	l252
  5244   000666  0E37               	movlw	55
  5245   000668  0012               	return	
  5246   00066A                     l251:
  5247                           
  5248                           ;keypad.c: 7:             if (RC7 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0)
      +                          )); while (RC7==0); return '8'; }
  5249   00066A  BE82               	btfsc	3970,7,c	;volatile
  5250   00066C  D010               	goto	l256
  5251   00066E  0E02               	movlw	2
  5252   000670  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5253   000672  0E04               	movlw	4
  5254   000674  6E05               	movwf	??_keypad_scanner^0,c
  5255   000676  0EBA               	movlw	186
  5256   000678                     u4737:
  5257   000678  2EE8               	decfsz	wreg,f,c
  5258   00067A  D7FE               	bra	u4737
  5259   00067C  2E05               	decfsz	??_keypad_scanner^0,f,c
  5260   00067E  D7FC               	bra	u4737
  5261   000680  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5262   000682  D7FA               	bra	u4737
  5263   000684  D000               	nop2	
  5264   000686                     l257:
  5265   000686  AE82               	btfss	3970,7,c	;volatile
  5266   000688  D7FE               	goto	l257
  5267   00068A  0E38               	movlw	56
  5268   00068C  0012               	return	
  5269   00068E                     l256:
  5270                           
  5271                           ;keypad.c: 8:             if (RB6 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0)
      +                          )); while (RB6==0); return '9'; }
  5272   00068E  BC81               	btfsc	3969,6,c	;volatile
  5273   000690  D010               	goto	l260
  5274   000692  0E02               	movlw	2
  5275   000694  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5276   000696  0E04               	movlw	4
  5277   000698  6E05               	movwf	??_keypad_scanner^0,c
  5278   00069A  0EBA               	movlw	186
  5279   00069C                     u4747:
  5280   00069C  2EE8               	decfsz	wreg,f,c
  5281   00069E  D7FE               	bra	u4747
  5282   0006A0  2E05               	decfsz	??_keypad_scanner^0,f,c
  5283   0006A2  D7FC               	bra	u4747
  5284   0006A4  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5285   0006A6  D7FA               	bra	u4747
  5286   0006A8  D000               	nop2	
  5287   0006AA                     l261:
  5288   0006AA  AC81               	btfss	3969,6,c	;volatile
  5289   0006AC  D7FE               	goto	l261
  5290   0006AE  0E39               	movlw	57
  5291   0006B0  0012               	return	
  5292   0006B2                     l260:
  5293                           
  5294                           ;keypad.c: 9:             if (RB7 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0)
      +                          )); while (RB7==0); return 'u'; }
  5295   0006B2  BE81               	btfsc	3969,7,c	;volatile
  5296   0006B4  D010               	goto	l264
  5297   0006B6  0E02               	movlw	2
  5298   0006B8  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5299   0006BA  0E04               	movlw	4
  5300   0006BC  6E05               	movwf	??_keypad_scanner^0,c
  5301   0006BE  0EBA               	movlw	186
  5302   0006C0                     u4757:
  5303   0006C0  2EE8               	decfsz	wreg,f,c
  5304   0006C2  D7FE               	bra	u4757
  5305   0006C4  2E05               	decfsz	??_keypad_scanner^0,f,c
  5306   0006C6  D7FC               	bra	u4757
  5307   0006C8  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5308   0006CA  D7FA               	bra	u4757
  5309   0006CC  D000               	nop2	
  5310   0006CE                     l265:
  5311   0006CE  AE81               	btfss	3969,7,c	;volatile
  5312   0006D0  D7FE               	goto	l265
  5313   0006D2  0E75               	movlw	117
  5314   0006D4  0012               	return	
  5315   0006D6                     l264:
  5316                           
  5317                           ;keypad.c: 11:             RB0 = 1; RB1 = 0; RB2 = 1; RB3 = 1;
  5318   0006D6  8081               	bsf	3969,0,c	;volatile
  5319   0006D8  9281               	bcf	3969,1,c	;volatile
  5320   0006DA  8481               	bsf	3969,2,c	;volatile
  5321   0006DC  8681               	bsf	3969,3,c	;volatile
  5322                           
  5323                           ;keypad.c: 12:             if (RB4 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB4==0); return '4'; }
  5324   0006DE  B881               	btfsc	3969,4,c	;volatile
  5325   0006E0  D010               	goto	l268
  5326   0006E2  0E02               	movlw	2
  5327   0006E4  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5328   0006E6  0E04               	movlw	4
  5329   0006E8  6E05               	movwf	??_keypad_scanner^0,c
  5330   0006EA  0EBA               	movlw	186
  5331   0006EC                     u4767:
  5332   0006EC  2EE8               	decfsz	wreg,f,c
  5333   0006EE  D7FE               	bra	u4767
  5334   0006F0  2E05               	decfsz	??_keypad_scanner^0,f,c
  5335   0006F2  D7FC               	bra	u4767
  5336   0006F4  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5337   0006F6  D7FA               	bra	u4767
  5338   0006F8  D000               	nop2	
  5339   0006FA                     l269:
  5340   0006FA  A881               	btfss	3969,4,c	;volatile
  5341   0006FC  D7FE               	goto	l269
  5342   0006FE  0E34               	movlw	52
  5343   000700  0012               	return	
  5344   000702                     l268:
  5345                           
  5346                           ;keypad.c: 13:             if (RC7 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RC7==0); return '5'; }
  5347   000702  BE82               	btfsc	3970,7,c	;volatile
  5348   000704  D010               	goto	l272
  5349   000706  0E02               	movlw	2
  5350   000708  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5351   00070A  0E04               	movlw	4
  5352   00070C  6E05               	movwf	??_keypad_scanner^0,c
  5353   00070E  0EBA               	movlw	186
  5354   000710                     u4777:
  5355   000710  2EE8               	decfsz	wreg,f,c
  5356   000712  D7FE               	bra	u4777
  5357   000714  2E05               	decfsz	??_keypad_scanner^0,f,c
  5358   000716  D7FC               	bra	u4777
  5359   000718  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5360   00071A  D7FA               	bra	u4777
  5361   00071C  D000               	nop2	
  5362   00071E                     l273:
  5363   00071E  AE82               	btfss	3970,7,c	;volatile
  5364   000720  D7FE               	goto	l273
  5365   000722  0E35               	movlw	53
  5366   000724  0012               	return	
  5367   000726                     l272:
  5368                           
  5369                           ;keypad.c: 14:             if (RB6 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB6==0); return '6'; }
  5370   000726  BC81               	btfsc	3969,6,c	;volatile
  5371   000728  D010               	goto	l276
  5372   00072A  0E02               	movlw	2
  5373   00072C  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5374   00072E  0E04               	movlw	4
  5375   000730  6E05               	movwf	??_keypad_scanner^0,c
  5376   000732  0EBA               	movlw	186
  5377   000734                     u4787:
  5378   000734  2EE8               	decfsz	wreg,f,c
  5379   000736  D7FE               	bra	u4787
  5380   000738  2E05               	decfsz	??_keypad_scanner^0,f,c
  5381   00073A  D7FC               	bra	u4787
  5382   00073C  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5383   00073E  D7FA               	bra	u4787
  5384   000740  D000               	nop2	
  5385   000742                     l277:
  5386   000742  AC81               	btfss	3969,6,c	;volatile
  5387   000744  D7FE               	goto	l277
  5388   000746  0E36               	movlw	54
  5389   000748  0012               	return	
  5390   00074A                     l276:
  5391                           
  5392                           ;keypad.c: 15:             if (RB7 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB7==0); return 'r'; }
  5393   00074A  BE81               	btfsc	3969,7,c	;volatile
  5394   00074C  D010               	goto	l280
  5395   00074E  0E02               	movlw	2
  5396   000750  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5397   000752  0E04               	movlw	4
  5398   000754  6E05               	movwf	??_keypad_scanner^0,c
  5399   000756  0EBA               	movlw	186
  5400   000758                     u4797:
  5401   000758  2EE8               	decfsz	wreg,f,c
  5402   00075A  D7FE               	bra	u4797
  5403   00075C  2E05               	decfsz	??_keypad_scanner^0,f,c
  5404   00075E  D7FC               	bra	u4797
  5405   000760  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5406   000762  D7FA               	bra	u4797
  5407   000764  D000               	nop2	
  5408   000766                     l281:
  5409   000766  AE81               	btfss	3969,7,c	;volatile
  5410   000768  D7FE               	goto	l281
  5411   00076A  0E72               	movlw	114
  5412   00076C  0012               	return	
  5413   00076E                     l280:
  5414                           
  5415                           ;keypad.c: 17:             RB0 = 1; RB1 = 1; RB2 = 0; RB3 = 1;
  5416   00076E  8081               	bsf	3969,0,c	;volatile
  5417   000770  8281               	bsf	3969,1,c	;volatile
  5418   000772  9481               	bcf	3969,2,c	;volatile
  5419   000774  8681               	bsf	3969,3,c	;volatile
  5420                           
  5421                           ;keypad.c: 18:             if (RB4 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB4==0); return '1'; }
  5422   000776  B881               	btfsc	3969,4,c	;volatile
  5423   000778  D010               	goto	l284
  5424   00077A  0E02               	movlw	2
  5425   00077C  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5426   00077E  0E04               	movlw	4
  5427   000780  6E05               	movwf	??_keypad_scanner^0,c
  5428   000782  0EBA               	movlw	186
  5429   000784                     u4807:
  5430   000784  2EE8               	decfsz	wreg,f,c
  5431   000786  D7FE               	bra	u4807
  5432   000788  2E05               	decfsz	??_keypad_scanner^0,f,c
  5433   00078A  D7FC               	bra	u4807
  5434   00078C  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5435   00078E  D7FA               	bra	u4807
  5436   000790  D000               	nop2	
  5437   000792                     l285:
  5438   000792  A881               	btfss	3969,4,c	;volatile
  5439   000794  D7FE               	goto	l285
  5440   000796  0E31               	movlw	49
  5441   000798  0012               	return	
  5442   00079A                     l284:
  5443                           
  5444                           ;keypad.c: 19:             if (RC7 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RC7==0); return '2'; }
  5445   00079A  BE82               	btfsc	3970,7,c	;volatile
  5446   00079C  D010               	goto	l288
  5447   00079E  0E02               	movlw	2
  5448   0007A0  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5449   0007A2  0E04               	movlw	4
  5450   0007A4  6E05               	movwf	??_keypad_scanner^0,c
  5451   0007A6  0EBA               	movlw	186
  5452   0007A8                     u4817:
  5453   0007A8  2EE8               	decfsz	wreg,f,c
  5454   0007AA  D7FE               	bra	u4817
  5455   0007AC  2E05               	decfsz	??_keypad_scanner^0,f,c
  5456   0007AE  D7FC               	bra	u4817
  5457   0007B0  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5458   0007B2  D7FA               	bra	u4817
  5459   0007B4  D000               	nop2	
  5460   0007B6                     l289:
  5461   0007B6  AE82               	btfss	3970,7,c	;volatile
  5462   0007B8  D7FE               	goto	l289
  5463   0007BA  0E32               	movlw	50
  5464   0007BC  0012               	return	
  5465   0007BE                     l288:
  5466                           
  5467                           ;keypad.c: 20:             if (RB6 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB6==0); return '3'; }
  5468   0007BE  BC81               	btfsc	3969,6,c	;volatile
  5469   0007C0  D010               	goto	l292
  5470   0007C2  0E02               	movlw	2
  5471   0007C4  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5472   0007C6  0E04               	movlw	4
  5473   0007C8  6E05               	movwf	??_keypad_scanner^0,c
  5474   0007CA  0EBA               	movlw	186
  5475   0007CC                     u4827:
  5476   0007CC  2EE8               	decfsz	wreg,f,c
  5477   0007CE  D7FE               	bra	u4827
  5478   0007D0  2E05               	decfsz	??_keypad_scanner^0,f,c
  5479   0007D2  D7FC               	bra	u4827
  5480   0007D4  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5481   0007D6  D7FA               	bra	u4827
  5482   0007D8  D000               	nop2	
  5483   0007DA                     l293:
  5484   0007DA  AC81               	btfss	3969,6,c	;volatile
  5485   0007DC  D7FE               	goto	l293
  5486   0007DE  0E33               	movlw	51
  5487   0007E0  0012               	return	
  5488   0007E2                     l292:
  5489                           
  5490                           ;keypad.c: 21:             if (RB7 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB7==0); return 'l'; }
  5491   0007E2  BE81               	btfsc	3969,7,c	;volatile
  5492   0007E4  D010               	goto	l296
  5493   0007E6  0E02               	movlw	2
  5494   0007E8  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5495   0007EA  0E04               	movlw	4
  5496   0007EC  6E05               	movwf	??_keypad_scanner^0,c
  5497   0007EE  0EBA               	movlw	186
  5498   0007F0                     u4837:
  5499   0007F0  2EE8               	decfsz	wreg,f,c
  5500   0007F2  D7FE               	bra	u4837
  5501   0007F4  2E05               	decfsz	??_keypad_scanner^0,f,c
  5502   0007F6  D7FC               	bra	u4837
  5503   0007F8  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5504   0007FA  D7FA               	bra	u4837
  5505   0007FC  D000               	nop2	
  5506   0007FE                     l297:
  5507   0007FE  AE81               	btfss	3969,7,c	;volatile
  5508   000800  D7FE               	goto	l297
  5509   000802  0E6C               	movlw	108
  5510   000804  0012               	return	
  5511   000806                     l296:
  5512                           
  5513                           ;keypad.c: 23:             RB0 = 1; RB1 = 1; RB2 = 1; RB3 = 0;
  5514   000806  8081               	bsf	3969,0,c	;volatile
  5515   000808  8281               	bsf	3969,1,c	;volatile
  5516   00080A  8481               	bsf	3969,2,c	;volatile
  5517   00080C  9681               	bcf	3969,3,c	;volatile
  5518                           
  5519                           ;keypad.c: 24:             if (RB4 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB4==0); return 'b'; }
  5520   00080E  B881               	btfsc	3969,4,c	;volatile
  5521   000810  D010               	goto	l300
  5522   000812  0E02               	movlw	2
  5523   000814  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5524   000816  0E04               	movlw	4
  5525   000818  6E05               	movwf	??_keypad_scanner^0,c
  5526   00081A  0EBA               	movlw	186
  5527   00081C                     u4847:
  5528   00081C  2EE8               	decfsz	wreg,f,c
  5529   00081E  D7FE               	bra	u4847
  5530   000820  2E05               	decfsz	??_keypad_scanner^0,f,c
  5531   000822  D7FC               	bra	u4847
  5532   000824  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5533   000826  D7FA               	bra	u4847
  5534   000828  D000               	nop2	
  5535   00082A                     l301:
  5536   00082A  A881               	btfss	3969,4,c	;volatile
  5537   00082C  D7FE               	goto	l301
  5538   00082E  0E62               	movlw	98
  5539   000830  0012               	return	
  5540   000832                     l300:
  5541                           
  5542                           ;keypad.c: 25:             if (RC7 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RC7==0); return '0'; }
  5543   000832  BE82               	btfsc	3970,7,c	;volatile
  5544   000834  D010               	goto	l304
  5545   000836  0E02               	movlw	2
  5546   000838  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5547   00083A  0E04               	movlw	4
  5548   00083C  6E05               	movwf	??_keypad_scanner^0,c
  5549   00083E  0EBA               	movlw	186
  5550   000840                     u4857:
  5551   000840  2EE8               	decfsz	wreg,f,c
  5552   000842  D7FE               	bra	u4857
  5553   000844  2E05               	decfsz	??_keypad_scanner^0,f,c
  5554   000846  D7FC               	bra	u4857
  5555   000848  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5556   00084A  D7FA               	bra	u4857
  5557   00084C  D000               	nop2	
  5558   00084E                     l305:
  5559   00084E  AE82               	btfss	3970,7,c	;volatile
  5560   000850  D7FE               	goto	l305
  5561   000852  0E30               	movlw	48
  5562   000854  0012               	return	
  5563   000856                     l304:
  5564                           
  5565                           ;keypad.c: 26:             if (RB6 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB6==0); return '.'; }
  5566   000856  BC81               	btfsc	3969,6,c	;volatile
  5567   000858  D010               	goto	l308
  5568   00085A  0E02               	movlw	2
  5569   00085C  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5570   00085E  0E04               	movlw	4
  5571   000860  6E05               	movwf	??_keypad_scanner^0,c
  5572   000862  0EBA               	movlw	186
  5573   000864                     u4867:
  5574   000864  2EE8               	decfsz	wreg,f,c
  5575   000866  D7FE               	bra	u4867
  5576   000868  2E05               	decfsz	??_keypad_scanner^0,f,c
  5577   00086A  D7FC               	bra	u4867
  5578   00086C  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5579   00086E  D7FA               	bra	u4867
  5580   000870  D000               	nop2	
  5581   000872                     l309:
  5582   000872  AC81               	btfss	3969,6,c	;volatile
  5583   000874  D7FE               	goto	l309
  5584   000876  0E2E               	movlw	46
  5585   000878  0012               	return	
  5586   00087A                     l308:
  5587                           
  5588                           ;keypad.c: 27:             if (RB7 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB7==0); return 'd'; }
  5589   00087A  BE81               	btfsc	3969,7,c	;volatile
  5590   00087C  D010               	goto	l3781
  5591   00087E  0E02               	movlw	2
  5592   000880  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5593   000882  0E04               	movlw	4
  5594   000884  6E05               	movwf	??_keypad_scanner^0,c
  5595   000886  0EBA               	movlw	186
  5596   000888                     u4877:
  5597   000888  2EE8               	decfsz	wreg,f,c
  5598   00088A  D7FE               	bra	u4877
  5599   00088C  2E05               	decfsz	??_keypad_scanner^0,f,c
  5600   00088E  D7FC               	bra	u4877
  5601   000890  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5602   000892  D7FA               	bra	u4877
  5603   000894  D000               	nop2	
  5604   000896                     l313:
  5605   000896  AE81               	btfss	3969,7,c	;volatile
  5606   000898  D7FE               	goto	l313
  5607   00089A  0E64               	movlw	100
  5608   00089C  0012               	return	
  5609   00089E                     l3781:
  5610                           
  5611                           ;keypad.c: 29:     return 'n';
  5612   00089E  0E6E               	movlw	110
  5613   0008A0  0012               	return		;funcret
  5614   0008A2                     __end_of_keypad_scanner:
  5615                           	callstack 0
  5616                           
  5617 ;; *************** function _ADC_Read *****************
  5618 ;; Defined at:
  5619 ;;		line 6 in file "helper.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;  channel         1    wreg     char 
  5622 ;; Auto vars:     Size  Location     Type
  5623 ;;  channel         1   10[COMRAM] char 
  5624 ;;  digital         2   11[COMRAM] short 
  5625 ;; Return value:  Size  Location     Type
  5626 ;;                  2    4[COMRAM] short 
  5627 ;; Registers used:
  5628 ;;		wreg, status,2, status,0
  5629 ;; Tracked objects:
  5630 ;;		On entry : 0/0
  5631 ;;		On exit  : 0/0
  5632 ;;		Unchanged: 0/0
  5633 ;; Data sizes:     COMRAM   BANK0   BANK1
  5634 ;;      Params:         2       0       0
  5635 ;;      Locals:         3       0       0
  5636 ;;      Temps:          4       0       0
  5637 ;;      Totals:         9       0       0
  5638 ;;Total ram usage:        9 bytes
  5639 ;; Hardware stack levels used: 1
  5640 ;; Hardware stack levels required when called: 2
  5641 ;; This function calls:
  5642 ;;		Nothing
  5643 ;; This function is called by:
  5644 ;;		_handle_actuator_push
  5645 ;;		_infusion
  5646 ;;		_handle_infusion_setup
  5647 ;; This function uses a non-reentrant model
  5648 ;;
  5649                           
  5650                           	psect	text33
  5651   001420                     __ptext33:
  5652                           	callstack 0
  5653   001420                     _ADC_Read:
  5654                           	callstack 25
  5655                           
  5656                           ;incstack = 0
  5657                           ;ADC_Read@channel stored from wreg
  5658   001420  6E0B               	movwf	ADC_Read@channel^0,c
  5659                           
  5660                           ;helper.c: 6: int16_t ADC_Read(int8_t channel);helper.c: 7: {;helper.c: 8:     int16_t d
      +                          igital;;helper.c: 9:     ADCON0 =(ADCON0 & 0b11000011)|((channel<<2) & 0b00111100);
  5661   001422  C00B  F007         	movff	ADC_Read@channel,??_ADC_Read
  5662   001426  90D8               	bcf	status,0,c
  5663   001428  3607               	rlcf	??_ADC_Read^0,f,c
  5664   00142A  90D8               	bcf	status,0,c
  5665   00142C  3607               	rlcf	??_ADC_Read^0,f,c
  5666   00142E  0E3C               	movlw	60
  5667   001430  1607               	andwf	??_ADC_Read^0,f,c
  5668   001432  50C2               	movf	194,w,c	;volatile
  5669   001434  0BC3               	andlw	195
  5670   001436  1007               	iorwf	??_ADC_Read^0,w,c
  5671   001438  6EC2               	movwf	194,c	;volatile
  5672                           
  5673                           ;helper.c: 10:     ADCON0 |= ((1<<ADON)|(1<<GO));
  5674   00143A  A2C2               	btfss	4034,1,c	;volatile
  5675   00143C  D003               	goto	u4130
  5676   00143E  6A07               	clrf	??_ADC_Read^0,c
  5677   001440  2A07               	incf	??_ADC_Read^0,f,c
  5678   001442  D001               	goto	u4148
  5679   001444                     u4130:
  5680   001444  6A07               	clrf	??_ADC_Read^0,c
  5681   001446                     u4148:
  5682   001446  0E01               	movlw	1
  5683   001448  6E08               	movwf	(??_ADC_Read+1)^0,c
  5684   00144A  2A07               	incf	??_ADC_Read^0,f,c
  5685   00144C  D002               	goto	u4154
  5686   00144E                     u4155:
  5687   00144E  90D8               	bcf	status,0,c
  5688   001450  3608               	rlcf	(??_ADC_Read+1)^0,f,c
  5689   001452                     u4154:
  5690   001452  2E07               	decfsz	??_ADC_Read^0,f,c
  5691   001454  D7FC               	goto	u4155
  5692   001456  A0C2               	btfss	4034,0,c	;volatile
  5693   001458  D003               	goto	u4160
  5694   00145A  6A09               	clrf	(??_ADC_Read+2)^0,c
  5695   00145C  2A09               	incf	(??_ADC_Read+2)^0,f,c
  5696   00145E  D001               	goto	u4178
  5697   001460                     u4160:
  5698   001460  6A09               	clrf	(??_ADC_Read+2)^0,c
  5699   001462                     u4178:
  5700   001462  0E01               	movlw	1
  5701   001464  6E0A               	movwf	(??_ADC_Read+3)^0,c
  5702   001466  2A09               	incf	(??_ADC_Read+2)^0,f,c
  5703   001468  D002               	goto	u4184
  5704   00146A                     u4185:
  5705   00146A  90D8               	bcf	status,0,c
  5706   00146C  360A               	rlcf	(??_ADC_Read+3)^0,f,c
  5707   00146E                     u4184:
  5708   00146E  2E09               	decfsz	(??_ADC_Read+2)^0,f,c
  5709   001470  D7FC               	goto	u4185
  5710   001472  500A               	movf	(??_ADC_Read+3)^0,w,c
  5711   001474  1008               	iorwf	(??_ADC_Read+1)^0,w,c
  5712   001476  12C2               	iorwf	194,f,c	;volatile
  5713   001478                     l130:
  5714   001478  B2C2               	btfsc	194,1,c	;volatile
  5715   00147A  D7FE               	goto	l130
  5716                           
  5717                           ;helper.c: 12:     digital = (ADRESH*256) | (ADRESL);
  5718   00147C  50C3               	movf	195,w,c	;volatile
  5719   00147E  CFC4 F007          	movff	4036,??_ADC_Read	;volatile
  5720   001482  6A08               	clrf	(??_ADC_Read+1)^0,c
  5721   001484  C007  F008         	movff	??_ADC_Read,??_ADC_Read+1
  5722   001488  6A07               	clrf	??_ADC_Read^0,c
  5723   00148A  1007               	iorwf	??_ADC_Read^0,w,c
  5724   00148C  6E0C               	movwf	ADC_Read@digital^0,c
  5725   00148E  5008               	movf	(??_ADC_Read+1)^0,w,c
  5726   001490  6E0D               	movwf	(ADC_Read@digital+1)^0,c
  5727                           
  5728                           ;helper.c: 13:     return(digital);
  5729   001492  C00C  F005         	movff	ADC_Read@digital,?_ADC_Read
  5730   001496  C00D  F006         	movff	ADC_Read@digital+1,?_ADC_Read+1
  5731   00149A  0012               	return		;funcret
  5732   00149C                     __end_of_ADC_Read:
  5733                           	callstack 0
  5734                           
  5735 ;; *************** function _getExpected *****************
  5736 ;; Defined at:
  5737 ;;		line 367 in file "main.c"
  5738 ;; Parameters:    Size  Location     Type
  5739 ;;		None
  5740 ;; Auto vars:     Size  Location     Type
  5741 ;;  expected        4   91[COMRAM] long 
  5742 ;;  ms              4   87[COMRAM] long 
  5743 ;; Return value:  Size  Location     Type
  5744 ;;                  4   83[COMRAM] long 
  5745 ;; Registers used:
  5746 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5747 ;; Tracked objects:
  5748 ;;		On entry : 0/0
  5749 ;;		On exit  : 0/0
  5750 ;;		Unchanged: 0/0
  5751 ;; Data sizes:     COMRAM   BANK0   BANK1
  5752 ;;      Params:         4       0       0
  5753 ;;      Locals:        16       0       0
  5754 ;;      Temps:          0       0       0
  5755 ;;      Totals:        20       0       0
  5756 ;;Total ram usage:       20 bytes
  5757 ;; Hardware stack levels used: 1
  5758 ;; Hardware stack levels required when called: 4
  5759 ;; This function calls:
  5760 ;;		___lldiv
  5761 ;;		___lmul
  5762 ;;		_calculateBitRatePer10Sec
  5763 ;;		_processTimeToSeconds
  5764 ;; This function is called by:
  5765 ;;		_infusion
  5766 ;; This function uses a non-reentrant model
  5767 ;;
  5768                           
  5769                           	psect	text34
  5770   000BE0                     __ptext34:
  5771                           	callstack 0
  5772   000BE0                     _getExpected:
  5773                           	callstack 24
  5774                           
  5775                           ;main.c: 368:     long ms = mil;
  5776                           
  5777                           ;incstack = 0
  5778   000BE0  C073  F058         	movff	_mil,getExpected@ms
  5779   000BE4  C074  F059         	movff	_mil+1,getExpected@ms+1
  5780   000BE8  C075  F05A         	movff	_mil+2,getExpected@ms+2
  5781   000BEC  C076  F05B         	movff	_mil+3,getExpected@ms+3
  5782                           
  5783                           ;main.c: 369:     long expected = 1023 - (((ms/1000UL) * (calculateBitRatePer10Sec(volum
      +                          e, processTimeToSeconds(timeInfusion)))/10)) ;
  5784   000BF0  0E00               	movlw	0
  5785   000BF2  6E0E               	movwf	(processTimeToSeconds@timeInput+1)^0,c
  5786   000BF4  0E64               	movlw	100
  5787   000BF6  6E0D               	movwf	processTimeToSeconds@timeInput^0,c
  5788   000BF8  EC2B  F00B         	call	_processTimeToSeconds	;wreg free
  5789   000BFC  C00D  F040         	movff	?_processTimeToSeconds,calculateBitRatePer10Sec@totalSeconds
  5790   000C00  C00E  F041         	movff	?_processTimeToSeconds+1,calculateBitRatePer10Sec@totalSeconds+1
  5791   000C04  0E00               	movlw	0
  5792   000C06  BE41               	btfsc	(calculateBitRatePer10Sec@totalSeconds+1)^0,7,c
  5793   000C08  0EFF               	movlw	-1
  5794   000C0A  6E42               	movwf	(calculateBitRatePer10Sec@totalSeconds+2)^0,c
  5795   000C0C  6E43               	movwf	(calculateBitRatePer10Sec@totalSeconds+3)^0,c
  5796   000C0E  0E0A               	movlw	10
  5797   000C10  6E3C               	movwf	calculateBitRatePer10Sec@volume_mL^0,c
  5798   000C12  0E00               	movlw	0
  5799   000C14  6E3D               	movwf	(calculateBitRatePer10Sec@volume_mL+1)^0,c
  5800   000C16  0E00               	movlw	0
  5801   000C18  6E3E               	movwf	(calculateBitRatePer10Sec@volume_mL+2)^0,c
  5802   000C1A  0E00               	movlw	0
  5803   000C1C  6E3F               	movwf	(calculateBitRatePer10Sec@volume_mL+3)^0,c
  5804   000C1E  EC5B  F005         	call	_calculateBitRatePer10Sec	;wreg free
  5805   000C22  C03C  F060         	movff	?_calculateBitRatePer10Sec,_getExpected$1675
  5806   000C26  C03D  F061         	movff	?_calculateBitRatePer10Sec+1,_getExpected$1675+1
  5807   000C2A  C03E  F062         	movff	?_calculateBitRatePer10Sec+2,_getExpected$1675+2
  5808   000C2E  C03F  F063         	movff	?_calculateBitRatePer10Sec+3,_getExpected$1675+3
  5809                           
  5810                           ;main.c: 369:     long expected = 1023 - (((ms/1000UL) * (calculateBitRatePer10Sec(volum
      +                          e, processTimeToSeconds(timeInfusion)))/10)) ;
  5811   000C32  0EE8               	movlw	232
  5812   000C34  6E19               	movwf	___lldiv@divisor^0,c
  5813   000C36  0E03               	movlw	3
  5814   000C38  6E1A               	movwf	(___lldiv@divisor+1)^0,c
  5815   000C3A  0E00               	movlw	0
  5816   000C3C  6E1B               	movwf	(___lldiv@divisor+2)^0,c
  5817   000C3E  0E00               	movlw	0
  5818   000C40  6E1C               	movwf	(___lldiv@divisor+3)^0,c
  5819   000C42  C058  F015         	movff	getExpected@ms,___lldiv@dividend
  5820   000C46  C059  F016         	movff	getExpected@ms+1,___lldiv@dividend+1
  5821   000C4A  C05A  F017         	movff	getExpected@ms+2,___lldiv@dividend+2
  5822   000C4E  C05B  F018         	movff	getExpected@ms+3,___lldiv@dividend+3
  5823   000C52  EC0E  F009         	call	___lldiv	;wreg free
  5824   000C56  C015  F022         	movff	?___lldiv,___lmul@multiplier
  5825   000C5A  C016  F023         	movff	?___lldiv+1,___lmul@multiplier+1
  5826   000C5E  C017  F024         	movff	?___lldiv+2,___lmul@multiplier+2
  5827   000C62  C018  F025         	movff	?___lldiv+3,___lmul@multiplier+3
  5828   000C66  C060  F026         	movff	_getExpected$1675,___lmul@multiplicand
  5829   000C6A  C061  F027         	movff	_getExpected$1675+1,___lmul@multiplicand+1
  5830   000C6E  C062  F028         	movff	_getExpected$1675+2,___lmul@multiplicand+2
  5831   000C72  C063  F029         	movff	_getExpected$1675+3,___lmul@multiplicand+3
  5832   000C76  ECE3  F00B         	call	___lmul	;wreg free
  5833   000C7A  C022  F064         	movff	?___lmul,_getExpected$1676
  5834   000C7E  C023  F065         	movff	?___lmul+1,_getExpected$1676+1
  5835   000C82  C024  F066         	movff	?___lmul+2,_getExpected$1676+2
  5836   000C86  C025  F067         	movff	?___lmul+3,_getExpected$1676+3
  5837                           
  5838                           ;main.c: 369:     long expected = 1023 - (((ms/1000UL) * (calculateBitRatePer10Sec(volum
      +                          e, processTimeToSeconds(timeInfusion)))/10)) ;
  5839   000C8A  C064  F015         	movff	_getExpected$1676,___lldiv@dividend
  5840   000C8E  C065  F016         	movff	_getExpected$1676+1,___lldiv@dividend+1
  5841   000C92  C066  F017         	movff	_getExpected$1676+2,___lldiv@dividend+2
  5842   000C96  C067  F018         	movff	_getExpected$1676+3,___lldiv@dividend+3
  5843   000C9A  0E0A               	movlw	10
  5844   000C9C  6E19               	movwf	___lldiv@divisor^0,c
  5845   000C9E  0E00               	movlw	0
  5846   000CA0  6E1A               	movwf	(___lldiv@divisor+1)^0,c
  5847   000CA2  0E00               	movlw	0
  5848   000CA4  6E1B               	movwf	(___lldiv@divisor+2)^0,c
  5849   000CA6  0E00               	movlw	0
  5850   000CA8  6E1C               	movwf	(___lldiv@divisor+3)^0,c
  5851   000CAA  EC0E  F009         	call	___lldiv	;wreg free
  5852   000CAE  5015               	movf	?___lldiv^0,w,c
  5853   000CB0  08FF               	sublw	255
  5854   000CB2  6E5C               	movwf	getExpected@expected^0,c
  5855   000CB4  0E03               	movlw	3
  5856   000CB6  5416               	subfwb	(?___lldiv+1)^0,w,c
  5857   000CB8  6E5D               	movwf	(getExpected@expected+1)^0,c
  5858   000CBA  0E00               	movlw	0
  5859   000CBC  5417               	subfwb	(?___lldiv+2)^0,w,c
  5860   000CBE  6E5E               	movwf	(getExpected@expected+2)^0,c
  5861   000CC0  0E00               	movlw	0
  5862   000CC2  5418               	subfwb	(?___lldiv+3)^0,w,c
  5863   000CC4  6E5F               	movwf	(getExpected@expected+3)^0,c
  5864                           
  5865                           ;main.c: 370:     return expected;
  5866   000CC6  C05C  F054         	movff	getExpected@expected,?_getExpected
  5867   000CCA  C05D  F055         	movff	getExpected@expected+1,?_getExpected+1
  5868   000CCE  C05E  F056         	movff	getExpected@expected+2,?_getExpected+2
  5869   000CD2  C05F  F057         	movff	getExpected@expected+3,?_getExpected+3
  5870   000CD6  0012               	return		;funcret
  5871   000CD8                     __end_of_getExpected:
  5872                           	callstack 0
  5873                           
  5874 ;; *************** function _processTimeToSeconds *****************
  5875 ;; Defined at:
  5876 ;;		line 337 in file "main.c"
  5877 ;; Parameters:    Size  Location     Type
  5878 ;;  timeInput       2   12[COMRAM] int 
  5879 ;; Auto vars:     Size  Location     Type
  5880 ;;  totalSeconds    2   18[COMRAM] int 
  5881 ;;  seconds         2   16[COMRAM] int 
  5882 ;;  minutes         2   14[COMRAM] int 
  5883 ;; Return value:  Size  Location     Type
  5884 ;;                  2   12[COMRAM] int 
  5885 ;; Registers used:
  5886 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5887 ;; Tracked objects:
  5888 ;;		On entry : 0/0
  5889 ;;		On exit  : 0/0
  5890 ;;		Unchanged: 0/0
  5891 ;; Data sizes:     COMRAM   BANK0   BANK1
  5892 ;;      Params:         2       0       0
  5893 ;;      Locals:         6       0       0
  5894 ;;      Temps:          0       0       0
  5895 ;;      Totals:         8       0       0
  5896 ;;Total ram usage:        8 bytes
  5897 ;; Hardware stack levels used: 1
  5898 ;; Hardware stack levels required when called: 3
  5899 ;; This function calls:
  5900 ;;		___awdiv
  5901 ;;		___awmod
  5902 ;;		___wmul
  5903 ;; This function is called by:
  5904 ;;		_getExpected
  5905 ;;		_infusion
  5906 ;; This function uses a non-reentrant model
  5907 ;;
  5908                           
  5909                           	psect	text35
  5910   001656                     __ptext35:
  5911                           	callstack 0
  5912   001656                     _processTimeToSeconds:
  5913                           	callstack 25
  5914                           
  5915                           ;main.c: 339:     int minutes = timeInput / 100;
  5916                           
  5917                           ;incstack = 0
  5918   001656  C00D  F005         	movff	processTimeToSeconds@timeInput,___awdiv@dividend
  5919   00165A  C00E  F006         	movff	processTimeToSeconds@timeInput+1,___awdiv@dividend+1
  5920   00165E  0E00               	movlw	0
  5921   001660  6E08               	movwf	(___awdiv@divisor+1)^0,c
  5922   001662  0E64               	movlw	100
  5923   001664  6E07               	movwf	___awdiv@divisor^0,c
  5924   001666  ECCC  F008         	call	___awdiv	;wreg free
  5925   00166A  C005  F00F         	movff	?___awdiv,processTimeToSeconds@minutes
  5926   00166E  C006  F010         	movff	?___awdiv+1,processTimeToSeconds@minutes+1
  5927                           
  5928                           ;main.c: 340:     int seconds = timeInput % 100;
  5929   001672  C00D  F005         	movff	processTimeToSeconds@timeInput,___awmod@dividend
  5930   001676  C00E  F006         	movff	processTimeToSeconds@timeInput+1,___awmod@dividend+1
  5931   00167A  0E00               	movlw	0
  5932   00167C  6E08               	movwf	(___awmod@divisor+1)^0,c
  5933   00167E  0E64               	movlw	100
  5934   001680  6E07               	movwf	___awmod@divisor^0,c
  5935   001682  ECBF  F00A         	call	___awmod	;wreg free
  5936   001686  C005  F011         	movff	?___awmod,processTimeToSeconds@seconds
  5937   00168A  C006  F012         	movff	?___awmod+1,processTimeToSeconds@seconds+1
  5938                           
  5939                           ;main.c: 343:     int totalSeconds = (minutes * 60) + seconds;
  5940   00168E  C00F  F005         	movff	processTimeToSeconds@minutes,___wmul@multiplier
  5941   001692  C010  F006         	movff	processTimeToSeconds@minutes+1,___wmul@multiplier+1
  5942   001696  0E00               	movlw	0
  5943   001698  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  5944   00169A  0E3C               	movlw	60
  5945   00169C  6E07               	movwf	___wmul@multiplicand^0,c
  5946   00169E  EC2B  F00D         	call	___wmul	;wreg free
  5947   0016A2  5011               	movf	processTimeToSeconds@seconds^0,w,c
  5948   0016A4  2405               	addwf	?___wmul^0,w,c
  5949   0016A6  6E13               	movwf	processTimeToSeconds@totalSeconds^0,c
  5950   0016A8  5012               	movf	(processTimeToSeconds@seconds+1)^0,w,c
  5951   0016AA  2006               	addwfc	(?___wmul+1)^0,w,c
  5952   0016AC  6E14               	movwf	(processTimeToSeconds@totalSeconds+1)^0,c
  5953                           
  5954                           ;main.c: 345:     return totalSeconds;
  5955   0016AE  C013  F00D         	movff	processTimeToSeconds@totalSeconds,?_processTimeToSeconds
  5956   0016B2  C014  F00E         	movff	processTimeToSeconds@totalSeconds+1,?_processTimeToSeconds+1
  5957   0016B6  0012               	return		;funcret
  5958   0016B8                     __end_of_processTimeToSeconds:
  5959                           	callstack 0
  5960                           
  5961 ;; *************** function ___wmul *****************
  5962 ;; Defined at:
  5963 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
  5964 ;; Parameters:    Size  Location     Type
  5965 ;;  multiplier      2    4[COMRAM] unsigned int 
  5966 ;;  multiplicand    2    6[COMRAM] unsigned int 
  5967 ;; Auto vars:     Size  Location     Type
  5968 ;;  product         2    8[COMRAM] unsigned int 
  5969 ;; Return value:  Size  Location     Type
  5970 ;;                  2    4[COMRAM] unsigned int 
  5971 ;; Registers used:
  5972 ;;		wreg, status,2, status,0, prodl, prodh
  5973 ;; Tracked objects:
  5974 ;;		On entry : 0/0
  5975 ;;		On exit  : 0/0
  5976 ;;		Unchanged: 0/0
  5977 ;; Data sizes:     COMRAM   BANK0   BANK1
  5978 ;;      Params:         4       0       0
  5979 ;;      Locals:         2       0       0
  5980 ;;      Temps:          0       0       0
  5981 ;;      Totals:         6       0       0
  5982 ;;Total ram usage:        6 bytes
  5983 ;; Hardware stack levels used: 1
  5984 ;; Hardware stack levels required when called: 2
  5985 ;; This function calls:
  5986 ;;		Nothing
  5987 ;; This function is called by:
  5988 ;;		_processTimeToSeconds
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991                           
  5992                           	psect	text36
  5993   001A56                     __ptext36:
  5994                           	callstack 0
  5995   001A56                     ___wmul:
  5996                           	callstack 25
  5997                           
  5998                           ;incstack = 0
  5999   001A56  5005               	movf	___wmul@multiplier^0,w,c
  6000   001A58  0207               	mulwf	___wmul@multiplicand^0,c
  6001   001A5A  CFF3 F009          	movff	prodl,___wmul@product
  6002   001A5E  CFF4 F00A          	movff	prodh,___wmul@product+1
  6003   001A62  5005               	movf	___wmul@multiplier^0,w,c
  6004   001A64  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  6005   001A66  50F3               	movf	243,w,c
  6006   001A68  260A               	addwf	(___wmul@product+1)^0,f,c
  6007   001A6A  5006               	movf	(___wmul@multiplier+1)^0,w,c
  6008   001A6C  0207               	mulwf	___wmul@multiplicand^0,c
  6009   001A6E  50F3               	movf	243,w,c
  6010   001A70  260A               	addwf	(___wmul@product+1)^0,f,c
  6011   001A72  C009  F005         	movff	___wmul@product,?___wmul
  6012   001A76  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  6013   001A7A  0012               	return		;funcret
  6014   001A7C                     __end_of___wmul:
  6015                           	callstack 0
  6016                           
  6017 ;; *************** function ___awmod *****************
  6018 ;; Defined at:
  6019 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  6020 ;; Parameters:    Size  Location     Type
  6021 ;;  dividend        2    4[COMRAM] int 
  6022 ;;  divisor         2    6[COMRAM] int 
  6023 ;; Auto vars:     Size  Location     Type
  6024 ;;  sign            1    9[COMRAM] unsigned char 
  6025 ;;  counter         1    8[COMRAM] unsigned char 
  6026 ;; Return value:  Size  Location     Type
  6027 ;;                  2    4[COMRAM] int 
  6028 ;; Registers used:
  6029 ;;		wreg, status,2, status,0
  6030 ;; Tracked objects:
  6031 ;;		On entry : 0/0
  6032 ;;		On exit  : 0/0
  6033 ;;		Unchanged: 0/0
  6034 ;; Data sizes:     COMRAM   BANK0   BANK1
  6035 ;;      Params:         4       0       0
  6036 ;;      Locals:         2       0       0
  6037 ;;      Temps:          0       0       0
  6038 ;;      Totals:         6       0       0
  6039 ;;Total ram usage:        6 bytes
  6040 ;; Hardware stack levels used: 1
  6041 ;; Hardware stack levels required when called: 2
  6042 ;; This function calls:
  6043 ;;		Nothing
  6044 ;; This function is called by:
  6045 ;;		_processTimeToSeconds
  6046 ;; This function uses a non-reentrant model
  6047 ;;
  6048                           
  6049                           	psect	text37
  6050   00157E                     __ptext37:
  6051                           	callstack 0
  6052   00157E                     ___awmod:
  6053                           	callstack 25
  6054                           
  6055                           ;incstack = 0
  6056   00157E  0E00               	movlw	0
  6057   001580  6E0A               	movwf	___awmod@sign^0,c
  6058   001582  AE06               	btfss	(___awmod@dividend+1)^0,7,c
  6059   001584  D006               	goto	l4007
  6060   001586  6C05               	negf	___awmod@dividend^0,c
  6061   001588  1E06               	comf	(___awmod@dividend+1)^0,f,c
  6062   00158A  B0D8               	btfsc	status,0,c
  6063   00158C  2A06               	incf	(___awmod@dividend+1)^0,f,c
  6064   00158E  0E01               	movlw	1
  6065   001590  6E0A               	movwf	___awmod@sign^0,c
  6066   001592                     l4007:
  6067   001592  AE08               	btfss	(___awmod@divisor+1)^0,7,c
  6068   001594  D004               	goto	l4011
  6069   001596  6C07               	negf	___awmod@divisor^0,c
  6070   001598  1E08               	comf	(___awmod@divisor+1)^0,f,c
  6071   00159A  B0D8               	btfsc	status,0,c
  6072   00159C  2A08               	incf	(___awmod@divisor+1)^0,f,c
  6073   00159E                     l4011:
  6074   00159E  5007               	movf	___awmod@divisor^0,w,c
  6075   0015A0  1008               	iorwf	(___awmod@divisor+1)^0,w,c
  6076   0015A2  B4D8               	btfsc	status,2,c
  6077   0015A4  D018               	goto	l4027
  6078   0015A6  0E01               	movlw	1
  6079   0015A8  6E09               	movwf	___awmod@counter^0,c
  6080   0015AA  D004               	goto	l4017
  6081   0015AC                     l4015:
  6082   0015AC  90D8               	bcf	status,0,c
  6083   0015AE  3607               	rlcf	___awmod@divisor^0,f,c
  6084   0015B0  3608               	rlcf	(___awmod@divisor+1)^0,f,c
  6085   0015B2  2A09               	incf	___awmod@counter^0,f,c
  6086   0015B4                     l4017:
  6087   0015B4  AE08               	btfss	(___awmod@divisor+1)^0,7,c
  6088   0015B6  D7FA               	goto	l4015
  6089   0015B8                     u3970:
  6090   0015B8  5007               	movf	___awmod@divisor^0,w,c
  6091   0015BA  5C05               	subwf	___awmod@dividend^0,w,c
  6092   0015BC  5008               	movf	(___awmod@divisor+1)^0,w,c
  6093   0015BE  5806               	subwfb	(___awmod@dividend+1)^0,w,c
  6094   0015C0  A0D8               	btfss	status,0,c
  6095   0015C2  D004               	goto	l4023
  6096   0015C4  5007               	movf	___awmod@divisor^0,w,c
  6097   0015C6  5E05               	subwf	___awmod@dividend^0,f,c
  6098   0015C8  5008               	movf	(___awmod@divisor+1)^0,w,c
  6099   0015CA  5A06               	subwfb	(___awmod@dividend+1)^0,f,c
  6100   0015CC                     l4023:
  6101   0015CC  90D8               	bcf	status,0,c
  6102   0015CE  3208               	rrcf	(___awmod@divisor+1)^0,f,c
  6103   0015D0  3207               	rrcf	___awmod@divisor^0,f,c
  6104   0015D2  2E09               	decfsz	___awmod@counter^0,f,c
  6105   0015D4  D7F1               	goto	u3970
  6106   0015D6                     l4027:
  6107   0015D6  500A               	movf	___awmod@sign^0,w,c
  6108   0015D8  B4D8               	btfsc	status,2,c
  6109   0015DA  D004               	goto	l4031
  6110   0015DC  6C05               	negf	___awmod@dividend^0,c
  6111   0015DE  1E06               	comf	(___awmod@dividend+1)^0,f,c
  6112   0015E0  B0D8               	btfsc	status,0,c
  6113   0015E2  2A06               	incf	(___awmod@dividend+1)^0,f,c
  6114   0015E4                     l4031:
  6115   0015E4  C005  F005         	movff	___awmod@dividend,?___awmod
  6116   0015E8  C006  F006         	movff	___awmod@dividend+1,?___awmod+1
  6117   0015EC  0012               	return		;funcret
  6118   0015EE                     __end_of___awmod:
  6119                           	callstack 0
  6120                           
  6121 ;; *************** function ___awdiv *****************
  6122 ;; Defined at:
  6123 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  6124 ;; Parameters:    Size  Location     Type
  6125 ;;  dividend        2    4[COMRAM] int 
  6126 ;;  divisor         2    6[COMRAM] int 
  6127 ;; Auto vars:     Size  Location     Type
  6128 ;;  quotient        2   10[COMRAM] int 
  6129 ;;  sign            1    9[COMRAM] unsigned char 
  6130 ;;  counter         1    8[COMRAM] unsigned char 
  6131 ;; Return value:  Size  Location     Type
  6132 ;;                  2    4[COMRAM] int 
  6133 ;; Registers used:
  6134 ;;		wreg, status,2, status,0
  6135 ;; Tracked objects:
  6136 ;;		On entry : 0/0
  6137 ;;		On exit  : 0/0
  6138 ;;		Unchanged: 0/0
  6139 ;; Data sizes:     COMRAM   BANK0   BANK1
  6140 ;;      Params:         4       0       0
  6141 ;;      Locals:         4       0       0
  6142 ;;      Temps:          0       0       0
  6143 ;;      Totals:         8       0       0
  6144 ;;Total ram usage:        8 bytes
  6145 ;; Hardware stack levels used: 1
  6146 ;; Hardware stack levels required when called: 2
  6147 ;; This function calls:
  6148 ;;		Nothing
  6149 ;; This function is called by:
  6150 ;;		_processTimeToSeconds
  6151 ;; This function uses a non-reentrant model
  6152 ;;
  6153                           
  6154                           	psect	text38
  6155   001198                     __ptext38:
  6156                           	callstack 0
  6157   001198                     ___awdiv:
  6158                           	callstack 25
  6159                           
  6160                           ;incstack = 0
  6161   001198  0E00               	movlw	0
  6162   00119A  6E0A               	movwf	___awdiv@sign^0,c
  6163   00119C  AE08               	btfss	(___awdiv@divisor+1)^0,7,c
  6164   00119E  D006               	goto	l3963
  6165   0011A0  6C07               	negf	___awdiv@divisor^0,c
  6166   0011A2  1E08               	comf	(___awdiv@divisor+1)^0,f,c
  6167   0011A4  B0D8               	btfsc	status,0,c
  6168   0011A6  2A08               	incf	(___awdiv@divisor+1)^0,f,c
  6169   0011A8  0E01               	movlw	1
  6170   0011AA  6E0A               	movwf	___awdiv@sign^0,c
  6171   0011AC                     l3963:
  6172   0011AC  AE06               	btfss	(___awdiv@dividend+1)^0,7,c
  6173   0011AE  D006               	goto	l3969
  6174   0011B0  6C05               	negf	___awdiv@dividend^0,c
  6175   0011B2  1E06               	comf	(___awdiv@dividend+1)^0,f,c
  6176   0011B4  B0D8               	btfsc	status,0,c
  6177   0011B6  2A06               	incf	(___awdiv@dividend+1)^0,f,c
  6178   0011B8  0E01               	movlw	1
  6179   0011BA  1A0A               	xorwf	___awdiv@sign^0,f,c
  6180   0011BC                     l3969:
  6181   0011BC  0E00               	movlw	0
  6182   0011BE  6E0C               	movwf	(___awdiv@quotient+1)^0,c
  6183   0011C0  0E00               	movlw	0
  6184   0011C2  6E0B               	movwf	___awdiv@quotient^0,c
  6185   0011C4  5007               	movf	___awdiv@divisor^0,w,c
  6186   0011C6  1008               	iorwf	(___awdiv@divisor+1)^0,w,c
  6187   0011C8  B4D8               	btfsc	status,2,c
  6188   0011CA  D01C               	goto	l3991
  6189   0011CC  0E01               	movlw	1
  6190   0011CE  6E09               	movwf	___awdiv@counter^0,c
  6191   0011D0  D004               	goto	l3977
  6192   0011D2                     l3975:
  6193   0011D2  90D8               	bcf	status,0,c
  6194   0011D4  3607               	rlcf	___awdiv@divisor^0,f,c
  6195   0011D6  3608               	rlcf	(___awdiv@divisor+1)^0,f,c
  6196   0011D8  2A09               	incf	___awdiv@counter^0,f,c
  6197   0011DA                     l3977:
  6198   0011DA  AE08               	btfss	(___awdiv@divisor+1)^0,7,c
  6199   0011DC  D7FA               	goto	l3975
  6200   0011DE                     u3910:
  6201   0011DE  90D8               	bcf	status,0,c
  6202   0011E0  360B               	rlcf	___awdiv@quotient^0,f,c
  6203   0011E2  360C               	rlcf	(___awdiv@quotient+1)^0,f,c
  6204   0011E4  5007               	movf	___awdiv@divisor^0,w,c
  6205   0011E6  5C05               	subwf	___awdiv@dividend^0,w,c
  6206   0011E8  5008               	movf	(___awdiv@divisor+1)^0,w,c
  6207   0011EA  5806               	subwfb	(___awdiv@dividend+1)^0,w,c
  6208   0011EC  A0D8               	btfss	status,0,c
  6209   0011EE  D005               	goto	l3987
  6210   0011F0  5007               	movf	___awdiv@divisor^0,w,c
  6211   0011F2  5E05               	subwf	___awdiv@dividend^0,f,c
  6212   0011F4  5008               	movf	(___awdiv@divisor+1)^0,w,c
  6213   0011F6  5A06               	subwfb	(___awdiv@dividend+1)^0,f,c
  6214   0011F8  800B               	bsf	___awdiv@quotient^0,0,c
  6215   0011FA                     l3987:
  6216   0011FA  90D8               	bcf	status,0,c
  6217   0011FC  3208               	rrcf	(___awdiv@divisor+1)^0,f,c
  6218   0011FE  3207               	rrcf	___awdiv@divisor^0,f,c
  6219   001200  2E09               	decfsz	___awdiv@counter^0,f,c
  6220   001202  D7ED               	goto	u3910
  6221   001204                     l3991:
  6222   001204  500A               	movf	___awdiv@sign^0,w,c
  6223   001206  B4D8               	btfsc	status,2,c
  6224   001208  D004               	goto	l3995
  6225   00120A  6C0B               	negf	___awdiv@quotient^0,c
  6226   00120C  1E0C               	comf	(___awdiv@quotient+1)^0,f,c
  6227   00120E  B0D8               	btfsc	status,0,c
  6228   001210  2A0C               	incf	(___awdiv@quotient+1)^0,f,c
  6229   001212                     l3995:
  6230   001212  C00B  F005         	movff	___awdiv@quotient,?___awdiv
  6231   001216  C00C  F006         	movff	___awdiv@quotient+1,?___awdiv+1
  6232   00121A  0012               	return		;funcret
  6233   00121C                     __end_of___awdiv:
  6234                           	callstack 0
  6235                           
  6236 ;; *************** function _calculateBitRatePer10Sec *****************
  6237 ;; Defined at:
  6238 ;;		line 348 in file "main.c"
  6239 ;; Parameters:    Size  Location     Type
  6240 ;;  volume_mL       4   59[COMRAM] long 
  6241 ;;  totalSeconds    4   63[COMRAM] long 
  6242 ;; Auto vars:     Size  Location     Type
  6243 ;;  bit_rate_per    4   79[COMRAM] long 
  6244 ;;  bit_rate_per    4   75[COMRAM] long 
  6245 ;;  length_per_m    4   71[COMRAM] long 
  6246 ;;  length_mm_sc    4   67[COMRAM] long 
  6247 ;; Return value:  Size  Location     Type
  6248 ;;                  4   59[COMRAM] long 
  6249 ;; Registers used:
  6250 ;;		wreg, status,2, status,0, cstack
  6251 ;; Tracked objects:
  6252 ;;		On entry : 0/0
  6253 ;;		On exit  : 0/0
  6254 ;;		Unchanged: 0/0
  6255 ;; Data sizes:     COMRAM   BANK0   BANK1
  6256 ;;      Params:         8       0       0
  6257 ;;      Locals:        16       0       0
  6258 ;;      Temps:          0       0       0
  6259 ;;      Totals:        24       0       0
  6260 ;;Total ram usage:       24 bytes
  6261 ;; Hardware stack levels used: 1
  6262 ;; Hardware stack levels required when called: 3
  6263 ;; This function calls:
  6264 ;;		___aldiv
  6265 ;;		___lmul
  6266 ;; This function is called by:
  6267 ;;		_getExpected
  6268 ;; This function uses a non-reentrant model
  6269 ;;
  6270                           
  6271                           	psect	text39
  6272   000AB6                     __ptext39:
  6273                           	callstack 0
  6274   000AB6                     _calculateBitRatePer10Sec:
  6275                           	callstack 24
  6276                           
  6277                           ;main.c: 353:     long length_mm_scaled = (volume_mL * 10000) / 158;
  6278                           
  6279                           ;incstack = 0
  6280   000AB6  C03C  F022         	movff	calculateBitRatePer10Sec@volume_mL,___lmul@multiplier
  6281   000ABA  C03D  F023         	movff	calculateBitRatePer10Sec@volume_mL+1,___lmul@multiplier+1
  6282   000ABE  C03E  F024         	movff	calculateBitRatePer10Sec@volume_mL+2,___lmul@multiplier+2
  6283   000AC2  C03F  F025         	movff	calculateBitRatePer10Sec@volume_mL+3,___lmul@multiplier+3
  6284   000AC6  0E10               	movlw	16
  6285   000AC8  6E26               	movwf	___lmul@multiplicand^0,c
  6286   000ACA  0E27               	movlw	39
  6287   000ACC  6E27               	movwf	(___lmul@multiplicand+1)^0,c
  6288   000ACE  0E00               	movlw	0
  6289   000AD0  6E28               	movwf	(___lmul@multiplicand+2)^0,c
  6290   000AD2  0E00               	movlw	0
  6291   000AD4  6E29               	movwf	(___lmul@multiplicand+3)^0,c
  6292   000AD6  ECE3  F00B         	call	___lmul	;wreg free
  6293   000ADA  C022  F02E         	movff	?___lmul,___aldiv@dividend
  6294   000ADE  C023  F02F         	movff	?___lmul+1,___aldiv@dividend+1
  6295   000AE2  C024  F030         	movff	?___lmul+2,___aldiv@dividend+2
  6296   000AE6  C025  F031         	movff	?___lmul+3,___aldiv@dividend+3
  6297   000AEA  0E9E               	movlw	158
  6298   000AEC  6E32               	movwf	___aldiv@divisor^0,c
  6299   000AEE  0E00               	movlw	0
  6300   000AF0  6E33               	movwf	(___aldiv@divisor+1)^0,c
  6301   000AF2  0E00               	movlw	0
  6302   000AF4  6E34               	movwf	(___aldiv@divisor+2)^0,c
  6303   000AF6  0E00               	movlw	0
  6304   000AF8  6E35               	movwf	(___aldiv@divisor+3)^0,c
  6305   000AFA  EC6C  F006         	call	___aldiv	;wreg free
  6306   000AFE  C02E  F044         	movff	?___aldiv,calculateBitRatePer10Sec@length_mm_scaled
  6307   000B02  C02F  F045         	movff	?___aldiv+1,calculateBitRatePer10Sec@length_mm_scaled+1
  6308   000B06  C030  F046         	movff	?___aldiv+2,calculateBitRatePer10Sec@length_mm_scaled+2
  6309   000B0A  C031  F047         	movff	?___aldiv+3,calculateBitRatePer10Sec@length_mm_scaled+3
  6310                           
  6311                           ;main.c: 356:     long length_per_min_mm_scaled = length_mm_scaled / totalSeconds;
  6312   000B0E  C044  F02E         	movff	calculateBitRatePer10Sec@length_mm_scaled,___aldiv@dividend
  6313   000B12  C045  F02F         	movff	calculateBitRatePer10Sec@length_mm_scaled+1,___aldiv@dividend+1
  6314   000B16  C046  F030         	movff	calculateBitRatePer10Sec@length_mm_scaled+2,___aldiv@dividend+2
  6315   000B1A  C047  F031         	movff	calculateBitRatePer10Sec@length_mm_scaled+3,___aldiv@dividend+3
  6316   000B1E  C040  F032         	movff	calculateBitRatePer10Sec@totalSeconds,___aldiv@divisor
  6317   000B22  C041  F033         	movff	calculateBitRatePer10Sec@totalSeconds+1,___aldiv@divisor+1
  6318   000B26  C042  F034         	movff	calculateBitRatePer10Sec@totalSeconds+2,___aldiv@divisor+2
  6319   000B2A  C043  F035         	movff	calculateBitRatePer10Sec@totalSeconds+3,___aldiv@divisor+3
  6320   000B2E  EC6C  F006         	call	___aldiv	;wreg free
  6321   000B32  C02E  F048         	movff	?___aldiv,calculateBitRatePer10Sec@length_per_min_mm_scaled
  6322   000B36  C02F  F049         	movff	?___aldiv+1,calculateBitRatePer10Sec@length_per_min_mm_scaled+1
  6323   000B3A  C030  F04A         	movff	?___aldiv+2,calculateBitRatePer10Sec@length_per_min_mm_scaled+2
  6324   000B3E  C031  F04B         	movff	?___aldiv+3,calculateBitRatePer10Sec@length_per_min_mm_scaled+3
  6325                           
  6326                           ;main.c: 359:     long bit_rate_per_min_scaled = (length_per_min_mm_scaled * 100) / (635
      +                          /60);
  6327   000B42  C048  F022         	movff	calculateBitRatePer10Sec@length_per_min_mm_scaled,___lmul@multiplier
  6328   000B46  C049  F023         	movff	calculateBitRatePer10Sec@length_per_min_mm_scaled+1,___lmul@multiplier+1
  6329   000B4A  C04A  F024         	movff	calculateBitRatePer10Sec@length_per_min_mm_scaled+2,___lmul@multiplier+2
  6330   000B4E  C04B  F025         	movff	calculateBitRatePer10Sec@length_per_min_mm_scaled+3,___lmul@multiplier+3
  6331   000B52  0E64               	movlw	100
  6332   000B54  6E26               	movwf	___lmul@multiplicand^0,c
  6333   000B56  0E00               	movlw	0
  6334   000B58  6E27               	movwf	(___lmul@multiplicand+1)^0,c
  6335   000B5A  0E00               	movlw	0
  6336   000B5C  6E28               	movwf	(___lmul@multiplicand+2)^0,c
  6337   000B5E  0E00               	movlw	0
  6338   000B60  6E29               	movwf	(___lmul@multiplicand+3)^0,c
  6339   000B62  ECE3  F00B         	call	___lmul	;wreg free
  6340   000B66  C022  F02E         	movff	?___lmul,___aldiv@dividend
  6341   000B6A  C023  F02F         	movff	?___lmul+1,___aldiv@dividend+1
  6342   000B6E  C024  F030         	movff	?___lmul+2,___aldiv@dividend+2
  6343   000B72  C025  F031         	movff	?___lmul+3,___aldiv@dividend+3
  6344   000B76  0E0A               	movlw	10
  6345   000B78  6E32               	movwf	___aldiv@divisor^0,c
  6346   000B7A  0E00               	movlw	0
  6347   000B7C  6E33               	movwf	(___aldiv@divisor+1)^0,c
  6348   000B7E  0E00               	movlw	0
  6349   000B80  6E34               	movwf	(___aldiv@divisor+2)^0,c
  6350   000B82  0E00               	movlw	0
  6351   000B84  6E35               	movwf	(___aldiv@divisor+3)^0,c
  6352   000B86  EC6C  F006         	call	___aldiv	;wreg free
  6353   000B8A  C02E  F04C         	movff	?___aldiv,calculateBitRatePer10Sec@bit_rate_per_min_scaled
  6354   000B8E  C02F  F04D         	movff	?___aldiv+1,calculateBitRatePer10Sec@bit_rate_per_min_scaled+1
  6355   000B92  C030  F04E         	movff	?___aldiv+2,calculateBitRatePer10Sec@bit_rate_per_min_scaled+2
  6356   000B96  C031  F04F         	movff	?___aldiv+3,calculateBitRatePer10Sec@bit_rate_per_min_scaled+3
  6357                           
  6358                           ;main.c: 362:     long bit_rate_per_10sec = bit_rate_per_min_scaled / 6;
  6359   000B9A  C04C  F02E         	movff	calculateBitRatePer10Sec@bit_rate_per_min_scaled,___aldiv@dividend
  6360   000B9E  C04D  F02F         	movff	calculateBitRatePer10Sec@bit_rate_per_min_scaled+1,___aldiv@dividend+1
  6361   000BA2  C04E  F030         	movff	calculateBitRatePer10Sec@bit_rate_per_min_scaled+2,___aldiv@dividend+2
  6362   000BA6  C04F  F031         	movff	calculateBitRatePer10Sec@bit_rate_per_min_scaled+3,___aldiv@dividend+3
  6363   000BAA  0E06               	movlw	6
  6364   000BAC  6E32               	movwf	___aldiv@divisor^0,c
  6365   000BAE  0E00               	movlw	0
  6366   000BB0  6E33               	movwf	(___aldiv@divisor+1)^0,c
  6367   000BB2  0E00               	movlw	0
  6368   000BB4  6E34               	movwf	(___aldiv@divisor+2)^0,c
  6369   000BB6  0E00               	movlw	0
  6370   000BB8  6E35               	movwf	(___aldiv@divisor+3)^0,c
  6371   000BBA  EC6C  F006         	call	___aldiv	;wreg free
  6372   000BBE  C02E  F050         	movff	?___aldiv,calculateBitRatePer10Sec@bit_rate_per_10sec
  6373   000BC2  C02F  F051         	movff	?___aldiv+1,calculateBitRatePer10Sec@bit_rate_per_10sec+1
  6374   000BC6  C030  F052         	movff	?___aldiv+2,calculateBitRatePer10Sec@bit_rate_per_10sec+2
  6375   000BCA  C031  F053         	movff	?___aldiv+3,calculateBitRatePer10Sec@bit_rate_per_10sec+3
  6376                           
  6377                           ;main.c: 364:     return bit_rate_per_10sec;
  6378   000BCE  C050  F03C         	movff	calculateBitRatePer10Sec@bit_rate_per_10sec,?_calculateBitRatePer10Sec
  6379   000BD2  C051  F03D         	movff	calculateBitRatePer10Sec@bit_rate_per_10sec+1,?_calculateBitRatePer10Sec+1
  6380   000BD6  C052  F03E         	movff	calculateBitRatePer10Sec@bit_rate_per_10sec+2,?_calculateBitRatePer10Sec+2
  6381   000BDA  C053  F03F         	movff	calculateBitRatePer10Sec@bit_rate_per_10sec+3,?_calculateBitRatePer10Sec+3
  6382   000BDE  0012               	return		;funcret
  6383   000BE0                     __end_of_calculateBitRatePer10Sec:
  6384                           	callstack 0
  6385                           
  6386 ;; *************** function ___lmul *****************
  6387 ;; Defined at:
  6388 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul32.c"
  6389 ;; Parameters:    Size  Location     Type
  6390 ;;  multiplier      4   33[COMRAM] unsigned long 
  6391 ;;  multiplicand    4   37[COMRAM] unsigned long 
  6392 ;; Auto vars:     Size  Location     Type
  6393 ;;  product         4   41[COMRAM] unsigned long 
  6394 ;; Return value:  Size  Location     Type
  6395 ;;                  4   33[COMRAM] unsigned long 
  6396 ;; Registers used:
  6397 ;;		wreg, status,2, status,0
  6398 ;; Tracked objects:
  6399 ;;		On entry : 0/0
  6400 ;;		On exit  : 0/0
  6401 ;;		Unchanged: 0/0
  6402 ;; Data sizes:     COMRAM   BANK0   BANK1
  6403 ;;      Params:         8       0       0
  6404 ;;      Locals:         4       0       0
  6405 ;;      Temps:          0       0       0
  6406 ;;      Totals:        12       0       0
  6407 ;;Total ram usage:       12 bytes
  6408 ;; Hardware stack levels used: 1
  6409 ;; Hardware stack levels required when called: 2
  6410 ;; This function calls:
  6411 ;;		Nothing
  6412 ;; This function is called by:
  6413 ;;		_calculateBitRatePer10Sec
  6414 ;;		_getExpected
  6415 ;;		_infusion
  6416 ;; This function uses a non-reentrant model
  6417 ;;
  6418                           
  6419                           	psect	text40
  6420   0017C6                     __ptext40:
  6421                           	callstack 0
  6422   0017C6                     ___lmul:
  6423                           	callstack 24
  6424                           
  6425                           ;incstack = 0
  6426   0017C6  0E00               	movlw	0
  6427   0017C8  6E2A               	movwf	___lmul@product^0,c
  6428   0017CA  0E00               	movlw	0
  6429   0017CC  6E2B               	movwf	(___lmul@product+1)^0,c
  6430   0017CE  0E00               	movlw	0
  6431   0017D0  6E2C               	movwf	(___lmul@product+2)^0,c
  6432   0017D2  0E00               	movlw	0
  6433   0017D4  6E2D               	movwf	(___lmul@product+3)^0,c
  6434   0017D6                     l3947:
  6435   0017D6  A022               	btfss	___lmul@multiplier^0,0,c
  6436   0017D8  D008               	goto	l3951
  6437   0017DA  5026               	movf	___lmul@multiplicand^0,w,c
  6438   0017DC  262A               	addwf	___lmul@product^0,f,c
  6439   0017DE  5027               	movf	(___lmul@multiplicand+1)^0,w,c
  6440   0017E0  222B               	addwfc	(___lmul@product+1)^0,f,c
  6441   0017E2  5028               	movf	(___lmul@multiplicand+2)^0,w,c
  6442   0017E4  222C               	addwfc	(___lmul@product+2)^0,f,c
  6443   0017E6  5029               	movf	(___lmul@multiplicand+3)^0,w,c
  6444   0017E8  222D               	addwfc	(___lmul@product+3)^0,f,c
  6445   0017EA                     l3951:
  6446   0017EA  90D8               	bcf	status,0,c
  6447   0017EC  3626               	rlcf	___lmul@multiplicand^0,f,c
  6448   0017EE  3627               	rlcf	(___lmul@multiplicand+1)^0,f,c
  6449   0017F0  3628               	rlcf	(___lmul@multiplicand+2)^0,f,c
  6450   0017F2  3629               	rlcf	(___lmul@multiplicand+3)^0,f,c
  6451   0017F4  90D8               	bcf	status,0,c
  6452   0017F6  3225               	rrcf	(___lmul@multiplier+3)^0,f,c
  6453   0017F8  3224               	rrcf	(___lmul@multiplier+2)^0,f,c
  6454   0017FA  3223               	rrcf	(___lmul@multiplier+1)^0,f,c
  6455   0017FC  3222               	rrcf	___lmul@multiplier^0,f,c
  6456   0017FE  5022               	movf	___lmul@multiplier^0,w,c
  6457   001800  1023               	iorwf	(___lmul@multiplier+1)^0,w,c
  6458   001802  1024               	iorwf	(___lmul@multiplier+2)^0,w,c
  6459   001804  1025               	iorwf	(___lmul@multiplier+3)^0,w,c
  6460   001806  A4D8               	btfss	status,2,c
  6461   001808  D7E6               	goto	l3947
  6462   00180A  C02A  F022         	movff	___lmul@product,?___lmul
  6463   00180E  C02B  F023         	movff	___lmul@product+1,?___lmul+1
  6464   001812  C02C  F024         	movff	___lmul@product+2,?___lmul+2
  6465   001816  C02D  F025         	movff	___lmul@product+3,?___lmul+3
  6466   00181A  0012               	return		;funcret
  6467   00181C                     __end_of___lmul:
  6468                           	callstack 0
  6469                           
  6470 ;; *************** function ___aldiv *****************
  6471 ;; Defined at:
  6472 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\aldiv.c"
  6473 ;; Parameters:    Size  Location     Type
  6474 ;;  dividend        4   45[COMRAM] long 
  6475 ;;  divisor         4   49[COMRAM] long 
  6476 ;; Auto vars:     Size  Location     Type
  6477 ;;  quotient        4   55[COMRAM] long 
  6478 ;;  sign            1   54[COMRAM] unsigned char 
  6479 ;;  counter         1   53[COMRAM] unsigned char 
  6480 ;; Return value:  Size  Location     Type
  6481 ;;                  4   45[COMRAM] long 
  6482 ;; Registers used:
  6483 ;;		wreg, status,2, status,0
  6484 ;; Tracked objects:
  6485 ;;		On entry : 0/0
  6486 ;;		On exit  : 0/0
  6487 ;;		Unchanged: 0/0
  6488 ;; Data sizes:     COMRAM   BANK0   BANK1
  6489 ;;      Params:         8       0       0
  6490 ;;      Locals:         6       0       0
  6491 ;;      Temps:          0       0       0
  6492 ;;      Totals:        14       0       0
  6493 ;;Total ram usage:       14 bytes
  6494 ;; Hardware stack levels used: 1
  6495 ;; Hardware stack levels required when called: 2
  6496 ;; This function calls:
  6497 ;;		Nothing
  6498 ;; This function is called by:
  6499 ;;		_calculateBitRatePer10Sec
  6500 ;;		_infusion
  6501 ;;		_vfpfcnvrt
  6502 ;; This function uses a non-reentrant model
  6503 ;;
  6504                           
  6505                           	psect	text41
  6506   000CD8                     __ptext41:
  6507                           	callstack 0
  6508   000CD8                     ___aldiv:
  6509                           	callstack 23
  6510                           
  6511                           ;incstack = 0
  6512   000CD8  0E00               	movlw	0
  6513   000CDA  6E37               	movwf	___aldiv@sign^0,c
  6514   000CDC  AE35               	btfss	(___aldiv@divisor+3)^0,7,c
  6515   000CDE  D00A               	goto	l3793
  6516   000CE0  1E35               	comf	(___aldiv@divisor+3)^0,f,c
  6517   000CE2  1E34               	comf	(___aldiv@divisor+2)^0,f,c
  6518   000CE4  1E33               	comf	(___aldiv@divisor+1)^0,f,c
  6519   000CE6  6C32               	negf	___aldiv@divisor^0,c
  6520   000CE8  0E00               	movlw	0
  6521   000CEA  2233               	addwfc	(___aldiv@divisor+1)^0,f,c
  6522   000CEC  2234               	addwfc	(___aldiv@divisor+2)^0,f,c
  6523   000CEE  2235               	addwfc	(___aldiv@divisor+3)^0,f,c
  6524   000CF0  0E01               	movlw	1
  6525   000CF2  6E37               	movwf	___aldiv@sign^0,c
  6526   000CF4                     l3793:
  6527   000CF4  AE31               	btfss	(___aldiv@dividend+3)^0,7,c
  6528   000CF6  D00A               	goto	l3799
  6529   000CF8  1E31               	comf	(___aldiv@dividend+3)^0,f,c
  6530   000CFA  1E30               	comf	(___aldiv@dividend+2)^0,f,c
  6531   000CFC  1E2F               	comf	(___aldiv@dividend+1)^0,f,c
  6532   000CFE  6C2E               	negf	___aldiv@dividend^0,c
  6533   000D00  0E00               	movlw	0
  6534   000D02  222F               	addwfc	(___aldiv@dividend+1)^0,f,c
  6535   000D04  2230               	addwfc	(___aldiv@dividend+2)^0,f,c
  6536   000D06  2231               	addwfc	(___aldiv@dividend+3)^0,f,c
  6537   000D08  0E01               	movlw	1
  6538   000D0A  1A37               	xorwf	___aldiv@sign^0,f,c
  6539   000D0C                     l3799:
  6540   000D0C  0E00               	movlw	0
  6541   000D0E  6E38               	movwf	___aldiv@quotient^0,c
  6542   000D10  0E00               	movlw	0
  6543   000D12  6E39               	movwf	(___aldiv@quotient+1)^0,c
  6544   000D14  0E00               	movlw	0
  6545   000D16  6E3A               	movwf	(___aldiv@quotient+2)^0,c
  6546   000D18  0E00               	movlw	0
  6547   000D1A  6E3B               	movwf	(___aldiv@quotient+3)^0,c
  6548   000D1C  5032               	movf	___aldiv@divisor^0,w,c
  6549   000D1E  1033               	iorwf	(___aldiv@divisor+1)^0,w,c
  6550   000D20  1034               	iorwf	(___aldiv@divisor+2)^0,w,c
  6551   000D22  1035               	iorwf	(___aldiv@divisor+3)^0,w,c
  6552   000D24  B4D8               	btfsc	status,2,c
  6553   000D26  D02A               	goto	l3821
  6554   000D28  0E01               	movlw	1
  6555   000D2A  6E36               	movwf	___aldiv@counter^0,c
  6556   000D2C  D006               	goto	l3807
  6557   000D2E                     l3805:
  6558   000D2E  90D8               	bcf	status,0,c
  6559   000D30  3632               	rlcf	___aldiv@divisor^0,f,c
  6560   000D32  3633               	rlcf	(___aldiv@divisor+1)^0,f,c
  6561   000D34  3634               	rlcf	(___aldiv@divisor+2)^0,f,c
  6562   000D36  3635               	rlcf	(___aldiv@divisor+3)^0,f,c
  6563   000D38  2A36               	incf	___aldiv@counter^0,f,c
  6564   000D3A                     l3807:
  6565   000D3A  AE35               	btfss	(___aldiv@divisor+3)^0,7,c
  6566   000D3C  D7F8               	goto	l3805
  6567   000D3E                     u3600:
  6568   000D3E  90D8               	bcf	status,0,c
  6569   000D40  3638               	rlcf	___aldiv@quotient^0,f,c
  6570   000D42  3639               	rlcf	(___aldiv@quotient+1)^0,f,c
  6571   000D44  363A               	rlcf	(___aldiv@quotient+2)^0,f,c
  6572   000D46  363B               	rlcf	(___aldiv@quotient+3)^0,f,c
  6573   000D48  5032               	movf	___aldiv@divisor^0,w,c
  6574   000D4A  5C2E               	subwf	___aldiv@dividend^0,w,c
  6575   000D4C  5033               	movf	(___aldiv@divisor+1)^0,w,c
  6576   000D4E  582F               	subwfb	(___aldiv@dividend+1)^0,w,c
  6577   000D50  5034               	movf	(___aldiv@divisor+2)^0,w,c
  6578   000D52  5830               	subwfb	(___aldiv@dividend+2)^0,w,c
  6579   000D54  5035               	movf	(___aldiv@divisor+3)^0,w,c
  6580   000D56  5831               	subwfb	(___aldiv@dividend+3)^0,w,c
  6581   000D58  A0D8               	btfss	status,0,c
  6582   000D5A  D009               	goto	l3817
  6583   000D5C  5032               	movf	___aldiv@divisor^0,w,c
  6584   000D5E  5E2E               	subwf	___aldiv@dividend^0,f,c
  6585   000D60  5033               	movf	(___aldiv@divisor+1)^0,w,c
  6586   000D62  5A2F               	subwfb	(___aldiv@dividend+1)^0,f,c
  6587   000D64  5034               	movf	(___aldiv@divisor+2)^0,w,c
  6588   000D66  5A30               	subwfb	(___aldiv@dividend+2)^0,f,c
  6589   000D68  5035               	movf	(___aldiv@divisor+3)^0,w,c
  6590   000D6A  5A31               	subwfb	(___aldiv@dividend+3)^0,f,c
  6591   000D6C  8038               	bsf	___aldiv@quotient^0,0,c
  6592   000D6E                     l3817:
  6593   000D6E  90D8               	bcf	status,0,c
  6594   000D70  3235               	rrcf	(___aldiv@divisor+3)^0,f,c
  6595   000D72  3234               	rrcf	(___aldiv@divisor+2)^0,f,c
  6596   000D74  3233               	rrcf	(___aldiv@divisor+1)^0,f,c
  6597   000D76  3232               	rrcf	___aldiv@divisor^0,f,c
  6598   000D78  2E36               	decfsz	___aldiv@counter^0,f,c
  6599   000D7A  D7E1               	goto	u3600
  6600   000D7C                     l3821:
  6601   000D7C  5037               	movf	___aldiv@sign^0,w,c
  6602   000D7E  B4D8               	btfsc	status,2,c
  6603   000D80  D008               	goto	l3825
  6604   000D82  1E3B               	comf	(___aldiv@quotient+3)^0,f,c
  6605   000D84  1E3A               	comf	(___aldiv@quotient+2)^0,f,c
  6606   000D86  1E39               	comf	(___aldiv@quotient+1)^0,f,c
  6607   000D88  6C38               	negf	___aldiv@quotient^0,c
  6608   000D8A  0E00               	movlw	0
  6609   000D8C  2239               	addwfc	(___aldiv@quotient+1)^0,f,c
  6610   000D8E  223A               	addwfc	(___aldiv@quotient+2)^0,f,c
  6611   000D90  223B               	addwfc	(___aldiv@quotient+3)^0,f,c
  6612   000D92                     l3825:
  6613   000D92  C038  F02E         	movff	___aldiv@quotient,?___aldiv
  6614   000D96  C039  F02F         	movff	___aldiv@quotient+1,?___aldiv+1
  6615   000D9A  C03A  F030         	movff	___aldiv@quotient+2,?___aldiv+2
  6616   000D9E  C03B  F031         	movff	___aldiv@quotient+3,?___aldiv+3
  6617   000DA2  0012               	return		;funcret
  6618   000DA4                     __end_of___aldiv:
  6619                           	callstack 0
  6620                           
  6621 ;; *************** function ___lldiv *****************
  6622 ;; Defined at:
  6623 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\__lldiv.c"
  6624 ;; Parameters:    Size  Location     Type
  6625 ;;  dividend        4   20[COMRAM] unsigned long 
  6626 ;;  divisor         4   24[COMRAM] unsigned long 
  6627 ;; Auto vars:     Size  Location     Type
  6628 ;;  quotient        4   28[COMRAM] unsigned long 
  6629 ;;  counter         1   32[COMRAM] unsigned char 
  6630 ;; Return value:  Size  Location     Type
  6631 ;;                  4   20[COMRAM] unsigned long 
  6632 ;; Registers used:
  6633 ;;		wreg, status,2, status,0
  6634 ;; Tracked objects:
  6635 ;;		On entry : 0/0
  6636 ;;		On exit  : 0/0
  6637 ;;		Unchanged: 0/0
  6638 ;; Data sizes:     COMRAM   BANK0   BANK1
  6639 ;;      Params:         8       0       0
  6640 ;;      Locals:         5       0       0
  6641 ;;      Temps:          0       0       0
  6642 ;;      Totals:        13       0       0
  6643 ;;Total ram usage:       13 bytes
  6644 ;; Hardware stack levels used: 1
  6645 ;; Hardware stack levels required when called: 2
  6646 ;; This function calls:
  6647 ;;		Nothing
  6648 ;; This function is called by:
  6649 ;;		_getExpected
  6650 ;; This function uses a non-reentrant model
  6651 ;;
  6652                           
  6653                           	psect	text42
  6654   00121C                     __ptext42:
  6655                           	callstack 0
  6656   00121C                     ___lldiv:
  6657                           	callstack 25
  6658                           
  6659                           ;incstack = 0
  6660   00121C  0E00               	movlw	0
  6661   00121E  6E1D               	movwf	___lldiv@quotient^0,c
  6662   001220  0E00               	movlw	0
  6663   001222  6E1E               	movwf	(___lldiv@quotient+1)^0,c
  6664   001224  0E00               	movlw	0
  6665   001226  6E1F               	movwf	(___lldiv@quotient+2)^0,c
  6666   001228  0E00               	movlw	0
  6667   00122A  6E20               	movwf	(___lldiv@quotient+3)^0,c
  6668   00122C  5019               	movf	___lldiv@divisor^0,w,c
  6669   00122E  101A               	iorwf	(___lldiv@divisor+1)^0,w,c
  6670   001230  101B               	iorwf	(___lldiv@divisor+2)^0,w,c
  6671   001232  101C               	iorwf	(___lldiv@divisor+3)^0,w,c
  6672   001234  B4D8               	btfsc	status,2,c
  6673   001236  D02A               	goto	l626
  6674   001238  0E01               	movlw	1
  6675   00123A  6E21               	movwf	___lldiv@counter^0,c
  6676   00123C  D006               	goto	l4245
  6677   00123E                     l4243:
  6678   00123E  90D8               	bcf	status,0,c
  6679   001240  3619               	rlcf	___lldiv@divisor^0,f,c
  6680   001242  361A               	rlcf	(___lldiv@divisor+1)^0,f,c
  6681   001244  361B               	rlcf	(___lldiv@divisor+2)^0,f,c
  6682   001246  361C               	rlcf	(___lldiv@divisor+3)^0,f,c
  6683   001248  2A21               	incf	___lldiv@counter^0,f,c
  6684   00124A                     l4245:
  6685   00124A  AE1C               	btfss	(___lldiv@divisor+3)^0,7,c
  6686   00124C  D7F8               	goto	l4243
  6687   00124E                     u4410:
  6688   00124E  90D8               	bcf	status,0,c
  6689   001250  361D               	rlcf	___lldiv@quotient^0,f,c
  6690   001252  361E               	rlcf	(___lldiv@quotient+1)^0,f,c
  6691   001254  361F               	rlcf	(___lldiv@quotient+2)^0,f,c
  6692   001256  3620               	rlcf	(___lldiv@quotient+3)^0,f,c
  6693   001258  5019               	movf	___lldiv@divisor^0,w,c
  6694   00125A  5C15               	subwf	___lldiv@dividend^0,w,c
  6695   00125C  501A               	movf	(___lldiv@divisor+1)^0,w,c
  6696   00125E  5816               	subwfb	(___lldiv@dividend+1)^0,w,c
  6697   001260  501B               	movf	(___lldiv@divisor+2)^0,w,c
  6698   001262  5817               	subwfb	(___lldiv@dividend+2)^0,w,c
  6699   001264  501C               	movf	(___lldiv@divisor+3)^0,w,c
  6700   001266  5818               	subwfb	(___lldiv@dividend+3)^0,w,c
  6701   001268  A0D8               	btfss	status,0,c
  6702   00126A  D009               	goto	l4255
  6703   00126C  5019               	movf	___lldiv@divisor^0,w,c
  6704   00126E  5E15               	subwf	___lldiv@dividend^0,f,c
  6705   001270  501A               	movf	(___lldiv@divisor+1)^0,w,c
  6706   001272  5A16               	subwfb	(___lldiv@dividend+1)^0,f,c
  6707   001274  501B               	movf	(___lldiv@divisor+2)^0,w,c
  6708   001276  5A17               	subwfb	(___lldiv@dividend+2)^0,f,c
  6709   001278  501C               	movf	(___lldiv@divisor+3)^0,w,c
  6710   00127A  5A18               	subwfb	(___lldiv@dividend+3)^0,f,c
  6711   00127C  801D               	bsf	___lldiv@quotient^0,0,c
  6712   00127E                     l4255:
  6713   00127E  90D8               	bcf	status,0,c
  6714   001280  321C               	rrcf	(___lldiv@divisor+3)^0,f,c
  6715   001282  321B               	rrcf	(___lldiv@divisor+2)^0,f,c
  6716   001284  321A               	rrcf	(___lldiv@divisor+1)^0,f,c
  6717   001286  3219               	rrcf	___lldiv@divisor^0,f,c
  6718   001288  2E21               	decfsz	___lldiv@counter^0,f,c
  6719   00128A  D7E1               	goto	u4410
  6720   00128C                     l626:
  6721   00128C  C01D  F015         	movff	___lldiv@quotient,?___lldiv
  6722   001290  C01E  F016         	movff	___lldiv@quotient+1,?___lldiv+1
  6723   001294  C01F  F017         	movff	___lldiv@quotient+2,?___lldiv+2
  6724   001298  C020  F018         	movff	___lldiv@quotient+3,?___lldiv+3
  6725   00129C  0012               	return		;funcret
  6726   00129E                     __end_of___lldiv:
  6727                           	callstack 0
  6728                           
  6729 ;; *************** function _delay_ms *****************
  6730 ;; Defined at:
  6731 ;;		line 36 in file "main.c"
  6732 ;; Parameters:    Size  Location     Type
  6733 ;;  milliseconds    2    4[COMRAM] unsigned int 
  6734 ;; Auto vars:     Size  Location     Type
  6735 ;;		None
  6736 ;; Return value:  Size  Location     Type
  6737 ;;                  1    wreg      void 
  6738 ;; Registers used:
  6739 ;;		wreg, status,2, status,0
  6740 ;; Tracked objects:
  6741 ;;		On entry : 0/0
  6742 ;;		On exit  : 0/0
  6743 ;;		Unchanged: 0/0
  6744 ;; Data sizes:     COMRAM   BANK0   BANK1
  6745 ;;      Params:         2       0       0
  6746 ;;      Locals:         0       0       0
  6747 ;;      Temps:          1       0       0
  6748 ;;      Totals:         3       0       0
  6749 ;;Total ram usage:        3 bytes
  6750 ;; Hardware stack levels used: 1
  6751 ;; Hardware stack levels required when called: 2
  6752 ;; This function calls:
  6753 ;;		Nothing
  6754 ;; This function is called by:
  6755 ;;		_infusion
  6756 ;; This function uses a non-reentrant model
  6757 ;;
  6758                           
  6759                           	psect	text43
  6760   001AC0                     __ptext43:
  6761                           	callstack 0
  6762   001AC0                     _delay_ms:
  6763                           	callstack 26
  6764                           
  6765                           ;main.c: 37:     while(milliseconds > 0) {
  6766                           
  6767                           ;incstack = 0
  6768   001AC0  D00A               	goto	l447
  6769   001AC2                     l4271:
  6770                           
  6771                           ;main.c: 38:         _delay((unsigned long)((1)*(8000000L/4000.0)));
  6772   001AC2  0E03               	movlw	3
  6773   001AC4  6E07               	movwf	??_delay_ms^0,c
  6774   001AC6  0E98               	movlw	152
  6775   001AC8                     u4887:
  6776   001AC8  2EE8               	decfsz	wreg,f,c
  6777   001ACA  D7FE               	bra	u4887
  6778   001ACC  2E07               	decfsz	??_delay_ms^0,f,c
  6779   001ACE  D7FC               	bra	u4887
  6780                           
  6781                           ;main.c: 39:         milliseconds--;
  6782   001AD0  0605               	decf	delay_ms@milliseconds^0,f,c
  6783   001AD2  A0D8               	btfss	status,0,c
  6784   001AD4  0606               	decf	(delay_ms@milliseconds+1)^0,f,c
  6785   001AD6                     l447:
  6786                           
  6787                           ;main.c: 37:     while(milliseconds > 0) {
  6788   001AD6  5005               	movf	delay_ms@milliseconds^0,w,c
  6789   001AD8  1006               	iorwf	(delay_ms@milliseconds+1)^0,w,c
  6790   001ADA  B4D8               	btfsc	status,2,c
  6791   001ADC  0012               	return	
  6792   001ADE  D7F1               	goto	l4271
  6793   001AE0                     __end_of_delay_ms:
  6794                           	callstack 0
  6795                           
  6796 ;; *************** function _Timer1_start *****************
  6797 ;; Defined at:
  6798 ;;		line 125 in file "main.c"
  6799 ;; Parameters:    Size  Location     Type
  6800 ;;		None
  6801 ;; Auto vars:     Size  Location     Type
  6802 ;;		None
  6803 ;; Return value:  Size  Location     Type
  6804 ;;                  1    wreg      void 
  6805 ;; Registers used:
  6806 ;;		wreg, status,2
  6807 ;; Tracked objects:
  6808 ;;		On entry : 0/0
  6809 ;;		On exit  : 0/0
  6810 ;;		Unchanged: 0/0
  6811 ;; Data sizes:     COMRAM   BANK0   BANK1
  6812 ;;      Params:         0       0       0
  6813 ;;      Locals:         0       0       0
  6814 ;;      Temps:          0       0       0
  6815 ;;      Totals:         0       0       0
  6816 ;;Total ram usage:        0 bytes
  6817 ;; Hardware stack levels used: 1
  6818 ;; Hardware stack levels required when called: 2
  6819 ;; This function calls:
  6820 ;;		Nothing
  6821 ;; This function is called by:
  6822 ;;		_infusion
  6823 ;; This function uses a non-reentrant model
  6824 ;;
  6825                           
  6826                           	psect	text44
  6827   001AE0                     __ptext44:
  6828                           	callstack 0
  6829   001AE0                     _Timer1_start:
  6830                           	callstack 26
  6831                           
  6832                           ;main.c: 127:     GIE=1;
  6833                           
  6834                           ;incstack = 0
  6835   001AE0  8EF2               	bsf	4082,7,c	;volatile
  6836                           
  6837                           ;main.c: 128:     PEIE=1;
  6838   001AE2  8CF2               	bsf	4082,6,c	;volatile
  6839                           
  6840                           ;main.c: 129:     TMR1IE=1;
  6841   001AE4  809D               	bsf	3997,0,c	;volatile
  6842                           
  6843                           ;main.c: 130:     TMR1IF=0;
  6844   001AE6  909E               	bcf	3998,0,c	;volatile
  6845                           
  6846                           ;main.c: 133:     T1CON=0x80;
  6847   001AE8  0E80               	movlw	128
  6848   001AEA  6ECD               	movwf	205,c	;volatile
  6849                           
  6850                           ;main.c: 134:     TMR1=0xF856;
  6851   001AEC  0EF8               	movlw	248
  6852   001AEE  6ECF               	movwf	207,c	;volatile
  6853   001AF0  0E56               	movlw	86
  6854   001AF2  6ECE               	movwf	206,c	;volatile
  6855                           
  6856                           ;main.c: 135:     TMR1ON=1;
  6857   001AF4  80CD               	bsf	4045,0,c	;volatile
  6858   001AF6  0012               	return		;funcret
  6859   001AF8                     __end_of_Timer1_start:
  6860                           	callstack 0
  6861                           
  6862 ;; *************** function _GetNextState *****************
  6863 ;; Defined at:
  6864 ;;		line 586 in file "main.c"
  6865 ;; Parameters:    Size  Location     Type
  6866 ;;  currentState    1    wreg     enum E2620
  6867 ;;  input           1    4[COMRAM] unsigned char 
  6868 ;; Auto vars:     Size  Location     Type
  6869 ;;  currentState    1    7[COMRAM] enum E2620
  6870 ;; Return value:  Size  Location     Type
  6871 ;;                  1    wreg      enum E2620
  6872 ;; Registers used:
  6873 ;;		wreg, status,2, status,0
  6874 ;; Tracked objects:
  6875 ;;		On entry : 3F/0
  6876 ;;		On exit  : 0/0
  6877 ;;		Unchanged: 0/0
  6878 ;; Data sizes:     COMRAM   BANK0   BANK1
  6879 ;;      Params:         1       0       0
  6880 ;;      Locals:         1       0       0
  6881 ;;      Temps:          2       0       0
  6882 ;;      Totals:         4       0       0
  6883 ;;Total ram usage:        4 bytes
  6884 ;; Hardware stack levels used: 1
  6885 ;; Hardware stack levels required when called: 2
  6886 ;; This function calls:
  6887 ;;		Nothing
  6888 ;; This function is called by:
  6889 ;;		_main
  6890 ;; This function uses a non-reentrant model
  6891 ;;
  6892                           
  6893                           	psect	text45
  6894   00129E                     __ptext45:
  6895                           	callstack 0
  6896   00129E                     _GetNextState:
  6897                           	callstack 28
  6898                           
  6899                           ;incstack = 0
  6900                           ;GetNextState@currentState stored from wreg
  6901   00129E  6E08               	movwf	GetNextState@currentState^0,c
  6902                           
  6903                           ;main.c: 587:     switch (currentState) {
  6904   0012A0  D029               	goto	l4637
  6905   0012A2                     l4589:
  6906                           
  6907                           ;main.c: 589:             if (input == '1') return MAIN_MENU;
  6908   0012A2  0E31               	movlw	49
  6909   0012A4  1805               	xorwf	GetNextState@input^0,w,c
  6910   0012A6  A4D8               	btfss	status,2,c
  6911   0012A8  D039               	goto	l4639
  6912   0012AA                     u4520:
  6913   0012AA  0E01               	movlw	1
  6914   0012AC  0012               	return	
  6915   0012AE                     l4595:
  6916                           
  6917                           ;main.c: 592:             if (input == 'b') return MAIN_MENU;
  6918   0012AE  0E62               	movlw	98
  6919   0012B0  1805               	xorwf	GetNextState@input^0,w,c
  6920   0012B2  B4D8               	btfsc	status,2,c
  6921   0012B4  D7FA               	goto	u4520
  6922   0012B6  D032               	goto	l4639
  6923   0012B8                     l4601:
  6924                           
  6925                           ;main.c: 595:             if (input == '1') return SET_UP_INFUSION;
  6926   0012B8  0E31               	movlw	49
  6927   0012BA  1805               	xorwf	GetNextState@input^0,w,c
  6928   0012BC  A4D8               	btfss	status,2,c
  6929   0012BE  D002               	goto	l4607
  6930   0012C0  0E02               	movlw	2
  6931   0012C2  0012               	return	
  6932   0012C4                     l4607:
  6933                           
  6934                           ;main.c: 596:             if (input == '2') return MANUAL_SCREEN;
  6935   0012C4  0E32               	movlw	50
  6936   0012C6  1805               	xorwf	GetNextState@input^0,w,c
  6937   0012C8  A4D8               	btfss	status,2,c
  6938   0012CA  D002               	goto	l4613
  6939   0012CC  0E03               	movlw	3
  6940   0012CE  0012               	return	
  6941   0012D0                     l4613:
  6942                           
  6943                           ;main.c: 597:             if (input == '3') return SETTINGS;
  6944   0012D0  0E33               	movlw	51
  6945   0012D2  1805               	xorwf	GetNextState@input^0,w,c
  6946   0012D4  A4D8               	btfss	status,2,c
  6947   0012D6  D002               	goto	l4619
  6948   0012D8  0E04               	movlw	4
  6949   0012DA  0012               	return	
  6950   0012DC                     l4619:
  6951                           
  6952                           ;main.c: 598:             if (input == '4') return ABOUT_PAGE;
  6953   0012DC  0E34               	movlw	52
  6954   0012DE  1805               	xorwf	GetNextState@input^0,w,c
  6955   0012E0  A4D8               	btfss	status,2,c
  6956   0012E2  D002               	goto	l4625
  6957   0012E4  0E05               	movlw	5
  6958   0012E6  0012               	return	
  6959   0012E8                     l4625:
  6960                           
  6961                           ;main.c: 599:             if (input == 'b') return WELCOME_SCREEN;
  6962   0012E8  0E62               	movlw	98
  6963   0012EA  1805               	xorwf	GetNextState@input^0,w,c
  6964   0012EC  A4D8               	btfss	status,2,c
  6965   0012EE  D016               	goto	l4639
  6966   0012F0  0E00               	movlw	0
  6967   0012F2  0012               	return	
  6968   0012F4                     l4637:
  6969   0012F4  5008               	movf	GetNextState@currentState^0,w,c
  6970   0012F6  6E06               	movwf	??_GetNextState^0,c
  6971   0012F8  6A07               	clrf	(??_GetNextState+1)^0,c
  6972                           
  6973                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6974                           ; Switch size 1, requested type "simple"
  6975                           ; Number of cases is 1, Range of values is 0 to 0
  6976                           ; switch strategies available:
  6977                           ; Name         Instructions Cycles
  6978                           ; simple_byte            4     3 (average)
  6979                           ;	Chosen strategy is simple_byte
  6980   0012FA  5007               	movf	(??_GetNextState+1)^0,w,c
  6981   0012FC  0A00               	xorlw	0	; case 0
  6982   0012FE  A4D8               	btfss	status,2,c
  6983   001300  D00D               	goto	l4639
  6984                           
  6985                           ; Switch size 1, requested type "simple"
  6986                           ; Number of cases is 4, Range of values is 0 to 3
  6987                           ; switch strategies available:
  6988                           ; Name         Instructions Cycles
  6989                           ; simple_byte           13     7 (average)
  6990                           ;	Chosen strategy is simple_byte
  6991   001302  5006               	movf	??_GetNextState^0,w,c
  6992   001304  0A00               	xorlw	0	; case 0
  6993   001306  B4D8               	btfsc	status,2,c
  6994   001308  D7CC               	goto	l4589
  6995   00130A  0A01               	xorlw	1	; case 1
  6996   00130C  B4D8               	btfsc	status,2,c
  6997   00130E  D7D4               	goto	l4601
  6998   001310  0A03               	xorlw	3	; case 2
  6999   001312  B4D8               	btfsc	status,2,c
  7000   001314  D7CA               	goto	u4520
  7001   001316  0A01               	xorlw	1	; case 3
  7002   001318  B4D8               	btfsc	status,2,c
  7003   00131A  D7C9               	goto	l4595
  7004   00131C                     l4639:
  7005                           
  7006                           ;main.c: 605:     return currentState;
  7007   00131C  5008               	movf	GetNextState@currentState^0,w,c
  7008   00131E  0012               	return		;funcret
  7009   001320                     __end_of_GetNextState:
  7010                           	callstack 0
  7011                           
  7012 ;; *************** function _Timer1_ISR *****************
  7013 ;; Defined at:
  7014 ;;		line 44 in file "main.c"
  7015 ;; Parameters:    Size  Location     Type
  7016 ;;		None
  7017 ;; Auto vars:     Size  Location     Type
  7018 ;;		None
  7019 ;; Return value:  Size  Location     Type
  7020 ;;                  1    wreg      void 
  7021 ;; Registers used:
  7022 ;;		wreg, status,2, status,0, cstack
  7023 ;; Tracked objects:
  7024 ;;		On entry : 0/0
  7025 ;;		On exit  : 0/0
  7026 ;;		Unchanged: 0/0
  7027 ;; Data sizes:     COMRAM   BANK0   BANK1
  7028 ;;      Params:         0       0       0
  7029 ;;      Locals:         0       0       0
  7030 ;;      Temps:          1       0       0
  7031 ;;      Totals:         1       0       0
  7032 ;;Total ram usage:        1 bytes
  7033 ;; Hardware stack levels used: 1
  7034 ;; Hardware stack levels required when called: 1
  7035 ;; This function calls:
  7036 ;;		_signalServo
  7037 ;; This function is called by:
  7038 ;;		Interrupt level 2
  7039 ;; This function uses a non-reentrant model
  7040 ;;
  7041                           
  7042                           	psect	intcode
  7043   000008                     __pintcode:
  7044                           	callstack 0
  7045   000008                     _Timer1_ISR:
  7046                           	callstack 22
  7047                           
  7048                           ;incstack = 0
  7049   000008  827B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7050                           
  7051                           ;main.c: 46:     if (TMR1IF == 1) {
  7052   00000A  A09E               	btfss	3998,0,c	;volatile
  7053   00000C  D00D               	goto	i2l455
  7054                           
  7055                           ;main.c: 47:         TMR1=0xF856;
  7056   00000E  0EF8               	movlw	248
  7057   000010  6ECF               	movwf	207,c	;volatile
  7058   000012  0E56               	movlw	86
  7059   000014  6ECE               	movwf	206,c	;volatile
  7060                           
  7061                           ;main.c: 48:         LATB = ~LATB;
  7062   000016  1E8A               	comf	138,f,c	;volatile
  7063                           
  7064                           ;main.c: 49:         PIR1bits.TMR1IF=0;
  7065   000018  909E               	bcf	158,0,c	;volatile
  7066                           
  7067                           ;main.c: 50:         mil++;
  7068   00001A  0E01               	movlw	1
  7069   00001C  2673               	addwf	_mil^0,f,c
  7070   00001E  0E00               	movlw	0
  7071   000020  2274               	addwfc	(_mil+1)^0,f,c
  7072   000022  2275               	addwfc	(_mil+2)^0,f,c
  7073   000024  2276               	addwfc	(_mil+3)^0,f,c
  7074                           
  7075                           ;main.c: 51:     }
  7076   000026  D0AF               	goto	i2l466
  7077   000028                     i2l455:
  7078   000028  A4F2               	btfss	4082,2,c	;volatile
  7079   00002A  D0AD               	goto	i2l466
  7080                           
  7081                           ;main.c: 53:         INTCONbits.TMR0IF=0;
  7082   00002C  94F2               	bcf	242,2,c	;volatile
  7083                           
  7084                           ;main.c: 55:         switch (servo_active){
  7085   00002E  D094               	goto	i2l3549
  7086   000030                     i2l3523:
  7087   000030  B28B               	btfsc	139,1,c	;volatile
  7088   000032  D003               	goto	i2u303_40
  7089   000034  6A04               	clrf	??_Timer1_ISR^0,c
  7090   000036  2A04               	incf	??_Timer1_ISR^0,f,c
  7091   000038  D001               	goto	i2u304_48
  7092   00003A                     i2u303_40:
  7093   00003A  6A04               	clrf	??_Timer1_ISR^0,c
  7094   00003C                     i2u304_48:
  7095   00003C  4604               	rlncf	??_Timer1_ISR^0,f,c
  7096   00003E  508B               	movf	139,w,c	;volatile
  7097   000040  1804               	xorwf	??_Timer1_ISR^0,w,c
  7098   000042  0BFD               	andlw	-3
  7099   000044  1804               	xorwf	??_Timer1_ISR^0,w,c
  7100   000046  6E8B               	movwf	139,c	;volatile
  7101   000048  C0AC  F001         	movff	_pulse,signalServo@pulseServo
  7102   00004C  C0AD  F002         	movff	_pulse+1,signalServo@pulseServo+1
  7103   000050  A28B               	btfss	139,1,c	;volatile
  7104   000052  D002               	goto	i2u305_40
  7105   000054  0E01               	movlw	1
  7106   000056  D001               	goto	i2u305_46
  7107   000058                     i2u305_40:
  7108   000058  0E00               	movlw	0
  7109   00005A                     i2u305_46:
  7110   00005A  ECB6  F00C         	call	_signalServo
  7111   00005E  D08F               	goto	i2l460
  7112   000060                     i2l3527:
  7113   000060  B28A               	btfsc	138,1,c	;volatile
  7114   000062  D003               	goto	i2u306_40
  7115   000064  6A04               	clrf	??_Timer1_ISR^0,c
  7116   000066  2A04               	incf	??_Timer1_ISR^0,f,c
  7117   000068  D001               	goto	i2u307_48
  7118   00006A                     i2u306_40:
  7119   00006A  6A04               	clrf	??_Timer1_ISR^0,c
  7120   00006C                     i2u307_48:
  7121   00006C  4604               	rlncf	??_Timer1_ISR^0,f,c
  7122   00006E  508A               	movf	138,w,c	;volatile
  7123   000070  1804               	xorwf	??_Timer1_ISR^0,w,c
  7124   000072  0BFD               	andlw	-3
  7125   000074  1804               	xorwf	??_Timer1_ISR^0,w,c
  7126   000076  6E8A               	movwf	138,c	;volatile
  7127   000078  C0AE  F001         	movff	_pulse+2,signalServo@pulseServo
  7128   00007C  C0AF  F002         	movff	_pulse+3,signalServo@pulseServo+1
  7129   000080  A28A               	btfss	138,1,c	;volatile
  7130   000082  D002               	goto	i2u308_40
  7131   000084  0E01               	movlw	1
  7132   000086  D001               	goto	i2u308_46
  7133   000088                     i2u308_40:
  7134   000088  0E00               	movlw	0
  7135   00008A                     i2u308_46:
  7136   00008A  ECB6  F00C         	call	_signalServo
  7137   00008E  D077               	goto	i2l460
  7138   000090                     i2l3531:
  7139   000090  B48A               	btfsc	138,2,c	;volatile
  7140   000092  D003               	goto	i2u309_40
  7141   000094  6A04               	clrf	??_Timer1_ISR^0,c
  7142   000096  2A04               	incf	??_Timer1_ISR^0,f,c
  7143   000098  D001               	goto	i2u310_48
  7144   00009A                     i2u309_40:
  7145   00009A  6A04               	clrf	??_Timer1_ISR^0,c
  7146   00009C                     i2u310_48:
  7147   00009C  4604               	rlncf	??_Timer1_ISR^0,f,c
  7148   00009E  4604               	rlncf	??_Timer1_ISR^0,f,c
  7149   0000A0  508A               	movf	138,w,c	;volatile
  7150   0000A2  1804               	xorwf	??_Timer1_ISR^0,w,c
  7151   0000A4  0BFB               	andlw	-5
  7152   0000A6  1804               	xorwf	??_Timer1_ISR^0,w,c
  7153   0000A8  6E8A               	movwf	138,c	;volatile
  7154   0000AA  C0B0  F001         	movff	_pulse+4,signalServo@pulseServo
  7155   0000AE  C0B1  F002         	movff	_pulse+5,signalServo@pulseServo+1
  7156   0000B2  A48A               	btfss	138,2,c	;volatile
  7157   0000B4  D002               	goto	i2u311_40
  7158   0000B6  0E01               	movlw	1
  7159   0000B8  D001               	goto	i2u311_46
  7160   0000BA                     i2u311_40:
  7161   0000BA  0E00               	movlw	0
  7162   0000BC                     i2u311_46:
  7163   0000BC  ECB6  F00C         	call	_signalServo
  7164   0000C0  D05E               	goto	i2l460
  7165   0000C2                     i2l3535:
  7166   0000C2  B68A               	btfsc	138,3,c	;volatile
  7167   0000C4  D003               	goto	i2u312_40
  7168   0000C6  6A04               	clrf	??_Timer1_ISR^0,c
  7169   0000C8  2A04               	incf	??_Timer1_ISR^0,f,c
  7170   0000CA  D001               	goto	i2u313_48
  7171   0000CC                     i2u312_40:
  7172   0000CC  6A04               	clrf	??_Timer1_ISR^0,c
  7173   0000CE                     i2u313_48:
  7174   0000CE  4604               	rlncf	??_Timer1_ISR^0,f,c
  7175   0000D0  4604               	rlncf	??_Timer1_ISR^0,f,c
  7176   0000D2  4604               	rlncf	??_Timer1_ISR^0,f,c
  7177   0000D4  508A               	movf	138,w,c	;volatile
  7178   0000D6  1804               	xorwf	??_Timer1_ISR^0,w,c
  7179   0000D8  0BF7               	andlw	-9
  7180   0000DA  1804               	xorwf	??_Timer1_ISR^0,w,c
  7181   0000DC  6E8A               	movwf	138,c	;volatile
  7182   0000DE  C0B2  F001         	movff	_pulse+6,signalServo@pulseServo
  7183   0000E2  C0B3  F002         	movff	_pulse+7,signalServo@pulseServo+1
  7184   0000E6  A68A               	btfss	138,3,c	;volatile
  7185   0000E8  D002               	goto	i2u314_40
  7186   0000EA  0E01               	movlw	1
  7187   0000EC  D001               	goto	i2u314_46
  7188   0000EE                     i2u314_40:
  7189   0000EE  0E00               	movlw	0
  7190   0000F0                     i2u314_46:
  7191   0000F0  ECB6  F00C         	call	_signalServo
  7192   0000F4  D044               	goto	i2l460
  7193   0000F6                     i2l3539:
  7194   0000F6  B88A               	btfsc	138,4,c	;volatile
  7195   0000F8  D003               	goto	i2u315_40
  7196   0000FA  6A04               	clrf	??_Timer1_ISR^0,c
  7197   0000FC  2A04               	incf	??_Timer1_ISR^0,f,c
  7198   0000FE  D001               	goto	i2u316_48
  7199   000100                     i2u315_40:
  7200   000100  6A04               	clrf	??_Timer1_ISR^0,c
  7201   000102                     i2u316_48:
  7202   000102  3A04               	swapf	??_Timer1_ISR^0,f,c
  7203   000104  508A               	movf	138,w,c	;volatile
  7204   000106  1804               	xorwf	??_Timer1_ISR^0,w,c
  7205   000108  0BEF               	andlw	-17
  7206   00010A  1804               	xorwf	??_Timer1_ISR^0,w,c
  7207   00010C  6E8A               	movwf	138,c	;volatile
  7208   00010E  C0B4  F001         	movff	_pulse+8,signalServo@pulseServo
  7209   000112  C0B5  F002         	movff	_pulse+9,signalServo@pulseServo+1
  7210   000116  A88A               	btfss	138,4,c	;volatile
  7211   000118  D002               	goto	i2u317_40
  7212   00011A  0E01               	movlw	1
  7213   00011C  D001               	goto	i2u317_46
  7214   00011E                     i2u317_40:
  7215   00011E  0E00               	movlw	0
  7216   000120                     i2u317_46:
  7217   000120  ECB6  F00C         	call	_signalServo
  7218   000124  D02C               	goto	i2l460
  7219   000126                     i2l3543:
  7220   000126  BA8A               	btfsc	138,5,c	;volatile
  7221   000128  D003               	goto	i2u318_40
  7222   00012A  6A04               	clrf	??_Timer1_ISR^0,c
  7223   00012C  2A04               	incf	??_Timer1_ISR^0,f,c
  7224   00012E  D001               	goto	i2u319_48
  7225   000130                     i2u318_40:
  7226   000130  6A04               	clrf	??_Timer1_ISR^0,c
  7227   000132                     i2u319_48:
  7228   000132  3A04               	swapf	??_Timer1_ISR^0,f,c
  7229   000134  4604               	rlncf	??_Timer1_ISR^0,f,c
  7230   000136  508A               	movf	138,w,c	;volatile
  7231   000138  1804               	xorwf	??_Timer1_ISR^0,w,c
  7232   00013A  0BDF               	andlw	-33
  7233   00013C  1804               	xorwf	??_Timer1_ISR^0,w,c
  7234   00013E  6E8A               	movwf	138,c	;volatile
  7235   000140  C0B6  F001         	movff	_pulse+10,signalServo@pulseServo
  7236   000144  C0B7  F002         	movff	_pulse+11,signalServo@pulseServo+1
  7237   000148  AA8A               	btfss	138,5,c	;volatile
  7238   00014A  D002               	goto	i2u320_40
  7239   00014C  0E01               	movlw	1
  7240   00014E  D001               	goto	i2u320_46
  7241   000150                     i2u320_40:
  7242   000150  0E00               	movlw	0
  7243   000152                     i2u320_46:
  7244   000152  ECB6  F00C         	call	_signalServo
  7245   000156  D013               	goto	i2l460
  7246   000158                     i2l3549:
  7247   000158  507A               	movf	_servo_active^0,w,c
  7248                           
  7249                           ; Switch size 1, requested type "simple"
  7250                           ; Number of cases is 6, Range of values is 1 to 6
  7251                           ; switch strategies available:
  7252                           ; Name         Instructions Cycles
  7253                           ; simple_byte           19    10 (average)
  7254                           ;	Chosen strategy is simple_byte
  7255   00015A  0A01               	xorlw	1	; case 1
  7256   00015C  B4D8               	btfsc	status,2,c
  7257   00015E  D768               	goto	i2l3523
  7258   000160  0A03               	xorlw	3	; case 2
  7259   000162  B4D8               	btfsc	status,2,c
  7260   000164  D77D               	goto	i2l3527
  7261   000166  0A01               	xorlw	1	; case 3
  7262   000168  B4D8               	btfsc	status,2,c
  7263   00016A  D792               	goto	i2l3531
  7264   00016C  0A07               	xorlw	7	; case 4
  7265   00016E  B4D8               	btfsc	status,2,c
  7266   000170  D7A8               	goto	i2l3535
  7267   000172  0A01               	xorlw	1	; case 5
  7268   000174  B4D8               	btfsc	status,2,c
  7269   000176  D7BF               	goto	i2l3539
  7270   000178  0A03               	xorlw	3	; case 6
  7271   00017A  B4D8               	btfsc	status,2,c
  7272   00017C  D7D4               	goto	i2l3543
  7273   00017E                     i2l460:
  7274                           
  7275                           ;main.c: 63:         {TMR0H=(TMR0_ini>>8); TMR0L=(TMR0_ini&0x00FF);};
  7276   00017E  C078  FFD7         	movff	_TMR0_ini+1,4055	;volatile
  7277   000182  C077  FFD6         	movff	_TMR0_ini,4054	;volatile
  7278   000186                     i2l466:
  7279   000186  927B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7280   000188  0011               	retfie		f
  7281   00018A                     __end_of_Timer1_ISR:
  7282                           	callstack 0
  7283                           
  7284 ;; *************** function _signalServo *****************
  7285 ;; Defined at:
  7286 ;;		line 9 in file "servo.c"
  7287 ;; Parameters:    Size  Location     Type
  7288 ;;  pinServo        1    wreg     unsigned char 
  7289 ;;  pulseServo      2    0[COMRAM] unsigned short 
  7290 ;; Auto vars:     Size  Location     Type
  7291 ;;  pinServo        1    2[COMRAM] unsigned char 
  7292 ;; Return value:  Size  Location     Type
  7293 ;;                  1    wreg      void 
  7294 ;; Registers used:
  7295 ;;		wreg, status,2, status,0
  7296 ;; Tracked objects:
  7297 ;;		On entry : 0/0
  7298 ;;		On exit  : 0/0
  7299 ;;		Unchanged: 0/0
  7300 ;; Data sizes:     COMRAM   BANK0   BANK1
  7301 ;;      Params:         2       0       0
  7302 ;;      Locals:         1       0       0
  7303 ;;      Temps:          0       0       0
  7304 ;;      Totals:         3       0       0
  7305 ;;Total ram usage:        3 bytes
  7306 ;; Hardware stack levels used: 1
  7307 ;; This function calls:
  7308 ;;		Nothing
  7309 ;; This function is called by:
  7310 ;;		_Timer1_ISR
  7311 ;; This function uses a non-reentrant model
  7312 ;;
  7313                           
  7314                           	psect	text47
  7315   00196C                     __ptext47:
  7316                           	callstack 0
  7317   00196C                     _signalServo:
  7318                           	callstack 22
  7319                           
  7320                           ;incstack = 0
  7321                           ;signalServo@pinServo stored from wreg
  7322   00196C  6E03               	movwf	signalServo@pinServo^0,c
  7323                           
  7324                           ;servo.c: 10:     if (pinServo){
  7325   00196E  5003               	movf	signalServo@pinServo^0,w,c
  7326   001970  B4D8               	btfsc	status,2,c
  7327   001972  D009               	goto	i2l3399
  7328                           
  7329                           ;servo.c: 11:         TMR0_ini= (uint16_t)(65536-pulseServo+30);
  7330   001974  5001               	movf	signalServo@pulseServo^0,w,c
  7331   001976  081E               	sublw	30
  7332   001978  6E77               	movwf	_TMR0_ini^0,c
  7333   00197A  5002               	movf	(signalServo@pulseServo+1)^0,w,c
  7334   00197C  A0D8               	btfss	status,0,c
  7335   00197E  2AE8               	incf	wreg,f,c
  7336   001980  0800               	sublw	0
  7337   001982  6E78               	movwf	(_TMR0_ini+1)^0,c
  7338                           
  7339                           ;servo.c: 12:     }
  7340   001984  0012               	return	
  7341   001986                     i2l3399:
  7342                           
  7343                           ;servo.c: 14:         TMR0_ini= (65536-(20000/6)+pulseServo+30);
  7344   001986  0E19               	movlw	25
  7345   001988  2401               	addwf	signalServo@pulseServo^0,w,c
  7346   00198A  6E77               	movwf	_TMR0_ini^0,c
  7347   00198C  0EF3               	movlw	243
  7348   00198E  2002               	addwfc	(signalServo@pulseServo+1)^0,w,c
  7349   001990  6E78               	movwf	(_TMR0_ini+1)^0,c
  7350                           
  7351                           ;servo.c: 16:         if(servo_active == 6) servo_active=1;
  7352   001992  0E06               	movlw	6
  7353   001994  187A               	xorwf	_servo_active^0,w,c
  7354   001996  A4D8               	btfss	status,2,c
  7355   001998  D003               	goto	i2l3403
  7356   00199A  0E01               	movlw	1
  7357   00199C  6E7A               	movwf	_servo_active^0,c
  7358   00199E  0012               	return	
  7359   0019A0                     i2l3403:
  7360   0019A0  2A7A               	incf	_servo_active^0,f,c
  7361   0019A2  0012               	return		;funcret
  7362   0019A4                     __end_of_signalServo:
  7363                           	callstack 0
  7364                           
  7365                           	psect	rparam
  7366   000000                     
  7367                           	psect	temp
  7368   00007B                     btemp:
  7369                           	callstack 0
  7370   00007B                     	ds	1
  7371   000000                     int$flags	set	btemp
  7372   000000                     wtemp8	set	btemp+1
  7373   000000                     ttemp5	set	btemp+1
  7374   000000                     ttemp6	set	btemp+4
  7375   000000                     ttemp7	set	btemp+8
  7376                           
  7377                           	psect	config
  7378                           
  7379                           ; Padding undefined space
  7380   300000                     	org	3145728
  7381   300000  FF                 	db	255
  7382                           
  7383                           ;Config register CONFIG1H @ 0x300001
  7384                           ;	Oscillator
  7385                           ;	OSC = INTIO2, Internal oscillator block, port function on RA6 and RA7
  7386                           ;	Fail-Safe Clock Monitor Enable bit
  7387                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  7388                           ;	Internal/External Oscillator Switchover bit
  7389                           ;	IESO = OFF, Oscillator Switchover mode disabled
  7390   300001                     	org	3145729
  7391   300001  08                 	db	8
  7392                           
  7393                           ;Config register CONFIG2L @ 0x300002
  7394                           ;	Power-up Timer Enable bit
  7395                           ;	PWRT = ON, PWRT enabled
  7396                           ;	Brown-out Reset Enable bits
  7397                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  7398                           ;	Brown-out Reset Voltage bits
  7399                           ;	BORV = 3, Minimum Setting
  7400   300002                     	org	3145730
  7401   300002  1E                 	db	30
  7402                           
  7403                           ;Config register CONFIG2H @ 0x300003
  7404                           ;	Watchdog Timer Enable bit
  7405                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  7406                           ;	Watchdog Timer Postscale Select bits
  7407                           ;	WDTPS = 32768, 1:32768
  7408   300003                     	org	3145731
  7409   300003  1E                 	db	30
  7410                           
  7411                           ; Padding undefined space
  7412   300004                     	org	3145732
  7413   300004  FF                 	db	255
  7414                           
  7415                           ;Config register CONFIG3H @ 0x300005
  7416                           ;	CCP2 MUX bit
  7417                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  7418                           ;	PORTB A/D Enable bit
  7419                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  7420                           ;	Low-Power Timer1 Oscillator Enable bit
  7421                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  7422                           ;	MCLR Pin Enable bit
  7423                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  7424   300005                     	org	3145733
  7425   300005  81                 	db	129
  7426                           
  7427                           ;Config register CONFIG4L @ 0x300006
  7428                           ;	Stack Full/Underflow Reset Enable bit
  7429                           ;	STVREN = ON, Stack full/underflow will cause Reset
  7430                           ;	Single-Supply ICSP Enable bit
  7431                           ;	LVP = OFF, Single-Supply ICSP disabled
  7432                           ;	Boot Block Size Select bits
  7433                           ;	BBSIZ = BB256, 256 Word
  7434                           ;	Extended Instruction Set Enable bit
  7435                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  7436                           ;	Background Debugger Enable bit
  7437                           ;	DEBUG = 0x1, unprogrammed default
  7438   300006                     	org	3145734
  7439   300006  81                 	db	129
  7440                           
  7441                           ; Padding undefined space
  7442   300007                     	org	3145735
  7443   300007  FF                 	db	255
  7444                           
  7445                           ;Config register CONFIG5L @ 0x300008
  7446                           ;	Code Protection bit
  7447                           ;	CP0 = OFF, Block 0 not code-protected
  7448                           ;	Code Protection bit
  7449                           ;	CP1 = OFF, Block 1 not code-protected
  7450   300008                     	org	3145736
  7451   300008  03                 	db	3
  7452                           
  7453                           ;Config register CONFIG5H @ 0x300009
  7454                           ;	Boot Block Code Protection bitProtect Boot
  7455                           ;	CPB = OFF, Boot block not code-protected
  7456                           ;	Data EEPROM Code Protection bit
  7457                           ;	CPD = OFF, Data EEPROM not code-protected
  7458   300009                     	org	3145737
  7459   300009  C0                 	db	192
  7460                           
  7461                           ;Config register CONFIG6L @ 0x30000A
  7462                           ;	Write Protection bit
  7463                           ;	WRT0 = OFF, Block 0 not write-protected
  7464                           ;	Write Protection bit
  7465                           ;	WRT1 = OFF, Block 1 not write-protected
  7466   30000A                     	org	3145738
  7467   30000A  03                 	db	3
  7468                           
  7469                           ;Config register CONFIG6H @ 0x30000B
  7470                           ;	Configuration Register Write Protection bit
  7471                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  7472                           ;	Boot Block Write Protection bit
  7473                           ;	WRTB = OFF, Boot block not write-protected
  7474                           ;	Data EEPROM Write Protection bit
  7475                           ;	WRTD = OFF, Data EEPROM not write-protected
  7476   30000B                     	org	3145739
  7477   30000B  E0                 	db	224
  7478                           
  7479                           ;Config register CONFIG7L @ 0x30000C
  7480                           ;	Table Read Protection bit
  7481                           ;	EBTR0 = OFF, Block 0 not protected from table reads executed in other blocks
  7482                           ;	Table Read Protection bit
  7483                           ;	EBTR1 = OFF, Block 1 not protected from table reads executed in other blocks
  7484   30000C                     	org	3145740
  7485   30000C  03                 	db	3
  7486                           
  7487                           ;Config register CONFIG7H @ 0x30000D
  7488                           ;	Boot Block Table Read Protection bit
  7489                           ;	EBTRB = OFF, Boot block not protected from table reads executed in other blocks
  7490   30000D                     	org	3145741
  7491   30000D  40                 	db	64
  7492                           tosu	equ	0xFFF
  7493                           tosh	equ	0xFFE
  7494                           tosl	equ	0xFFD
  7495                           stkptr	equ	0xFFC
  7496                           pclatu	equ	0xFFB
  7497                           pclath	equ	0xFFA
  7498                           pcl	equ	0xFF9
  7499                           tblptru	equ	0xFF8
  7500                           tblptrh	equ	0xFF7
  7501                           tblptrl	equ	0xFF6
  7502                           tablat	equ	0xFF5
  7503                           prodh	equ	0xFF4
  7504                           prodl	equ	0xFF3
  7505                           indf0	equ	0xFEF
  7506                           postinc0	equ	0xFEE
  7507                           postdec0	equ	0xFED
  7508                           preinc0	equ	0xFEC
  7509                           plusw0	equ	0xFEB
  7510                           fsr0h	equ	0xFEA
  7511                           fsr0l	equ	0xFE9
  7512                           wreg	equ	0xFE8
  7513                           indf1	equ	0xFE7
  7514                           postinc1	equ	0xFE6
  7515                           postdec1	equ	0xFE5
  7516                           preinc1	equ	0xFE4
  7517                           plusw1	equ	0xFE3
  7518                           fsr1h	equ	0xFE2
  7519                           fsr1l	equ	0xFE1
  7520                           bsr	equ	0xFE0
  7521                           indf2	equ	0xFDF
  7522                           postinc2	equ	0xFDE
  7523                           postdec2	equ	0xFDD
  7524                           preinc2	equ	0xFDC
  7525                           plusw2	equ	0xFDB
  7526                           fsr2h	equ	0xFDA
  7527                           fsr2l	equ	0xFD9
  7528                           status	equ	0xFD8

Data Sizes:
    Strings     298
    Constant    24
    Data        41
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    114     122
    BANK0           128     40     124
    BANK1           256      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    input_value@initial	PTR unsigned char  size(2) Largest target is 2
		 -> STR_41(CODE[2]), 

    input_value@inputType	PTR unsigned char  size(2) Largest target is 7
		 -> STR_40(CODE[7]), 

    input_value@limit	PTR unsigned char  size(2) Largest target is 3
		 -> STR_42(CODE[3]), 

    input_value@units	PTR unsigned char  size(2) Largest target is 3
		 -> STR_43(CODE[3]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 21
		 -> infusion@buff(BANK0[5]), input_numbers@outputBuffer(COMRAM[2]), STR_1(CODE[7]), STR_10(CODE[11]), 
		 -> STR_11(CODE[12]), STR_12(CODE[7]), STR_13(CODE[6]), STR_14(CODE[5]), 
		 -> STR_15(CODE[15]), STR_16(CODE[7]), STR_17(CODE[7]), STR_18(CODE[6]), 
		 -> STR_19(CODE[5]), STR_2(CODE[12]), STR_20(CODE[14]), STR_21(CODE[21]), 
		 -> STR_22(CODE[9]), STR_23(CODE[21]), STR_24(CODE[17]), STR_25(CODE[5]), 
		 -> STR_26(CODE[8]), STR_27(CODE[11]), STR_28(CODE[8]), STR_29(CODE[11]), 
		 -> STR_3(CODE[2]), STR_30(CODE[9]), STR_31(CODE[7]), STR_33(CODE[5]), 
		 -> STR_35(CODE[5]), STR_37(CODE[4]), STR_39(CODE[19]), STR_4(CODE[3]), 
		 -> STR_40(CODE[7]), STR_41(CODE[2]), STR_42(CODE[3]), STR_43(CODE[3]), 
		 -> STR_5(CODE[5]), STR_6(CODE[15]), STR_7(CODE[10]), STR_8(CODE[8]), 
		 -> STR_9(CODE[15]), 

    S1245$buffer	PTR unsigned char  size(2) Largest target is 0

    S1245$source	PTR const unsigned char  size(2) Largest target is 0

    sp__input_numbers	PTR unsigned char  size(2) Largest target is 511
		 -> input_numbers@inputBuffer(COMRAM[5]), RAM(DATA[511]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_32(CODE[4]), STR_34(CODE[4]), STR_36(CODE[4]), STR_38(CODE[3]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 5
		 -> infusion@buff(BANK0[5]), 

    start_process_screen@word	PTR unsigned char  size(2) Largest target is 9
		 -> STR_26(CODE[8]), STR_28(CODE[8]), STR_30(CODE[9]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 4
		 -> STR_32(CODE[4]), STR_34(CODE[4]), STR_36(CODE[4]), STR_38(CODE[3]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 4
		 -> STR_32(CODE[4]), STR_34(CODE[4]), STR_36(CODE[4]), STR_38(CODE[3]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_32(CODE[4]), STR_34(CODE[4]), STR_36(CODE[4]), STR_38(CODE[3]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_handle_infusion_setup
    _system_init->_Lcd_Init
    _system_init->_usePeripheral
    _Lcd_Init->_Lcd_Cmd
    _menu->_Lcd_Write_String
    _manual->_Lcd_Write_String
    _handle_infusion_setup->_infusion
    _input_value->_Lcd_Write_String
    _infusion->_getExpected
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->___aldiv
    _abs->___almod
    _handle_actuator_push->_start_process_screen
    _start_process_screen->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _move_actuator->_change_direction_motion
    _move_actuator->_set_pwm_duty
    _input_option->_switch_press_scan
    _switch_press_scan->_keypad_scanner
    _getExpected->_calculateBitRatePer10Sec
    _processTimeToSeconds->___awdiv
    _calculateBitRatePer10Sec->___aldiv
    ___lmul->___lldiv
    ___aldiv->___lmul
    ___lldiv->_processTimeToSeconds

Critical Paths under _Timer1_ISR in COMRAM

    _Timer1_ISR->_signalServo

Critical Paths under _main in BANK0

    _handle_infusion_setup->_infusion

Critical Paths under _Timer1_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Timer1_ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   85559
                                             36 BANK0      4     4      0
                       _GetNextState
              _handle_infusion_setup
                             _manual
                               _menu
                  _switch_press_scan
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0    3035
                           _ADC_init
                         _InitKeypad
                           _Lcd_Init
                      _init_actuator
                      _usePeripheral
 ---------------------------------------------------------------------------------
 (2) _init_actuator                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             1     1      0     279
                                              7 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _InitKeypad                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _menu                                                 0     0      0    7924
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _manual                                               0     0      0    7924
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _handle_infusion_setup                               13    13      0   66128
                                            111 COMRAM     3     3      0
                           _ADC_Read
                           _infusion
                        _input_value
 ---------------------------------------------------------------------------------
 (2) _input_value                                          8     0      8    8439
                                             14 COMRAM     8     0      8
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _infusion                                            44    44      0   57553
                                            103 COMRAM     8     8      0
                                              0 BANK0     36    36      0
                           _ADC_Read
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                       _Timer1_start
                            ___aldiv
                             ___lmul
                           _delay_ms
                        _getExpected
               _handle_actuator_push
                      _move_actuator
               _processTimeToSeconds
                            _sprintf
                      _usePeripheral
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             22    15      7    6606
                                             78 COMRAM    20    13      7
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             6     2      4    5574
                                             72 COMRAM     6     2      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           13    10      3    5113
                                             59 COMRAM    13    10      3
                            ___aldiv
                            ___almod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                8     5      3     957
                                              4 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                             14 COMRAM     4     2      2
                            ___almod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___almod                                             10     2      8     613
                                              4 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (3) _handle_actuator_push                                 5     3      2   21034
                                             16 COMRAM     5     3      2
                           _ADC_Read
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                       _input_option
                      _move_actuator
               _start_process_screen
                      _usePeripheral
 ---------------------------------------------------------------------------------
 (2) _usePeripheral                                        4     0      4    2756
                                              4 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _start_process_screen                                 2     0      2    8185
                                             14 COMRAM     2     0      2
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     6     4      2    4104
                                              8 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       3     3      0     254
                                              5 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1    3665
                                              7 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     155
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              2     2      0     155
                                              5 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     124
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _move_actuator                                        4     0      4    1698
                                              8 COMRAM     4     0      4
            _change_direction_motion
                       _set_pwm_duty
 ---------------------------------------------------------------------------------
 (4) _set_pwm_duty                                         4     2      2     152
                                              4 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _change_direction_motion                              4     0      4     422
                                              4 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _input_option                                         7     5      2     241
                                              7 COMRAM     7     5      2
                  _switch_press_scan
 ---------------------------------------------------------------------------------
 (1) _switch_press_scan                                    1     1      0      68
                                              6 COMRAM     1     1      0
                     _keypad_scanner
 ---------------------------------------------------------------------------------
 (2) _keypad_scanner                                       2     2      0       0
                                              4 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _ADC_Read                                             9     7      2      65
                                              4 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (3) _getExpected                                         20    16      4    9850
                                             83 COMRAM    20    16      4
                            ___lldiv
                             ___lmul
           _calculateBitRatePer10Sec
               _processTimeToSeconds
 ---------------------------------------------------------------------------------
 (3) _processTimeToSeconds                                 8     6      2    2414
                                             12 COMRAM     8     6      2
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     832
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     613
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     625
                                              4 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) _calculateBitRatePer10Sec                            24    16      8    4563
                                             59 COMRAM    24    16      8
                            ___aldiv
                            ___lldiv (ARG)
                             ___lmul
               _processTimeToSeconds (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8    1996
                                             33 COMRAM    12     4      8
                            ___lldiv (ARG)
               _processTimeToSeconds (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aldiv                                             14     6      8    2189
                                             45 COMRAM    14     6      8
                            ___lldiv (ARG)
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     741
                                             20 COMRAM    13     5      8
               _processTimeToSeconds (ARG)
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             3     1      2     124
                                              4 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _Timer1_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GetNextState                                         4     3      1     369
                                              4 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _Timer1_ISR                                           1     1      0     522
                                              3 COMRAM     1     1      0
                        _signalServo
 ---------------------------------------------------------------------------------
 (9) _signalServo                                          3     1      2     522
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetNextState
   _handle_infusion_setup
     _ADC_Read
     _infusion
       _ADC_Read
       _Lcd_Clear
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Set_Cursor
         _Lcd_Cmd
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _Timer1_start
       ___aldiv
         ___lldiv (ARG)
           _processTimeToSeconds (ARG)
             ___awdiv
             ___awmod
             ___wmul
         ___lmul (ARG)
           ___lldiv (ARG)
           _processTimeToSeconds (ARG)
       ___lmul
       _delay_ms
       _getExpected
         ___lldiv
         ___lmul
         _calculateBitRatePer10Sec
           ___aldiv
           ___lldiv (ARG)
           ___lmul (ARG)
           _processTimeToSeconds (ARG)
         _processTimeToSeconds
       _handle_actuator_push
         _ADC_Read
         _Lcd_Clear
         _Lcd_Set_Cursor
         _Lcd_Write_String
         _input_option
           _switch_press_scan
             _keypad_scanner
         _move_actuator
           _change_direction_motion
           _set_pwm_duty
         _start_process_screen
           _Lcd_Clear
           _Lcd_Set_Cursor
           _Lcd_Write_String
         _usePeripheral
       _move_actuator
       _processTimeToSeconds
       _sprintf
         _vfprintf
           _vfpfcnvrt
             ___aldiv
             ___almod
             _abs
               ___almod (ARG)
             _fputc
               _putch
       _usePeripheral
     _input_value
       _Lcd_Clear
       _Lcd_Set_Cursor
       _Lcd_Write_String
   _manual
     _Lcd_Clear
     _Lcd_Set_Cursor
     _Lcd_Write_String
   _menu
     _Lcd_Clear
     _Lcd_Set_Cursor
     _Lcd_Write_String
   _switch_press_scan
   _system_init
     _ADC_init
     _InitKeypad
     _Lcd_Init
       _Lcd_Cmd
       _Lcd_Port
     _init_actuator
     _usePeripheral

 _Timer1_ISR (ROOT)
   _signalServo

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     28      7C       5       96.9%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     72      7A       1       96.8%
BITBIGSFRhhlh       1E      0       0      15        0.0%
BITBIGSFRhhhhlh     19      0       0       9        0.0%
BITBIGSFRhhhhh       D      0       0       8        0.0%
BITBIGSFRhhll        7      0       0      16        0.0%
BITBIGSFRhllhh       6      0       0      17        0.0%
BITBIGSFRhhhlhh      5      0       0      13        0.0%
BITBIGSFRhlll        5      0       0      18        0.0%
BITBIGSFRhhhhlh      3      0       0      11        0.0%
BITBIGSFRhhhhlh      1      0       0      10        0.0%
BITBIGSFRhhhhll      1      0       0      12        0.0%
BITBIGSFRhhhll       1      0       0      14        0.0%
BITBIGSFRl           1      0       0      19        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F6      20        0.0%
DATA                 0      0      F6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Mon Apr 15 20:45:19 2024

                                               _c 00C8          calculateBitRatePer10Sec@length_mm_scaled 0044  
                                              l21 19F8                                                l23 1A02  
                                              l17 19E4                                                l19 19EE  
                                              _GO 7E11                                                _Kd 00B8  
                                              _Ki 00BC                                                _Kp 00C0  
                                    ___awdiv@sign 000A                                                _dT 00C4  
                             ___wmul@multiplicand 0007                               __end_of_system_init 1656  
                                             l130 1478                                               l300 0832  
                                             l301 082A                                               l304 0856  
                                             l313 0896                                               l305 084E  
                                             l251 066A                                               l308 087A  
                                             l260 06B2                                               l252 0662  
                                             l309 0872                                               l261 06AA  
                                             l280 076E                                               l272 0726  
                                             l264 06D6                                               l256 068E  
                                             l281 0766                                               l273 071E  
                                             l265 06CE                                               l257 0686  
                                             l292 07E2                                               l284 079A  
                                             l276 074A                                               l268 0702  
                                             l293 07DA                                               l285 0792  
                                             l277 0742                                               l269 06FA  
                                             l447 1AD6                                               l296 0806  
                                             l288 07BE                                               l297 07FE  
                                             l289 07B6                                               l626 128C  
                                             _GIE 7F97                                               _RB0 7C08  
                                             _RB1 7C09                                               _RB2 7C0A  
                                             _RB3 7C0B                                               _RC2 7C12  
                                             _RD0 7C18                                               _RB4 7C0C  
                                             _RD1 7C19                                               _RD2 7C1A  
                                             _RB6 7C0E                                               _RD3 7C1B  
                                             _RB7 7C0F                                               _RD4 7C1C  
                                             _RD5 7C1D                                               _RC7 7C17  
                                             _RD6 7C1E                                               _RD7 7C1F  
                                             _PR2 0FCB                                    ?_usePeripheral 0005  
                                             _abs 1A2E                                               _mil 0073  
                                    ___awmod@sign 000A                                               wreg 0FE8  
                                            ?_abs 000F                                              l1335 1A3C  
                                            l4011 159E                                              l4031 15E4  
                                            l4023 15CC                                              l4015 15AC  
                                            l4007 1592                                              l4111 1842  
                                            l4017 15B4                                              l4027 15D6  
                                            l4115 185E                                              l4131 0F2E  
                                            l4051 0900                                              l4213 1160  
                                            l4221 1186                                              l4061 0942  
                                            l4207 113A                                              l4143 0F56  
                                            l4063 0966                                              l4047 08F6  
                                            l4055 0906                                              l4161 0F96  
                                            l4137 0F42                                              l4049 08FC  
                                            l4057 091C                                              l4243 123E  
                                            l4155 0F80                                              l4075 09C0  
                                            l4067 0988                                              l4245 124A  
                                            l4149 0F6A                                              l4093 0A7E  
                                            l4069 0996                                              l4261 19AE  
                                            l4271 1AC2                                              l4255 127E  
                                            l4167 0FAC                                              l4095 0A88  
                                            l4263 19BE                                              l4601 12B8  
                                            l3641 19E6                                              l4089 0A62  
                                            l4433 037A                                              l4417 01DC  
                                            l4099 0A96                                              l4613 12D0  
                                            l3805 0D2E                                              l3821 0D7C  
                                            l3645 19F0                                              l3901 10B8  
                                            l4293 0DE0                                              l4437 039E  
                                            l4607 12C4                                              l3807 0D3A  
                                            l4199 110E                                              l4625 12E8  
                                            l3825 0D92                                              l3817 0D6E  
                                            l3649 19FA                                              l3841 0E9E  
                                            l4481 051E                                              l4619 12DC  
                                            l3931 1B28                                              l3923 14DA  
                                            l4299 0E34                                              l4571 1720  
                                            l4637 12F4                                              l3781 089E  
                                            l3909 10E0                                              l3861 0F08  
                                            l3853 0EE4                                              l3845 0EB0  
                                            l3837 0E8A                                              l4581 1764  
                                            l4653 16C0                                              l4639 131C  
                                            l3951 17EA                                              l3919 14A6  
                                            l3847 0EBC                                              l3871 1334  
                                            l4655 16C6                                              l3793 0CF4  
                                            l3857 0EF2                                              l4497 05A6  
                                            l4665 16DA                                              l4595 12AE  
                                            l3947 17D6                                              l3963 11AC  
                                            l4579 174E                                              l4659 16CE  
                                            l4667 16FC                                              l4589 12A2  
                                            l3893 1090                                              l3799 0D0C  
                                            l3975 11D2                                              l3991 1204  
                                            l3977 11DA                                              l3969 11BC  
                                            l3995 1212                                              l3987 11FA  
                                            _ADON 7E10                                              STR_1 1FC9  
                                            STR_2 1F4F                                              STR_3 1FEE  
                                            STR_4 1FED                                              STR_5 1FE7  
                                            STR_6 1F32                                              STR_7 1F88  
                                            STR_8 1FAC                                              STR_9 1F23  
                                            _LATB 0F8A                                              u4030 09BC  
                                            u4040 09BE                                              u4130 1444  
                                            u4060 0A46                                              u3600 0D3E  
                                            u4160 1460                                              u4410 124E  
                                            u4154 1452                                              u4155 144E  
                                            u4148 1446                                              u3700 132C  
                                            u4520 12AA                                              u4184 146E  
                                            u3720 136E                                              u4185 146A  
                                            u4178 1462                                              u3810 1B16  
                                            _PEIE 7F96                                              u4460 0E44  
                                            u3660 0EC0                                              u3910 11DE  
                                            u3830 1B20                                              u4607 152E  
                                            u4480 038E                                              u3825 1B18  
                                            u4617 1542                                              u4707 114C  
                                            u4627 05D8                                              u3780 14D2  
                                            u4717 1172                                              u4637 0616  
                                            u3790 1506                                              u4807 0784  
                                            u4727 0654                                              u4647 0E08  
                                            u4817 07A8                                              u4737 0678  
                                            u4657 0E2A                                              u3970 15B8  
                                            u4827 07CC                                              u4747 069C  
                                            u4667 1950                                              u3787 14C8  
                                            u4837 07F0                                              u4757 06C0  
                                            u4677 1962                                              u3797 14FC  
                                            u4597 151A                                              u4847 081C  
                                            u4767 06EC                                              u4687 1AB2  
                                            u4857 0840                                              u4777 0710  
                                            u4697 1126                                              u4867 0864  
                                            u4787 0734                                              u4877 0888  
                                            u4797 0758                                              u4887 1AC8  
                                            _RBPU 7F8F                                              _TMR1 0FCE  
                                            abs@a 000F                                 ?_Lcd_Write_String 0009  
                                            _dbuf 0080                                              _main 16B8  
                                            _menu 186C                                              _prec 00AA  
                                            fsr1h 0FE2                                              fsr2h 0FDA  
                                            indf1 0FE7                                              indf2 0FDF  
                                            fsr1l 0FE1                                              fsr2l 0FD9  
                                            btemp 007B                                  __end_of_ADC_Read 149C  
                                            prodh 0FF4                                              prodl 0FF3  
                                            start 018A                                ??_Lcd_Write_String 000B  
                                __end_of_ADC_init 1B4E                                   __end_of_Lcd_Cmd 1AC0  
                                    ___param_bank 0000                              __end_of_GetNextState 1320  
                                           ??_abs 0011                 handle_infusion_setup@currentState 0072  
                                 __end_of___aldiv 0DA4                                   __end_of___almod 0F1A  
                                           ?_main 0001                                             ?_menu 0001  
                                 __end_of___awdiv 121C                                             STR_10 1F7D  
                                           STR_11 1F5B                                             STR_12 1FD0  
                                           STR_20 1F41                                             STR_13 1FD7  
                                           STR_21 1ED5                                             STR_22 1F9B  
                                           STR_30 1F92                                             STR_15 1F23  
                                           STR_31 1FB4                                             STR_23 1EEA  
                                           STR_32 1FF0                                             STR_16 1FC2  
                                           STR_40 1FBB                                             STR_24 1F12  
                                           STR_25 1FE7                                             STR_17 1FD0  
                                           STR_41 1FFD                                             STR_33 1FE2  
                                           STR_26 1FAC                                             STR_18 1FD7  
                                           STR_34 1FF0                                             STR_42 1FF4  
                                           STR_19 1FE7                                             STR_43 1FFA  
                                           STR_35 1FDD                                             STR_27 1F67  
                                           STR_36 1FF0                                             STR_28 1FA4  
                                 __end_of___awmod 15EE                                             STR_37 1FEC  
                                           STR_29 1F72                                             STR_38 1FF7  
                                           STR_39 1EFF                                   __end_of___lldiv 129E  
                                           _T0CON 0FD5                                   ___awdiv@divisor 0007  
                                           _T1CON 0FCD                                             _T2CON 0FCA  
                                           _LATA2 7C4A                                             _LATC4 7C5C  
                                           _LATC5 7C5D                                             _LATC6 7C5E  
                                           i2l460 017E                       handle_actuator_push@act_pos 0011  
                                           i2l455 0028                                             i2l466 0186  
                                 ___awdiv@counter 0009                                      vfpfcnvrt@fmt 003D  
                                           _TMR0H 0FD7                                             _TMR0L 0FD6  
                                           _PORTB 0F81                                             _PORTD 0F83  
                                           _TRISA 0F92                                             _TRISB 0F93  
                                           _TRISC 0F94                                             _TRISD 0F95  
                             ___lmul@multiplicand 0026                          GetNextState@currentState 0008  
                                ??_keypad_scanner 0005                                             _flags 0079  
                                           _fputc 1320                                             _width 00A8  
                                           _pulse 00AC                                             _putch 1B6A  
                                _getExpected$1675 0060                                  _getExpected$1676 0064  
                           infusion@analogReading 00E7                                             tablat 0FF5  
                                           ttemp5 007C                                             ttemp6 007F  
                                           ttemp7 0083                                             status 0FD8  
                                           wtemp8 007C                                   __end_of_sprintf 1934  
                                __end_of_Lcd_Init 157E                                  __end_of_Lcd_Port 1A06  
                                      _InitKeypad 1B4E                                   __initialization 176E  
                                     _system_init 15EE                                      __end_of_main 1714  
                                    __end_of_menu 18B4                            move_actuator@direction 0009  
                                    ?_input_value 000F                                   ??_usePeripheral 0009  
                                          ??_main 00F8                                            ??_menu 000F  
                                   __activetblptr 0002                                            _ADCON0 0FC2  
                                          _ADCON1 0FC1                                            _ADCON2 0FC0  
                    __end_of_processTimeToSeconds 16B8                                            ?_fputc 0005  
                                          _ADRESH 0FC4                                            _ADRESL 0FC3  
                                          _CCPR1L 0FBE                                  ___awdiv@dividend 0005  
                                          ?_putch 0001                                            i2l3403 19A0  
                                          i2l3531 0090                                            i2l3523 0030  
                                          i2l3543 0126                                            i2l3535 00C2  
                                          i2l3527 0060                                            i2l3539 00F6  
                                          i2l3549 0158                                            i2l3399 1986  
                                          _OSCCON 0FD3                      handle_actuator_push@decision 0014  
                                       ??_Lcd_Cmd 0006                                     vfpfcnvrt@done 0041  
                                          _TMR0IF 7F92                                            _TMR1IE 7CE8  
                                          _TMR1IF 7CF0                                            _TMR2IF 7CF1  
                                          _TMR1ON 7E68                                            _TRISA2 7C92  
                                          _TRISC2 7CA2                                            _TRISC4 7CA4  
                                          _TRISC5 7CA5                                            _TRISC6 7CA6  
                                          _TRISC7 7CA7                                 GetNextState@input 0005  
                                __end_of_delay_ms 1AE0                             input_option@userInput 000E  
                                    ?_signalServo 0001                              delay_ms@milliseconds 0005  
                                      _Timer1_ISR 0008                                      vfprintf@cfmt 004D  
                                          ___lmul 17C6                                         ??___aldiv 0036  
                                       ??___almod 000D                                            ___wmul 1A56  
                                       ??___awdiv 0009                                         ??___awmod 0009  
                                       ??___lldiv 001D                                   ADC_Read@channel 000B  
                                          _manual 18B4                           _change_direction_motion 1B0E  
                                 ADC_Read@digital 000C                                            clear_0 17A6  
                                          clear_1 17B2                                  __end_of_infusion 063E  
                                ___awdiv@quotient 000B                                   ___awmod@divisor 0007  
                           __end_of_move_actuator 186C                                            isa$std 0001  
                                 ___awmod@counter 0009                                            _volume 00D0  
                                          fputc@c 0005                                      __pdataCOMRAM 007A  
                                       ?_ADC_Read 0005                                input_value@initial 0011  
                                    __mediumconst 1EBC                                            tblptrh 0FF7  
                                          tblptrl 0FF6                                            tblptru 0FF8  
                                       ?_ADC_init 0001                                  __end_of_pulseMax 1EC9  
                                __end_of_pulseMin 1ED5                                            putch@c 0001  
                                __end_of_vfprintf 19DA                                         ??_sprintf 0056  
                                   main@userInput 00FA                                   Lcd_Set_Cursor@a 0009  
                                 Lcd_Set_Cursor@b 0008                                   Lcd_Set_Cursor@y 000B  
                                 Lcd_Set_Cursor@z 000A                                        __accesstop 0080  
                         __end_of__initialization 17B8                                 __end_of_Lcd_Clear 1B6A  
                                   ___rparam_used 0001                                       ?_InitKeypad 0001  
                                  __pcstackCOMRAM 0001                          _calculateBitRatePer10Sec 0AB6  
                                    __pidataBANK0 1A06                     __end_of_handle_infusion_setup 176E  
                                   __end_of_fputc 13A0                                     __end_of_putch 1B6C  
                    __end_of_start_process_screen 1420                               usePeripheral@action 0007  
                                   ?_input_option 0008                                     _init_actuator 1AF8  
                                  _Lcd_Set_Cursor 1068                                        ??_ADC_Read 0007  
                                      ??_ADC_init 0005                                         ?_Lcd_Init 0001  
                                       ?_Lcd_Port 0001                                           ??_fputc 0008  
                                input_value@limit 0013                                           ??_putch 0005  
                                    _GetNextState 129E                                  input_value@units 0015  
                                      __pbssBANK0 0080  calculateBitRatePer10Sec@length_per_min_mm_scaled 0048  
                                   _infusion$1678 00D8                                       ?_Timer1_ISR 0001  
                       ??_change_direction_motion 0009                                           ?___lmul 0022  
                                   ?_Timer1_start 0001                                           ?___wmul 0005  
                            _processTimeToSeconds 1656   calculateBitRatePer10Sec@bit_rate_per_min_scaled 004C  
                                         _CCP1CON 0FBD                                           ?_manual 0001  
                                  ___lmul@product 002A                            __end_of_Lcd_Set_Cursor 1108  
                                  ??_input_option 000A                                    ?_init_actuator 0001  
                                       ?_delay_ms 0005                                        ??_Lcd_Init 0008  
                               infusion@expectedX 00E3                                        ??_Lcd_Port 0005  
               calculateBitRatePer10Sec@volume_mL 003C                                    _Lcd_Write_Char 1934  
                                         _Lcd_Cmd 1AA0                                         ?_infusion 0001  
                             getExpected@expected 005C                                           __Hparam 0000  
                              input_option@option 000C                                           __Lparam 0000  
                                  ??_Timer1_start 0005                                      ?_system_init 0001  
                                         ___aldiv 0CD8                                           ___almod 0E6E  
                                         ___awdiv 1198                                           ___awmod 157E  
                           ?_processTimeToSeconds 000D                                           ___lldiv 121C  
                    __end_of_handle_actuator_push 0E6E                                         ?_vfprintf 0049  
                                         __pcinit 176E                                           __ramtop 0200  
                                 ?_Lcd_Set_Cursor 0008                                           __ptext0 16B8  
                                         __ptext1 15EE                                           __ptext2 1AF8  
                                         __ptext3 150E                                           __ptext4 1B4E  
                                         __ptext5 1B3A                                           __ptext6 186C  
                                         __ptext7 18B4                                           __ptext8 1714  
                                         __ptext9 0FC2                                     ?_set_pwm_duty 0005  
                                ___awmod@dividend 0005                                  ___aldiv@dividend 002E  
                                      ??_delay_ms 0007                       processTimeToSeconds@minutes 000F  
                     processTimeToSeconds@seconds 0011                   __end_of_change_direction_motion 1B24  
               change_direction_motion@hDriverIn1 0005                 change_direction_motion@hDriverIn2 0007  
                                         _sprintf 18FC                            __end_of_Lcd_Write_Char 196C  
                            end_of_initialization 17B8                               signalServo@pinServo 0003  
                                         fputc@fp 0007                                     __Lmediumconst 1EBC  
                            _start_process_screen 13A0                                        ??_infusion 0068  
                                 ___lldiv@divisor 0019                                   ___lldiv@counter 0021  
                               __end_of_vfpfcnvrt 0AB6                                  ___aldiv@quotient 0038  
                                         postdec1 0FE5                                           postdec2 0FDD  
                                         postinc0 0FEE                                           postinc1 0FE6  
                                         postinc2 0FDE                                  vfpfcnvrt@convarg 0044  
                                       Lcd_Port@a 0005                                        ??_vfprintf 004D  
                                 ??_init_actuator 0005                                      infusion@buff 00DE  
                                  ??_set_pwm_duty 0007                                     ??_getExpected 0058  
                           __end_of_usePeripheral 0FC2                                         _TRISCbits 0F94  
                            switch_press_scan@key 0007                                   ?_Lcd_Write_Char 0001  
                               Lcd_Write_String@a 0009                                 Lcd_Write_String@i 000D  
                      ??_calculateBitRatePer10Sec 0044                             ?_start_process_screen 000F  
                                main@currentState 00FB                              __end_of_input_option 1198  
                   processTimeToSeconds@timeInput 000D                                      ??_InitKeypad 0005  
      calculateBitRatePer10Sec@bit_rate_per_10sec 0050                            ??_processTimeToSeconds 000F  
                                       _Lcd_Clear 1B5C                                    __end_of___lmul 181C  
                                     vfpfcnvrt@ap 003E                                       vfpfcnvrt@cp 0042  
                                     vfpfcnvrt@fp 003C                                    __end_of___wmul 1A7C  
                                _Lcd_Write_String 149C                                     __pidataCOMRAM 1B6C  
                                  __end_of_manual 18FC                               start_initialization 176E  
                                     __end_of_abs 1A56                              __end_of_Timer1_start 1AF8  
                              __end_of_InitKeypad 1B5C                               __end_of_getExpected 0CD8  
                            _handle_actuator_push 0DA4                                      ??_Timer1_ISR 0004  
                                     vfprintf@fmt 004A                                        ?_Lcd_Clear 0001  
                                        ??___lmul 002A                                          ??___wmul 0009  
                                     __pdataBANK0 00AC                                          ??_manual 000F  
                                 Lcd_Write_Char@a 0008                                   Lcd_Write_Char@y 0007  
                           _handle_infusion_setup 1714                             infusion@controlSignal 00F0  
                                     __pbssCOMRAM 0073                                     __pcstackBANK0 00D4  
                              move_actuator@speed 000B                                __end_of_Timer1_ISR 018A  
                           ?_handle_actuator_push 0011              calculateBitRatePer10Sec@totalSeconds 0040  
                          ??_start_process_screen 0011                                          ?_Lcd_Cmd 0001  
                        start_process_screen@word 000F                              __end_of_set_pwm_duty 1AA0  
                                ??_Lcd_Set_Cursor 0009                                         __pintcode 0008  
                                   __pmediumconst 1EBC                                          ?___aldiv 002E  
                                        ?___almod 0005                                          ?___awdiv 0005  
                                        ?___awmod 0005                                     ??_input_value 0017  
                                        ?___lldiv 0015                           usePeripheral@peripheral 0005  
                                ___almod@dividend 0005                                     _move_actuator 181C  
                                     _getExpected 0BE0                                          _ADC_Read 1420  
                                       _lastError 00A0                                          _ADC_init 1B3A  
                                        ?_sprintf 004F                                  infusion@stopTime 00EB  
                __end_of_calculateBitRatePer10Sec 0BE0                                   ___aldiv@divisor 0032  
                                 ___aldiv@counter 0036                                    ___wmul@product 0009  
                                        _LATBbits 0F8A                                          _LATCbits 0F8B  
                                  _keypad_scanner 063E                          ?_change_direction_motion 0005  
                                   ??_signalServo 0003                                          i2u311_40 00BA  
                                        i2u310_48 009C                                          i2u303_40 003A  
                                        i2u311_46 00BC                                          i2u320_40 0150  
                                        i2u312_40 00CC                                          i2u320_46 0152  
                                        i2u305_40 0058                                          i2u304_48 003C  
                                        i2u305_46 005A                                          i2u314_40 00EE  
                                        i2u313_48 00CE                                          i2u306_40 006A  
                                        Lcd_Cmd@a 0007                                          i2u314_46 00F0  
                                        i2u315_40 0100                                          i2u308_40 0088  
                                        i2u307_48 006C                                          i2u308_46 008A  
                                        i2u317_40 011E                                          i2u316_48 0102  
                                        i2u309_40 009A                                          i2u317_46 0120  
                                        i2u318_40 0130                                          i2u319_48 0132  
                                        _PIR1bits 0F9E                                       ??_Lcd_Clear 0008  
                                        _TMR0_ini 0077                            ?_handle_infusion_setup 0001  
                               _switch_press_scan 1B24                                         _vfpfcnvrt 08A2  
                                  ?_move_actuator 0009                                        _ADCON0bits 0FC2  
                               ___wmul@multiplier 0005                                ?_switch_press_scan 0001  
                                    _input_option 1108                               __end_of_input_value 1068  
                                ??_Lcd_Write_Char 0006                                          _Lcd_Init 150E  
                             ??_switch_press_scan 0007                                          _Lcd_Port 19DA  
                          ??_handle_actuator_push 0013                                        vfpfcnvrt@c 0048  
                               ___lmul@multiplier 0022                                         copy_data0 1782  
                        __end_of_Lcd_Write_String 150E                            __end_of_keypad_scanner 08A2  
                                        __Hrparam 0000                                        vfprintf@ap 004C  
                                        __Lrparam 0000                                        vfprintf@fp 0049  
                                   getExpected@ms 0058                         __end_of_switch_press_scan 1B3A  
                                    _Timer1_start 1AE0                                         infusion@i 00EF  
                             __end_of_signalServo 19A4                                        ?_vfpfcnvrt 003C  
                           __end_of_init_actuator 1B0E                                        sprintf@fmt 0050  
                                 infusion@act_pos 00DC                                          _delay_ms 1AC0  
                                        __ptext10 018E                                          __ptext11 18FC  
                                        __ptext20 13A0                                          __ptext12 19A4  
                                        __ptext21 149C                                          __ptext13 08A2  
                                        __ptext30 1108                                          __ptext22 1934  
                                        __ptext14 1320                                          __ptext31 1B24  
                                        __ptext23 1068                                          __ptext15 1B6A  
                                        __ptext40 17C6                                          __ptext32 063E  
                                        __ptext24 1B5C                                          __ptext16 1A2E  
                                        __ptext41 0CD8                                          __ptext33 1420  
                                        __ptext25 1AA0                                          __ptext17 0E6E  
                                        __ptext42 121C                                          __ptext34 0BE0  
                                        __ptext26 19DA                                          __ptext18 0DA4  
                                        __ptext43 1AC0                                          __ptext35 1656  
                                        __ptext27 181C                                          __ptext19 0F1A  
                                        __ptext44 1AE0                                          __ptext36 1A56  
                                        __ptext28 1A7C                                          __ptext45 129E  
                                        __ptext37 157E                                          __ptext29 1B0E  
                                        __ptext38 1198                                          __ptext47 196C  
                                        __ptext39 0AB6                                     ?_GetNextState 0005  
                                 ___almod@divisor 0009                                   ___almod@counter 000D  
                                 ?_keypad_scanner 0001                                          _errorSum 00A4  
                                        _infusion 018E                             signalServo@pulseServo 0001  
                                        isa$xinst 0000                                      _timeInfusion 00CC  
                                        int$flags 007B                                          _pulseMax 1EBD  
                                        _pulseMin 1EC9                                   ??_move_actuator 000D  
                                        _vfprintf 19A4                                       _input_value 0FC2  
                       ?_calculateBitRatePer10Sec 003C                                      _set_pwm_duty 1A7C  
                                      _INTCONbits 0FF2                  processTimeToSeconds@totalSeconds 0013  
                                  ??_GetNextState 0006                                    infusion@dError 00D4  
                              Lcd_Write_Char@temp 0006                                          intlevel2 0000  
                                       sprintf@ap 0056                                  ___lldiv@dividend 0015  
                            set_pwm_duty@pwm_duty 0005                                       _signalServo 196C  
                            input_value@inputType 000F                                     ??_system_init 0009  
                                    _servo_active 007A                                       ??_vfpfcnvrt 003F  
                              Lcd_Set_Cursor@temp 000C                                          sprintf@f 0057  
                                        sprintf@s 004F                                      ?_getExpected 0054  
                                ___lldiv@quotient 001D                                     infusion@error 00F4  
                                   _usePeripheral 0F1A                                      ___aldiv@sign 0037  
                                    ___almod@sign 000E                           ??_handle_infusion_setup 0070  
