

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Mon Apr 15 20:45:03 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=3
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=2
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    65                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    66                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    67   000000                     
    68                           ; Generated 17/10/2023 GMT
    69                           ; 
    70                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    71                           ; All rights reserved.
    72                           ; 
    73                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    74                           ; 
    75                           ; Redistribution and use in source and binary forms, with or without modification, are
    76                           ; permitted provided that the following conditions are met:
    77                           ; 
    78                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    79                           ;        conditions and the following disclaimer.
    80                           ; 
    81                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    82                           ;        of conditions and the following disclaimer in the documentation and/or other
    83                           ;        materials provided with the distribution. Publication is not required when
    84                           ;        this file is used in an embedded application.
    85                           ; 
    86                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    87                           ;        software without specific prior written permission.
    88                           ; 
    89                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    90                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    91                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    92                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    93                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    94                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    95                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    96                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    97                           ; 
    98                           ; 
    99                           ; Code-generator required, PIC18F4321 Definitions
   100                           ; 
   101                           ; SFR Addresses
   102   000000                     
   103                           	psect	idataCOMRAM
   104   001B6C                     __pidataCOMRAM:
   105                           	callstack 0
   106                           
   107                           ;initializer for _servo_active
   108   001B6C  01                 	db	1
   109                           
   110                           	psect	idataBANK0
   111   001A06                     __pidataBANK0:
   112                           	callstack 0
   113                           
   114                           ;initializer for _pulse
   115   001A06  0032               	dw	50
   116   001A08  0032               	dw	50
   117   001A0A  0032               	dw	50
   118   001A0C  0032               	dw	50
   119   001A0E  0032               	dw	50
   120   001A10  0032               	dw	50
   121                           
   122                           ;initializer for _Kd
   123   001A12  07D0               	dw	2000
   124   001A14  0000               	dw	0
   125                           
   126                           ;initializer for _Ki
   127   001A16  07D0               	dw	2000
   128   001A18  0000               	dw	0
   129                           
   130                           ;initializer for _Kp
   131   001A1A  1D4C               	dw	7500
   132   001A1C  0000               	dw	0
   133                           
   134                           ;initializer for _dT
   135   001A1E  0064               	dw	100
   136   001A20  0000               	dw	0
   137                           
   138                           ;initializer for _c
   139   001A22  03E8               	dw	1000
   140   001A24  0000               	dw	0
   141                           
   142                           ;initializer for _timeInfusion
   143   001A26  0064               	dw	100
   144   001A28  0000               	dw	0
   145                           
   146                           ;initializer for _volume
   147   001A2A  000A               	dw	10
   148   001A2C  0000               	dw	0
   149                           
   150                           	psect	mediumconst
   151   001EBC                     __pmediumconst:
   152                           	callstack 0
   153   001EBC  00                 	db	0
   154   001EBD                     _pulseMax:
   155                           	callstack 0
   156   001EBD  09C4               	dw	2500
   157   001EBF  09C4               	dw	2500
   158   001EC1  09C4               	dw	2500
   159   001EC3  09C4               	dw	2500
   160   001EC5  09C4               	dw	2500
   161   001EC7  09C4               	dw	2500
   162   001EC9                     __end_of_pulseMax:
   163                           	callstack 0
   164   001EC9                     _pulseMin:
   165                           	callstack 0
   166   001EC9  01F4               	dw	500
   167   001ECB  01F4               	dw	500
   168   001ECD  01F4               	dw	500
   169   001ECF  01F4               	dw	500
   170   001ED1  01F4               	dw	500
   171   001ED3  01F4               	dw	500
   172   001ED5                     __end_of_pulseMin:
   173                           	callstack 0
   174   000000                     _LATB	set	3978
   175   000000                     _TRISB	set	3987
   176   000000                     _ADRESL	set	4035
   177   000000                     _ADRESH	set	4036
   178   000000                     _LATC6	set	31838
   179   000000                     _TRISCbits	set	3988
   180   000000                     _TRISC	set	3988
   181   000000                     _PORTD	set	3971
   182   000000                     _LATBbits	set	3978
   183   000000                     _LATCbits	set	3979
   184   000000                     _INTCONbits	set	4082
   185   000000                     _PIR1bits	set	3998
   186   000000                     _PORTB	set	3969
   187   000000                     _ADCON0bits	set	4034
   188   000000                     _TRISC4	set	31908
   189   000000                     _TRISC5	set	31909
   190   000000                     _TRISC6	set	31910
   191   000000                     _TRISA2	set	31890
   192   000000                     _TMR1ON	set	32360
   193   000000                     _PEIE	set	32662
   194   000000                     _GIE	set	32663
   195   000000                     _TMR1IF	set	31984
   196   000000                     _TRISC7	set	31911
   197   000000                     _RB7	set	31759
   198   000000                     _RB6	set	31758
   199   000000                     _RC7	set	31767
   200   000000                     _RB4	set	31756
   201   000000                     _RB3	set	31755
   202   000000                     _RB2	set	31754
   203   000000                     _RB1	set	31753
   204   000000                     _LATC4	set	31836
   205   000000                     _LATC5	set	31837
   206   000000                     _GO	set	32273
   207   000000                     _ADON	set	32272
   208   000000                     _RD0	set	31768
   209   000000                     _RD1	set	31769
   210   000000                     _RD3	set	31771
   211   000000                     _RD2	set	31770
   212   000000                     _RD7	set	31775
   213   000000                     _RD6	set	31774
   214   000000                     _RD5	set	31773
   215   000000                     _RB0	set	31752
   216   000000                     _RC2	set	31762
   217   000000                     _RD4	set	31772
   218   000000                     _TRISA	set	3986
   219   000000                     _LATA2	set	31818
   220   000000                     _TRISC2	set	31906
   221   000000                     _TRISD	set	3989
   222   000000                     _CCP1CON	set	4029
   223   000000                     _TMR1IE	set	31976
   224   000000                     _TMR2IF	set	31985
   225   000000                     _ADCON2	set	4032
   226   000000                     _ADCON1	set	4033
   227   000000                     _ADCON0	set	4034
   228   000000                     _T2CON	set	4042
   229   000000                     _CCPR1L	set	4030
   230   000000                     _TMR1	set	4046
   231   000000                     _T1CON	set	4045
   232   000000                     _PR2	set	4043
   233   000000                     _RBPU	set	32655
   234   000000                     _TMR0IF	set	32658
   235   000000                     _OSCCON	set	4051
   236   000000                     _T0CON	set	4053
   237   000000                     _TMR0L	set	4054
   238   000000                     _TMR0H	set	4055
   239   001ED5                     STR_21:
   240   001ED5  31                 	db	49	;'1'
   241   001ED6  2E                 	db	46
   242   001ED7  53                 	db	83	;'S'
   243   001ED8  74                 	db	116	;'t'
   244   001ED9  61                 	db	97	;'a'
   245   001EDA  72                 	db	114	;'r'
   246   001EDB  74                 	db	116	;'t'
   247   001EDC  20                 	db	32
   248   001EDD  4E                 	db	78	;'N'
   249   001EDE  65                 	db	101	;'e'
   250   001EDF  77                 	db	119	;'w'
   251   001EE0  20                 	db	32
   252   001EE1  49                 	db	73	;'I'
   253   001EE2  6E                 	db	110	;'n'
   254   001EE3  66                 	db	102	;'f'
   255   001EE4  75                 	db	117	;'u'
   256   001EE5  73                 	db	115	;'s'
   257   001EE6  69                 	db	105	;'i'
   258   001EE7  6F                 	db	111	;'o'
   259   001EE8  6E                 	db	110	;'n'
   260   001EE9  00                 	db	0
   261   001EEA                     STR_23:
   262   001EEA  46                 	db	70	;'F'
   263   001EEB  6F                 	db	111	;'o'
   264   001EEC  72                 	db	114	;'r'
   265   001EED  20                 	db	32
   266   001EEE  6D                 	db	109	;'m'
   267   001EEF  6F                 	db	111	;'o'
   268   001EF0  72                 	db	114	;'r'
   269   001EF1  65                 	db	101	;'e'
   270   001EF2  20                 	db	32
   271   001EF3  69                 	db	105	;'i'
   272   001EF4  6E                 	db	110	;'n'
   273   001EF5  66                 	db	102	;'f'
   274   001EF6  6F                 	db	111	;'o'
   275   001EF7  72                 	db	114	;'r'
   276   001EF8  6D                 	db	109	;'m'
   277   001EF9  61                 	db	97	;'a'
   278   001EFA  74                 	db	116	;'t'
   279   001EFB  69                 	db	105	;'i'
   280   001EFC  6F                 	db	111	;'o'
   281   001EFD  6E                 	db	110	;'n'
   282   001EFE  00                 	db	0
   283   001EFF                     STR_39:
   284   001EFF  49                 	db	73	;'I'
   285   001F00  4E                 	db	78	;'N'
   286   001F01  46                 	db	70	;'F'
   287   001F02  55                 	db	85	;'U'
   288   001F03  53                 	db	83	;'S'
   289   001F04  49                 	db	73	;'I'
   290   001F05  4F                 	db	79	;'O'
   291   001F06  4E                 	db	78	;'N'
   292   001F07  20                 	db	32
   293   001F08  43                 	db	67	;'C'
   294   001F09  4F                 	db	79	;'O'
   295   001F0A  4D                 	db	77	;'M'
   296   001F0B  50                 	db	80	;'P'
   297   001F0C  4C                 	db	76	;'L'
   298   001F0D  45                 	db	69	;'E'
   299   001F0E  54                 	db	84	;'T'
   300   001F0F  45                 	db	69	;'E'
   301   001F10  44                 	db	68	;'D'
   302   001F11  00                 	db	0
   303   001F12                     STR_24:
   304   001F12  56                 	db	86	;'V'
   305   001F13  69                 	db	105	;'i'
   306   001F14  73                 	db	115	;'s'
   307   001F15  69                 	db	105	;'i'
   308   001F16  74                 	db	116	;'t'
   309   001F17  3A                 	db	58	;':'
   310   001F18  20                 	db	32
   311   001F19  68                 	db	104	;'h'
   312   001F1A  61                 	db	97	;'a'
   313   001F1B  72                 	db	114	;'r'
   314   001F1C  64                 	db	100	;'d'
   315   001F1D  6E                 	db	110	;'n'
   316   001F1E  67                 	db	103	;'g'
   317   001F1F  2E                 	db	46
   318   001F20  65                 	db	101	;'e'
   319   001F21  64                 	db	100	;'d'
   320   001F22  00                 	db	0
   321   001F23                     STR_9:
   322   001F23  44                 	db	68	;'D'
   323   001F24  4F                 	db	79	;'O'
   324   001F25  20                 	db	32
   325   001F26  59                 	db	89	;'Y'
   326   001F27  4F                 	db	79	;'O'
   327   001F28  55                 	db	85	;'U'
   328   001F29  20                 	db	32
   329   001F2A  57                 	db	87	;'W'
   330   001F2B  41                 	db	65	;'A'
   331   001F2C  4E                 	db	78	;'N'
   332   001F2D  54                 	db	84	;'T'
   333   001F2E  20                 	db	32
   334   001F2F  54                 	db	84	;'T'
   335   001F30  4F                 	db	79	;'O'
   336   001F31  00                 	db	0
   337   001F32  53                 	db	83	;'S'
   338   001F33  59                 	db	89	;'Y'
   339   001F34  52                 	db	82	;'R'
   340   001F35  49                 	db	73	;'I'
   341   001F36  4E                 	db	78	;'N'
   342   001F37  47                 	db	71	;'G'
   343   001F38  45                 	db	69	;'E'
   344   001F39  20                 	db	32
   345   001F3A  49                 	db	73	;'I'
   346   001F3B  53                 	db	83	;'S'
   347   001F3C  20                 	db	32
   348   001F3D  4E                 	db	78	;'N'
   349   001F3E  4F                 	db	79	;'O'
   350   001F3F  54                 	db	84	;'T'
   351   001F40  00                 	db	0
   352   001F41                     STR_20:
   353   001F41  4D                 	db	77	;'M'
   354   001F42  65                 	db	101	;'e'
   355   001F43  64                 	db	100	;'d'
   356   001F44  69                 	db	105	;'i'
   357   001F45  53                 	db	83	;'S'
   358   001F46  79                 	db	121	;'y'
   359   001F47  6E                 	db	110	;'n'
   360   001F48  63                 	db	99	;'c'
   361   001F49  20                 	db	32
   362   001F4A  4D                 	db	77	;'M'
   363   001F4B  65                 	db	101	;'e'
   364   001F4C  6E                 	db	110	;'n'
   365   001F4D  75                 	db	117	;'u'
   366   001F4E  00                 	db	0
   367   001F4F                     STR_2:
   368   001F4F  20                 	db	32
   369   001F50  42                 	db	66	;'B'
   370   001F51  45                 	db	69	;'E'
   371   001F52  54                 	db	84	;'T'
   372   001F53  57                 	db	87	;'W'
   373   001F54  45                 	db	69	;'E'
   374   001F55  45                 	db	69	;'E'
   375   001F56  4E                 	db	78	;'N'
   376   001F57  20                 	db	32
   377   001F58  30                 	db	48	;'0'
   378   001F59  2D                 	db	45
   379   001F5A  00                 	db	0
   380   001F5B  43                 	db	67	;'C'
   381   001F5C  4C                 	db	76	;'L'
   382   001F5D  4F                 	db	79	;'O'
   383   001F5E  53                 	db	83	;'S'
   384   001F5F  45                 	db	69	;'E'
   385   001F60  20                 	db	32
   386   001F61  56                 	db	86	;'V'
   387   001F62  41                 	db	65	;'A'
   388   001F63  4C                 	db	76	;'L'
   389   001F64  56                 	db	86	;'V'
   390   001F65  45                 	db	69	;'E'
   391   001F66  00                 	db	0
   392   001F67                     STR_27:
   393   001F67  50                 	db	80	;'P'
   394   001F68  55                 	db	85	;'U'
   395   001F69  53                 	db	83	;'S'
   396   001F6A  48                 	db	72	;'H'
   397   001F6B  49                 	db	73	;'I'
   398   001F6C  4E                 	db	78	;'N'
   399   001F6D  47                 	db	71	;'G'
   400   001F6E  2E                 	db	46
   401   001F6F  2E                 	db	46
   402   001F70  2E                 	db	46
   403   001F71  00                 	db	0
   404   001F72  50                 	db	80	;'P'
   405   001F73  55                 	db	85	;'U'
   406   001F74  4C                 	db	76	;'L'
   407   001F75  4C                 	db	76	;'L'
   408   001F76  49                 	db	73	;'I'
   409   001F77  4E                 	db	78	;'N'
   410   001F78  47                 	db	71	;'G'
   411   001F79  2E                 	db	46
   412   001F7A  2E                 	db	46
   413   001F7B  2E                 	db	46
   414   001F7C  00                 	db	0
   415   001F7D  4F                 	db	79	;'O'
   416   001F7E  50                 	db	80	;'P'
   417   001F7F  45                 	db	69	;'E'
   418   001F80  4E                 	db	78	;'N'
   419   001F81  20                 	db	32
   420   001F82  56                 	db	86	;'V'
   421   001F83  41                 	db	65	;'A'
   422   001F84  4C                 	db	76	;'L'
   423   001F85  56                 	db	86	;'V'
   424   001F86  45                 	db	69	;'E'
   425   001F87  00                 	db	0
   426   001F88  50                 	db	80	;'P'
   427   001F89  55                 	db	85	;'U'
   428   001F8A  53                 	db	83	;'S'
   429   001F8B  48                 	db	72	;'H'
   430   001F8C  45                 	db	69	;'E'
   431   001F8D  44                 	db	68	;'D'
   432   001F8E  20                 	db	32
   433   001F8F  49                 	db	73	;'I'
   434   001F90  4E                 	db	78	;'N'
   435   001F91  00                 	db	0
   436   001F92  49                 	db	73	;'I'
   437   001F93  4E                 	db	78	;'N'
   438   001F94  46                 	db	70	;'F'
   439   001F95  55                 	db	85	;'U'
   440   001F96  53                 	db	83	;'S'
   441   001F97  49                 	db	73	;'I'
   442   001F98  4F                 	db	79	;'O'
   443   001F99  4E                 	db	78	;'N'
   444   001F9A  00                 	db	0
   445   001F9B                     STR_22:
   446   001F9B  32                 	db	50	;'2'
   447   001F9C  2E                 	db	46
   448   001F9D  4D                 	db	77	;'M'
   449   001F9E  61                 	db	97	;'a'
   450   001F9F  6E                 	db	110	;'n'
   451   001FA0  75                 	db	117	;'u'
   452   001FA1  61                 	db	97	;'a'
   453   001FA2  6C                 	db	108	;'l'
   454   001FA3  00                 	db	0
   455   001FA4  46                 	db	70	;'F'
   456   001FA5  49                 	db	73	;'I'
   457   001FA6  4C                 	db	76	;'L'
   458   001FA7  4C                 	db	76	;'L'
   459   001FA8  49                 	db	73	;'I'
   460   001FA9  4E                 	db	78	;'N'
   461   001FAA  47                 	db	71	;'G'
   462   001FAB  00                 	db	0
   463   001FAC                     STR_8:
   464   001FAC  50                 	db	80	;'P'
   465   001FAD  55                 	db	85	;'U'
   466   001FAE  53                 	db	83	;'S'
   467   001FAF  48                 	db	72	;'H'
   468   001FB0  49                 	db	73	;'I'
   469   001FB1  4E                 	db	78	;'N'
   470   001FB2  47                 	db	71	;'G'
   471   001FB3  00                 	db	0
   472   001FB4                     STR_31:
   473   001FB4  45                 	db	69	;'E'
   474   001FB5  72                 	db	114	;'r'
   475   001FB6  72                 	db	114	;'r'
   476   001FB7  6F                 	db	111	;'o'
   477   001FB8  72                 	db	114	;'r'
   478   001FB9  3A                 	db	58	;':'
   479   001FBA  00                 	db	0
   480   001FBB                     STR_40:
   481   001FBB  56                 	db	86	;'V'
   482   001FBC  4F                 	db	79	;'O'
   483   001FBD  4C                 	db	76	;'L'
   484   001FBE  55                 	db	85	;'U'
   485   001FBF  4D                 	db	77	;'M'
   486   001FC0  45                 	db	69	;'E'
   487   001FC1  00                 	db	0
   488   001FC2                     STR_16:
   489   001FC2  53                 	db	83	;'S'
   490   001FC3  54                 	db	84	;'T'
   491   001FC4  41                 	db	65	;'A'
   492   001FC5  52                 	db	82	;'R'
   493   001FC6  54                 	db	84	;'T'
   494   001FC7  20                 	db	32
   495   001FC8  00                 	db	0
   496   001FC9                     STR_1:
   497   001FC9  49                 	db	73	;'I'
   498   001FCA  4E                 	db	78	;'N'
   499   001FCB  50                 	db	80	;'P'
   500   001FCC  55                 	db	85	;'U'
   501   001FCD  54                 	db	84	;'T'
   502   001FCE  20                 	db	32
   503   001FCF  00                 	db	0
   504   001FD0                     STR_12:
   505   001FD0  31                 	db	49	;'1'
   506   001FD1  2E                 	db	46
   507   001FD2  20                 	db	32
   508   001FD3  59                 	db	89	;'Y'
   509   001FD4  45                 	db	69	;'E'
   510   001FD5  53                 	db	83	;'S'
   511   001FD6  00                 	db	0
   512   001FD7                     STR_13:
   513   001FD7  32                 	db	50	;'2'
   514   001FD8  2E                 	db	46
   515   001FD9  20                 	db	32
   516   001FDA  4E                 	db	78	;'N'
   517   001FDB  4F                 	db	79	;'O'
   518   001FDC  00                 	db	0
   519   001FDD                     STR_35:
   520   001FDD  45                 	db	69	;'E'
   521   001FDE  78                 	db	120	;'x'
   522   001FDF  70                 	db	112	;'p'
   523   001FE0  3A                 	db	58	;':'
   524   001FE1  00                 	db	0
   525   001FE2                     STR_33:
   526   001FE2  50                 	db	80	;'P'
   527   001FE3  6F                 	db	111	;'o'
   528   001FE4  73                 	db	115	;'s'
   529   001FE5  3A                 	db	58	;':'
   530   001FE6  00                 	db	0
   531   001FE7                     STR_5:
   532   001FE7  42                 	db	66	;'B'
   533   001FE8  41                 	db	65	;'A'
   534   001FE9  43                 	db	67	;'C'
   535   001FEA  4B                 	db	75	;'K'
   536   001FEB  00                 	db	0
   537   001FEC                     STR_37:
   538   001FEC  54                 	db	84	;'T'
   539   001FED  3A                 	db	58	;':'
   540   001FEE  20                 	db	32
   541   001FEF  00                 	db	0
   542   001FF0                     STR_32:
   543   001FF0  25                 	db	37
   544   001FF1  6C                 	db	108	;'l'
   545   001FF2  64                 	db	100	;'d'
   546   001FF3  00                 	db	0
   547   001FF4                     STR_42:
   548   001FF4  31                 	db	49	;'1'
   549   001FF5  30                 	db	48	;'0'
   550   001FF6  00                 	db	0
   551   001FF7                     STR_38:
   552   001FF7  25                 	db	37
   553   001FF8  64                 	db	100	;'d'
   554   001FF9  00                 	db	0
   555   001FFA                     STR_43:
   556   001FFA  6D                 	db	109	;'m'
   557   001FFB  6C                 	db	108	;'l'
   558   001FFC  00                 	db	0
   559   001FFD                     STR_41:
   560   001FFD  56                 	db	86	;'V'
   561   001FFE  00                 	db	0
   562   001FFF  00                 	db	0	; dummy byte at the end
   563   000000                     
   564                           ; #config settings
   565                           
   566                           	psect	cinit
   567   00176E                     __pcinit:
   568                           	callstack 0
   569   00176E                     start_initialization:
   570                           	callstack 0
   571   00176E                     __initialization:
   572                           	callstack 0
   573                           
   574                           ; Initialize objects allocated to BANK0 (40 bytes)
   575                           ; load TBLPTR registers with __pidataBANK0
   576   00176E  0E06               	movlw	low __pidataBANK0
   577   001770  6EF6               	movwf	tblptrl,c
   578   001772  0E1A               	movlw	high __pidataBANK0
   579   001774  6EF7               	movwf	tblptrh,c
   580   001776  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   581   001778  6EF8               	movwf	tblptru,c
   582   00177A  EE00  F0AC         	lfsr	0,__pdataBANK0
   583   00177E  EE10 F028          	lfsr	1,40
   584   001782                     copy_data0:
   585   001782  0009               	tblrd		*+
   586   001784  CFF5 FFEE          	movff	tablat,postinc0
   587   001788  50E5               	movf	postdec1,w,c
   588   00178A  50E1               	movf	fsr1l,w,c
   589   00178C  E1FA               	bnz	copy_data0
   590                           
   591                           ; Initialize objects allocated to COMRAM (1 bytes)
   592                           ; load TBLPTR registers with __pidataCOMRAM
   593   00178E  0E6C               	movlw	low __pidataCOMRAM
   594   001790  6EF6               	movwf	tblptrl,c
   595   001792  0E1B               	movlw	high __pidataCOMRAM
   596   001794  6EF7               	movwf	tblptrh,c
   597   001796  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   598   001798  6EF8               	movwf	tblptru,c
   599   00179A  0009               	tblrd		*+	;fetch initializer
   600   00179C  CFF5 F07A          	movff	tablat,__pdataCOMRAM
   601                           
   602                           ; Clear objects allocated to BANK0 (44 bytes)
   603   0017A0  EE00  F080         	lfsr	0,__pbssBANK0
   604   0017A4  0E2C               	movlw	44
   605   0017A6                     clear_0:
   606   0017A6  6AEE               	clrf	postinc0,c
   607   0017A8  06E8               	decf	wreg,f,c
   608   0017AA  E1FD               	bnz	clear_0
   609                           
   610                           ; Clear objects allocated to COMRAM (7 bytes)
   611   0017AC  EE00  F073         	lfsr	0,__pbssCOMRAM
   612   0017B0  0E07               	movlw	7
   613   0017B2                     clear_1:
   614   0017B2  6AEE               	clrf	postinc0,c
   615   0017B4  06E8               	decf	wreg,f,c
   616   0017B6  E1FD               	bnz	clear_1
   617   0017B8                     end_of_initialization:
   618                           	callstack 0
   619   0017B8                     __end_of__initialization:
   620                           	callstack 0
   621   0017B8  907B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   622   0017BA  927B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   623   0017BC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   624   0017BE  6EF8               	movwf	tblptru,c
   625   0017C0  0100               	movlb	0
   626   0017C2  EF5C  F00B         	goto	_main	;jump to C main() function
   627                           
   628                           	psect	bssCOMRAM
   629   000073                     __pbssCOMRAM:
   630                           	callstack 0
   631   000073                     _mil:
   632                           	callstack 0
   633   000073                     	ds	4
   634   000077                     _TMR0_ini:
   635                           	callstack 0
   636   000077                     	ds	2
   637   000079                     _flags:
   638                           	callstack 0
   639   000079                     	ds	1
   640                           
   641                           	psect	dataCOMRAM
   642   00007A                     __pdataCOMRAM:
   643                           	callstack 0
   644   00007A                     _servo_active:
   645                           	callstack 0
   646   00007A                     	ds	1
   647                           
   648                           	psect	bssBANK0
   649   000080                     __pbssBANK0:
   650                           	callstack 0
   651   000080                     _dbuf:
   652                           	callstack 0
   653   000080                     	ds	32
   654   0000A0                     _lastError:
   655                           	callstack 0
   656   0000A0                     	ds	4
   657   0000A4                     _errorSum:
   658                           	callstack 0
   659   0000A4                     	ds	4
   660   0000A8                     _width:
   661                           	callstack 0
   662   0000A8                     	ds	2
   663   0000AA                     _prec:
   664                           	callstack 0
   665   0000AA                     	ds	2
   666                           
   667                           	psect	dataBANK0
   668   0000AC                     __pdataBANK0:
   669                           	callstack 0
   670   0000AC                     _pulse:
   671                           	callstack 0
   672   0000AC                     	ds	12
   673   0000B8                     _Kd:
   674                           	callstack 0
   675   0000B8                     	ds	4
   676   0000BC                     _Ki:
   677                           	callstack 0
   678   0000BC                     	ds	4
   679   0000C0                     _Kp:
   680                           	callstack 0
   681   0000C0                     	ds	4
   682   0000C4                     _dT:
   683                           	callstack 0
   684   0000C4                     	ds	4
   685   0000C8                     _c:
   686                           	callstack 0
   687   0000C8                     	ds	4
   688   0000CC                     _timeInfusion:
   689                           	callstack 0
   690   0000CC                     	ds	4
   691   0000D0                     _volume:
   692                           	callstack 0
   693   0000D0                     	ds	4
   694                           
   695                           	psect	cstackBANK0
   696   0000D4                     __pcstackBANK0:
   697                           	callstack 0
   698   0000D4                     infusion@dError:
   699                           	callstack 0
   700                           
   701                           ; 4 bytes @ 0x0
   702   0000D4                     	ds	4
   703   0000D8                     _infusion$1678:
   704                           	callstack 0
   705                           
   706                           ; 4 bytes @ 0x4
   707   0000D8                     	ds	4
   708   0000DC                     infusion@act_pos:
   709                           	callstack 0
   710                           
   711                           ; 2 bytes @ 0x8
   712   0000DC                     	ds	2
   713   0000DE                     infusion@buff:
   714                           	callstack 0
   715                           
   716                           ; 5 bytes @ 0xA
   717   0000DE                     	ds	5
   718   0000E3                     infusion@expectedX:
   719                           	callstack 0
   720                           
   721                           ; 4 bytes @ 0xF
   722   0000E3                     	ds	4
   723   0000E7                     infusion@analogReading:
   724                           	callstack 0
   725                           
   726                           ; 4 bytes @ 0x13
   727   0000E7                     	ds	4
   728   0000EB                     infusion@stopTime:
   729                           	callstack 0
   730                           
   731                           ; 4 bytes @ 0x17
   732   0000EB                     	ds	4
   733   0000EF                     infusion@i:
   734                           	callstack 0
   735                           
   736                           ; 1 bytes @ 0x1B
   737   0000EF                     	ds	1
   738   0000F0                     infusion@controlSignal:
   739                           	callstack 0
   740                           
   741                           ; 4 bytes @ 0x1C
   742   0000F0                     	ds	4
   743   0000F4                     infusion@error:
   744                           	callstack 0
   745                           
   746                           ; 4 bytes @ 0x20
   747   0000F4                     	ds	4
   748   0000F8                     ??_main:
   749                           
   750                           ; 1 bytes @ 0x24
   751   0000F8                     	ds	2
   752   0000FA                     main@userInput:
   753                           	callstack 0
   754                           
   755                           ; 1 bytes @ 0x26
   756   0000FA                     	ds	1
   757   0000FB                     main@currentState:
   758                           	callstack 0
   759                           
   760                           ; 1 bytes @ 0x27
   761   0000FB                     	ds	1
   762                           
   763                           	psect	cstackCOMRAM
   764   000001                     __pcstackCOMRAM:
   765                           	callstack 0
   766   000001                     signalServo@pulseServo:
   767                           	callstack 0
   768                           
   769                           ; 2 bytes @ 0x0
   770   000001                     	ds	2
   771   000003                     signalServo@pinServo:
   772                           	callstack 0
   773                           
   774                           ; 1 bytes @ 0x2
   775   000003                     	ds	1
   776   000004                     ??_Timer1_ISR:
   777                           
   778                           ; 1 bytes @ 0x3
   779   000004                     	ds	1
   780   000005                     ??_keypad_scanner:
   781   000005                     ?_ADC_Read:
   782                           	callstack 0
   783   000005                     ?___wmul:
   784                           	callstack 0
   785   000005                     ?___awdiv:
   786                           	callstack 0
   787   000005                     ?___awmod:
   788                           	callstack 0
   789   000005                     ?___almod:
   790                           	callstack 0
   791   000005                     Lcd_Port@a:
   792                           	callstack 0
   793   000005                     GetNextState@input:
   794                           	callstack 0
   795   000005                     set_pwm_duty@pwm_duty:
   796                           	callstack 0
   797   000005                     change_direction_motion@hDriverIn1:
   798                           	callstack 0
   799   000005                     usePeripheral@peripheral:
   800                           	callstack 0
   801   000005                     delay_ms@milliseconds:
   802                           	callstack 0
   803   000005                     ___wmul@multiplier:
   804                           	callstack 0
   805   000005                     ___awdiv@dividend:
   806                           	callstack 0
   807   000005                     ___awmod@dividend:
   808                           	callstack 0
   809   000005                     fputc@c:
   810                           	callstack 0
   811   000005                     ___almod@dividend:
   812                           	callstack 0
   813                           
   814                           ; 4 bytes @ 0x4
   815   000005                     	ds	1
   816   000006                     ??_Lcd_Cmd:
   817   000006                     ??_GetNextState:
   818   000006                     Lcd_Write_Char@temp:
   819                           	callstack 0
   820                           
   821                           ; 1 bytes @ 0x5
   822   000006                     	ds	1
   823   000007                     ??_set_pwm_duty:
   824   000007                     ??_ADC_Read:
   825   000007                     ??_delay_ms:
   826   000007                     Lcd_Cmd@a:
   827                           	callstack 0
   828   000007                     Lcd_Write_Char@y:
   829                           	callstack 0
   830   000007                     switch_press_scan@key:
   831                           	callstack 0
   832   000007                     fputc@fp:
   833                           	callstack 0
   834   000007                     change_direction_motion@hDriverIn2:
   835                           	callstack 0
   836   000007                     usePeripheral@action:
   837                           	callstack 0
   838   000007                     ___wmul@multiplicand:
   839                           	callstack 0
   840   000007                     ___awdiv@divisor:
   841                           	callstack 0
   842   000007                     ___awmod@divisor:
   843                           	callstack 0
   844                           
   845                           ; 2 bytes @ 0x6
   846   000007                     	ds	1
   847   000008                     ??_fputc:
   848   000008                     ??_Lcd_Init:
   849   000008                     ?_input_option:
   850                           	callstack 0
   851   000008                     Lcd_Set_Cursor@b:
   852                           	callstack 0
   853   000008                     Lcd_Write_Char@a:
   854                           	callstack 0
   855   000008                     GetNextState@currentState:
   856                           	callstack 0
   857                           
   858                           ; 1 bytes @ 0x7
   859   000008                     	ds	1
   860   000009                     Lcd_Set_Cursor@a:
   861                           	callstack 0
   862   000009                     ___awdiv@counter:
   863                           	callstack 0
   864   000009                     ___awmod@counter:
   865                           	callstack 0
   866   000009                     Lcd_Write_String@a:
   867                           	callstack 0
   868   000009                     move_actuator@direction:
   869                           	callstack 0
   870   000009                     ___wmul@product:
   871                           	callstack 0
   872   000009                     ___almod@divisor:
   873                           	callstack 0
   874                           
   875                           ; 4 bytes @ 0x8
   876   000009                     	ds	1
   877   00000A                     ??_input_option:
   878   00000A                     Lcd_Set_Cursor@z:
   879                           	callstack 0
   880   00000A                     ___awdiv@sign:
   881                           	callstack 0
   882   00000A                     ___awmod@sign:
   883                           	callstack 0
   884                           
   885                           ; 1 bytes @ 0x9
   886   00000A                     	ds	1
   887   00000B                     ??_Lcd_Write_String:
   888   00000B                     Lcd_Set_Cursor@y:
   889                           	callstack 0
   890   00000B                     ADC_Read@channel:
   891                           	callstack 0
   892   00000B                     move_actuator@speed:
   893                           	callstack 0
   894   00000B                     ___awdiv@quotient:
   895                           	callstack 0
   896                           
   897                           ; 2 bytes @ 0xA
   898   00000B                     	ds	1
   899   00000C                     Lcd_Set_Cursor@temp:
   900                           	callstack 0
   901   00000C                     ADC_Read@digital:
   902                           	callstack 0
   903   00000C                     input_option@option:
   904                           	callstack 0
   905                           
   906                           ; 2 bytes @ 0xB
   907   00000C                     	ds	1
   908   00000D                     ?_processTimeToSeconds:
   909                           	callstack 0
   910   00000D                     ___almod@counter:
   911                           	callstack 0
   912   00000D                     Lcd_Write_String@i:
   913                           	callstack 0
   914   00000D                     processTimeToSeconds@timeInput:
   915                           	callstack 0
   916                           
   917                           ; 2 bytes @ 0xC
   918   00000D                     	ds	1
   919   00000E                     input_option@userInput:
   920                           	callstack 0
   921   00000E                     ___almod@sign:
   922                           	callstack 0
   923                           
   924                           ; 1 bytes @ 0xD
   925   00000E                     	ds	1
   926   00000F                     ?_abs:
   927                           	callstack 0
   928   00000F                     input_value@inputType:
   929                           	callstack 0
   930   00000F                     start_process_screen@word:
   931                           	callstack 0
   932   00000F                     processTimeToSeconds@minutes:
   933                           	callstack 0
   934   00000F                     abs@a:
   935                           	callstack 0
   936                           
   937                           ; 2 bytes @ 0xE
   938   00000F                     	ds	2
   939   000011                     ??_abs:
   940   000011                     input_value@initial:
   941                           	callstack 0
   942   000011                     handle_actuator_push@act_pos:
   943                           	callstack 0
   944   000011                     processTimeToSeconds@seconds:
   945                           	callstack 0
   946                           
   947                           ; 2 bytes @ 0x10
   948   000011                     	ds	2
   949   000013                     ??_handle_actuator_push:
   950   000013                     input_value@limit:
   951                           	callstack 0
   952   000013                     processTimeToSeconds@totalSeconds:
   953                           	callstack 0
   954                           
   955                           ; 2 bytes @ 0x12
   956   000013                     	ds	1
   957   000014                     handle_actuator_push@decision:
   958                           	callstack 0
   959                           
   960                           ; 2 bytes @ 0x13
   961   000014                     	ds	1
   962   000015                     ?___lldiv:
   963                           	callstack 0
   964   000015                     input_value@units:
   965                           	callstack 0
   966   000015                     ___lldiv@dividend:
   967                           	callstack 0
   968                           
   969                           ; 4 bytes @ 0x14
   970   000015                     	ds	2
   971   000017                     
   972                           ; 1 bytes @ 0x16
   973   000017                     	ds	2
   974   000019                     ___lldiv@divisor:
   975                           	callstack 0
   976                           
   977                           ; 4 bytes @ 0x18
   978   000019                     	ds	4
   979   00001D                     ___lldiv@quotient:
   980                           	callstack 0
   981                           
   982                           ; 4 bytes @ 0x1C
   983   00001D                     	ds	4
   984   000021                     ___lldiv@counter:
   985                           	callstack 0
   986                           
   987                           ; 1 bytes @ 0x20
   988   000021                     	ds	1
   989   000022                     ?___lmul:
   990                           	callstack 0
   991   000022                     ___lmul@multiplier:
   992                           	callstack 0
   993                           
   994                           ; 4 bytes @ 0x21
   995   000022                     	ds	4
   996   000026                     ___lmul@multiplicand:
   997                           	callstack 0
   998                           
   999                           ; 4 bytes @ 0x25
  1000   000026                     	ds	4
  1001   00002A                     ___lmul@product:
  1002                           	callstack 0
  1003                           
  1004                           ; 4 bytes @ 0x29
  1005   00002A                     	ds	4
  1006   00002E                     ?___aldiv:
  1007                           	callstack 0
  1008   00002E                     ___aldiv@dividend:
  1009                           	callstack 0
  1010                           
  1011                           ; 4 bytes @ 0x2D
  1012   00002E                     	ds	4
  1013   000032                     ___aldiv@divisor:
  1014                           	callstack 0
  1015                           
  1016                           ; 4 bytes @ 0x31
  1017   000032                     	ds	4
  1018   000036                     ___aldiv@counter:
  1019                           	callstack 0
  1020                           
  1021                           ; 1 bytes @ 0x35
  1022   000036                     	ds	1
  1023   000037                     ___aldiv@sign:
  1024                           	callstack 0
  1025                           
  1026                           ; 1 bytes @ 0x36
  1027   000037                     	ds	1
  1028   000038                     ___aldiv@quotient:
  1029                           	callstack 0
  1030                           
  1031                           ; 4 bytes @ 0x37
  1032   000038                     	ds	4
  1033   00003C                     ?_calculateBitRatePer10Sec:
  1034                           	callstack 0
  1035   00003C                     vfpfcnvrt@fp:
  1036                           	callstack 0
  1037   00003C                     calculateBitRatePer10Sec@volume_mL:
  1038                           	callstack 0
  1039                           
  1040                           ; 4 bytes @ 0x3B
  1041   00003C                     	ds	1
  1042   00003D                     vfpfcnvrt@fmt:
  1043                           	callstack 0
  1044                           
  1045                           ; 1 bytes @ 0x3C
  1046   00003D                     	ds	1
  1047   00003E                     vfpfcnvrt@ap:
  1048                           	callstack 0
  1049                           
  1050                           ; 1 bytes @ 0x3D
  1051   00003E                     	ds	1
  1052   00003F                     ??_vfpfcnvrt:
  1053                           
  1054                           ; 1 bytes @ 0x3E
  1055   00003F                     	ds	1
  1056   000040                     calculateBitRatePer10Sec@totalSeconds:
  1057                           	callstack 0
  1058                           
  1059                           ; 4 bytes @ 0x3F
  1060   000040                     	ds	1
  1061   000041                     vfpfcnvrt@done:
  1062                           	callstack 0
  1063                           
  1064                           ; 1 bytes @ 0x40
  1065   000041                     	ds	1
  1066   000042                     vfpfcnvrt@cp:
  1067                           	callstack 0
  1068                           
  1069                           ; 2 bytes @ 0x41
  1070   000042                     	ds	2
  1071   000044                     calculateBitRatePer10Sec@length_mm_scaled:
  1072                           	callstack 0
  1073   000044                     vfpfcnvrt@convarg:
  1074                           	callstack 0
  1075                           
  1076                           ; 4 bytes @ 0x43
  1077   000044                     	ds	4
  1078   000048                     vfpfcnvrt@c:
  1079                           	callstack 0
  1080   000048                     calculateBitRatePer10Sec@length_per_min_mm_scaled:
  1081                           	callstack 0
  1082                           
  1083                           ; 4 bytes @ 0x47
  1084   000048                     	ds	1
  1085   000049                     ?_vfprintf:
  1086                           	callstack 0
  1087   000049                     vfprintf@fp:
  1088                           	callstack 0
  1089                           
  1090                           ; 1 bytes @ 0x48
  1091   000049                     	ds	1
  1092   00004A                     vfprintf@fmt:
  1093                           	callstack 0
  1094                           
  1095                           ; 2 bytes @ 0x49
  1096   00004A                     	ds	2
  1097   00004C                     vfprintf@ap:
  1098                           	callstack 0
  1099   00004C                     calculateBitRatePer10Sec@bit_rate_per_min_scaled:
  1100                           	callstack 0
  1101                           
  1102                           ; 4 bytes @ 0x4B
  1103   00004C                     	ds	1
  1104   00004D                     vfprintf@cfmt:
  1105                           	callstack 0
  1106                           
  1107                           ; 2 bytes @ 0x4C
  1108   00004D                     	ds	2
  1109   00004F                     ?_sprintf:
  1110                           	callstack 0
  1111   00004F                     sprintf@s:
  1112                           	callstack 0
  1113                           
  1114                           ; 1 bytes @ 0x4E
  1115   00004F                     	ds	1
  1116   000050                     sprintf@fmt:
  1117                           	callstack 0
  1118   000050                     calculateBitRatePer10Sec@bit_rate_per_10sec:
  1119                           	callstack 0
  1120                           
  1121                           ; 4 bytes @ 0x4F
  1122   000050                     	ds	4
  1123   000054                     ?_getExpected:
  1124                           	callstack 0
  1125                           
  1126                           ; 4 bytes @ 0x53
  1127   000054                     	ds	2
  1128   000056                     sprintf@ap:
  1129                           	callstack 0
  1130                           
  1131                           ; 1 bytes @ 0x55
  1132   000056                     	ds	1
  1133   000057                     sprintf@f:
  1134                           	callstack 0
  1135                           
  1136                           ; 12 bytes @ 0x56
  1137   000057                     	ds	1
  1138   000058                     getExpected@ms:
  1139                           	callstack 0
  1140                           
  1141                           ; 4 bytes @ 0x57
  1142   000058                     	ds	4
  1143   00005C                     getExpected@expected:
  1144                           	callstack 0
  1145                           
  1146                           ; 4 bytes @ 0x5B
  1147   00005C                     	ds	4
  1148   000060                     _getExpected$1675:
  1149                           	callstack 0
  1150                           
  1151                           ; 4 bytes @ 0x5F
  1152   000060                     	ds	4
  1153   000064                     _getExpected$1676:
  1154                           	callstack 0
  1155                           
  1156                           ; 4 bytes @ 0x63
  1157   000064                     	ds	4
  1158   000068                     ??_infusion:
  1159                           
  1160                           ; 1 bytes @ 0x67
  1161   000068                     	ds	8
  1162   000070                     ??_handle_infusion_setup:
  1163                           
  1164                           ; 1 bytes @ 0x6F
  1165   000070                     	ds	2
  1166   000072                     handle_infusion_setup@currentState:
  1167                           	callstack 0
  1168                           
  1169                           ; 1 bytes @ 0x71
  1170   000072                     	ds	1
  1171                           
  1172 ;;
  1173 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1174 ;;
  1175 ;; *************** function _main *****************
  1176 ;; Defined at:
  1177 ;;		line 611 in file "main.c"
  1178 ;; Parameters:    Size  Location     Type
  1179 ;;		None
  1180 ;; Auto vars:     Size  Location     Type
  1181 ;;  currentState    1   39[BANK0 ] enum E2620
  1182 ;;  userInput       1   38[BANK0 ] unsigned char 
  1183 ;; Return value:  Size  Location     Type
  1184 ;;                  1    wreg      void 
  1185 ;; Registers used:
  1186 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1187 ;; Tracked objects:
  1188 ;;		On entry : 0/0
  1189 ;;		On exit  : 0/0
  1190 ;;		Unchanged: 0/0
  1191 ;; Data sizes:     COMRAM   BANK0   BANK1
  1192 ;;      Params:         0       0       0
  1193 ;;      Locals:         0       2       0
  1194 ;;      Temps:          0       2       0
  1195 ;;      Totals:         0       4       0
  1196 ;;Total ram usage:        4 bytes
  1197 ;; Hardware stack levels required when called: 9
  1198 ;; This function calls:
  1199 ;;		_GetNextState
  1200 ;;		_handle_infusion_setup
  1201 ;;		_manual
  1202 ;;		_menu
  1203 ;;		_switch_press_scan
  1204 ;;		_system_init
  1205 ;; This function is called by:
  1206 ;;		Startup code after reset
  1207 ;; This function uses a non-reentrant model
  1208 ;;
  1209                           
  1210                           	psect	text0
  1211   0016B8                     __ptext0:
  1212                           	callstack 0
  1213   0016B8                     _main:
  1214                           	callstack 22
  1215                           
  1216                           ;main.c: 612:     system_init();
  1217                           
  1218                           ;incstack = 0
  1219   0016B8  ECF7  F00A         	call	_system_init	;wreg free
  1220                           
  1221                           ;main.c: 613:     ScreenState currentState = MAIN_MENU;
  1222   0016BC  0E01               	movlw	1
  1223   0016BE  D027               	goto	L1
  1224   0016C0                     l5379:
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;main.c: 619:                 menu();
  1228   0016C0  EC36  F00C         	call	_menu	;wreg free
  1229                           
  1230                           ;main.c: 620:                 break;
  1231   0016C4  D01B               	goto	l5393
  1232   0016C6                     l5381:
  1233                           
  1234                           ; BSR set to: 0
  1235                           ;main.c: 622:                 handle_infusion_setup();
  1236   0016C6  EC8A  F00B         	call	_handle_infusion_setup	;wreg free
  1237                           
  1238                           ;main.c: 623:                 currentState = MAIN_MENU;
  1239   0016CA  0E01               	movlw	1
  1240   0016CC  D003               	goto	L2
  1241   0016CE                     l5385:
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;main.c: 626:                 manual();
  1245   0016CE  EC5A  F00C         	call	_manual	;wreg free
  1246                           
  1247                           ;main.c: 627:                 currentState = MANUAL_SCREEN;
  1248   0016D2  0E03               	movlw	3
  1249   0016D4                     L2:
  1250   0016D4  0100               	movlb	0	; () banked
  1251   0016D6  6FFB               	movwf	main@currentState& (0+255),b
  1252                           
  1253                           ;main.c: 628:                 break;
  1254   0016D8  D011               	goto	l5393
  1255   0016DA                     l5391:
  1256                           
  1257                           ; BSR set to: 0
  1258   0016DA  51FB               	movf	main@currentState& (0+255),w,b
  1259   0016DC  6FF8               	movwf	??_main& (0+255),b
  1260   0016DE  6BF9               	clrf	(??_main+1)& (0+255),b
  1261                           
  1262                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1263                           ; Switch size 1, requested type "simple"
  1264                           ; Number of cases is 1, Range of values is 0 to 0
  1265                           ; switch strategies available:
  1266                           ; Name         Instructions Cycles
  1267                           ; simple_byte            4     3 (average)
  1268                           ;	Chosen strategy is simple_byte
  1269   0016E0  51F9               	movf	(??_main+1)& (0+255),w,b
  1270   0016E2  0A00               	xorlw	0	; case 0
  1271   0016E4  A4D8               	btfss	status,2,c
  1272   0016E6  D00A               	goto	l5393
  1273                           
  1274                           ; BSR set to: 0
  1275                           ; Switch size 1, requested type "simple"
  1276                           ; Number of cases is 3, Range of values is 1 to 3
  1277                           ; switch strategies available:
  1278                           ; Name         Instructions Cycles
  1279                           ; simple_byte           10     6 (average)
  1280                           ;	Chosen strategy is simple_byte
  1281   0016E8  51F8               	movf	??_main& (0+255),w,b
  1282   0016EA  0A01               	xorlw	1	; case 1
  1283   0016EC  B4D8               	btfsc	status,2,c
  1284   0016EE  D7E8               	goto	l5379
  1285   0016F0  0A03               	xorlw	3	; case 2
  1286   0016F2  B4D8               	btfsc	status,2,c
  1287   0016F4  D7E8               	goto	l5381
  1288   0016F6  0A01               	xorlw	1	; case 3
  1289   0016F8  B4D8               	btfsc	status,2,c
  1290   0016FA  D7E9               	goto	l5385
  1291   0016FC                     l5393:
  1292                           
  1293                           ;main.c: 633:         userInput = switch_press_scan();
  1294   0016FC  EC92  F00D         	call	_switch_press_scan	;wreg free
  1295   001700  0100               	movlb	0	; () banked
  1296   001702  6FFA               	movwf	main@userInput& (0+255),b
  1297                           
  1298                           ;main.c: 636:         currentState = GetNextState(currentState, userInput);
  1299   001704  C0FA  F005         	movff	main@userInput,GetNextState@input
  1300   001708  51FB               	movf	main@currentState& (0+255),w,b
  1301   00170A  EC4F  F009         	call	_GetNextState
  1302   00170E                     L1:
  1303   00170E  0100               	movlb	0	; () banked
  1304   001710  6FFB               	movwf	main@currentState& (0+255),b
  1305   001712  D7E3               	goto	l5391
  1306   001714                     __end_of_main:
  1307                           	callstack 0
  1308                           
  1309 ;; *************** function _system_init *****************
  1310 ;; Defined at:
  1311 ;;		line 139 in file "main.c"
  1312 ;; Parameters:    Size  Location     Type
  1313 ;;		None
  1314 ;; Auto vars:     Size  Location     Type
  1315 ;;		None
  1316 ;; Return value:  Size  Location     Type
  1317 ;;                  1    wreg      void 
  1318 ;; Registers used:
  1319 ;;		wreg, status,2, status,0, cstack
  1320 ;; Tracked objects:
  1321 ;;		On entry : 0/0
  1322 ;;		On exit  : 0/0
  1323 ;;		Unchanged: 0/0
  1324 ;; Data sizes:     COMRAM   BANK0   BANK1
  1325 ;;      Params:         0       0       0
  1326 ;;      Locals:         0       0       0
  1327 ;;      Temps:          0       0       0
  1328 ;;      Totals:         0       0       0
  1329 ;;Total ram usage:        0 bytes
  1330 ;; Hardware stack levels used: 1
  1331 ;; Hardware stack levels required when called: 5
  1332 ;; This function calls:
  1333 ;;		_ADC_init
  1334 ;;		_InitKeypad
  1335 ;;		_Lcd_Init
  1336 ;;		_init_actuator
  1337 ;;		_usePeripheral
  1338 ;; This function is called by:
  1339 ;;		_main
  1340 ;; This function uses a non-reentrant model
  1341 ;;
  1342                           
  1343                           	psect	text1
  1344   0015EE                     __ptext1:
  1345                           	callstack 0
  1346   0015EE                     _system_init:
  1347                           	callstack 25
  1348                           
  1349                           ;main.c: 141:     OSCCON = 0x72;
  1350                           
  1351                           ; BSR set to: 0
  1352                           ;incstack = 0
  1353   0015EE  0E72               	movlw	114
  1354   0015F0  6ED3               	movwf	211,c	;volatile
  1355                           
  1356                           ;main.c: 143:     PORTD = 0x00;
  1357   0015F2  0E00               	movlw	0
  1358   0015F4  6E83               	movwf	131,c	;volatile
  1359                           
  1360                           ;main.c: 145:     TRISD = 0x00;
  1361   0015F6  0E00               	movlw	0
  1362   0015F8  6E95               	movwf	149,c	;volatile
  1363                           
  1364                           ;main.c: 147:     TRISC = 0x00;
  1365   0015FA  0E00               	movlw	0
  1366   0015FC  6E94               	movwf	148,c	;volatile
  1367                           
  1368                           ;main.c: 149:     Lcd_Init();
  1369   0015FE  EC87  F00A         	call	_Lcd_Init	;wreg free
  1370                           
  1371                           ;main.c: 151:     InitKeypad();
  1372   001602  ECA7  F00D         	call	_InitKeypad	;wreg free
  1373                           
  1374                           ;main.c: 154:     ADC_init();
  1375   001606  EC9D  F00D         	call	_ADC_init	;wreg free
  1376                           
  1377                           ;main.c: 157:     init_actuator();
  1378   00160A  EC7C  F00D         	call	_init_actuator	;wreg free
  1379                           
  1380                           ;main.c: 159:     TRISA2 = 0;
  1381   00160E  9492               	bcf	3986,2,c	;volatile
  1382                           
  1383                           ;main.c: 160:     TRISC6 = 0;
  1384   001610  9C94               	bcf	3988,6,c	;volatile
  1385                           
  1386                           ;main.c: 161:     TRISC5 = 0;
  1387   001612  9A94               	bcf	3988,5,c	;volatile
  1388                           
  1389                           ;main.c: 162:     TRISC4 = 0;
  1390   001614  9894               	bcf	3988,4,c	;volatile
  1391                           
  1392                           ;main.c: 164:     usePeripheral(green_led, on);
  1393   001616  0E00               	movlw	0
  1394   001618  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  1395   00161A  0E00               	movlw	0
  1396   00161C  6E05               	movwf	usePeripheral@peripheral^0,c
  1397   00161E  0E00               	movlw	0
  1398   001620  6E08               	movwf	(usePeripheral@action+1)^0,c
  1399   001622  0E01               	movlw	1
  1400   001624  6E07               	movwf	usePeripheral@action^0,c
  1401   001626  EC8D  F007         	call	_usePeripheral	;wreg free
  1402                           
  1403                           ;main.c: 165:     usePeripheral(orange_led, off);
  1404   00162A  0E00               	movlw	0
  1405   00162C  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  1406   00162E  0E01               	movlw	1
  1407   001630  6E05               	movwf	usePeripheral@peripheral^0,c
  1408   001632  0E00               	movlw	0
  1409   001634  6E08               	movwf	(usePeripheral@action+1)^0,c
  1410   001636  0E00               	movlw	0
  1411   001638  6E07               	movwf	usePeripheral@action^0,c
  1412   00163A  EC8D  F007         	call	_usePeripheral	;wreg free
  1413                           
  1414                           ;main.c: 166:     usePeripheral(red_led, off);
  1415   00163E  0E00               	movlw	0
  1416   001640  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  1417   001642  0E02               	movlw	2
  1418   001644  6E05               	movwf	usePeripheral@peripheral^0,c
  1419   001646  0E00               	movlw	0
  1420   001648  6E08               	movwf	(usePeripheral@action+1)^0,c
  1421   00164A  0E00               	movlw	0
  1422   00164C  6E07               	movwf	usePeripheral@action^0,c
  1423   00164E  EC8D  F007         	call	_usePeripheral	;wreg free
  1424                           
  1425                           ;main.c: 170:     TRISCbits.RC1 = 0;
  1426   001652  9294               	bcf	148,1,c	;volatile
  1427   001654  0012               	return		;funcret
  1428   001656                     __end_of_system_init:
  1429                           	callstack 0
  1430                           
  1431 ;; *************** function _init_actuator *****************
  1432 ;; Defined at:
  1433 ;;		line 3 in file "actuator.c"
  1434 ;; Parameters:    Size  Location     Type
  1435 ;;		None
  1436 ;; Auto vars:     Size  Location     Type
  1437 ;;		None
  1438 ;; Return value:  Size  Location     Type
  1439 ;;                  1    wreg      void 
  1440 ;; Registers used:
  1441 ;;		wreg, status,2
  1442 ;; Tracked objects:
  1443 ;;		On entry : 0/0
  1444 ;;		On exit  : 0/0
  1445 ;;		Unchanged: 0/0
  1446 ;; Data sizes:     COMRAM   BANK0   BANK1
  1447 ;;      Params:         0       0       0
  1448 ;;      Locals:         0       0       0
  1449 ;;      Temps:          0       0       0
  1450 ;;      Totals:         0       0       0
  1451 ;;Total ram usage:        0 bytes
  1452 ;; Hardware stack levels used: 1
  1453 ;; Hardware stack levels required when called: 2
  1454 ;; This function calls:
  1455 ;;		Nothing
  1456 ;; This function is called by:
  1457 ;;		_system_init
  1458 ;; This function uses a non-reentrant model
  1459 ;;
  1460                           
  1461                           	psect	text2
  1462   001AF8                     __ptext2:
  1463                           	callstack 0
  1464   001AF8                     _init_actuator:
  1465                           	callstack 27
  1466                           
  1467                           ;actuator.c: 6:     RC2 = 0;
  1468                           
  1469                           ;incstack = 0
  1470   001AF8  9482               	bcf	3970,2,c	;volatile
  1471                           
  1472                           ;actuator.c: 7:     TRISC2 = 0;
  1473   001AFA  9494               	bcf	3988,2,c	;volatile
  1474                           
  1475                           ;actuator.c: 8:     CCP1CON = 0x0C;
  1476   001AFC  0E0C               	movlw	12
  1477   001AFE  6EBD               	movwf	189,c	;volatile
  1478                           
  1479                           ;actuator.c: 9:     CCPR1L = 0;
  1480   001B00  0E00               	movlw	0
  1481   001B02  6EBE               	movwf	190,c	;volatile
  1482                           
  1483                           ;actuator.c: 12:     TMR2IF = 0;
  1484   001B04  929E               	bcf	3998,1,c	;volatile
  1485                           
  1486                           ;actuator.c: 13:     T2CON = 0x05;
  1487   001B06  0E05               	movlw	5
  1488   001B08  6ECA               	movwf	202,c	;volatile
  1489                           
  1490                           ;actuator.c: 14:     PR2 = 0xFF;
  1491   001B0A  68CB               	setf	203,c	;volatile
  1492   001B0C  0012               	return		;funcret
  1493   001B0E                     __end_of_init_actuator:
  1494                           	callstack 0
  1495                           
  1496 ;; *************** function _Lcd_Init *****************
  1497 ;; Defined at:
  1498 ;;		line 88 in file "lcd.c"
  1499 ;; Parameters:    Size  Location     Type
  1500 ;;		None
  1501 ;; Auto vars:     Size  Location     Type
  1502 ;;		None
  1503 ;; Return value:  Size  Location     Type
  1504 ;;                  1    wreg      void 
  1505 ;; Registers used:
  1506 ;;		wreg, status,2, cstack
  1507 ;; Tracked objects:
  1508 ;;		On entry : 0/0
  1509 ;;		On exit  : 0/0
  1510 ;;		Unchanged: 0/0
  1511 ;; Data sizes:     COMRAM   BANK0   BANK1
  1512 ;;      Params:         0       0       0
  1513 ;;      Locals:         0       0       0
  1514 ;;      Temps:          1       0       0
  1515 ;;      Totals:         1       0       0
  1516 ;;Total ram usage:        1 bytes
  1517 ;; Hardware stack levels used: 1
  1518 ;; Hardware stack levels required when called: 4
  1519 ;; This function calls:
  1520 ;;		_Lcd_Cmd
  1521 ;;		_Lcd_Port
  1522 ;; This function is called by:
  1523 ;;		_system_init
  1524 ;; This function uses a non-reentrant model
  1525 ;;
  1526                           
  1527                           	psect	text3
  1528   00150E                     __ptext3:
  1529                           	callstack 0
  1530   00150E                     _Lcd_Init:
  1531                           	callstack 25
  1532                           
  1533                           ;lcd.c: 90:   Lcd_Port(0x00);
  1534                           
  1535                           ;incstack = 0
  1536   00150E  0E00               	movlw	0
  1537   001510  ECED  F00C         	call	_Lcd_Port
  1538                           
  1539                           ;lcd.c: 91:    _delay((unsigned long)((20)*(8000000L/4000.0)));
  1540   001514  0E34               	movlw	52
  1541   001516  6E08               	movwf	??_Lcd_Init^0,c
  1542   001518  0EF2               	movlw	242
  1543   00151A                     u5127:
  1544   00151A  2EE8               	decfsz	wreg,f,c
  1545   00151C  D7FE               	bra	u5127
  1546   00151E  2E08               	decfsz	??_Lcd_Init^0,f,c
  1547   001520  D7FC               	bra	u5127
  1548                           
  1549                           ;lcd.c: 92:   Lcd_Cmd(0x03);
  1550   001522  0E03               	movlw	3
  1551   001524  EC50  F00D         	call	_Lcd_Cmd
  1552                           
  1553                           ;lcd.c: 93:  _delay((unsigned long)((5)*(8000000L/4000.0)));
  1554   001528  0E0D               	movlw	13
  1555   00152A  6E08               	movwf	??_Lcd_Init^0,c
  1556   00152C  0EFC               	movlw	252
  1557   00152E                     u5137:
  1558   00152E  2EE8               	decfsz	wreg,f,c
  1559   001530  D7FE               	bra	u5137
  1560   001532  2E08               	decfsz	??_Lcd_Init^0,f,c
  1561   001534  D7FC               	bra	u5137
  1562                           
  1563                           ;lcd.c: 94:   Lcd_Cmd(0x03);
  1564   001536  0E03               	movlw	3
  1565   001538  EC50  F00D         	call	_Lcd_Cmd
  1566                           
  1567                           ;lcd.c: 95:  _delay((unsigned long)((11)*(8000000L/4000.0)));
  1568   00153C  0E1D               	movlw	29
  1569   00153E  6E08               	movwf	??_Lcd_Init^0,c
  1570   001540  0E91               	movlw	145
  1571   001542                     u5147:
  1572   001542  2EE8               	decfsz	wreg,f,c
  1573   001544  D7FE               	bra	u5147
  1574   001546  2E08               	decfsz	??_Lcd_Init^0,f,c
  1575   001548  D7FC               	bra	u5147
  1576   00154A  0000               	nop	
  1577                           
  1578                           ;lcd.c: 96:   Lcd_Cmd(0x03);
  1579   00154C  0E03               	movlw	3
  1580   00154E  EC50  F00D         	call	_Lcd_Cmd
  1581                           
  1582                           ;lcd.c: 98:   Lcd_Cmd(0x02);
  1583   001552  0E02               	movlw	2
  1584   001554  EC50  F00D         	call	_Lcd_Cmd
  1585                           
  1586                           ;lcd.c: 99:   Lcd_Cmd(0x02);
  1587   001558  0E02               	movlw	2
  1588   00155A  EC50  F00D         	call	_Lcd_Cmd
  1589                           
  1590                           ;lcd.c: 100:   Lcd_Cmd(0x08);
  1591   00155E  0E08               	movlw	8
  1592   001560  EC50  F00D         	call	_Lcd_Cmd
  1593                           
  1594                           ;lcd.c: 101:   Lcd_Cmd(0x00);
  1595   001564  0E00               	movlw	0
  1596   001566  EC50  F00D         	call	_Lcd_Cmd
  1597                           
  1598                           ;lcd.c: 102:   Lcd_Cmd(0x0C);
  1599   00156A  0E0C               	movlw	12
  1600   00156C  EC50  F00D         	call	_Lcd_Cmd
  1601                           
  1602                           ;lcd.c: 103:   Lcd_Cmd(0x00);
  1603   001570  0E00               	movlw	0
  1604   001572  EC50  F00D         	call	_Lcd_Cmd
  1605                           
  1606                           ;lcd.c: 104:   Lcd_Cmd(0x06);
  1607   001576  0E06               	movlw	6
  1608   001578  EC50  F00D         	call	_Lcd_Cmd
  1609   00157C  0012               	return		;funcret
  1610   00157E                     __end_of_Lcd_Init:
  1611                           	callstack 0
  1612                           
  1613 ;; *************** function _InitKeypad *****************
  1614 ;; Defined at:
  1615 ;;		line 40 in file "keypad.c"
  1616 ;; Parameters:    Size  Location     Type
  1617 ;;		None
  1618 ;; Auto vars:     Size  Location     Type
  1619 ;;		None
  1620 ;; Return value:  Size  Location     Type
  1621 ;;                  1    wreg      void 
  1622 ;; Registers used:
  1623 ;;		wreg, status,2
  1624 ;; Tracked objects:
  1625 ;;		On entry : 0/0
  1626 ;;		On exit  : 0/0
  1627 ;;		Unchanged: 0/0
  1628 ;; Data sizes:     COMRAM   BANK0   BANK1
  1629 ;;      Params:         0       0       0
  1630 ;;      Locals:         0       0       0
  1631 ;;      Temps:          0       0       0
  1632 ;;      Totals:         0       0       0
  1633 ;;Total ram usage:        0 bytes
  1634 ;; Hardware stack levels used: 1
  1635 ;; Hardware stack levels required when called: 2
  1636 ;; This function calls:
  1637 ;;		Nothing
  1638 ;; This function is called by:
  1639 ;;		_system_init
  1640 ;; This function uses a non-reentrant model
  1641 ;;
  1642                           
  1643                           	psect	text4
  1644   001B4E                     __ptext4:
  1645                           	callstack 0
  1646   001B4E                     _InitKeypad:
  1647                           	callstack 27
  1648                           
  1649                           ;keypad.c: 42:             PORTB = 0x00;
  1650                           
  1651                           ;incstack = 0
  1652   001B4E  0E00               	movlw	0
  1653   001B50  6E81               	movwf	129,c	;volatile
  1654                           
  1655                           ;keypad.c: 43:             TRISB = 0xF0;
  1656   001B52  0EF0               	movlw	240
  1657   001B54  6E93               	movwf	147,c	;volatile
  1658                           
  1659                           ;keypad.c: 44:             TRISC7=1;
  1660   001B56  8E94               	bsf	3988,7,c	;volatile
  1661                           
  1662                           ;keypad.c: 45:             RBPU = 0;
  1663   001B58  9EF1               	bcf	4081,7,c	;volatile
  1664   001B5A  0012               	return		;funcret
  1665   001B5C                     __end_of_InitKeypad:
  1666                           	callstack 0
  1667                           
  1668 ;; *************** function _ADC_init *****************
  1669 ;; Defined at:
  1670 ;;		line 16 in file "helper.c"
  1671 ;; Parameters:    Size  Location     Type
  1672 ;;		None
  1673 ;; Auto vars:     Size  Location     Type
  1674 ;;		None
  1675 ;; Return value:  Size  Location     Type
  1676 ;;                  1    wreg      void 
  1677 ;; Registers used:
  1678 ;;		wreg, status,2
  1679 ;; Tracked objects:
  1680 ;;		On entry : 0/0
  1681 ;;		On exit  : 0/0
  1682 ;;		Unchanged: 0/0
  1683 ;; Data sizes:     COMRAM   BANK0   BANK1
  1684 ;;      Params:         0       0       0
  1685 ;;      Locals:         0       0       0
  1686 ;;      Temps:          0       0       0
  1687 ;;      Totals:         0       0       0
  1688 ;;Total ram usage:        0 bytes
  1689 ;; Hardware stack levels used: 1
  1690 ;; Hardware stack levels required when called: 2
  1691 ;; This function calls:
  1692 ;;		Nothing
  1693 ;; This function is called by:
  1694 ;;		_system_init
  1695 ;; This function uses a non-reentrant model
  1696 ;;
  1697                           
  1698                           	psect	text5
  1699   001B3A                     __ptext5:
  1700                           	callstack 0
  1701   001B3A                     _ADC_init:
  1702                           	callstack 27
  1703                           
  1704                           ;helper.c: 18:     TRISA = 0xff;
  1705                           
  1706                           ;incstack = 0
  1707   001B3A  6892               	setf	146,c	;volatile
  1708                           
  1709                           ;helper.c: 19:     ADCON1 = 0x0e;
  1710   001B3C  0E0E               	movlw	14
  1711   001B3E  6EC1               	movwf	193,c	;volatile
  1712                           
  1713                           ;helper.c: 20:     ADCON2 = 0x92;
  1714   001B40  0E92               	movlw	146
  1715   001B42  6EC0               	movwf	192,c	;volatile
  1716                           
  1717                           ;helper.c: 21:     ADRESH = 0;
  1718   001B44  0E00               	movlw	0
  1719   001B46  6EC4               	movwf	196,c	;volatile
  1720                           
  1721                           ;helper.c: 22:     ADRESL = 0;
  1722   001B48  0E00               	movlw	0
  1723   001B4A  6EC3               	movwf	195,c	;volatile
  1724   001B4C  0012               	return		;funcret
  1725   001B4E                     __end_of_ADC_init:
  1726                           	callstack 0
  1727                           
  1728 ;; *************** function _menu *****************
  1729 ;; Defined at:
  1730 ;;		line 120 in file "helper.c"
  1731 ;; Parameters:    Size  Location     Type
  1732 ;;		None
  1733 ;; Auto vars:     Size  Location     Type
  1734 ;;		None
  1735 ;; Return value:  Size  Location     Type
  1736 ;;                  1    wreg      void 
  1737 ;; Registers used:
  1738 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1739 ;; Tracked objects:
  1740 ;;		On entry : 0/0
  1741 ;;		On exit  : 0/0
  1742 ;;		Unchanged: 0/0
  1743 ;; Data sizes:     COMRAM   BANK0   BANK1
  1744 ;;      Params:         0       0       0
  1745 ;;      Locals:         0       0       0
  1746 ;;      Temps:          0       0       0
  1747 ;;      Totals:         0       0       0
  1748 ;;Total ram usage:        0 bytes
  1749 ;; Hardware stack levels used: 1
  1750 ;; Hardware stack levels required when called: 5
  1751 ;; This function calls:
  1752 ;;		_Lcd_Clear
  1753 ;;		_Lcd_Set_Cursor
  1754 ;;		_Lcd_Write_String
  1755 ;; This function is called by:
  1756 ;;		_main
  1757 ;; This function uses a non-reentrant model
  1758 ;;
  1759                           
  1760                           	psect	text6
  1761   00186C                     __ptext6:
  1762                           	callstack 0
  1763   00186C                     _menu:
  1764                           	callstack 25
  1765                           
  1766                           ;helper.c: 121:     Lcd_Clear();
  1767                           
  1768                           ;incstack = 0
  1769   00186C  ECAE  F00D         	call	_Lcd_Clear	;wreg free
  1770                           
  1771                           ;helper.c: 122:     Lcd_Set_Cursor(position_row_1,position_column_1 );
  1772   001870  0E01               	movlw	1
  1773   001872  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  1774   001874  0E01               	movlw	1
  1775   001876  EC34  F008         	call	_Lcd_Set_Cursor
  1776                           
  1777                           ;helper.c: 123:     Lcd_Write_String("MediSync Menu");
  1778   00187A  0E41               	movlw	low STR_20
  1779   00187C  6E09               	movwf	Lcd_Write_String@a^0,c
  1780   00187E  0E1F               	movlw	high STR_20
  1781   001880  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  1782   001882  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  1783                           
  1784                           ;helper.c: 124:     Lcd_Set_Cursor(position_row_2,position_column_1);
  1785   001886  0E01               	movlw	1
  1786   001888  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  1787   00188A  0E02               	movlw	2
  1788   00188C  EC34  F008         	call	_Lcd_Set_Cursor
  1789                           
  1790                           ;helper.c: 125:     Lcd_Write_String("1.Start New Infusion");
  1791   001890  0ED5               	movlw	low STR_21
  1792   001892  6E09               	movwf	Lcd_Write_String@a^0,c
  1793   001894  0E1E               	movlw	high STR_21
  1794   001896  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  1795   001898  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  1796                           
  1797                           ;helper.c: 126:     Lcd_Set_Cursor(position_row_3,position_column_1);
  1798   00189C  0E01               	movlw	1
  1799   00189E  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  1800   0018A0  0E03               	movlw	3
  1801   0018A2  EC34  F008         	call	_Lcd_Set_Cursor
  1802                           
  1803                           ;helper.c: 127:     Lcd_Write_String("2.Manual");
  1804   0018A6  0E9B               	movlw	low STR_22
  1805   0018A8  6E09               	movwf	Lcd_Write_String@a^0,c
  1806   0018AA  0E1F               	movlw	high STR_22
  1807   0018AC  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  1808   0018AE  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  1809   0018B2  0012               	return		;funcret
  1810   0018B4                     __end_of_menu:
  1811                           	callstack 0
  1812                           
  1813 ;; *************** function _manual *****************
  1814 ;; Defined at:
  1815 ;;		line 130 in file "helper.c"
  1816 ;; Parameters:    Size  Location     Type
  1817 ;;		None
  1818 ;; Auto vars:     Size  Location     Type
  1819 ;;		None
  1820 ;; Return value:  Size  Location     Type
  1821 ;;                  1    wreg      void 
  1822 ;; Registers used:
  1823 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1824 ;; Tracked objects:
  1825 ;;		On entry : 0/0
  1826 ;;		On exit  : 0/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMRAM   BANK0   BANK1
  1829 ;;      Params:         0       0       0
  1830 ;;      Locals:         0       0       0
  1831 ;;      Temps:          0       0       0
  1832 ;;      Totals:         0       0       0
  1833 ;;Total ram usage:        0 bytes
  1834 ;; Hardware stack levels used: 1
  1835 ;; Hardware stack levels required when called: 5
  1836 ;; This function calls:
  1837 ;;		_Lcd_Clear
  1838 ;;		_Lcd_Set_Cursor
  1839 ;;		_Lcd_Write_String
  1840 ;; This function is called by:
  1841 ;;		_main
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845                           	psect	text7
  1846   0018B4                     __ptext7:
  1847                           	callstack 0
  1848   0018B4                     _manual:
  1849                           	callstack 25
  1850                           
  1851                           ;helper.c: 131:     Lcd_Clear();
  1852                           
  1853                           ;incstack = 0
  1854   0018B4  ECAE  F00D         	call	_Lcd_Clear	;wreg free
  1855                           
  1856                           ;helper.c: 132:     Lcd_Set_Cursor( position_row_1,position_column_1);
  1857   0018B8  0E01               	movlw	1
  1858   0018BA  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  1859   0018BC  0E01               	movlw	1
  1860   0018BE  EC34  F008         	call	_Lcd_Set_Cursor
  1861                           
  1862                           ;helper.c: 133:     Lcd_Write_String("For more information");
  1863   0018C2  0EEA               	movlw	low STR_23
  1864   0018C4  6E09               	movwf	Lcd_Write_String@a^0,c
  1865   0018C6  0E1E               	movlw	high STR_23
  1866   0018C8  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  1867   0018CA  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  1868                           
  1869                           ;helper.c: 134:     Lcd_Set_Cursor( position_row_2,position_column_2);
  1870   0018CE  0E02               	movlw	2
  1871   0018D0  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  1872   0018D2  0E02               	movlw	2
  1873   0018D4  EC34  F008         	call	_Lcd_Set_Cursor
  1874                           
  1875                           ;helper.c: 135:     Lcd_Write_String("Visit: hardng.ed");
  1876   0018D8  0E12               	movlw	low STR_24
  1877   0018DA  6E09               	movwf	Lcd_Write_String@a^0,c
  1878   0018DC  0E1F               	movlw	high STR_24
  1879   0018DE  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  1880   0018E0  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  1881                           
  1882                           ;helper.c: 136:     Lcd_Set_Cursor( position_row_4,position_column_1 );
  1883   0018E4  0E01               	movlw	1
  1884   0018E6  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  1885   0018E8  0E04               	movlw	4
  1886   0018EA  EC34  F008         	call	_Lcd_Set_Cursor
  1887                           
  1888                           ;helper.c: 137:     Lcd_Write_String("BACK");
  1889   0018EE  0EE7               	movlw	low STR_5
  1890   0018F0  6E09               	movwf	Lcd_Write_String@a^0,c
  1891   0018F2  0E1F               	movlw	high STR_5
  1892   0018F4  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  1893   0018F6  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  1894   0018FA  0012               	return		;funcret
  1895   0018FC                     __end_of_manual:
  1896                           	callstack 0
  1897                           
  1898 ;; *************** function _handle_infusion_setup *****************
  1899 ;; Defined at:
  1900 ;;		line 462 in file "main.c"
  1901 ;; Parameters:    Size  Location     Type
  1902 ;;		None
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;  t               3    0        PTR const unsigned char 
  1905 ;;  v               3    0        PTR const unsigned char 
  1906 ;;  actuator_pos    2    0        int 
  1907 ;;  decision        2    0        int 
  1908 ;;  currentState    1  113[COMRAM] enum E2634
  1909 ;; Return value:  Size  Location     Type
  1910 ;;                  1    wreg      void 
  1911 ;; Registers used:
  1912 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1913 ;; Tracked objects:
  1914 ;;		On entry : 0/0
  1915 ;;		On exit  : 0/0
  1916 ;;		Unchanged: 0/0
  1917 ;; Data sizes:     COMRAM   BANK0   BANK1
  1918 ;;      Params:         0       0       0
  1919 ;;      Locals:         1       0       0
  1920 ;;      Temps:          2       0       0
  1921 ;;      Totals:         3       0       0
  1922 ;;Total ram usage:        3 bytes
  1923 ;; Hardware stack levels used: 1
  1924 ;; Hardware stack levels required when called: 8
  1925 ;; This function calls:
  1926 ;;		_ADC_Read
  1927 ;;		_infusion
  1928 ;;		_input_value
  1929 ;; This function is called by:
  1930 ;;		_main
  1931 ;; This function uses a non-reentrant model
  1932 ;;
  1933                           
  1934                           	psect	text8
  1935   001714                     __ptext8:
  1936                           	callstack 0
  1937   001714                     _handle_infusion_setup:
  1938                           	callstack 22
  1939                           
  1940                           ;main.c: 463:     InfusionSetupState currentState = START_INFUSION_SETUP;
  1941                           
  1942                           ;incstack = 0
  1943   001714  0E00               	movlw	0
  1944   001716  6E72               	movwf	handle_infusion_setup@currentState^0,c
  1945   001718  0E00               	movlw	0
  1946   00171A  EC10  F00A         	call	_ADC_Read
  1947                           
  1948                           ;main.c: 466:     const char* v;;main.c: 467:     const char* t;;main.c: 468:     while 
      +                          (currentState != FINISH_INFUSION_SETUP) {
  1949   00171E  D022               	goto	l5129
  1950   001720                     l5119:
  1951                           
  1952                           ;main.c: 471:                 infusion();
  1953   001720  ECC7  F000         	call	_infusion	;wreg free
  1954                           
  1955                           ;main.c: 472:                 input_value("VOLUME", "V", "10", "ml");
  1956   001724  0EBB               	movlw	low STR_40
  1957   001726  6E0F               	movwf	input_value@inputType^0,c
  1958   001728  0E1F               	movlw	high STR_40
  1959   00172A  6E10               	movwf	(input_value@inputType+1)^0,c
  1960   00172C  0EFD               	movlw	low STR_41
  1961   00172E  6E11               	movwf	input_value@initial^0,c
  1962   001730  0E1F               	movlw	high STR_41
  1963   001732  6E12               	movwf	(input_value@initial+1)^0,c
  1964   001734  0EF4               	movlw	low STR_42
  1965   001736  6E13               	movwf	input_value@limit^0,c
  1966   001738  0E1F               	movlw	high STR_42
  1967   00173A  6E14               	movwf	(input_value@limit+1)^0,c
  1968   00173C  0EFA               	movlw	low STR_43
  1969   00173E  6E15               	movwf	input_value@units^0,c
  1970   001740  0E1F               	movlw	high STR_43
  1971   001742  6E16               	movwf	(input_value@units+1)^0,c
  1972   001744  ECE1  F007         	call	_input_value	;wreg free
  1973                           
  1974                           ;main.c: 474:                 currentState = INPUT_VOLUME_STATE;
  1975   001748  0E01               	movlw	1
  1976   00174A  6E72               	movwf	handle_infusion_setup@currentState^0,c
  1977                           
  1978                           ;main.c: 475:                 break;
  1979   00174C  D00B               	goto	l5129
  1980   00174E                     l5127:
  1981   00174E  5072               	movf	handle_infusion_setup@currentState^0,w,c
  1982   001750  6E70               	movwf	??_handle_infusion_setup^0,c
  1983   001752  6A71               	clrf	(??_handle_infusion_setup+1)^0,c
  1984                           
  1985                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1986                           ; Switch size 1, requested type "simple"
  1987                           ; Number of cases is 1, Range of values is 0 to 0
  1988                           ; switch strategies available:
  1989                           ; Name         Instructions Cycles
  1990                           ; simple_byte            4     3 (average)
  1991                           ;	Chosen strategy is simple_byte
  1992   001754  5071               	movf	(??_handle_infusion_setup+1)^0,w,c
  1993   001756  0A00               	xorlw	0	; case 0
  1994   001758  A4D8               	btfss	status,2,c
  1995   00175A  D004               	goto	l5129
  1996                           
  1997                           ; Switch size 1, requested type "simple"
  1998                           ; Number of cases is 1, Range of values is 0 to 0
  1999                           ; switch strategies available:
  2000                           ; Name         Instructions Cycles
  2001                           ; simple_byte            4     3 (average)
  2002                           ;	Chosen strategy is simple_byte
  2003   00175C  5070               	movf	??_handle_infusion_setup^0,w,c
  2004   00175E  0A00               	xorlw	0	; case 0
  2005   001760  B4D8               	btfsc	status,2,c
  2006   001762  D7DE               	goto	l5119
  2007   001764                     l5129:
  2008                           
  2009                           ;main.c: 468:     while (currentState != FINISH_INFUSION_SETUP) {
  2010   001764  0E0A               	movlw	10
  2011   001766  1872               	xorwf	handle_infusion_setup@currentState^0,w,c
  2012   001768  B4D8               	btfsc	status,2,c
  2013   00176A  0012               	return	
  2014   00176C  D7F0               	goto	l5127
  2015   00176E                     __end_of_handle_infusion_setup:
  2016                           	callstack 0
  2017                           
  2018 ;; *************** function _input_value *****************
  2019 ;; Defined at:
  2020 ;;		line 48 in file "helper.c"
  2021 ;; Parameters:    Size  Location     Type
  2022 ;;  inputType       2   14[COMRAM] PTR unsigned char 
  2023 ;;		 -> STR_40(7), 
  2024 ;;  initial         2   16[COMRAM] PTR unsigned char 
  2025 ;;		 -> STR_41(2), 
  2026 ;;  limit           2   18[COMRAM] PTR unsigned char 
  2027 ;;		 -> STR_42(3), 
  2028 ;;  units           2   20[COMRAM] PTR unsigned char 
  2029 ;;		 -> STR_43(3), 
  2030 ;; Auto vars:     Size  Location     Type
  2031 ;;		None
  2032 ;; Return value:  Size  Location     Type
  2033 ;;                  1    wreg      void 
  2034 ;; Registers used:
  2035 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2036 ;; Tracked objects:
  2037 ;;		On entry : 0/0
  2038 ;;		On exit  : 0/0
  2039 ;;		Unchanged: 0/0
  2040 ;; Data sizes:     COMRAM   BANK0   BANK1
  2041 ;;      Params:         8       0       0
  2042 ;;      Locals:         0       0       0
  2043 ;;      Temps:          0       0       0
  2044 ;;      Totals:         8       0       0
  2045 ;;Total ram usage:        8 bytes
  2046 ;; Hardware stack levels used: 1
  2047 ;; Hardware stack levels required when called: 5
  2048 ;; This function calls:
  2049 ;;		_Lcd_Clear
  2050 ;;		_Lcd_Set_Cursor
  2051 ;;		_Lcd_Write_String
  2052 ;; This function is called by:
  2053 ;;		_handle_infusion_setup
  2054 ;; This function uses a non-reentrant model
  2055 ;;
  2056                           
  2057                           	psect	text9
  2058   000FC2                     __ptext9:
  2059                           	callstack 0
  2060   000FC2                     _input_value:
  2061                           	callstack 24
  2062                           
  2063                           ;helper.c: 49:     Lcd_Clear();;
  2064                           
  2065                           ;incstack = 0
  2066   000FC2  ECAE  F00D         	call	_Lcd_Clear	;wreg free
  2067                           
  2068                           ;helper.c: 50:     Lcd_Set_Cursor(position_row_1,position_column_1 );
  2069   000FC6  0E01               	movlw	1
  2070   000FC8  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2071   000FCA  0E01               	movlw	1
  2072   000FCC  EC34  F008         	call	_Lcd_Set_Cursor
  2073                           
  2074                           ;helper.c: 51:     Lcd_Write_String("INPUT ");
  2075   000FD0  0EC9               	movlw	low STR_1
  2076   000FD2  6E09               	movwf	Lcd_Write_String@a^0,c
  2077   000FD4  0E1F               	movlw	high STR_1
  2078   000FD6  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2079   000FD8  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2080                           
  2081                           ;helper.c: 52:     Lcd_Write_String(inputType);
  2082   000FDC  C00F  F009         	movff	input_value@inputType,Lcd_Write_String@a
  2083   000FE0  C010  F00A         	movff	input_value@inputType+1,Lcd_Write_String@a+1
  2084   000FE4  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2085                           
  2086                           ;helper.c: 53:     Lcd_Set_Cursor(position_row_2,position_column_1 );
  2087   000FE8  0E01               	movlw	1
  2088   000FEA  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2089   000FEC  0E02               	movlw	2
  2090   000FEE  EC34  F008         	call	_Lcd_Set_Cursor
  2091                           
  2092                           ;helper.c: 54:     Lcd_Write_String(initial);
  2093   000FF2  C011  F009         	movff	input_value@initial,Lcd_Write_String@a
  2094   000FF6  C012  F00A         	movff	input_value@initial+1,Lcd_Write_String@a+1
  2095   000FFA  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2096                           
  2097                           ;helper.c: 55:     Lcd_Write_String(" BETWEEN 0-");
  2098   000FFE  0E4F               	movlw	low STR_2
  2099   001000  6E09               	movwf	Lcd_Write_String@a^0,c
  2100   001002  0E1F               	movlw	high STR_2
  2101   001004  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2102   001006  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2103                           
  2104                           ;helper.c: 56:     Lcd_Write_String(limit);
  2105   00100A  C013  F009         	movff	input_value@limit,Lcd_Write_String@a
  2106   00100E  C014  F00A         	movff	input_value@limit+1,Lcd_Write_String@a+1
  2107   001012  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2108                           
  2109                           ;helper.c: 57:     Lcd_Write_String(" ");
  2110   001016  0EEE               	movlw	low (STR_37+2)
  2111   001018  6E09               	movwf	Lcd_Write_String@a^0,c
  2112   00101A  0E1F               	movlw	high (STR_37+2)
  2113   00101C  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2114   00101E  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2115                           
  2116                           ;helper.c: 58:     Lcd_Write_String(units);
  2117   001022  C015  F009         	movff	input_value@units,Lcd_Write_String@a
  2118   001026  C016  F00A         	movff	input_value@units+1,Lcd_Write_String@a+1
  2119   00102A  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2120                           
  2121                           ;helper.c: 59:     Lcd_Set_Cursor(position_row_3, position_column_1);
  2122   00102E  0E01               	movlw	1
  2123   001030  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2124   001032  0E03               	movlw	3
  2125   001034  EC34  F008         	call	_Lcd_Set_Cursor
  2126                           
  2127                           ;helper.c: 60:     Lcd_Write_String(initial);
  2128   001038  C011  F009         	movff	input_value@initial,Lcd_Write_String@a
  2129   00103C  C012  F00A         	movff	input_value@initial+1,Lcd_Write_String@a+1
  2130   001040  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2131                           
  2132                           ;helper.c: 61:     Lcd_Write_String(": ");
  2133   001044  0EED               	movlw	low (STR_37+1)
  2134   001046  6E09               	movwf	Lcd_Write_String@a^0,c
  2135   001048  0E1F               	movlw	high (STR_37+1)
  2136   00104A  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2137   00104C  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2138                           
  2139                           ;helper.c: 62:     Lcd_Set_Cursor(position_row_4,position_column_17 );
  2140   001050  0E11               	movlw	17
  2141   001052  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2142   001054  0E04               	movlw	4
  2143   001056  EC34  F008         	call	_Lcd_Set_Cursor
  2144                           
  2145                           ;helper.c: 63:     Lcd_Write_String("BACK");
  2146   00105A  0EE7               	movlw	low STR_5
  2147   00105C  6E09               	movwf	Lcd_Write_String@a^0,c
  2148   00105E  0E1F               	movlw	high STR_5
  2149   001060  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2150   001062  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2151   001066  0012               	return		;funcret
  2152   001068                     __end_of_input_value:
  2153                           	callstack 0
  2154                           
  2155 ;; *************** function _infusion *****************
  2156 ;; Defined at:
  2157 ;;		line 376 in file "main.c"
  2158 ;; Parameters:    Size  Location     Type
  2159 ;;		None
  2160 ;; Auto vars:     Size  Location     Type
  2161 ;;  i               1   27[BANK0 ] char 
  2162 ;;  buff            5   10[BANK0 ] unsigned char [5]
  2163 ;;  error           4   32[BANK0 ] long 
  2164 ;;  controlSigna    4   28[BANK0 ] long 
  2165 ;;  stopTime        4   23[BANK0 ] long 
  2166 ;;  analogReadin    4   19[BANK0 ] long 
  2167 ;;  expectedX       4   15[BANK0 ] long 
  2168 ;;  dError          4    0[BANK0 ] long 
  2169 ;;  act_pos         2    8[BANK0 ] int 
  2170 ;; Return value:  Size  Location     Type
  2171 ;;                  1    wreg      void 
  2172 ;; Registers used:
  2173 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2174 ;; Tracked objects:
  2175 ;;		On entry : 0/0
  2176 ;;		On exit  : 0/0
  2177 ;;		Unchanged: 0/0
  2178 ;; Data sizes:     COMRAM   BANK0   BANK1
  2179 ;;      Params:         0       0       0
  2180 ;;      Locals:         0      36       0
  2181 ;;      Temps:          8       0       0
  2182 ;;      Totals:         8      36       0
  2183 ;;Total ram usage:       44 bytes
  2184 ;; Hardware stack levels used: 1
  2185 ;; Hardware stack levels required when called: 7
  2186 ;; This function calls:
  2187 ;;		_ADC_Read
  2188 ;;		_Lcd_Clear
  2189 ;;		_Lcd_Set_Cursor
  2190 ;;		_Lcd_Write_String
  2191 ;;		_Timer1_start
  2192 ;;		___aldiv
  2193 ;;		___lmul
  2194 ;;		_delay_ms
  2195 ;;		_getExpected
  2196 ;;		_handle_actuator_push
  2197 ;;		_move_actuator
  2198 ;;		_processTimeToSeconds
  2199 ;;		_sprintf
  2200 ;;		_usePeripheral
  2201 ;; This function is called by:
  2202 ;;		_handle_infusion_setup
  2203 ;; This function uses a non-reentrant model
  2204 ;;
  2205                           
  2206                           	psect	text10
  2207   00018E                     __ptext10:
  2208                           	callstack 0
  2209   00018E                     _infusion:
  2210                           	callstack 22
  2211                           
  2212                           ;main.c: 378:     Timer1_start();
  2213                           
  2214                           ;incstack = 0
  2215   00018E  EC70  F00D         	call	_Timer1_start	;wreg free
  2216                           
  2217                           ;main.c: 379:     LATB = 0xff;
  2218   000192  688A               	setf	138,c	;volatile
  2219                           
  2220                           ;main.c: 380:     int act_pos = ADC_Read(0);
  2221   000194  0E00               	movlw	0
  2222   000196  EC10  F00A         	call	_ADC_Read
  2223   00019A  C005  F0DC         	movff	?_ADC_Read,infusion@act_pos
  2224   00019E  C006  F0DD         	movff	?_ADC_Read+1,infusion@act_pos+1
  2225                           
  2226                           ;main.c: 382:     char buff[5];;main.c: 383:     long expectedX, analogReading, error, d
      +                          Error, controlSignal;;main.c: 385:     long stopTime = processTimeToSeconds(timeInfusion
      +                          );
  2227   0001A2  0E00               	movlw	0
  2228   0001A4  6E0E               	movwf	(processTimeToSeconds@timeInput+1)^0,c
  2229   0001A6  0E64               	movlw	100
  2230   0001A8  6E0D               	movwf	processTimeToSeconds@timeInput^0,c
  2231   0001AA  EC2B  F00B         	call	_processTimeToSeconds	;wreg free
  2232   0001AE  C00D  F0EB         	movff	?_processTimeToSeconds,infusion@stopTime
  2233   0001B2  C00E  F0EC         	movff	?_processTimeToSeconds+1,infusion@stopTime+1
  2234   0001B6  0100               	movlb	0	; () banked
  2235   0001B8  0E00               	movlw	0
  2236   0001BA  BFEC               	btfsc	(infusion@stopTime+1)& (0+255),7,b
  2237   0001BC  0EFF               	movlw	-1
  2238   0001BE  6FED               	movwf	(infusion@stopTime+2)& (0+255),b
  2239   0001C0  6FEE               	movwf	(infusion@stopTime+3)& (0+255),b
  2240                           
  2241                           ; BSR set to: 0
  2242                           ;main.c: 386:     Lcd_Clear();
  2243   0001C2  ECAE  F00D         	call	_Lcd_Clear	;wreg free
  2244                           
  2245                           ;main.c: 387:     usePeripheral(orange_led, on);
  2246   0001C6  0E00               	movlw	0
  2247   0001C8  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  2248   0001CA  0E01               	movlw	1
  2249   0001CC  6E05               	movwf	usePeripheral@peripheral^0,c
  2250   0001CE  0E00               	movlw	0
  2251   0001D0  6E08               	movwf	(usePeripheral@action+1)^0,c
  2252   0001D2  0E01               	movlw	1
  2253   0001D4  6E07               	movwf	usePeripheral@action^0,c
  2254   0001D6  EC8D  F007         	call	_usePeripheral	;wreg free
  2255                           
  2256                           ;main.c: 390:     while( (mil) < stopTime*1000){
  2257   0001DA  D1A1               	goto	l4989
  2258   0001DC                     l4925:
  2259                           
  2260                           ;main.c: 391:         expectedX = getExpected();
  2261   0001DC  ECF0  F005         	call	_getExpected	;wreg free
  2262   0001E0  C054  F0E3         	movff	?_getExpected,infusion@expectedX
  2263   0001E4  C055  F0E4         	movff	?_getExpected+1,infusion@expectedX+1
  2264   0001E8  C056  F0E5         	movff	?_getExpected+2,infusion@expectedX+2
  2265   0001EC  C057  F0E6         	movff	?_getExpected+3,infusion@expectedX+3
  2266                           
  2267                           ;main.c: 392:         analogReading = ADC_Read(0);
  2268   0001F0  0E00               	movlw	0
  2269   0001F2  EC10  F00A         	call	_ADC_Read
  2270   0001F6  C005  F0E7         	movff	?_ADC_Read,infusion@analogReading
  2271   0001FA  C006  F0E8         	movff	?_ADC_Read+1,infusion@analogReading+1
  2272   0001FE  0100               	movlb	0	; () banked
  2273   000200  0E00               	movlw	0
  2274   000202  BFE8               	btfsc	(infusion@analogReading+1)& (0+255),7,b
  2275   000204  0EFF               	movlw	-1
  2276   000206  6FE9               	movwf	(infusion@analogReading+2)& (0+255),b
  2277   000208  6FEA               	movwf	(infusion@analogReading+3)& (0+255),b
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;main.c: 393:         error = (analogReading - expectedX);
  2281   00020A  51E3               	movf	infusion@expectedX& (0+255),w,b
  2282   00020C  5DE7               	subwf	infusion@analogReading& (0+255),w,b
  2283   00020E  6FF4               	movwf	infusion@error& (0+255),b
  2284   000210  51E4               	movf	(infusion@expectedX+1)& (0+255),w,b
  2285   000212  59E8               	subwfb	(infusion@analogReading+1)& (0+255),w,b
  2286   000214  6FF5               	movwf	(infusion@error+1)& (0+255),b
  2287   000216  51E5               	movf	(infusion@expectedX+2)& (0+255),w,b
  2288   000218  59E9               	subwfb	(infusion@analogReading+2)& (0+255),w,b
  2289   00021A  6FF6               	movwf	(infusion@error+2)& (0+255),b
  2290   00021C  51E6               	movf	(infusion@expectedX+3)& (0+255),w,b
  2291   00021E  59EA               	subwfb	(infusion@analogReading+3)& (0+255),w,b
  2292   000220  6FF7               	movwf	(infusion@error+3)& (0+255),b
  2293                           
  2294                           ; BSR set to: 0
  2295                           ;main.c: 395:         dError = (error - lastError)/(dT/1000);
  2296   000222  51A0               	movf	_lastError& (0+255),w,b
  2297   000224  5DF4               	subwf	infusion@error& (0+255),w,b
  2298   000226  6E2E               	movwf	___aldiv@dividend^0,c
  2299   000228  51A1               	movf	(_lastError+1)& (0+255),w,b
  2300   00022A  59F5               	subwfb	(infusion@error+1)& (0+255),w,b
  2301   00022C  6E2F               	movwf	(___aldiv@dividend+1)^0,c
  2302   00022E  51A2               	movf	(_lastError+2)& (0+255),w,b
  2303   000230  59F6               	subwfb	(infusion@error+2)& (0+255),w,b
  2304   000232  6E30               	movwf	(___aldiv@dividend+2)^0,c
  2305   000234  51A3               	movf	(_lastError+3)& (0+255),w,b
  2306   000236  59F7               	subwfb	(infusion@error+3)& (0+255),w,b
  2307   000238  6E31               	movwf	(___aldiv@dividend+3)^0,c
  2308   00023A  0E00               	movlw	0
  2309   00023C  6E32               	movwf	___aldiv@divisor^0,c
  2310   00023E  0E00               	movlw	0
  2311   000240  6E33               	movwf	(___aldiv@divisor+1)^0,c
  2312   000242  0E00               	movlw	0
  2313   000244  6E34               	movwf	(___aldiv@divisor+2)^0,c
  2314   000246  0E00               	movlw	0
  2315   000248  6E35               	movwf	(___aldiv@divisor+3)^0,c
  2316   00024A  EC6C  F006         	call	___aldiv	;wreg free
  2317   00024E  C02E  F0D4         	movff	?___aldiv,infusion@dError
  2318   000252  C02F  F0D5         	movff	?___aldiv+1,infusion@dError+1
  2319   000256  C030  F0D6         	movff	?___aldiv+2,infusion@dError+2
  2320   00025A  C031  F0D7         	movff	?___aldiv+3,infusion@dError+3
  2321                           
  2322                           ;main.c: 396:         errorSum += (error * (dT / 1000));
  2323   00025E  C0F4  F022         	movff	infusion@error,___lmul@multiplier
  2324   000262  C0F5  F023         	movff	infusion@error+1,___lmul@multiplier+1
  2325   000266  C0F6  F024         	movff	infusion@error+2,___lmul@multiplier+2
  2326   00026A  C0F7  F025         	movff	infusion@error+3,___lmul@multiplier+3
  2327   00026E  0E00               	movlw	0
  2328   000270  6E26               	movwf	___lmul@multiplicand^0,c
  2329   000272  0E00               	movlw	0
  2330   000274  6E27               	movwf	(___lmul@multiplicand+1)^0,c
  2331   000276  0E00               	movlw	0
  2332   000278  6E28               	movwf	(___lmul@multiplicand+2)^0,c
  2333   00027A  0E00               	movlw	0
  2334   00027C  6E29               	movwf	(___lmul@multiplicand+3)^0,c
  2335   00027E  ECE3  F00B         	call	___lmul	;wreg free
  2336   000282  5022               	movf	?___lmul^0,w,c
  2337   000284  0100               	movlb	0	; () banked
  2338   000286  27A4               	addwf	_errorSum& (0+255),f,b
  2339   000288  5023               	movf	(?___lmul+1)^0,w,c
  2340   00028A  23A5               	addwfc	(_errorSum+1)& (0+255),f,b
  2341   00028C  5024               	movf	(?___lmul+2)^0,w,c
  2342   00028E  23A6               	addwfc	(_errorSum+2)& (0+255),f,b
  2343   000290  5025               	movf	(?___lmul+3)^0,w,c
  2344   000292  23A7               	addwfc	(_errorSum+3)& (0+255),f,b
  2345                           
  2346                           ; BSR set to: 0
  2347                           ;main.c: 398:         controlSignal = (Kp * error + Ki * errorSum + Kd * dError) / 100;
  2348   000294  C0F4  F022         	movff	infusion@error,___lmul@multiplier
  2349   000298  C0F5  F023         	movff	infusion@error+1,___lmul@multiplier+1
  2350   00029C  C0F6  F024         	movff	infusion@error+2,___lmul@multiplier+2
  2351   0002A0  C0F7  F025         	movff	infusion@error+3,___lmul@multiplier+3
  2352   0002A4  0E4C               	movlw	76
  2353   0002A6  6E26               	movwf	___lmul@multiplicand^0,c
  2354   0002A8  0E1D               	movlw	29
  2355   0002AA  6E27               	movwf	(___lmul@multiplicand+1)^0,c
  2356   0002AC  0E00               	movlw	0
  2357   0002AE  6E28               	movwf	(___lmul@multiplicand+2)^0,c
  2358   0002B0  0E00               	movlw	0
  2359   0002B2  6E29               	movwf	(___lmul@multiplicand+3)^0,c
  2360   0002B4  ECE3  F00B         	call	___lmul	;wreg free
  2361   0002B8  C022  F068         	movff	?___lmul,??_infusion
  2362   0002BC  C023  F069         	movff	?___lmul+1,??_infusion+1
  2363   0002C0  C024  F06A         	movff	?___lmul+2,??_infusion+2
  2364   0002C4  C025  F06B         	movff	?___lmul+3,??_infusion+3
  2365   0002C8  C0A4  F022         	movff	_errorSum,___lmul@multiplier
  2366   0002CC  C0A5  F023         	movff	_errorSum+1,___lmul@multiplier+1
  2367   0002D0  C0A6  F024         	movff	_errorSum+2,___lmul@multiplier+2
  2368   0002D4  C0A7  F025         	movff	_errorSum+3,___lmul@multiplier+3
  2369   0002D8  0ED0               	movlw	208
  2370   0002DA  6E26               	movwf	___lmul@multiplicand^0,c
  2371   0002DC  0E07               	movlw	7
  2372   0002DE  6E27               	movwf	(___lmul@multiplicand+1)^0,c
  2373   0002E0  0E00               	movlw	0
  2374   0002E2  6E28               	movwf	(___lmul@multiplicand+2)^0,c
  2375   0002E4  0E00               	movlw	0
  2376   0002E6  6E29               	movwf	(___lmul@multiplicand+3)^0,c
  2377   0002E8  ECE3  F00B         	call	___lmul	;wreg free
  2378   0002EC  5022               	movf	?___lmul^0,w,c
  2379   0002EE  2468               	addwf	??_infusion^0,w,c
  2380   0002F0  6E6C               	movwf	(??_infusion+4)^0,c
  2381   0002F2  5023               	movf	(?___lmul+1)^0,w,c
  2382   0002F4  2069               	addwfc	(??_infusion+1)^0,w,c
  2383   0002F6  6E6D               	movwf	(??_infusion+5)^0,c
  2384   0002F8  5024               	movf	(?___lmul+2)^0,w,c
  2385   0002FA  206A               	addwfc	(??_infusion+2)^0,w,c
  2386   0002FC  6E6E               	movwf	(??_infusion+6)^0,c
  2387   0002FE  5025               	movf	(?___lmul+3)^0,w,c
  2388   000300  206B               	addwfc	(??_infusion+3)^0,w,c
  2389   000302  6E6F               	movwf	(??_infusion+7)^0,c
  2390   000304  C0D4  F022         	movff	infusion@dError,___lmul@multiplier
  2391   000308  C0D5  F023         	movff	infusion@dError+1,___lmul@multiplier+1
  2392   00030C  C0D6  F024         	movff	infusion@dError+2,___lmul@multiplier+2
  2393   000310  C0D7  F025         	movff	infusion@dError+3,___lmul@multiplier+3
  2394   000314  0ED0               	movlw	208
  2395   000316  6E26               	movwf	___lmul@multiplicand^0,c
  2396   000318  0E07               	movlw	7
  2397   00031A  6E27               	movwf	(___lmul@multiplicand+1)^0,c
  2398   00031C  0E00               	movlw	0
  2399   00031E  6E28               	movwf	(___lmul@multiplicand+2)^0,c
  2400   000320  0E00               	movlw	0
  2401   000322  6E29               	movwf	(___lmul@multiplicand+3)^0,c
  2402   000324  ECE3  F00B         	call	___lmul	;wreg free
  2403   000328  5022               	movf	?___lmul^0,w,c
  2404   00032A  246C               	addwf	(??_infusion+4)^0,w,c
  2405   00032C  6E2E               	movwf	___aldiv@dividend^0,c
  2406   00032E  5023               	movf	(?___lmul+1)^0,w,c
  2407   000330  206D               	addwfc	(??_infusion+5)^0,w,c
  2408   000332  6E2F               	movwf	(___aldiv@dividend+1)^0,c
  2409   000334  5024               	movf	(?___lmul+2)^0,w,c
  2410   000336  206E               	addwfc	(??_infusion+6)^0,w,c
  2411   000338  6E30               	movwf	(___aldiv@dividend+2)^0,c
  2412   00033A  5025               	movf	(?___lmul+3)^0,w,c
  2413   00033C  206F               	addwfc	(??_infusion+7)^0,w,c
  2414   00033E  6E31               	movwf	(___aldiv@dividend+3)^0,c
  2415   000340  0E64               	movlw	100
  2416   000342  6E32               	movwf	___aldiv@divisor^0,c
  2417   000344  0E00               	movlw	0
  2418   000346  6E33               	movwf	(___aldiv@divisor+1)^0,c
  2419   000348  0E00               	movlw	0
  2420   00034A  6E34               	movwf	(___aldiv@divisor+2)^0,c
  2421   00034C  0E00               	movlw	0
  2422   00034E  6E35               	movwf	(___aldiv@divisor+3)^0,c
  2423   000350  EC6C  F006         	call	___aldiv	;wreg free
  2424   000354  C02E  F0F0         	movff	?___aldiv,infusion@controlSignal
  2425   000358  C02F  F0F1         	movff	?___aldiv+1,infusion@controlSignal+1
  2426   00035C  C030  F0F2         	movff	?___aldiv+2,infusion@controlSignal+2
  2427   000360  C031  F0F3         	movff	?___aldiv+3,infusion@controlSignal+3
  2428                           
  2429                           ;main.c: 401:         if (controlSignal < 0) {
  2430   000364  0100               	movlb	0	; () banked
  2431   000366  AFF3               	btfss	(infusion@controlSignal+3)& (0+255),7,b
  2432   000368  D008               	goto	l4941
  2433                           
  2434                           ; BSR set to: 0
  2435                           ;main.c: 402:             controlSignal = 0;
  2436   00036A  0E00               	movlw	0
  2437   00036C  6FF0               	movwf	infusion@controlSignal& (0+255),b
  2438   00036E  0E00               	movlw	0
  2439   000370  6FF1               	movwf	(infusion@controlSignal+1)& (0+255),b
  2440   000372  0E00               	movlw	0
  2441   000374  6FF2               	movwf	(infusion@controlSignal+2)& (0+255),b
  2442   000376  0E00               	movlw	0
  2443   000378  6FF3               	movwf	(infusion@controlSignal+3)& (0+255),b
  2444   00037A                     l4941:
  2445                           
  2446                           ; BSR set to: 0
  2447                           ;main.c: 404:         if (controlSignal > 510) {
  2448   00037A  BFF3               	btfsc	(infusion@controlSignal+3)& (0+255),7,b
  2449   00037C  D010               	goto	l4945
  2450   00037E  51F3               	movf	(infusion@controlSignal+3)& (0+255),w,b
  2451   000380  11F2               	iorwf	(infusion@controlSignal+2)& (0+255),w,b
  2452   000382  E105               	bnz	u4860
  2453   000384  29F0               	incf	infusion@controlSignal& (0+255),w,b
  2454   000386  0E01               	movlw	1
  2455   000388  59F1               	subwfb	(infusion@controlSignal+1)& (0+255),w,b
  2456   00038A  A0D8               	btfss	status,0,c
  2457   00038C  D008               	goto	l4945
  2458   00038E                     u4860:
  2459                           
  2460                           ; BSR set to: 0
  2461                           ;main.c: 405:             controlSignal = 510;
  2462   00038E  0EFE               	movlw	254
  2463   000390  6FF0               	movwf	infusion@controlSignal& (0+255),b
  2464   000392  0E01               	movlw	1
  2465   000394  6FF1               	movwf	(infusion@controlSignal+1)& (0+255),b
  2466   000396  0E00               	movlw	0
  2467   000398  6FF2               	movwf	(infusion@controlSignal+2)& (0+255),b
  2468   00039A  0E00               	movlw	0
  2469   00039C  6FF3               	movwf	(infusion@controlSignal+3)& (0+255),b
  2470   00039E                     l4945:
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;main.c: 408:         move_actuator(backwards, controlSignal);
  2474   00039E  0E00               	movlw	0
  2475   0003A0  6E0A               	movwf	(move_actuator@direction+1)^0,c
  2476   0003A2  0E00               	movlw	0
  2477   0003A4  6E09               	movwf	move_actuator@direction^0,c
  2478   0003A6  C0F0  F00B         	movff	infusion@controlSignal,move_actuator@speed
  2479   0003AA  C0F1  F00C         	movff	infusion@controlSignal+1,move_actuator@speed+1
  2480   0003AE  EC0E  F00C         	call	_move_actuator	;wreg free
  2481                           
  2482                           ;main.c: 409:         lastError = error;
  2483   0003B2  C0F4  F0A0         	movff	infusion@error,_lastError
  2484   0003B6  C0F5  F0A1         	movff	infusion@error+1,_lastError+1
  2485   0003BA  C0F6  F0A2         	movff	infusion@error+2,_lastError+2
  2486   0003BE  C0F7  F0A3         	movff	infusion@error+3,_lastError+3
  2487                           
  2488                           ;main.c: 411:         Lcd_Set_Cursor(1,1);
  2489   0003C2  0E01               	movlw	1
  2490   0003C4  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2491   0003C6  0E01               	movlw	1
  2492   0003C8  EC34  F008         	call	_Lcd_Set_Cursor
  2493                           
  2494                           ;main.c: 412:         Lcd_Write_String("Error:");
  2495   0003CC  0EB4               	movlw	low STR_31
  2496   0003CE  6E09               	movwf	Lcd_Write_String@a^0,c
  2497   0003D0  0E1F               	movlw	high STR_31
  2498   0003D2  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2499   0003D4  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2500                           
  2501                           ;main.c: 413:         sprintf(buff, "%ld", error);
  2502   0003D8  0EDE               	movlw	low infusion@buff
  2503   0003DA  6E4F               	movwf	sprintf@s^0,c
  2504   0003DC  0EF0               	movlw	low STR_32
  2505   0003DE  6E50               	movwf	sprintf@fmt^0,c
  2506   0003E0  0E1F               	movlw	high STR_32
  2507   0003E2  6E51               	movwf	(sprintf@fmt+1)^0,c
  2508   0003E4  C0F4  F052         	movff	infusion@error,?_sprintf+3
  2509   0003E8  C0F5  F053         	movff	infusion@error+1,?_sprintf+4
  2510   0003EC  C0F6  F054         	movff	infusion@error+2,?_sprintf+5
  2511   0003F0  C0F7  F055         	movff	infusion@error+3,?_sprintf+6
  2512   0003F4  EC7E  F00C         	call	_sprintf	;wreg free
  2513                           
  2514                           ;main.c: 414:         Lcd_Write_String(buff);
  2515   0003F8  0EDE               	movlw	low infusion@buff
  2516   0003FA  6E09               	movwf	Lcd_Write_String@a^0,c
  2517   0003FC  6A0A               	clrf	(Lcd_Write_String@a+1)^0,c
  2518   0003FE  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2519                           
  2520                           ;main.c: 416:         Lcd_Set_Cursor(2,1);
  2521   000402  0E01               	movlw	1
  2522   000404  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2523   000406  0E02               	movlw	2
  2524   000408  EC34  F008         	call	_Lcd_Set_Cursor
  2525                           
  2526                           ;main.c: 417:         Lcd_Write_String("Pos:");
  2527   00040C  0EE2               	movlw	low STR_33
  2528   00040E  6E09               	movwf	Lcd_Write_String@a^0,c
  2529   000410  0E1F               	movlw	high STR_33
  2530   000412  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2531   000414  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2532                           
  2533                           ;main.c: 418:         sprintf(buff, "%ld", analogReading);
  2534   000418  0EDE               	movlw	low infusion@buff
  2535   00041A  6E4F               	movwf	sprintf@s^0,c
  2536   00041C  0EF0               	movlw	low STR_32
  2537   00041E  6E50               	movwf	sprintf@fmt^0,c
  2538   000420  0E1F               	movlw	high STR_32
  2539   000422  6E51               	movwf	(sprintf@fmt+1)^0,c
  2540   000424  C0E7  F052         	movff	infusion@analogReading,?_sprintf+3
  2541   000428  C0E8  F053         	movff	infusion@analogReading+1,?_sprintf+4
  2542   00042C  C0E9  F054         	movff	infusion@analogReading+2,?_sprintf+5
  2543   000430  C0EA  F055         	movff	infusion@analogReading+3,?_sprintf+6
  2544   000434  EC7E  F00C         	call	_sprintf	;wreg free
  2545                           
  2546                           ;main.c: 419:         Lcd_Write_String(buff);
  2547   000438  0EDE               	movlw	low infusion@buff
  2548   00043A  6E09               	movwf	Lcd_Write_String@a^0,c
  2549   00043C  6A0A               	clrf	(Lcd_Write_String@a+1)^0,c
  2550   00043E  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2551                           
  2552                           ;main.c: 422:         Lcd_Set_Cursor(3,1);
  2553   000442  0E01               	movlw	1
  2554   000444  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2555   000446  0E03               	movlw	3
  2556   000448  EC34  F008         	call	_Lcd_Set_Cursor
  2557                           
  2558                           ;main.c: 423:         Lcd_Write_String("Exp:");
  2559   00044C  0EDD               	movlw	low STR_35
  2560   00044E  6E09               	movwf	Lcd_Write_String@a^0,c
  2561   000450  0E1F               	movlw	high STR_35
  2562   000452  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2563   000454  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2564                           
  2565                           ;main.c: 424:         sprintf(buff, "%ld", expectedX);
  2566   000458  0EDE               	movlw	low infusion@buff
  2567   00045A  6E4F               	movwf	sprintf@s^0,c
  2568   00045C  0EF0               	movlw	low STR_32
  2569   00045E  6E50               	movwf	sprintf@fmt^0,c
  2570   000460  0E1F               	movlw	high STR_32
  2571   000462  6E51               	movwf	(sprintf@fmt+1)^0,c
  2572   000464  C0E3  F052         	movff	infusion@expectedX,?_sprintf+3
  2573   000468  C0E4  F053         	movff	infusion@expectedX+1,?_sprintf+4
  2574   00046C  C0E5  F054         	movff	infusion@expectedX+2,?_sprintf+5
  2575   000470  C0E6  F055         	movff	infusion@expectedX+3,?_sprintf+6
  2576   000474  EC7E  F00C         	call	_sprintf	;wreg free
  2577                           
  2578                           ;main.c: 425:         Lcd_Write_String(buff);
  2579   000478  0EDE               	movlw	low infusion@buff
  2580   00047A  6E09               	movwf	Lcd_Write_String@a^0,c
  2581   00047C  6A0A               	clrf	(Lcd_Write_String@a+1)^0,c
  2582   00047E  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2583                           
  2584                           ;main.c: 428:         Lcd_Set_Cursor(4,10);
  2585   000482  0E0A               	movlw	10
  2586   000484  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2587   000486  0E04               	movlw	4
  2588   000488  EC34  F008         	call	_Lcd_Set_Cursor
  2589                           
  2590                           ;main.c: 429:         Lcd_Write_String("T: ");
  2591   00048C  0EEC               	movlw	low STR_37
  2592   00048E  6E09               	movwf	Lcd_Write_String@a^0,c
  2593   000490  0E1F               	movlw	high STR_37
  2594   000492  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2595   000494  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2596                           
  2597                           ;main.c: 431:         sprintf(buff, "%d", stopTime - (mil/1000));
  2598   000498  C073  F02E         	movff	_mil,___aldiv@dividend
  2599   00049C  C074  F02F         	movff	_mil+1,___aldiv@dividend+1
  2600   0004A0  C075  F030         	movff	_mil+2,___aldiv@dividend+2
  2601   0004A4  C076  F031         	movff	_mil+3,___aldiv@dividend+3
  2602   0004A8  0EE8               	movlw	232
  2603   0004AA  6E32               	movwf	___aldiv@divisor^0,c
  2604   0004AC  0E03               	movlw	3
  2605   0004AE  6E33               	movwf	(___aldiv@divisor+1)^0,c
  2606   0004B0  0E00               	movlw	0
  2607   0004B2  6E34               	movwf	(___aldiv@divisor+2)^0,c
  2608   0004B4  0E00               	movlw	0
  2609   0004B6  6E35               	movwf	(___aldiv@divisor+3)^0,c
  2610   0004B8  EC6C  F006         	call	___aldiv	;wreg free
  2611   0004BC  502E               	movf	?___aldiv^0,w,c
  2612   0004BE  0100               	movlb	0	; () banked
  2613   0004C0  5DEB               	subwf	infusion@stopTime& (0+255),w,b
  2614   0004C2  6FD8               	movwf	_infusion$1678& (0+255),b
  2615   0004C4  502F               	movf	(?___aldiv+1)^0,w,c
  2616   0004C6  59EC               	subwfb	(infusion@stopTime+1)& (0+255),w,b
  2617   0004C8  6FD9               	movwf	(_infusion$1678+1)& (0+255),b
  2618   0004CA  5030               	movf	(?___aldiv+2)^0,w,c
  2619   0004CC  59ED               	subwfb	(infusion@stopTime+2)& (0+255),w,b
  2620   0004CE  6FDA               	movwf	(_infusion$1678+2)& (0+255),b
  2621   0004D0  5031               	movf	(?___aldiv+3)^0,w,c
  2622   0004D2  59EE               	subwfb	(infusion@stopTime+3)& (0+255),w,b
  2623   0004D4  6FDB               	movwf	(_infusion$1678+3)& (0+255),b
  2624                           
  2625                           ; BSR set to: 0
  2626                           ;main.c: 431:         sprintf(buff, "%d", stopTime - (mil/1000));
  2627   0004D6  0EDE               	movlw	low infusion@buff
  2628   0004D8  6E4F               	movwf	sprintf@s^0,c
  2629   0004DA  0EF7               	movlw	low STR_38
  2630   0004DC  6E50               	movwf	sprintf@fmt^0,c
  2631   0004DE  0E1F               	movlw	high STR_38
  2632   0004E0  6E51               	movwf	(sprintf@fmt+1)^0,c
  2633   0004E2  C0D8  F052         	movff	_infusion$1678,?_sprintf+3
  2634   0004E6  C0D9  F053         	movff	_infusion$1678+1,?_sprintf+4
  2635   0004EA  C0DA  F054         	movff	_infusion$1678+2,?_sprintf+5
  2636   0004EE  C0DB  F055         	movff	_infusion$1678+3,?_sprintf+6
  2637   0004F2  EC7E  F00C         	call	_sprintf	;wreg free
  2638                           
  2639                           ;main.c: 432:         Lcd_Write_String(buff);
  2640   0004F6  0EDE               	movlw	low infusion@buff
  2641   0004F8  6E09               	movwf	Lcd_Write_String@a^0,c
  2642   0004FA  6A0A               	clrf	(Lcd_Write_String@a+1)^0,c
  2643   0004FC  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2644                           
  2645                           ;main.c: 435:         delay_ms(dT);
  2646   000500  0E00               	movlw	0
  2647   000502  6E06               	movwf	(delay_ms@milliseconds+1)^0,c
  2648   000504  0E64               	movlw	100
  2649   000506  6E05               	movwf	delay_ms@milliseconds^0,c
  2650   000508  EC60  F00D         	call	_delay_ms	;wreg free
  2651                           
  2652                           ;main.c: 436:         Lcd_Clear();
  2653   00050C  ECAE  F00D         	call	_Lcd_Clear	;wreg free
  2654                           
  2655                           ;main.c: 438:         act_pos = ADC_Read(0);
  2656   000510  0E00               	movlw	0
  2657   000512  EC10  F00A         	call	_ADC_Read
  2658   000516  C005  F0DC         	movff	?_ADC_Read,infusion@act_pos
  2659   00051A  C006  F0DD         	movff	?_ADC_Read+1,infusion@act_pos+1
  2660   00051E                     l4989:
  2661                           
  2662                           ;main.c: 390:     while( (mil) < stopTime*1000){
  2663   00051E  C0EB  F022         	movff	infusion@stopTime,___lmul@multiplier
  2664   000522  C0EC  F023         	movff	infusion@stopTime+1,___lmul@multiplier+1
  2665   000526  C0ED  F024         	movff	infusion@stopTime+2,___lmul@multiplier+2
  2666   00052A  C0EE  F025         	movff	infusion@stopTime+3,___lmul@multiplier+3
  2667   00052E  0EE8               	movlw	232
  2668   000530  6E26               	movwf	___lmul@multiplicand^0,c
  2669   000532  0E03               	movlw	3
  2670   000534  6E27               	movwf	(___lmul@multiplicand+1)^0,c
  2671   000536  0E00               	movlw	0
  2672   000538  6E28               	movwf	(___lmul@multiplicand+2)^0,c
  2673   00053A  0E00               	movlw	0
  2674   00053C  6E29               	movwf	(___lmul@multiplicand+3)^0,c
  2675   00053E  ECE3  F00B         	call	___lmul	;wreg free
  2676   000542  5022               	movf	?___lmul^0,w,c
  2677   000544  5C73               	subwf	_mil^0,w,c
  2678   000546  5023               	movf	(?___lmul+1)^0,w,c
  2679   000548  5874               	subwfb	(_mil+1)^0,w,c
  2680   00054A  5024               	movf	(?___lmul+2)^0,w,c
  2681   00054C  5875               	subwfb	(_mil+2)^0,w,c
  2682   00054E  5076               	movf	(_mil+3)^0,w,c
  2683   000550  0A80               	xorlw	128
  2684   000552  6E68               	movwf	??_infusion^0,c
  2685   000554  5025               	movf	(?___lmul+3)^0,w,c
  2686   000556  0A80               	xorlw	128
  2687   000558  5868               	subwfb	??_infusion^0,w,c
  2688   00055A  A0D8               	btfss	status,0,c
  2689   00055C  D63F               	goto	l4925
  2690                           
  2691                           ;main.c: 441:     usePeripheral(orange_led, off);
  2692   00055E  0E00               	movlw	0
  2693   000560  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  2694   000562  0E01               	movlw	1
  2695   000564  6E05               	movwf	usePeripheral@peripheral^0,c
  2696   000566  0E00               	movlw	0
  2697   000568  6E08               	movwf	(usePeripheral@action+1)^0,c
  2698   00056A  0E00               	movlw	0
  2699   00056C  6E07               	movwf	usePeripheral@action^0,c
  2700   00056E  EC8D  F007         	call	_usePeripheral	;wreg free
  2701                           
  2702                           ;main.c: 442:     move_actuator(forward, 0);
  2703   000572  0E00               	movlw	0
  2704   000574  6E0A               	movwf	(move_actuator@direction+1)^0,c
  2705   000576  0E01               	movlw	1
  2706   000578  6E09               	movwf	move_actuator@direction^0,c
  2707   00057A  0E00               	movlw	0
  2708   00057C  6E0C               	movwf	(move_actuator@speed+1)^0,c
  2709   00057E  0E00               	movlw	0
  2710   000580  6E0B               	movwf	move_actuator@speed^0,c
  2711   000582  EC0E  F00C         	call	_move_actuator	;wreg free
  2712                           
  2713                           ;main.c: 443:     Lcd_Clear();
  2714   000586  ECAE  F00D         	call	_Lcd_Clear	;wreg free
  2715                           
  2716                           ;main.c: 444:     Lcd_Set_Cursor(1,1);
  2717   00058A  0E01               	movlw	1
  2718   00058C  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  2719   00058E  0E01               	movlw	1
  2720   000590  EC34  F008         	call	_Lcd_Set_Cursor
  2721                           
  2722                           ;main.c: 445:     Lcd_Write_String("INFUSION COMPLETED");
  2723   000594  0EFF               	movlw	low STR_39
  2724   000596  6E09               	movwf	Lcd_Write_String@a^0,c
  2725   000598  0E1E               	movlw	high STR_39
  2726   00059A  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  2727   00059C  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  2728                           
  2729                           ;main.c: 447:     for(int8_t i = 0; i < 5; i++){
  2730   0005A0  0E00               	movlw	0
  2731   0005A2  0100               	movlb	0	; () banked
  2732   0005A4  6FEF               	movwf	infusion@i& (0+255),b
  2733   0005A6                     l5005:
  2734                           
  2735                           ; BSR set to: 0
  2736                           ;main.c: 448:         usePeripheral(buzzer, on);
  2737   0005A6  0E00               	movlw	0
  2738   0005A8  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  2739   0005AA  0E03               	movlw	3
  2740   0005AC  6E05               	movwf	usePeripheral@peripheral^0,c
  2741   0005AE  0E00               	movlw	0
  2742   0005B0  6E08               	movwf	(usePeripheral@action+1)^0,c
  2743   0005B2  0E01               	movlw	1
  2744   0005B4  6E07               	movwf	usePeripheral@action^0,c
  2745   0005B6  EC8D  F007         	call	_usePeripheral	;wreg free
  2746                           
  2747                           ;main.c: 449:         usePeripheral(red_led, on);
  2748   0005BA  0E00               	movlw	0
  2749   0005BC  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  2750   0005BE  0E02               	movlw	2
  2751   0005C0  6E05               	movwf	usePeripheral@peripheral^0,c
  2752   0005C2  0E00               	movlw	0
  2753   0005C4  6E08               	movwf	(usePeripheral@action+1)^0,c
  2754   0005C6  0E01               	movlw	1
  2755   0005C8  6E07               	movwf	usePeripheral@action^0,c
  2756   0005CA  EC8D  F007         	call	_usePeripheral	;wreg free
  2757                           
  2758                           ;main.c: 450:         _delay((unsigned long)((1000)*(8000000L/4000.0)));
  2759   0005CE  0E0B               	movlw	11
  2760   0005D0  6E69               	movwf	(??_infusion+1)^0,c
  2761   0005D2  0E26               	movlw	38
  2762   0005D4  6E68               	movwf	??_infusion^0,c
  2763   0005D6  0E5E               	movlw	94
  2764   0005D8                     u5157:
  2765   0005D8  2EE8               	decfsz	wreg,f,c
  2766   0005DA  D7FE               	bra	u5157
  2767   0005DC  2E68               	decfsz	??_infusion^0,f,c
  2768   0005DE  D7FC               	bra	u5157
  2769   0005E0  2E69               	decfsz	(??_infusion+1)^0,f,c
  2770   0005E2  D7FA               	bra	u5157
  2771                           
  2772                           ;main.c: 451:         usePeripheral(buzzer, off);
  2773   0005E4  0E00               	movlw	0
  2774   0005E6  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  2775   0005E8  0E03               	movlw	3
  2776   0005EA  6E05               	movwf	usePeripheral@peripheral^0,c
  2777   0005EC  0E00               	movlw	0
  2778   0005EE  6E08               	movwf	(usePeripheral@action+1)^0,c
  2779   0005F0  0E00               	movlw	0
  2780   0005F2  6E07               	movwf	usePeripheral@action^0,c
  2781   0005F4  EC8D  F007         	call	_usePeripheral	;wreg free
  2782                           
  2783                           ;main.c: 452:         usePeripheral(red_led, off);
  2784   0005F8  0E00               	movlw	0
  2785   0005FA  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  2786   0005FC  0E02               	movlw	2
  2787   0005FE  6E05               	movwf	usePeripheral@peripheral^0,c
  2788   000600  0E00               	movlw	0
  2789   000602  6E08               	movwf	(usePeripheral@action+1)^0,c
  2790   000604  0E00               	movlw	0
  2791   000606  6E07               	movwf	usePeripheral@action^0,c
  2792   000608  EC8D  F007         	call	_usePeripheral	;wreg free
  2793                           
  2794                           ;main.c: 453:         _delay((unsigned long)((1000)*(8000000L/4000.0)));
  2795   00060C  0E0B               	movlw	11
  2796   00060E  6E69               	movwf	(??_infusion+1)^0,c
  2797   000610  0E26               	movlw	38
  2798   000612  6E68               	movwf	??_infusion^0,c
  2799   000614  0E5E               	movlw	94
  2800   000616                     u5167:
  2801   000616  2EE8               	decfsz	wreg,f,c
  2802   000618  D7FE               	bra	u5167
  2803   00061A  2E68               	decfsz	??_infusion^0,f,c
  2804   00061C  D7FC               	bra	u5167
  2805   00061E  2E69               	decfsz	(??_infusion+1)^0,f,c
  2806   000620  D7FA               	bra	u5167
  2807                           
  2808                           ;main.c: 454:     }
  2809   000622  0100               	movlb	0	; () banked
  2810   000624  2BEF               	incf	infusion@i& (0+255),f,b
  2811                           
  2812                           ; BSR set to: 0
  2813   000626  51EF               	movf	infusion@i& (0+255),w,b
  2814   000628  0A80               	xorlw	128
  2815   00062A  0F7B               	addlw	-133
  2816   00062C  A0D8               	btfss	status,0,c
  2817   00062E  D7BB               	goto	l5005
  2818                           
  2819                           ; BSR set to: 0
  2820                           ;main.c: 456:     handle_actuator_push(act_pos);
  2821   000630  C0DC  F011         	movff	infusion@act_pos,handle_actuator_push@act_pos
  2822   000634  C0DD  F012         	movff	infusion@act_pos+1,handle_actuator_push@act_pos+1
  2823   000638  ECD2  F006         	call	_handle_actuator_push	;wreg free
  2824   00063C  0012               	return		;funcret
  2825   00063E                     __end_of_infusion:
  2826                           	callstack 0
  2827                           
  2828 ;; *************** function _sprintf *****************
  2829 ;; Defined at:
  2830 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_sprintf.c"
  2831 ;; Parameters:    Size  Location     Type
  2832 ;;  s               1   78[COMRAM] PTR unsigned char 
  2833 ;;		 -> infusion@buff(5), 
  2834 ;;  fmt             2   79[COMRAM] PTR const unsigned char 
  2835 ;;		 -> STR_38(3), STR_36(4), STR_34(4), STR_32(4), 
  2836 ;; Auto vars:     Size  Location     Type
  2837 ;;  f              12   86[COMRAM] struct _IO_FILE
  2838 ;;  ret             2    0        int 
  2839 ;;  ap              1   85[COMRAM] PTR void [1]
  2840 ;;		 -> ?_sprintf(2), 
  2841 ;; Return value:  Size  Location     Type
  2842 ;;                  2   78[COMRAM] int 
  2843 ;; Registers used:
  2844 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2845 ;; Tracked objects:
  2846 ;;		On entry : 0/0
  2847 ;;		On exit  : 0/0
  2848 ;;		Unchanged: 0/0
  2849 ;; Data sizes:     COMRAM   BANK0   BANK1
  2850 ;;      Params:         7       0       0
  2851 ;;      Locals:        13       0       0
  2852 ;;      Temps:          0       0       0
  2853 ;;      Totals:        20       0       0
  2854 ;;Total ram usage:       20 bytes
  2855 ;; Hardware stack levels used: 1
  2856 ;; Hardware stack levels required when called: 6
  2857 ;; This function calls:
  2858 ;;		_vfprintf
  2859 ;; This function is called by:
  2860 ;;		_infusion
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           	psect	text11
  2865   0018FC                     __ptext11:
  2866                           	callstack 0
  2867   0018FC                     _sprintf:
  2868                           	callstack 22
  2869                           
  2870                           ;incstack = 0
  2871   0018FC  0E52               	movlw	low (?_sprintf+3)
  2872   0018FE  6E56               	movwf	sprintf@ap^0,c
  2873   001900  C04F  F057         	movff	sprintf@s,sprintf@f
  2874   001904  0E00               	movlw	0
  2875   001906  6E5B               	movwf	(sprintf@f+4)^0,c
  2876   001908  0E00               	movlw	0
  2877   00190A  6E5A               	movwf	(sprintf@f+3)^0,c
  2878   00190C  0E00               	movlw	0
  2879   00190E  6E62               	movwf	(sprintf@f+11)^0,c
  2880   001910  0E00               	movlw	0
  2881   001912  6E61               	movwf	(sprintf@f+10)^0,c
  2882   001914  0E57               	movlw	low sprintf@f
  2883   001916  6E49               	movwf	vfprintf@fp^0,c
  2884   001918  C050  F04A         	movff	sprintf@fmt,vfprintf@fmt
  2885   00191C  C051  F04B         	movff	sprintf@fmt+1,vfprintf@fmt+1
  2886   001920  0E56               	movlw	low sprintf@ap
  2887   001922  6E4C               	movwf	vfprintf@ap^0,c
  2888   001924  ECD2  F00C         	call	_vfprintf	;wreg free
  2889   001928  504F               	movf	sprintf@s^0,w,c
  2890   00192A  245A               	addwf	(sprintf@f+3)^0,w,c
  2891   00192C  6ED9               	movwf	fsr2l,c
  2892   00192E  6ADA               	clrf	fsr2h,c
  2893   001930  6ADF               	clrf	indf2,c
  2894   001932  0012               	return		;funcret
  2895   001934                     __end_of_sprintf:
  2896                           	callstack 0
  2897                           
  2898 ;; *************** function _vfprintf *****************
  2899 ;; Defined at:
  2900 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  2901 ;; Parameters:    Size  Location     Type
  2902 ;;  fp              1   72[COMRAM] PTR struct _IO_FILE
  2903 ;;		 -> sprintf@f(12), 
  2904 ;;  fmt             2   73[COMRAM] PTR const unsigned char 
  2905 ;;		 -> STR_38(3), STR_36(4), STR_34(4), STR_32(4), 
  2906 ;;  ap              1   75[COMRAM] PTR PTR void 
  2907 ;;		 -> sprintf@ap(1), 
  2908 ;; Auto vars:     Size  Location     Type
  2909 ;;  cfmt            2   76[COMRAM] PTR unsigned char 
  2910 ;;		 -> STR_38(3), STR_36(4), STR_34(4), STR_32(4), 
  2911 ;; Return value:  Size  Location     Type
  2912 ;;                  2   72[COMRAM] int 
  2913 ;; Registers used:
  2914 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2915 ;; Tracked objects:
  2916 ;;		On entry : 0/0
  2917 ;;		On exit  : 0/0
  2918 ;;		Unchanged: 0/0
  2919 ;; Data sizes:     COMRAM   BANK0   BANK1
  2920 ;;      Params:         4       0       0
  2921 ;;      Locals:         2       0       0
  2922 ;;      Temps:          0       0       0
  2923 ;;      Totals:         6       0       0
  2924 ;;Total ram usage:        6 bytes
  2925 ;; Hardware stack levels used: 1
  2926 ;; Hardware stack levels required when called: 5
  2927 ;; This function calls:
  2928 ;;		_vfpfcnvrt
  2929 ;; This function is called by:
  2930 ;;		_sprintf
  2931 ;; This function uses a non-reentrant model
  2932 ;;
  2933                           
  2934                           	psect	text12
  2935   0019A4                     __ptext12:
  2936                           	callstack 0
  2937   0019A4                     _vfprintf:
  2938                           	callstack 22
  2939                           
  2940                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  2941                           
  2942                           ;incstack = 0
  2943   0019A4  C04A  F04D         	movff	vfprintf@fmt,vfprintf@cfmt
  2944   0019A8  C04B  F04E         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2945                           
  2946                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2947   0019AC  D008               	goto	l4765
  2948   0019AE                     l4763:
  2949                           
  2950                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2951   0019AE  C049  F03C         	movff	vfprintf@fp,vfpfcnvrt@fp
  2952   0019B2  0E4D               	movlw	low vfprintf@cfmt
  2953   0019B4  6E3D               	movwf	vfpfcnvrt@fmt^0,c
  2954   0019B6  C04C  F03E         	movff	vfprintf@ap,vfpfcnvrt@ap
  2955   0019BA  EC51  F004         	call	_vfpfcnvrt	;wreg free
  2956   0019BE                     l4765:
  2957                           
  2958                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2959   0019BE  C04D  FFF6         	movff	vfprintf@cfmt,tblptrl
  2960   0019C2  C04E  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2961   0019C6                     	if	0	;tblptru may be non-zero
  2962   0019C6                     	endif
  2963   0019C6                     	if	0	;tblptru may be non-zero
  2964   0019C6                     	endif
  2965   0019C6  0008               	tblrd		*
  2966   0019C8  50F5               	movf	tablat,w,c
  2967   0019CA  0900               	iorlw	0
  2968   0019CC  A4D8               	btfss	status,2,c
  2969   0019CE  D7EF               	goto	l4763
  2970                           
  2971                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  2972   0019D0  0E00               	movlw	0
  2973   0019D2  6E4A               	movwf	(?_vfprintf+1)^0,c
  2974   0019D4  0E00               	movlw	0
  2975   0019D6  6E49               	movwf	?_vfprintf^0,c
  2976   0019D8  0012               	return		;funcret
  2977   0019DA                     __end_of_vfprintf:
  2978                           	callstack 0
  2979                           
  2980 ;; *************** function _vfpfcnvrt *****************
  2981 ;; Defined at:
  2982 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c"
  2983 ;; Parameters:    Size  Location     Type
  2984 ;;  fp              1   59[COMRAM] PTR struct _IO_FILE
  2985 ;;		 -> sprintf@f(12), 
  2986 ;;  fmt             1   60[COMRAM] PTR PTR unsigned char 
  2987 ;;		 -> vfprintf@cfmt(2), 
  2988 ;;  ap              1   61[COMRAM] PTR PTR void 
  2989 ;;		 -> sprintf@ap(1), 
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;  convarg         4   67[COMRAM] struct .
  2992 ;;  cp              2   65[COMRAM] PTR unsigned char 
  2993 ;;		 -> STR_38(3), STR_36(4), STR_34(4), STR_32(4), 
  2994 ;;  c               1   71[COMRAM] unsigned char 
  2995 ;;  done            1   64[COMRAM] _Bool 
  2996 ;; Return value:  Size  Location     Type
  2997 ;;                  1    wreg      void 
  2998 ;; Registers used:
  2999 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3000 ;; Tracked objects:
  3001 ;;		On entry : 0/0
  3002 ;;		On exit  : 0/0
  3003 ;;		Unchanged: 0/0
  3004 ;; Data sizes:     COMRAM   BANK0   BANK1
  3005 ;;      Params:         3       0       0
  3006 ;;      Locals:         8       0       0
  3007 ;;      Temps:          2       0       0
  3008 ;;      Totals:        13       0       0
  3009 ;;Total ram usage:       13 bytes
  3010 ;; Hardware stack levels used: 1
  3011 ;; Hardware stack levels required when called: 4
  3012 ;; This function calls:
  3013 ;;		___aldiv
  3014 ;;		___almod
  3015 ;;		_abs
  3016 ;;		_fputc
  3017 ;; This function is called by:
  3018 ;;		_vfprintf
  3019 ;; This function uses a non-reentrant model
  3020 ;;
  3021                           
  3022                           	psect	text13
  3023   0008A2                     __ptext13:
  3024                           	callstack 0
  3025   0008A2                     _vfpfcnvrt:
  3026                           	callstack 22
  3027                           
  3028                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  3029                           
  3030                           ;incstack = 0
  3031   0008A2  503D               	movf	vfpfcnvrt@fmt^0,w,c
  3032   0008A4  6ED9               	movwf	fsr2l,c
  3033   0008A6  6ADA               	clrf	fsr2h,c
  3034   0008A8  CFDE FFF6          	movff	postinc2,tblptrl
  3035   0008AC  CFDD FFF7          	movff	postdec2,tblptrh
  3036   0008B0                     	if	0	;tblptru may be non-zero
  3037   0008B0                     	endif
  3038   0008B0                     	if	0	;tblptru may be non-zero
  3039   0008B0                     	endif
  3040   0008B0  0008               	tblrd		*
  3041   0008B2  50F5               	movf	tablat,w,c
  3042   0008B4  0A25               	xorlw	37
  3043   0008B6  A4D8               	btfss	status,2,c
  3044   0008B8  D0EE               	goto	l4601
  3045                           
  3046                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  3047   0008BA  503D               	movf	vfpfcnvrt@fmt^0,w,c
  3048   0008BC  6ED9               	movwf	fsr2l,c
  3049   0008BE  6ADA               	clrf	fsr2h,c
  3050   0008C0  2ADE               	incf	postinc2,f,c
  3051   0008C2  0E00               	movlw	0
  3052   0008C4  22DD               	addwfc	postdec2,f,c
  3053                           
  3054                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  3055   0008C6  0E00               	movlw	0
  3056   0008C8  0100               	movlb	0	; () banked
  3057   0008CA  6FA9               	movwf	(_width+1)& (0+255),b
  3058   0008CC  0E00               	movlw	0
  3059   0008CE  6FA8               	movwf	_width& (0+255),b
  3060   0008D0  C0A8  F079         	movff	_width,_flags
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  3064   0008D4  69AA               	setf	_prec& (0+255),b
  3065   0008D6  69AB               	setf	(_prec+1)& (0+255),b
  3066                           
  3067                           ; BSR set to: 0
  3068                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  3069   0008D8  503D               	movf	vfpfcnvrt@fmt^0,w,c
  3070   0008DA  6ED9               	movwf	fsr2l,c
  3071   0008DC  6ADA               	clrf	fsr2h,c
  3072   0008DE  CFDE F042          	movff	postinc2,vfpfcnvrt@cp
  3073   0008E2  CFDD F043          	movff	postdec2,vfpfcnvrt@cp+1
  3074                           
  3075                           ; BSR set to: 0
  3076                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1293:   c = *cp;
  3077   0008E6  C042  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3078   0008EA  C043  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  3079   0008EE                     	if	0	;tblptru may be non-zero
  3080   0008EE                     	endif
  3081   0008EE                     	if	0	;tblptru may be non-zero
  3082   0008EE                     	endif
  3083   0008EE  0008               	tblrd		*
  3084   0008F0  CFF5 F048          	movff	tablat,vfpfcnvrt@c
  3085                           
  3086                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1294:   switch(c)
      +                           {
  3087   0008F4  D008               	goto	l4557
  3088   0008F6                     l4549:
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1309:     cp++;
  3092   0008F6  4A42               	infsnz	vfpfcnvrt@cp^0,f,c
  3093   0008F8  2A43               	incf	(vfpfcnvrt@cp+1)^0,f,c
  3094                           
  3095                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1316:     break;
  3096   0008FA  D010               	goto	l4559
  3097   0008FC                     l4551:
  3098                           
  3099                           ; BSR set to: 0
  3100                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1350:     c = 'i'
      +                          ;
  3101   0008FC  0E69               	movlw	105
  3102   0008FE  D001               	goto	L3
  3103   000900                     l4553:
  3104                           
  3105                           ; BSR set to: 0
  3106                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1353:     c = 0;
  3107   000900  0E00               	movlw	0
  3108   000902                     L3:
  3109   000902  6E48               	movwf	vfpfcnvrt@c^0,c
  3110                           
  3111                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1354:     break;
  3112   000904  D00B               	goto	l4559
  3113   000906                     l4557:
  3114                           
  3115                           ; BSR set to: 0
  3116   000906  5048               	movf	vfpfcnvrt@c^0,w,c
  3117                           
  3118                           ; Switch size 1, requested type "simple"
  3119                           ; Number of cases is 3, Range of values is 100 to 108
  3120                           ; switch strategies available:
  3121                           ; Name         Instructions Cycles
  3122                           ; simple_byte           10     6 (average)
  3123                           ;	Chosen strategy is simple_byte
  3124   000908  0A64               	xorlw	100	; case 100
  3125   00090A  B4D8               	btfsc	status,2,c
  3126   00090C  D7F7               	goto	l4551
  3127   00090E  0A0D               	xorlw	13	; case 105
  3128   000910  B4D8               	btfsc	status,2,c
  3129   000912  D7F4               	goto	l4551
  3130   000914  0A05               	xorlw	5	; case 108
  3131   000916  B4D8               	btfsc	status,2,c
  3132   000918  D7EE               	goto	l4549
  3133   00091A  D7F2               	goto	l4553
  3134   00091C                     l4559:
  3135                           
  3136                           ; BSR set to: 0
  3137                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  3138   00091C  C042  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3139   000920  C043  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  3140   000924                     	if	0	;tblptru may be non-zero
  3141   000924                     	endif
  3142   000924                     	if	0	;tblptru may be non-zero
  3143   000924                     	endif
  3144   000924  0008               	tblrd		*
  3145   000926  50F5               	movf	tablat,w,c
  3146   000928  0A64               	xorlw	100
  3147   00092A  B4D8               	btfsc	status,2,c
  3148   00092C  D02D               	goto	l4569
  3149                           
  3150                           ; BSR set to: 0
  3151   00092E  C042  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  3152   000932  C043  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  3153   000936                     	if	0	;tblptru may be non-zero
  3154   000936                     	endif
  3155   000936                     	if	0	;tblptru may be non-zero
  3156   000936                     	endif
  3157   000936  0008               	tblrd		*
  3158   000938  50F5               	movf	tablat,w,c
  3159   00093A  0A69               	xorlw	105
  3160   00093C  B4D8               	btfsc	status,2,c
  3161   00093E  D024               	goto	l4569
  3162   000940  D0A3               	goto	l4597
  3163   000942                     l4563:
  3164                           
  3165                           ; BSR set to: 0
  3166                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1365:      convar
      +                          g.sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  3167   000942  503E               	movf	vfpfcnvrt@ap^0,w,c
  3168   000944  6ED9               	movwf	fsr2l,c
  3169   000946  6ADA               	clrf	fsr2h,c
  3170   000948  50DF               	movf	indf2,w,c
  3171   00094A  2ADF               	incf	indf2,f,c
  3172   00094C  2ADF               	incf	indf2,f,c
  3173   00094E  6ED9               	movwf	fsr2l,c
  3174   000950  6ADA               	clrf	fsr2h,c
  3175   000952  CFDE F044          	movff	postinc2,vfpfcnvrt@convarg
  3176   000956  CFDD F045          	movff	postdec2,vfpfcnvrt@convarg+1
  3177   00095A  0E00               	movlw	0
  3178   00095C  BE45               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  3179   00095E  0EFF               	movlw	-1
  3180   000960  6E46               	movwf	(vfpfcnvrt@convarg+2)^0,c
  3181   000962  6E47               	movwf	(vfpfcnvrt@convarg+3)^0,c
  3182                           
  3183                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1366:      break;
  3184   000964  D018               	goto	l4571
  3185   000966                     l4565:
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1379:      convar
      +                          g.sint = (vfpf_sint_t)(*(long *)__va_arg(*(long **)ap, (long)0));
  3189   000966  503E               	movf	vfpfcnvrt@ap^0,w,c
  3190   000968  6ED9               	movwf	fsr2l,c
  3191   00096A  6ADA               	clrf	fsr2h,c
  3192   00096C  0E04               	movlw	4
  3193   00096E  26DF               	addwf	indf2,f,c
  3194   000970  5CDF               	subwf	indf2,w,c
  3195   000972  6ED9               	movwf	fsr2l,c
  3196   000974  6ADA               	clrf	fsr2h,c
  3197   000976  CFDE F044          	movff	postinc2,vfpfcnvrt@convarg
  3198   00097A  CFDE F045          	movff	postinc2,vfpfcnvrt@convarg+1
  3199   00097E  CFDE F046          	movff	postinc2,vfpfcnvrt@convarg+2
  3200   000982  CFDE F047          	movff	postinc2,vfpfcnvrt@convarg+3
  3201                           
  3202                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1380:      break;
  3203   000986  D007               	goto	l4571
  3204   000988                     l4569:
  3205                           
  3206                           ; BSR set to: 0
  3207   000988  5048               	movf	vfpfcnvrt@c^0,w,c
  3208                           
  3209                           ; Switch size 1, requested type "simple"
  3210                           ; Number of cases is 2, Range of values is 105 to 108
  3211                           ; switch strategies available:
  3212                           ; Name         Instructions Cycles
  3213                           ; simple_byte            7     4 (average)
  3214                           ;	Chosen strategy is simple_byte
  3215   00098A  0A69               	xorlw	105	; case 105
  3216   00098C  B4D8               	btfsc	status,2,c
  3217   00098E  D7D9               	goto	l4563
  3218   000990  0A05               	xorlw	5	; case 108
  3219   000992  B4D8               	btfsc	status,2,c
  3220   000994  D7E8               	goto	l4565
  3221   000996                     l4571:
  3222                           
  3223                           ; BSR set to: 0
  3224                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  3225   000996  0E01               	movlw	1
  3226   000998  2442               	addwf	vfpfcnvrt@cp^0,w,c
  3227   00099A  6E3F               	movwf	??_vfpfcnvrt^0,c
  3228   00099C  0E00               	movlw	0
  3229   00099E  2043               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  3230   0009A0  6E40               	movwf	(??_vfpfcnvrt+1)^0,c
  3231   0009A2  503D               	movf	vfpfcnvrt@fmt^0,w,c
  3232   0009A4  6ED9               	movwf	fsr2l,c
  3233   0009A6  6ADA               	clrf	fsr2h,c
  3234   0009A8  C03F  FFDE         	movff	??_vfpfcnvrt,postinc2
  3235   0009AC  C040  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  3236                           
  3237                           ; BSR set to: 0
  3238                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  3239   0009B0  0E20               	movlw	32
  3240   0009B2  6E48               	movwf	vfpfcnvrt@c^0,c
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  3244   0009B4  AE47               	btfss	(vfpfcnvrt@convarg+3)^0,7,c
  3245   0009B6  D002               	goto	u4410
  3246   0009B8  0E01               	movlw	1
  3247   0009BA  D001               	goto	u4420
  3248   0009BC                     u4410:
  3249   0009BC  0E00               	movlw	0
  3250   0009BE                     u4420:
  3251   0009BE  6E41               	movwf	vfpfcnvrt@done^0,c
  3252   0009C0                     l4577:
  3253                           
  3254                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  3255   0009C0  0648               	decf	vfpfcnvrt@c^0,f,c
  3256   0009C2  5048               	movf	vfpfcnvrt@c^0,w,c
  3257   0009C4  0F80               	addlw	low _dbuf
  3258   0009C6  6ED9               	movwf	fsr2l,c
  3259   0009C8  6ADA               	clrf	fsr2h,c
  3260   0009CA  C044  F005         	movff	vfpfcnvrt@convarg,___almod@dividend
  3261   0009CE  C045  F006         	movff	vfpfcnvrt@convarg+1,___almod@dividend+1
  3262   0009D2  C046  F007         	movff	vfpfcnvrt@convarg+2,___almod@dividend+2
  3263   0009D6  C047  F008         	movff	vfpfcnvrt@convarg+3,___almod@dividend+3
  3264   0009DA  0E0A               	movlw	10
  3265   0009DC  6E09               	movwf	___almod@divisor^0,c
  3266   0009DE  0E00               	movlw	0
  3267   0009E0  6E0A               	movwf	(___almod@divisor+1)^0,c
  3268   0009E2  0E00               	movlw	0
  3269   0009E4  6E0B               	movwf	(___almod@divisor+2)^0,c
  3270   0009E6  0E00               	movlw	0
  3271   0009E8  6E0C               	movwf	(___almod@divisor+3)^0,c
  3272   0009EA  EC37  F007         	call	___almod	;wreg free
  3273   0009EE  C005  F00F         	movff	?___almod,abs@a
  3274   0009F2  C006  F010         	movff	?___almod+1,abs@a+1
  3275   0009F6  EC17  F00D         	call	_abs	;wreg free
  3276   0009FA  500F               	movf	?_abs^0,w,c
  3277   0009FC  0F30               	addlw	48
  3278   0009FE  6EDF               	movwf	indf2,c
  3279                           
  3280                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  3281   000A00  C044  F02E         	movff	vfpfcnvrt@convarg,___aldiv@dividend
  3282   000A04  C045  F02F         	movff	vfpfcnvrt@convarg+1,___aldiv@dividend+1
  3283   000A08  C046  F030         	movff	vfpfcnvrt@convarg+2,___aldiv@dividend+2
  3284   000A0C  C047  F031         	movff	vfpfcnvrt@convarg+3,___aldiv@dividend+3
  3285   000A10  0E0A               	movlw	10
  3286   000A12  6E32               	movwf	___aldiv@divisor^0,c
  3287   000A14  0E00               	movlw	0
  3288   000A16  6E33               	movwf	(___aldiv@divisor+1)^0,c
  3289   000A18  0E00               	movlw	0
  3290   000A1A  6E34               	movwf	(___aldiv@divisor+2)^0,c
  3291   000A1C  0E00               	movlw	0
  3292   000A1E  6E35               	movwf	(___aldiv@divisor+3)^0,c
  3293   000A20  EC6C  F006         	call	___aldiv	;wreg free
  3294   000A24  C02E  F044         	movff	?___aldiv,vfpfcnvrt@convarg
  3295   000A28  C02F  F045         	movff	?___aldiv+1,vfpfcnvrt@convarg+1
  3296   000A2C  C030  F046         	movff	?___aldiv+2,vfpfcnvrt@convarg+2
  3297   000A30  C031  F047         	movff	?___aldiv+3,vfpfcnvrt@convarg+3
  3298                           
  3299                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  3300   000A34  5044               	movf	vfpfcnvrt@convarg^0,w,c
  3301   000A36  1045               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  3302   000A38  1046               	iorwf	(vfpfcnvrt@convarg+2)^0,w,c
  3303   000A3A  1047               	iorwf	(vfpfcnvrt@convarg+3)^0,w,c
  3304   000A3C  B4D8               	btfsc	status,2,c
  3305   000A3E  D003               	goto	u4440
  3306   000A40  5048               	movf	vfpfcnvrt@c^0,w,c
  3307   000A42  A4D8               	btfss	status,2,c
  3308   000A44  D7BD               	goto	l4577
  3309   000A46                     u4440:
  3310                           
  3311                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  3312   000A46  5048               	movf	vfpfcnvrt@c^0,w,c
  3313   000A48  B4D8               	btfsc	status,2,c
  3314   000A4A  D019               	goto	l4595
  3315   000A4C  5041               	movf	vfpfcnvrt@done^0,w,c
  3316   000A4E  B4D8               	btfsc	status,2,c
  3317   000A50  D016               	goto	l4595
  3318                           
  3319                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  3320   000A52  0648               	decf	vfpfcnvrt@c^0,f,c
  3321   000A54  5048               	movf	vfpfcnvrt@c^0,w,c
  3322   000A56  0F80               	addlw	low _dbuf
  3323   000A58  6ED9               	movwf	fsr2l,c
  3324   000A5A  6ADA               	clrf	fsr2h,c
  3325   000A5C  0E2D               	movlw	45
  3326   000A5E  6EDF               	movwf	indf2,c
  3327   000A60  D00E               	goto	l4595
  3328   000A62                     l4591:
  3329                           
  3330                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  3331   000A62  5048               	movf	vfpfcnvrt@c^0,w,c
  3332   000A64  0F80               	addlw	low _dbuf
  3333   000A66  6ED9               	movwf	fsr2l,c
  3334   000A68  6ADA               	clrf	fsr2h,c
  3335   000A6A  50DF               	movf	indf2,w,c
  3336   000A6C  6E3F               	movwf	??_vfpfcnvrt^0,c
  3337   000A6E  503F               	movf	??_vfpfcnvrt^0,w,c
  3338   000A70  6E05               	movwf	fputc@c^0,c
  3339   000A72  6A06               	clrf	(fputc@c+1)^0,c
  3340   000A74  C03C  F007         	movff	vfpfcnvrt@fp,fputc@fp
  3341   000A78  EC90  F009         	call	_fputc	;wreg free
  3342   000A7C  2A48               	incf	vfpfcnvrt@c^0,f,c
  3343   000A7E                     l4595:
  3344                           
  3345                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  3346   000A7E  0E20               	movlw	32
  3347   000A80  1848               	xorwf	vfpfcnvrt@c^0,w,c
  3348   000A82  B4D8               	btfsc	status,2,c
  3349   000A84  0012               	return	
  3350   000A86  D7ED               	goto	l4591
  3351   000A88                     l4597:
  3352                           
  3353                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  3354   000A88  503D               	movf	vfpfcnvrt@fmt^0,w,c
  3355   000A8A  6ED9               	movwf	fsr2l,c
  3356   000A8C  6ADA               	clrf	fsr2h,c
  3357   000A8E  2ADE               	incf	postinc2,f,c
  3358   000A90  0E00               	movlw	0
  3359   000A92  22DD               	addwfc	postdec2,f,c
  3360   000A94  0012               	return	
  3361   000A96                     l4601:
  3362                           
  3363                           ;C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  3364   000A96  503D               	movf	vfpfcnvrt@fmt^0,w,c
  3365   000A98  6ED9               	movwf	fsr2l,c
  3366   000A9A  6ADA               	clrf	fsr2h,c
  3367   000A9C  CFDE FFF6          	movff	postinc2,tblptrl
  3368   000AA0  CFDD FFF7          	movff	postdec2,tblptrh
  3369   000AA4                     	if	0	;tblptru may be non-zero
  3370   000AA4                     	endif
  3371   000AA4                     	if	0	;tblptru may be non-zero
  3372   000AA4                     	endif
  3373   000AA4  0008               	tblrd		*
  3374   000AA6  50F5               	movf	tablat,w,c
  3375   000AA8  6E05               	movwf	fputc@c^0,c
  3376   000AAA  6A06               	clrf	(fputc@c+1)^0,c
  3377   000AAC  C03C  F007         	movff	vfpfcnvrt@fp,fputc@fp
  3378   000AB0  EC90  F009         	call	_fputc	;wreg free
  3379   000AB4  D7E9               	goto	l4597
  3380   000AB6                     __end_of_vfpfcnvrt:
  3381                           	callstack 0
  3382                           
  3383 ;; *************** function _fputc *****************
  3384 ;; Defined at:
  3385 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\nf_fputc.c"
  3386 ;; Parameters:    Size  Location     Type
  3387 ;;  c               2    4[COMRAM] int 
  3388 ;;  fp              1    6[COMRAM] PTR struct _IO_FILE
  3389 ;;		 -> sprintf@f(12), 
  3390 ;; Auto vars:     Size  Location     Type
  3391 ;;		None
  3392 ;; Return value:  Size  Location     Type
  3393 ;;                  2    4[COMRAM] int 
  3394 ;; Registers used:
  3395 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3396 ;; Tracked objects:
  3397 ;;		On entry : 0/0
  3398 ;;		On exit  : 0/0
  3399 ;;		Unchanged: 0/0
  3400 ;; Data sizes:     COMRAM   BANK0   BANK1
  3401 ;;      Params:         3       0       0
  3402 ;;      Locals:         0       0       0
  3403 ;;      Temps:          5       0       0
  3404 ;;      Totals:         8       0       0
  3405 ;;Total ram usage:        8 bytes
  3406 ;; Hardware stack levels used: 1
  3407 ;; Hardware stack levels required when called: 3
  3408 ;; This function calls:
  3409 ;;		_putch
  3410 ;; This function is called by:
  3411 ;;		_vfpfcnvrt
  3412 ;; This function uses a non-reentrant model
  3413 ;;
  3414                           
  3415                           	psect	text14
  3416   001320                     __ptext14:
  3417                           	callstack 0
  3418   001320                     _fputc:
  3419                           	callstack 22
  3420                           
  3421                           ;incstack = 0
  3422   001320  5007               	movf	fputc@fp^0,w,c
  3423   001322  B4D8               	btfsc	status,2,c
  3424   001324  D003               	goto	u4080
  3425   001326  5007               	movf	fputc@fp^0,w,c
  3426   001328  A4D8               	btfss	status,2,c
  3427   00132A  D004               	goto	l4373
  3428   00132C                     u4080:
  3429   00132C  5005               	movf	fputc@c^0,w,c
  3430   00132E  ECB5  F00D         	call	_putch
  3431   001332  0012               	return	
  3432   001334                     l4373:
  3433   001334  5007               	movf	fputc@fp^0,w,c
  3434   001336  6ED9               	movwf	fsr2l,c
  3435   001338  6ADA               	clrf	fsr2h,c
  3436   00133A  0E0A               	movlw	10
  3437   00133C  26D9               	addwf	fsr2l,f,c
  3438   00133E  50DE               	movf	postinc2,w,c
  3439   001340  10DE               	iorwf	postinc2,w,c
  3440   001342  B4D8               	btfsc	status,2,c
  3441   001344  D014               	goto	u4100
  3442   001346  5007               	movf	fputc@fp^0,w,c
  3443   001348  6ED9               	movwf	fsr2l,c
  3444   00134A  6ADA               	clrf	fsr2h,c
  3445   00134C  0E0A               	movlw	10
  3446   00134E  26D9               	addwf	fsr2l,f,c
  3447   001350  5007               	movf	fputc@fp^0,w,c
  3448   001352  6EE1               	movwf	fsr1l,c
  3449   001354  6AE2               	clrf	fsr1h,c
  3450   001356  0E03               	movlw	3
  3451   001358  26E1               	addwf	fsr1l,f,c
  3452   00135A  50DE               	movf	postinc2,w,c
  3453   00135C  5CE6               	subwf	postinc1,w,c
  3454   00135E  50E6               	movf	postinc1,w,c
  3455   001360  0A80               	xorlw	128
  3456   001362  6E0C               	movwf	(??_fputc+4)^0,c
  3457   001364  50DE               	movf	postinc2,w,c
  3458   001366  0A80               	xorlw	128
  3459   001368  580C               	subwfb	(??_fputc+4)^0,w,c
  3460   00136A  B0D8               	btfsc	status,0,c
  3461   00136C  0012               	return	
  3462   00136E                     u4100:
  3463   00136E  5007               	movf	fputc@fp^0,w,c
  3464   001370  6ED9               	movwf	fsr2l,c
  3465   001372  6ADA               	clrf	fsr2h,c
  3466   001374  0E03               	movlw	3
  3467   001376  26D9               	addwf	fsr2l,f,c
  3468   001378  50DF               	movf	indf2,w,c
  3469   00137A  6E08               	movwf	??_fputc^0,c
  3470   00137C  5007               	movf	fputc@fp^0,w,c
  3471   00137E  6ED9               	movwf	fsr2l,c
  3472   001380  6ADA               	clrf	fsr2h,c
  3473   001382  50DF               	movf	indf2,w,c
  3474   001384  2408               	addwf	??_fputc^0,w,c
  3475   001386  6ED9               	movwf	fsr2l,c
  3476   001388  6ADA               	clrf	fsr2h,c
  3477   00138A  C005  FFDF         	movff	fputc@c,indf2
  3478   00138E  5007               	movf	fputc@fp^0,w,c
  3479   001390  6ED9               	movwf	fsr2l,c
  3480   001392  6ADA               	clrf	fsr2h,c
  3481   001394  0E03               	movlw	3
  3482   001396  26D9               	addwf	fsr2l,f,c
  3483   001398  2ADE               	incf	postinc2,f,c
  3484   00139A  0E00               	movlw	0
  3485   00139C  22DD               	addwfc	postdec2,f,c
  3486   00139E  0012               	return		;funcret
  3487   0013A0                     __end_of_fputc:
  3488                           	callstack 0
  3489                           
  3490 ;; *************** function _putch *****************
  3491 ;; Defined at:
  3492 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\putch.c"
  3493 ;; Parameters:    Size  Location     Type
  3494 ;;  c               1    wreg     unsigned char 
  3495 ;; Auto vars:     Size  Location     Type
  3496 ;;  c               1    0[COMRAM] unsigned char 
  3497 ;; Return value:  Size  Location     Type
  3498 ;;                  1    wreg      void 
  3499 ;; Registers used:
  3500 ;;		wreg
  3501 ;; Tracked objects:
  3502 ;;		On entry : 0/0
  3503 ;;		On exit  : 0/0
  3504 ;;		Unchanged: 0/0
  3505 ;; Data sizes:     COMRAM   BANK0   BANK1
  3506 ;;      Params:         0       0       0
  3507 ;;      Locals:         0       0       0
  3508 ;;      Temps:          0       0       0
  3509 ;;      Totals:         0       0       0
  3510 ;;Total ram usage:        0 bytes
  3511 ;; Hardware stack levels used: 1
  3512 ;; Hardware stack levels required when called: 2
  3513 ;; This function calls:
  3514 ;;		Nothing
  3515 ;; This function is called by:
  3516 ;;		_fputc
  3517 ;; This function uses a non-reentrant model
  3518 ;;
  3519                           
  3520                           	psect	text15
  3521   001B6A                     __ptext15:
  3522                           	callstack 0
  3523   001B6A                     _putch:
  3524                           	callstack 22
  3525                           
  3526                           ;incstack = 0
  3527   001B6A  0012               	return		;funcret
  3528   001B6C                     __end_of_putch:
  3529                           	callstack 0
  3530                           
  3531 ;; *************** function _abs *****************
  3532 ;; Defined at:
  3533 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\abs.c"
  3534 ;; Parameters:    Size  Location     Type
  3535 ;;  a               2   14[COMRAM] int 
  3536 ;; Auto vars:     Size  Location     Type
  3537 ;;		None
  3538 ;; Return value:  Size  Location     Type
  3539 ;;                  2   14[COMRAM] int 
  3540 ;; Registers used:
  3541 ;;		wreg, status,2, status,0
  3542 ;; Tracked objects:
  3543 ;;		On entry : 0/0
  3544 ;;		On exit  : 0/0
  3545 ;;		Unchanged: 0/0
  3546 ;; Data sizes:     COMRAM   BANK0   BANK1
  3547 ;;      Params:         2       0       0
  3548 ;;      Locals:         0       0       0
  3549 ;;      Temps:          2       0       0
  3550 ;;      Totals:         4       0       0
  3551 ;;Total ram usage:        4 bytes
  3552 ;; Hardware stack levels used: 1
  3553 ;; Hardware stack levels required when called: 2
  3554 ;; This function calls:
  3555 ;;		Nothing
  3556 ;; This function is called by:
  3557 ;;		_vfpfcnvrt
  3558 ;; This function uses a non-reentrant model
  3559 ;;
  3560                           
  3561                           	psect	text16
  3562   001A2E                     __ptext16:
  3563                           	callstack 0
  3564   001A2E                     _abs:
  3565                           	callstack 23
  3566                           
  3567                           ;incstack = 0
  3568   001A2E  BE10               	btfsc	(abs@a+1)^0,7,c
  3569   001A30  D005               	goto	l1335
  3570   001A32  C00F  F00F         	movff	abs@a,?_abs
  3571   001A36  C010  F010         	movff	abs@a+1,?_abs+1
  3572   001A3A  0012               	return	
  3573   001A3C                     l1335:
  3574   001A3C  C00F  F011         	movff	abs@a,??_abs
  3575   001A40  C010  F012         	movff	abs@a+1,??_abs+1
  3576   001A44  1E11               	comf	??_abs^0,f,c
  3577   001A46  1E12               	comf	(??_abs+1)^0,f,c
  3578   001A48  4A11               	infsnz	??_abs^0,f,c
  3579   001A4A  2A12               	incf	(??_abs+1)^0,f,c
  3580   001A4C  C011  F00F         	movff	??_abs,?_abs
  3581   001A50  C012  F010         	movff	??_abs+1,?_abs+1
  3582   001A54  0012               	return		;funcret
  3583   001A56                     __end_of_abs:
  3584                           	callstack 0
  3585                           
  3586 ;; *************** function ___almod *****************
  3587 ;; Defined at:
  3588 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\almod.c"
  3589 ;; Parameters:    Size  Location     Type
  3590 ;;  dividend        4    4[COMRAM] long 
  3591 ;;  divisor         4    8[COMRAM] long 
  3592 ;; Auto vars:     Size  Location     Type
  3593 ;;  sign            1   13[COMRAM] unsigned char 
  3594 ;;  counter         1   12[COMRAM] unsigned char 
  3595 ;; Return value:  Size  Location     Type
  3596 ;;                  4    4[COMRAM] long 
  3597 ;; Registers used:
  3598 ;;		wreg, status,2, status,0
  3599 ;; Tracked objects:
  3600 ;;		On entry : 0/0
  3601 ;;		On exit  : 0/0
  3602 ;;		Unchanged: 0/0
  3603 ;; Data sizes:     COMRAM   BANK0   BANK1
  3604 ;;      Params:         8       0       0
  3605 ;;      Locals:         2       0       0
  3606 ;;      Temps:          0       0       0
  3607 ;;      Totals:        10       0       0
  3608 ;;Total ram usage:       10 bytes
  3609 ;; Hardware stack levels used: 1
  3610 ;; Hardware stack levels required when called: 2
  3611 ;; This function calls:
  3612 ;;		Nothing
  3613 ;; This function is called by:
  3614 ;;		_vfpfcnvrt
  3615 ;; This function uses a non-reentrant model
  3616 ;;
  3617                           
  3618                           	psect	text17
  3619   000E6E                     __ptext17:
  3620                           	callstack 0
  3621   000E6E                     ___almod:
  3622                           	callstack 23
  3623                           
  3624                           ;incstack = 0
  3625   000E6E  0E00               	movlw	0
  3626   000E70  6E0E               	movwf	___almod@sign^0,c
  3627   000E72  AE08               	btfss	(___almod@dividend+3)^0,7,c
  3628   000E74  D00A               	goto	l4339
  3629   000E76  1E08               	comf	(___almod@dividend+3)^0,f,c
  3630   000E78  1E07               	comf	(___almod@dividend+2)^0,f,c
  3631   000E7A  1E06               	comf	(___almod@dividend+1)^0,f,c
  3632   000E7C  6C05               	negf	___almod@dividend^0,c
  3633   000E7E  0E00               	movlw	0
  3634   000E80  2206               	addwfc	(___almod@dividend+1)^0,f,c
  3635   000E82  2207               	addwfc	(___almod@dividend+2)^0,f,c
  3636   000E84  2208               	addwfc	(___almod@dividend+3)^0,f,c
  3637   000E86  0E01               	movlw	1
  3638   000E88  6E0E               	movwf	___almod@sign^0,c
  3639   000E8A                     l4339:
  3640   000E8A  AE0C               	btfss	(___almod@divisor+3)^0,7,c
  3641   000E8C  D008               	goto	l4343
  3642   000E8E  1E0C               	comf	(___almod@divisor+3)^0,f,c
  3643   000E90  1E0B               	comf	(___almod@divisor+2)^0,f,c
  3644   000E92  1E0A               	comf	(___almod@divisor+1)^0,f,c
  3645   000E94  6C09               	negf	___almod@divisor^0,c
  3646   000E96  0E00               	movlw	0
  3647   000E98  220A               	addwfc	(___almod@divisor+1)^0,f,c
  3648   000E9A  220B               	addwfc	(___almod@divisor+2)^0,f,c
  3649   000E9C  220C               	addwfc	(___almod@divisor+3)^0,f,c
  3650   000E9E                     l4343:
  3651   000E9E  5009               	movf	___almod@divisor^0,w,c
  3652   000EA0  100A               	iorwf	(___almod@divisor+1)^0,w,c
  3653   000EA2  100B               	iorwf	(___almod@divisor+2)^0,w,c
  3654   000EA4  100C               	iorwf	(___almod@divisor+3)^0,w,c
  3655   000EA6  B4D8               	btfsc	status,2,c
  3656   000EA8  D024               	goto	l4359
  3657   000EAA  0E01               	movlw	1
  3658   000EAC  6E0D               	movwf	___almod@counter^0,c
  3659   000EAE  D006               	goto	l4349
  3660   000EB0                     l4347:
  3661   000EB0  90D8               	bcf	status,0,c
  3662   000EB2  3609               	rlcf	___almod@divisor^0,f,c
  3663   000EB4  360A               	rlcf	(___almod@divisor+1)^0,f,c
  3664   000EB6  360B               	rlcf	(___almod@divisor+2)^0,f,c
  3665   000EB8  360C               	rlcf	(___almod@divisor+3)^0,f,c
  3666   000EBA  2A0D               	incf	___almod@counter^0,f,c
  3667   000EBC                     l4349:
  3668   000EBC  AE0C               	btfss	(___almod@divisor+3)^0,7,c
  3669   000EBE  D7F8               	goto	l4347
  3670   000EC0                     u4040:
  3671   000EC0  5009               	movf	___almod@divisor^0,w,c
  3672   000EC2  5C05               	subwf	___almod@dividend^0,w,c
  3673   000EC4  500A               	movf	(___almod@divisor+1)^0,w,c
  3674   000EC6  5806               	subwfb	(___almod@dividend+1)^0,w,c
  3675   000EC8  500B               	movf	(___almod@divisor+2)^0,w,c
  3676   000ECA  5807               	subwfb	(___almod@dividend+2)^0,w,c
  3677   000ECC  500C               	movf	(___almod@divisor+3)^0,w,c
  3678   000ECE  5808               	subwfb	(___almod@dividend+3)^0,w,c
  3679   000ED0  A0D8               	btfss	status,0,c
  3680   000ED2  D008               	goto	l4355
  3681   000ED4  5009               	movf	___almod@divisor^0,w,c
  3682   000ED6  5E05               	subwf	___almod@dividend^0,f,c
  3683   000ED8  500A               	movf	(___almod@divisor+1)^0,w,c
  3684   000EDA  5A06               	subwfb	(___almod@dividend+1)^0,f,c
  3685   000EDC  500B               	movf	(___almod@divisor+2)^0,w,c
  3686   000EDE  5A07               	subwfb	(___almod@dividend+2)^0,f,c
  3687   000EE0  500C               	movf	(___almod@divisor+3)^0,w,c
  3688   000EE2  5A08               	subwfb	(___almod@dividend+3)^0,f,c
  3689   000EE4                     l4355:
  3690   000EE4  90D8               	bcf	status,0,c
  3691   000EE6  320C               	rrcf	(___almod@divisor+3)^0,f,c
  3692   000EE8  320B               	rrcf	(___almod@divisor+2)^0,f,c
  3693   000EEA  320A               	rrcf	(___almod@divisor+1)^0,f,c
  3694   000EEC  3209               	rrcf	___almod@divisor^0,f,c
  3695   000EEE  2E0D               	decfsz	___almod@counter^0,f,c
  3696   000EF0  D7E7               	goto	u4040
  3697   000EF2                     l4359:
  3698   000EF2  500E               	movf	___almod@sign^0,w,c
  3699   000EF4  B4D8               	btfsc	status,2,c
  3700   000EF6  D008               	goto	l4363
  3701   000EF8  1E08               	comf	(___almod@dividend+3)^0,f,c
  3702   000EFA  1E07               	comf	(___almod@dividend+2)^0,f,c
  3703   000EFC  1E06               	comf	(___almod@dividend+1)^0,f,c
  3704   000EFE  6C05               	negf	___almod@dividend^0,c
  3705   000F00  0E00               	movlw	0
  3706   000F02  2206               	addwfc	(___almod@dividend+1)^0,f,c
  3707   000F04  2207               	addwfc	(___almod@dividend+2)^0,f,c
  3708   000F06  2208               	addwfc	(___almod@dividend+3)^0,f,c
  3709   000F08                     l4363:
  3710   000F08  C005  F005         	movff	___almod@dividend,?___almod
  3711   000F0C  C006  F006         	movff	___almod@dividend+1,?___almod+1
  3712   000F10  C007  F007         	movff	___almod@dividend+2,?___almod+2
  3713   000F14  C008  F008         	movff	___almod@dividend+3,?___almod+3
  3714   000F18  0012               	return		;funcret
  3715   000F1A                     __end_of___almod:
  3716                           	callstack 0
  3717                           
  3718 ;; *************** function _handle_actuator_push *****************
  3719 ;; Defined at:
  3720 ;;		line 235 in file "main.c"
  3721 ;; Parameters:    Size  Location     Type
  3722 ;;  act_pos         2   16[COMRAM] int 
  3723 ;; Auto vars:     Size  Location     Type
  3724 ;;  decision        2   19[COMRAM] int 
  3725 ;; Return value:  Size  Location     Type
  3726 ;;                  2   16[COMRAM] int 
  3727 ;; Registers used:
  3728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3729 ;; Tracked objects:
  3730 ;;		On entry : 0/0
  3731 ;;		On exit  : 0/0
  3732 ;;		Unchanged: 0/0
  3733 ;; Data sizes:     COMRAM   BANK0   BANK1
  3734 ;;      Params:         2       0       0
  3735 ;;      Locals:         2       0       0
  3736 ;;      Temps:          1       0       0
  3737 ;;      Totals:         5       0       0
  3738 ;;Total ram usage:        5 bytes
  3739 ;; Hardware stack levels used: 1
  3740 ;; Hardware stack levels required when called: 6
  3741 ;; This function calls:
  3742 ;;		_ADC_Read
  3743 ;;		_Lcd_Clear
  3744 ;;		_Lcd_Set_Cursor
  3745 ;;		_Lcd_Write_String
  3746 ;;		_input_option
  3747 ;;		_move_actuator
  3748 ;;		_start_process_screen
  3749 ;;		_usePeripheral
  3750 ;; This function is called by:
  3751 ;;		_infusion
  3752 ;; This function uses a non-reentrant model
  3753 ;;
  3754                           
  3755                           	psect	text18
  3756   000DA4                     __ptext18:
  3757                           	callstack 0
  3758   000DA4                     _handle_actuator_push:
  3759                           	callstack 22
  3760                           
  3761                           ;main.c: 236:     int decision;;main.c: 237:     start_process_screen("PUSHING");
  3762                           
  3763                           ;incstack = 0
  3764   000DA4  0EAC               	movlw	low STR_8
  3765   000DA6  6E0F               	movwf	start_process_screen@word^0,c
  3766   000DA8  0E1F               	movlw	high STR_8
  3767   000DAA  6E10               	movwf	(start_process_screen@word+1)^0,c
  3768   000DAC  ECD0  F009         	call	_start_process_screen	;wreg free
  3769                           
  3770                           ;main.c: 238:     decision = input_option();
  3771   000DB0  EC84  F008         	call	_input_option	;wreg free
  3772   000DB4  C008  F014         	movff	?_input_option,handle_actuator_push@decision
  3773   000DB8  C009  F015         	movff	?_input_option+1,handle_actuator_push@decision+1
  3774                           
  3775                           ;main.c: 240:     if(decision == 1){
  3776   000DBC  0414               	decf	handle_actuator_push@decision^0,w,c
  3777   000DBE  1015               	iorwf	(handle_actuator_push@decision+1)^0,w,c
  3778   000DC0  A4D8               	btfss	status,2,c
  3779   000DC2  0012               	return	
  3780                           
  3781                           ;main.c: 241:         Lcd_Clear();
  3782   000DC4  ECAE  F00D         	call	_Lcd_Clear	;wreg free
  3783                           
  3784                           ;main.c: 242:         Lcd_Set_Cursor( position_row_1,position_column_1);
  3785   000DC8  0E01               	movlw	1
  3786   000DCA  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  3787   000DCC  0E01               	movlw	1
  3788   000DCE  EC34  F008         	call	_Lcd_Set_Cursor
  3789                           
  3790                           ;main.c: 243:         Lcd_Write_String("PUSHING...");
  3791   000DD2  0E67               	movlw	low STR_27
  3792   000DD4  6E09               	movwf	Lcd_Write_String@a^0,c
  3793   000DD6  0E1F               	movlw	high STR_27
  3794   000DD8  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  3795   000DDA  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  3796                           
  3797                           ;main.c: 245:         while(act_pos > 20){
  3798   000DDE  D02A               	goto	l4805
  3799   000DE0                     l4799:
  3800                           
  3801                           ;main.c: 246:             act_pos = ADC_Read(0);
  3802   000DE0  0E00               	movlw	0
  3803   000DE2  EC10  F00A         	call	_ADC_Read
  3804   000DE6  C005  F011         	movff	?_ADC_Read,handle_actuator_push@act_pos
  3805   000DEA  C006  F012         	movff	?_ADC_Read+1,handle_actuator_push@act_pos+1
  3806                           
  3807                           ;main.c: 247:             usePeripheral(orange_led, on);
  3808   000DEE  0E00               	movlw	0
  3809   000DF0  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  3810   000DF2  0E01               	movlw	1
  3811   000DF4  6E05               	movwf	usePeripheral@peripheral^0,c
  3812   000DF6  0E00               	movlw	0
  3813   000DF8  6E08               	movwf	(usePeripheral@action+1)^0,c
  3814   000DFA  0E01               	movlw	1
  3815   000DFC  6E07               	movwf	usePeripheral@action^0,c
  3816   000DFE  EC8D  F007         	call	_usePeripheral	;wreg free
  3817                           
  3818                           ;main.c: 248:             _delay((unsigned long)((25)*(8000000L/4000.0)));
  3819   000E02  0E41               	movlw	65
  3820   000E04  6E13               	movwf	??_handle_actuator_push^0,c
  3821   000E06  0EEE               	movlw	238
  3822   000E08                     u5177:
  3823   000E08  2EE8               	decfsz	wreg,f,c
  3824   000E0A  D7FE               	bra	u5177
  3825   000E0C  2E13               	decfsz	??_handle_actuator_push^0,f,c
  3826   000E0E  D7FC               	bra	u5177
  3827   000E10  D000               	nop2	
  3828                           
  3829                           ;main.c: 249:             move_actuator(backwards, 1023);
  3830   000E12  0E00               	movlw	0
  3831   000E14  6E0A               	movwf	(move_actuator@direction+1)^0,c
  3832   000E16  0E00               	movlw	0
  3833   000E18  6E09               	movwf	move_actuator@direction^0,c
  3834   000E1A  0E03               	movlw	3
  3835   000E1C  6E0C               	movwf	(move_actuator@speed+1)^0,c
  3836   000E1E  680B               	setf	move_actuator@speed^0,c
  3837   000E20  EC0E  F00C         	call	_move_actuator	;wreg free
  3838                           
  3839                           ;main.c: 250:             _delay((unsigned long)((25)*(8000000L/4000.0)));
  3840   000E24  0E41               	movlw	65
  3841   000E26  6E13               	movwf	??_handle_actuator_push^0,c
  3842   000E28  0EEE               	movlw	238
  3843   000E2A                     u5187:
  3844   000E2A  2EE8               	decfsz	wreg,f,c
  3845   000E2C  D7FE               	bra	u5187
  3846   000E2E  2E13               	decfsz	??_handle_actuator_push^0,f,c
  3847   000E30  D7FC               	bra	u5187
  3848   000E32  D000               	nop2	
  3849   000E34                     l4805:
  3850                           
  3851                           ;main.c: 245:         while(act_pos > 20){
  3852   000E34  BE12               	btfsc	(handle_actuator_push@act_pos+1)^0,7,c
  3853   000E36  D006               	goto	u4840
  3854   000E38  5012               	movf	(handle_actuator_push@act_pos+1)^0,w,c
  3855   000E3A  E1D2               	bnz	l4799
  3856   000E3C  0E15               	movlw	21
  3857   000E3E  5C11               	subwf	handle_actuator_push@act_pos^0,w,c
  3858   000E40  B0D8               	btfsc	status,0,c
  3859   000E42  D7CE               	goto	l4799
  3860   000E44                     u4840:
  3861                           
  3862                           ;main.c: 253:         move_actuator(forward, 0);
  3863   000E44  0E00               	movlw	0
  3864   000E46  6E0A               	movwf	(move_actuator@direction+1)^0,c
  3865   000E48  0E01               	movlw	1
  3866   000E4A  6E09               	movwf	move_actuator@direction^0,c
  3867   000E4C  0E00               	movlw	0
  3868   000E4E  6E0C               	movwf	(move_actuator@speed+1)^0,c
  3869   000E50  0E00               	movlw	0
  3870   000E52  6E0B               	movwf	move_actuator@speed^0,c
  3871   000E54  EC0E  F00C         	call	_move_actuator	;wreg free
  3872                           
  3873                           ;main.c: 254:         usePeripheral(orange_led, off);
  3874   000E58  0E00               	movlw	0
  3875   000E5A  6E06               	movwf	(usePeripheral@peripheral+1)^0,c
  3876   000E5C  0E01               	movlw	1
  3877   000E5E  6E05               	movwf	usePeripheral@peripheral^0,c
  3878   000E60  0E00               	movlw	0
  3879   000E62  6E08               	movwf	(usePeripheral@action+1)^0,c
  3880   000E64  0E00               	movlw	0
  3881   000E66  6E07               	movwf	usePeripheral@action^0,c
  3882   000E68  EC8D  F007         	call	_usePeripheral	;wreg free
  3883   000E6C  0012               	return		;funcret
  3884   000E6E                     __end_of_handle_actuator_push:
  3885                           	callstack 0
  3886                           
  3887 ;; *************** function _usePeripheral *****************
  3888 ;; Defined at:
  3889 ;;		line 25 in file "helper.c"
  3890 ;; Parameters:    Size  Location     Type
  3891 ;;  peripheral      2    4[COMRAM] int 
  3892 ;;  action          2    6[COMRAM] int 
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;		None
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  1    wreg      void 
  3897 ;; Registers used:
  3898 ;;		wreg, status,2, status,0
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMRAM   BANK0   BANK1
  3904 ;;      Params:         4       0       0
  3905 ;;      Locals:         0       0       0
  3906 ;;      Temps:          0       0       0
  3907 ;;      Totals:         4       0       0
  3908 ;;Total ram usage:        4 bytes
  3909 ;; Hardware stack levels used: 1
  3910 ;; Hardware stack levels required when called: 2
  3911 ;; This function calls:
  3912 ;;		Nothing
  3913 ;; This function is called by:
  3914 ;;		_system_init
  3915 ;;		_handle_actuator_push
  3916 ;;		_infusion
  3917 ;;		_handle_syringe_fill
  3918 ;; This function uses a non-reentrant model
  3919 ;;
  3920                           
  3921                           	psect	text19
  3922   000F1A                     __ptext19:
  3923                           	callstack 0
  3924   000F1A                     _usePeripheral:
  3925                           	callstack 27
  3926                           
  3927                           ;helper.c: 27:     if(peripheral == green_led && action == on){
  3928                           
  3929                           ;incstack = 0
  3930   000F1A  5005               	movf	usePeripheral@peripheral^0,w,c
  3931   000F1C  1006               	iorwf	(usePeripheral@peripheral+1)^0,w,c
  3932   000F1E  A4D8               	btfss	status,2,c
  3933   000F20  D006               	goto	l4633
  3934   000F22  0407               	decf	usePeripheral@action^0,w,c
  3935   000F24  1008               	iorwf	(usePeripheral@action+1)^0,w,c
  3936   000F26  A4D8               	btfss	status,2,c
  3937   000F28  D002               	goto	l4633
  3938                           
  3939                           ;helper.c: 28:         LATA2 = on;
  3940   000F2A  8489               	bsf	3977,2,c	;volatile
  3941                           
  3942                           ;helper.c: 29:     }else if(peripheral == green_led && action == off){
  3943   000F2C  0012               	return	
  3944   000F2E                     l4633:
  3945   000F2E  5005               	movf	usePeripheral@peripheral^0,w,c
  3946   000F30  1006               	iorwf	(usePeripheral@peripheral+1)^0,w,c
  3947   000F32  A4D8               	btfss	status,2,c
  3948   000F34  D006               	goto	l4639
  3949   000F36  5007               	movf	usePeripheral@action^0,w,c
  3950   000F38  1008               	iorwf	(usePeripheral@action+1)^0,w,c
  3951   000F3A  A4D8               	btfss	status,2,c
  3952   000F3C  D002               	goto	l4639
  3953                           
  3954                           ;helper.c: 30:         LATA2 = off;
  3955   000F3E  9489               	bcf	3977,2,c	;volatile
  3956                           
  3957                           ;helper.c: 31:     }else if(peripheral == orange_led && action == on){
  3958   000F40  0012               	return	
  3959   000F42                     l4639:
  3960   000F42  0405               	decf	usePeripheral@peripheral^0,w,c
  3961   000F44  1006               	iorwf	(usePeripheral@peripheral+1)^0,w,c
  3962   000F46  A4D8               	btfss	status,2,c
  3963   000F48  D006               	goto	l4645
  3964   000F4A  0407               	decf	usePeripheral@action^0,w,c
  3965   000F4C  1008               	iorwf	(usePeripheral@action+1)^0,w,c
  3966   000F4E  A4D8               	btfss	status,2,c
  3967   000F50  D002               	goto	l4645
  3968                           
  3969                           ;helper.c: 32:         LATC6 = on;
  3970   000F52  8C8B               	bsf	3979,6,c	;volatile
  3971                           
  3972                           ;helper.c: 33:     }else if(peripheral == orange_led && action == off){
  3973   000F54  0012               	return	
  3974   000F56                     l4645:
  3975   000F56  0405               	decf	usePeripheral@peripheral^0,w,c
  3976   000F58  1006               	iorwf	(usePeripheral@peripheral+1)^0,w,c
  3977   000F5A  A4D8               	btfss	status,2,c
  3978   000F5C  D006               	goto	l4651
  3979   000F5E  5007               	movf	usePeripheral@action^0,w,c
  3980   000F60  1008               	iorwf	(usePeripheral@action+1)^0,w,c
  3981   000F62  A4D8               	btfss	status,2,c
  3982   000F64  D002               	goto	l4651
  3983                           
  3984                           ;helper.c: 34:         LATC6 = off;
  3985   000F66  9C8B               	bcf	3979,6,c	;volatile
  3986                           
  3987                           ;helper.c: 35:     }
  3988   000F68  0012               	return	
  3989   000F6A                     l4651:
  3990   000F6A  0E02               	movlw	2
  3991   000F6C  1805               	xorwf	usePeripheral@peripheral^0,w,c
  3992   000F6E  1006               	iorwf	(usePeripheral@peripheral+1)^0,w,c
  3993   000F70  A4D8               	btfss	status,2,c
  3994   000F72  D006               	goto	l4657
  3995   000F74  0407               	decf	usePeripheral@action^0,w,c
  3996   000F76  1008               	iorwf	(usePeripheral@action+1)^0,w,c
  3997   000F78  A4D8               	btfss	status,2,c
  3998   000F7A  D002               	goto	l4657
  3999                           
  4000                           ;helper.c: 37:         LATC5 = on;
  4001   000F7C  8A8B               	bsf	3979,5,c	;volatile
  4002                           
  4003                           ;helper.c: 38:     }else if(peripheral == red_led && action == off){
  4004   000F7E  0012               	return	
  4005   000F80                     l4657:
  4006   000F80  0E02               	movlw	2
  4007   000F82  1805               	xorwf	usePeripheral@peripheral^0,w,c
  4008   000F84  1006               	iorwf	(usePeripheral@peripheral+1)^0,w,c
  4009   000F86  A4D8               	btfss	status,2,c
  4010   000F88  D006               	goto	l4663
  4011   000F8A  5007               	movf	usePeripheral@action^0,w,c
  4012   000F8C  1008               	iorwf	(usePeripheral@action+1)^0,w,c
  4013   000F8E  A4D8               	btfss	status,2,c
  4014   000F90  D002               	goto	l4663
  4015                           
  4016                           ;helper.c: 39:         LATC5 = off;
  4017   000F92  9A8B               	bcf	3979,5,c	;volatile
  4018                           
  4019                           ;helper.c: 40:     }else if(peripheral == buzzer && action == on){
  4020   000F94  0012               	return	
  4021   000F96                     l4663:
  4022   000F96  0E03               	movlw	3
  4023   000F98  1805               	xorwf	usePeripheral@peripheral^0,w,c
  4024   000F9A  1006               	iorwf	(usePeripheral@peripheral+1)^0,w,c
  4025   000F9C  A4D8               	btfss	status,2,c
  4026   000F9E  D006               	goto	l4669
  4027   000FA0  0407               	decf	usePeripheral@action^0,w,c
  4028   000FA2  1008               	iorwf	(usePeripheral@action+1)^0,w,c
  4029   000FA4  A4D8               	btfss	status,2,c
  4030   000FA6  D002               	goto	l4669
  4031                           
  4032                           ;helper.c: 41:         LATC4 = on;
  4033   000FA8  888B               	bsf	3979,4,c	;volatile
  4034                           
  4035                           ;helper.c: 42:     }else if(peripheral == buzzer && action == off){
  4036   000FAA  0012               	return	
  4037   000FAC                     l4669:
  4038   000FAC  0E03               	movlw	3
  4039   000FAE  1805               	xorwf	usePeripheral@peripheral^0,w,c
  4040   000FB0  1006               	iorwf	(usePeripheral@peripheral+1)^0,w,c
  4041   000FB2  A4D8               	btfss	status,2,c
  4042   000FB4  0012               	return	
  4043   000FB6  5007               	movf	usePeripheral@action^0,w,c
  4044   000FB8  1008               	iorwf	(usePeripheral@action+1)^0,w,c
  4045   000FBA  A4D8               	btfss	status,2,c
  4046   000FBC  0012               	return	
  4047                           
  4048                           ;helper.c: 43:         LATC4 = off;
  4049   000FBE  988B               	bcf	3979,4,c	;volatile
  4050   000FC0  0012               	return	
  4051   000FC2                     __end_of_usePeripheral:
  4052                           	callstack 0
  4053                           
  4054 ;; *************** function _start_process_screen *****************
  4055 ;; Defined at:
  4056 ;;		line 101 in file "helper.c"
  4057 ;; Parameters:    Size  Location     Type
  4058 ;;  word            2   14[COMRAM] PTR unsigned char 
  4059 ;;		 -> STR_30(9), STR_28(8), STR_26(8), 
  4060 ;; Auto vars:     Size  Location     Type
  4061 ;;		None
  4062 ;; Return value:  Size  Location     Type
  4063 ;;                  1    wreg      void 
  4064 ;; Registers used:
  4065 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4066 ;; Tracked objects:
  4067 ;;		On entry : 0/0
  4068 ;;		On exit  : 0/0
  4069 ;;		Unchanged: 0/0
  4070 ;; Data sizes:     COMRAM   BANK0   BANK1
  4071 ;;      Params:         2       0       0
  4072 ;;      Locals:         0       0       0
  4073 ;;      Temps:          0       0       0
  4074 ;;      Totals:         2       0       0
  4075 ;;Total ram usage:        2 bytes
  4076 ;; Hardware stack levels used: 1
  4077 ;; Hardware stack levels required when called: 5
  4078 ;; This function calls:
  4079 ;;		_Lcd_Clear
  4080 ;;		_Lcd_Set_Cursor
  4081 ;;		_Lcd_Write_String
  4082 ;; This function is called by:
  4083 ;;		_handle_actuator_push
  4084 ;;		_handle_syringe_fill
  4085 ;;		_confirm_start
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           	psect	text20
  4090   0013A0                     __ptext20:
  4091                           	callstack 0
  4092   0013A0                     _start_process_screen:
  4093                           	callstack 22
  4094                           
  4095                           ;helper.c: 103:     Lcd_Clear();
  4096                           
  4097                           ;incstack = 0
  4098   0013A0  ECAE  F00D         	call	_Lcd_Clear	;wreg free
  4099                           
  4100                           ;helper.c: 104:     Lcd_Set_Cursor(position_row_1, position_column_1);
  4101   0013A4  0E01               	movlw	1
  4102   0013A6  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  4103   0013A8  0E01               	movlw	1
  4104   0013AA  EC34  F008         	call	_Lcd_Set_Cursor
  4105                           
  4106                           ;helper.c: 105:     Lcd_Write_String("DO YOU WANT TO");
  4107   0013AE  0E23               	movlw	low STR_9
  4108   0013B0  6E09               	movwf	Lcd_Write_String@a^0,c
  4109   0013B2  0E1F               	movlw	high STR_9
  4110   0013B4  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  4111   0013B6  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  4112                           
  4113                           ;helper.c: 106:     Lcd_Set_Cursor( position_row_2,position_column_1);
  4114   0013BA  0E01               	movlw	1
  4115   0013BC  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  4116   0013BE  0E02               	movlw	2
  4117   0013C0  EC34  F008         	call	_Lcd_Set_Cursor
  4118                           
  4119                           ;helper.c: 107:     Lcd_Write_String("START ");
  4120   0013C4  0EC2               	movlw	low STR_16
  4121   0013C6  6E09               	movwf	Lcd_Write_String@a^0,c
  4122   0013C8  0E1F               	movlw	high STR_16
  4123   0013CA  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  4124   0013CC  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  4125                           
  4126                           ;helper.c: 108:     Lcd_Write_String(word);
  4127   0013D0  C00F  F009         	movff	start_process_screen@word,Lcd_Write_String@a
  4128   0013D4  C010  F00A         	movff	start_process_screen@word+1,Lcd_Write_String@a+1
  4129   0013D8  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  4130                           
  4131                           ;helper.c: 109:     Lcd_Set_Cursor( position_row_3,position_column_1);
  4132   0013DC  0E01               	movlw	1
  4133   0013DE  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  4134   0013E0  0E03               	movlw	3
  4135   0013E2  EC34  F008         	call	_Lcd_Set_Cursor
  4136                           
  4137                           ;helper.c: 110:     Lcd_Write_String("1. YES");
  4138   0013E6  0ED0               	movlw	low STR_12
  4139   0013E8  6E09               	movwf	Lcd_Write_String@a^0,c
  4140   0013EA  0E1F               	movlw	high STR_12
  4141   0013EC  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  4142   0013EE  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  4143                           
  4144                           ;helper.c: 111:     Lcd_Set_Cursor(position_row_4, position_column_1);
  4145   0013F2  0E01               	movlw	1
  4146   0013F4  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  4147   0013F6  0E04               	movlw	4
  4148   0013F8  EC34  F008         	call	_Lcd_Set_Cursor
  4149                           
  4150                           ;helper.c: 112:     Lcd_Write_String("2. NO");
  4151   0013FC  0ED7               	movlw	low STR_13
  4152   0013FE  6E09               	movwf	Lcd_Write_String@a^0,c
  4153   001400  0E1F               	movlw	high STR_13
  4154   001402  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  4155   001404  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  4156                           
  4157                           ;helper.c: 113:     Lcd_Set_Cursor(position_row_4,position_column_17 );
  4158   001408  0E11               	movlw	17
  4159   00140A  6E08               	movwf	Lcd_Set_Cursor@b^0,c
  4160   00140C  0E04               	movlw	4
  4161   00140E  EC34  F008         	call	_Lcd_Set_Cursor
  4162                           
  4163                           ;helper.c: 114:     Lcd_Write_String("BACK");
  4164   001412  0EE7               	movlw	low STR_5
  4165   001414  6E09               	movwf	Lcd_Write_String@a^0,c
  4166   001416  0E1F               	movlw	high STR_5
  4167   001418  6E0A               	movwf	(Lcd_Write_String@a+1)^0,c
  4168   00141A  EC4E  F00A         	call	_Lcd_Write_String	;wreg free
  4169   00141E  0012               	return		;funcret
  4170   001420                     __end_of_start_process_screen:
  4171                           	callstack 0
  4172                           
  4173 ;; *************** function _Lcd_Write_String *****************
  4174 ;; Defined at:
  4175 ;;		line 123 in file "lcd.c"
  4176 ;; Parameters:    Size  Location     Type
  4177 ;;  a               2    8[COMRAM] PTR unsigned char 
  4178 ;;		 -> STR_43(3), STR_42(3), STR_41(2), STR_40(7), 
  4179 ;;		 -> STR_39(19), STR_37(4), STR_35(5), STR_33(5), 
  4180 ;;		 -> infusion@buff(5), STR_31(7), STR_30(9), STR_29(11), 
  4181 ;;		 -> STR_28(8), STR_27(11), STR_26(8), input_numbers@outputBuffer(2), 
  4182 ;;		 -> STR_25(5), STR_24(17), STR_23(21), STR_22(9), 
  4183 ;;		 -> STR_21(21), STR_20(14), STR_19(5), STR_18(6), 
  4184 ;;		 -> STR_17(7), STR_16(7), STR_15(15), STR_14(5), 
  4185 ;;		 -> STR_13(6), STR_12(7), STR_11(12), STR_10(11), 
  4186 ;;		 -> STR_9(15), STR_8(8), STR_7(10), STR_6(15), 
  4187 ;;		 -> STR_5(5), STR_4(3), STR_3(2), STR_2(12), 
  4188 ;;		 -> STR_1(7), 
  4189 ;; Auto vars:     Size  Location     Type
  4190 ;;  i               2   12[COMRAM] int 
  4191 ;; Return value:  Size  Location     Type
  4192 ;;                  1    wreg      void 
  4193 ;; Registers used:
  4194 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4195 ;; Tracked objects:
  4196 ;;		On entry : 0/0
  4197 ;;		On exit  : 0/0
  4198 ;;		Unchanged: 0/0
  4199 ;; Data sizes:     COMRAM   BANK0   BANK1
  4200 ;;      Params:         2       0       0
  4201 ;;      Locals:         2       0       0
  4202 ;;      Temps:          2       0       0
  4203 ;;      Totals:         6       0       0
  4204 ;;Total ram usage:        6 bytes
  4205 ;; Hardware stack levels used: 1
  4206 ;; Hardware stack levels required when called: 4
  4207 ;; This function calls:
  4208 ;;		_Lcd_Write_Char
  4209 ;; This function is called by:
  4210 ;;		_input_value
  4211 ;;		_start_process_screen
  4212 ;;		_menu
  4213 ;;		_manual
  4214 ;;		_handle_actuator_push
  4215 ;;		_infusion
  4216 ;;		_syringe_not_pushed_screen
  4217 ;;		_input_valve_screen
  4218 ;;		_input_numbers
  4219 ;;		_handle_syringe_fill
  4220 ;; This function uses a non-reentrant model
  4221 ;;
  4222                           
  4223                           	psect	text21
  4224   00149C                     __ptext21:
  4225                           	callstack 0
  4226   00149C                     _Lcd_Write_String:
  4227                           	callstack 25
  4228                           
  4229                           ;lcd.c: 123: void Lcd_Write_String(char *a);lcd.c: 124: {;lcd.c: 125:  int i;;lcd.c: 126
      +                          :  for(i=0;a[i]!='\0';i++)
  4230                           
  4231                           ;incstack = 0
  4232   00149C  0E00               	movlw	0
  4233   00149E  6E0E               	movwf	(Lcd_Write_String@i+1)^0,c
  4234   0014A0  0E00               	movlw	0
  4235   0014A2  6E0D               	movwf	Lcd_Write_String@i^0,c
  4236   0014A4  D01A               	goto	l4425
  4237   0014A6                     l4421:
  4238                           
  4239                           ;lcd.c: 127:     Lcd_Write_Char(a[i]);
  4240   0014A6  500D               	movf	Lcd_Write_String@i^0,w,c
  4241   0014A8  2409               	addwf	Lcd_Write_String@a^0,w,c
  4242   0014AA  6E0B               	movwf	??_Lcd_Write_String^0,c
  4243   0014AC  500E               	movf	(Lcd_Write_String@i+1)^0,w,c
  4244   0014AE  200A               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  4245   0014B0  6E0C               	movwf	(??_Lcd_Write_String+1)^0,c
  4246   0014B2  C00B  FFF6         	movff	??_Lcd_Write_String,tblptrl
  4247   0014B6  C00C  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  4248   0014BA  6AF8               	clrf	tblptru,c
  4249   0014BC  0E01               	movlw	(high __ramtop+-1)
  4250   0014BE  64F7               	cpfsgt	tblptrh,c
  4251   0014C0  D003               	bra	u4167
  4252   0014C2  0008               	tblrd		*
  4253   0014C4  50F5               	movf	tablat,w,c
  4254   0014C6  D005               	bra	u4160
  4255   0014C8                     u4167:
  4256   0014C8  CFF6 FFE1          	movff	tblptrl,fsr1l
  4257   0014CC  CFF7 FFE2          	movff	tblptrh,fsr1h
  4258   0014D0  50E7               	movf	indf1,w,c
  4259   0014D2                     u4160:
  4260   0014D2  EC9A  F00C         	call	_Lcd_Write_Char
  4261   0014D6  4A0D               	infsnz	Lcd_Write_String@i^0,f,c
  4262   0014D8  2A0E               	incf	(Lcd_Write_String@i+1)^0,f,c
  4263   0014DA                     l4425:
  4264   0014DA  500D               	movf	Lcd_Write_String@i^0,w,c
  4265   0014DC  2409               	addwf	Lcd_Write_String@a^0,w,c
  4266   0014DE  6E0B               	movwf	??_Lcd_Write_String^0,c
  4267   0014E0  500E               	movf	(Lcd_Write_String@i+1)^0,w,c
  4268   0014E2  200A               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  4269   0014E4  6E0C               	movwf	(??_Lcd_Write_String+1)^0,c
  4270   0014E6  C00B  FFF6         	movff	??_Lcd_Write_String,tblptrl
  4271   0014EA  C00C  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  4272   0014EE  6AF8               	clrf	tblptru,c
  4273   0014F0  0E01               	movlw	(high __ramtop+-1)
  4274   0014F2  64F7               	cpfsgt	tblptrh,c
  4275   0014F4  D003               	bra	u4177
  4276   0014F6  0008               	tblrd		*
  4277   0014F8  50F5               	movf	tablat,w,c
  4278   0014FA  D005               	bra	u4170
  4279   0014FC                     u4177:
  4280   0014FC  CFF6 FFE1          	movff	tblptrl,fsr1l
  4281   001500  CFF7 FFE2          	movff	tblptrh,fsr1h
  4282   001504  50E7               	movf	indf1,w,c
  4283   001506                     u4170:
  4284   001506  0900               	iorlw	0
  4285   001508  B4D8               	btfsc	status,2,c
  4286   00150A  0012               	return	
  4287   00150C  D7CC               	goto	l4421
  4288   00150E                     __end_of_Lcd_Write_String:
  4289                           	callstack 0
  4290                           
  4291 ;; *************** function _Lcd_Write_Char *****************
  4292 ;; Defined at:
  4293 ;;		line 107 in file "lcd.c"
  4294 ;; Parameters:    Size  Location     Type
  4295 ;;  a               1    wreg     unsigned char 
  4296 ;; Auto vars:     Size  Location     Type
  4297 ;;  a               1    7[COMRAM] unsigned char 
  4298 ;;  y               1    6[COMRAM] unsigned char 
  4299 ;;  temp            1    5[COMRAM] unsigned char 
  4300 ;; Return value:  Size  Location     Type
  4301 ;;                  1    wreg      void 
  4302 ;; Registers used:
  4303 ;;		wreg, status,2, status,0, cstack
  4304 ;; Tracked objects:
  4305 ;;		On entry : 0/0
  4306 ;;		On exit  : 0/0
  4307 ;;		Unchanged: 0/0
  4308 ;; Data sizes:     COMRAM   BANK0   BANK1
  4309 ;;      Params:         0       0       0
  4310 ;;      Locals:         3       0       0
  4311 ;;      Temps:          0       0       0
  4312 ;;      Totals:         3       0       0
  4313 ;;Total ram usage:        3 bytes
  4314 ;; Hardware stack levels used: 1
  4315 ;; Hardware stack levels required when called: 3
  4316 ;; This function calls:
  4317 ;;		_Lcd_Port
  4318 ;; This function is called by:
  4319 ;;		_Lcd_Write_String
  4320 ;; This function uses a non-reentrant model
  4321 ;;
  4322                           
  4323                           	psect	text22
  4324   001934                     __ptext22:
  4325                           	callstack 0
  4326   001934                     _Lcd_Write_Char:
  4327                           	callstack 25
  4328                           
  4329                           ;incstack = 0
  4330                           ;Lcd_Write_Char@a stored from wreg
  4331   001934  6E08               	movwf	Lcd_Write_Char@a^0,c
  4332                           
  4333                           ;lcd.c: 107: void Lcd_Write_Char(char a);lcd.c: 108: {;lcd.c: 109:    char temp,y;;lcd.c
      +                          : 110:    temp = a&0x0F;
  4334   001936  5008               	movf	Lcd_Write_Char@a^0,w,c
  4335   001938  0B0F               	andlw	15
  4336   00193A  6E06               	movwf	Lcd_Write_Char@temp^0,c
  4337                           
  4338                           ;lcd.c: 111:    y = a&0xF0;
  4339   00193C  5008               	movf	Lcd_Write_Char@a^0,w,c
  4340   00193E  0BF0               	andlw	240
  4341   001940  6E07               	movwf	Lcd_Write_Char@y^0,c
  4342                           
  4343                           ;lcd.c: 112:    RD2 = 1;
  4344   001942  8483               	bsf	3971,2,c	;volatile
  4345                           
  4346                           ;lcd.c: 113:    Lcd_Port(y>>4);
  4347   001944  3807               	swapf	Lcd_Write_Char@y^0,w,c
  4348   001946  0B0F               	andlw	15
  4349   001948  ECED  F00C         	call	_Lcd_Port
  4350                           
  4351                           ;lcd.c: 114:    RD3 = 1;
  4352   00194C  8683               	bsf	3971,3,c	;volatile
  4353                           
  4354                           ;lcd.c: 115:    _delay((unsigned long)((40)*(8000000L/4000000.0)));
  4355   00194E  0E1A               	movlw	26
  4356   001950                     u5197:
  4357   001950  2EE8               	decfsz	wreg,f,c
  4358   001952  D7FE               	bra	u5197
  4359   001954  D000               	nop2	
  4360                           
  4361                           ;lcd.c: 116:    RD3 = 0;
  4362   001956  9683               	bcf	3971,3,c	;volatile
  4363                           
  4364                           ;lcd.c: 117:    Lcd_Port(temp);
  4365   001958  5006               	movf	Lcd_Write_Char@temp^0,w,c
  4366   00195A  ECED  F00C         	call	_Lcd_Port
  4367                           
  4368                           ;lcd.c: 118:    RD3 = 1;
  4369   00195E  8683               	bsf	3971,3,c	;volatile
  4370                           
  4371                           ;lcd.c: 119:    _delay((unsigned long)((40)*(8000000L/4000000.0)));
  4372   001960  0E1A               	movlw	26
  4373   001962                     u5207:
  4374   001962  2EE8               	decfsz	wreg,f,c
  4375   001964  D7FE               	bra	u5207
  4376   001966  D000               	nop2	
  4377                           
  4378                           ;lcd.c: 120:    RD3 = 0;
  4379   001968  9683               	bcf	3971,3,c	;volatile
  4380   00196A  0012               	return		;funcret
  4381   00196C                     __end_of_Lcd_Write_Char:
  4382                           	callstack 0
  4383                           
  4384 ;; *************** function _Lcd_Set_Cursor *****************
  4385 ;; Defined at:
  4386 ;;		line 52 in file "lcd.c"
  4387 ;; Parameters:    Size  Location     Type
  4388 ;;  a               1    wreg     unsigned char 
  4389 ;;  b               1    7[COMRAM] unsigned char 
  4390 ;; Auto vars:     Size  Location     Type
  4391 ;;  a               1    8[COMRAM] unsigned char 
  4392 ;;  temp            1   11[COMRAM] unsigned char 
  4393 ;;  y               1   10[COMRAM] unsigned char 
  4394 ;;  z               1    9[COMRAM] unsigned char 
  4395 ;; Return value:  Size  Location     Type
  4396 ;;                  1    wreg      void 
  4397 ;; Registers used:
  4398 ;;		wreg, status,2, status,0, cstack
  4399 ;; Tracked objects:
  4400 ;;		On entry : 0/0
  4401 ;;		On exit  : 0/0
  4402 ;;		Unchanged: 0/0
  4403 ;; Data sizes:     COMRAM   BANK0   BANK1
  4404 ;;      Params:         1       0       0
  4405 ;;      Locals:         4       0       0
  4406 ;;      Temps:          0       0       0
  4407 ;;      Totals:         5       0       0
  4408 ;;Total ram usage:        5 bytes
  4409 ;; Hardware stack levels used: 1
  4410 ;; Hardware stack levels required when called: 4
  4411 ;; This function calls:
  4412 ;;		_Lcd_Cmd
  4413 ;; This function is called by:
  4414 ;;		_input_value
  4415 ;;		_start_process_screen
  4416 ;;		_menu
  4417 ;;		_manual
  4418 ;;		_handle_actuator_push
  4419 ;;		_infusion
  4420 ;;		_syringe_not_pushed_screen
  4421 ;;		_input_valve_screen
  4422 ;;		_input_numbers
  4423 ;;		_handle_syringe_fill
  4424 ;; This function uses a non-reentrant model
  4425 ;;
  4426                           
  4427                           	psect	text23
  4428   001068                     __ptext23:
  4429                           	callstack 0
  4430   001068                     _Lcd_Set_Cursor:
  4431                           	callstack 25
  4432                           
  4433                           ;incstack = 0
  4434                           ;Lcd_Set_Cursor@a stored from wreg
  4435   001068  6E09               	movwf	Lcd_Set_Cursor@a^0,c
  4436                           
  4437                           ;lcd.c: 52: void Lcd_Set_Cursor(char a, char b);lcd.c: 53: {;lcd.c: 54:  char temp,z,y;;
      +                          lcd.c: 55:  if(a == 1)
  4438   00106A  0409               	decf	Lcd_Set_Cursor@a^0,w,c
  4439   00106C  A4D8               	btfss	status,2,c
  4440   00106E  D010               	goto	l4395
  4441                           
  4442                           ;lcd.c: 56:  {;lcd.c: 57:    temp = 0x80 + b - 1;
  4443   001070  5008               	movf	Lcd_Set_Cursor@b^0,w,c
  4444   001072  0F7F               	addlw	127
  4445   001074  6E0C               	movwf	Lcd_Set_Cursor@temp^0,c
  4446                           
  4447                           ;lcd.c: 58:   z = temp>>4;
  4448   001076  380C               	swapf	Lcd_Set_Cursor@temp^0,w,c
  4449   001078  0B0F               	andlw	15
  4450   00107A  6E0A               	movwf	Lcd_Set_Cursor@z^0,c
  4451                           
  4452                           ;lcd.c: 59:   y = temp & 0x0F;
  4453   00107C  500C               	movf	Lcd_Set_Cursor@temp^0,w,c
  4454   00107E  0B0F               	andlw	15
  4455   001080  6E0B               	movwf	Lcd_Set_Cursor@y^0,c
  4456                           
  4457                           ;lcd.c: 60:   Lcd_Cmd(z);
  4458   001082  500A               	movf	Lcd_Set_Cursor@z^0,w,c
  4459   001084  EC50  F00D         	call	_Lcd_Cmd
  4460                           
  4461                           ;lcd.c: 61:   Lcd_Cmd(y);
  4462   001088  500B               	movf	Lcd_Set_Cursor@y^0,w,c
  4463   00108A  EC50  F00D         	call	_Lcd_Cmd
  4464                           
  4465                           ;lcd.c: 62:  }
  4466   00108E  0012               	return	
  4467   001090                     l4395:
  4468   001090  0E02               	movlw	2
  4469   001092  1809               	xorwf	Lcd_Set_Cursor@a^0,w,c
  4470   001094  A4D8               	btfss	status,2,c
  4471   001096  D010               	goto	l4403
  4472                           
  4473                           ;lcd.c: 64:  {;lcd.c: 65:   temp = 0xC0 + b - 1;
  4474   001098  5008               	movf	Lcd_Set_Cursor@b^0,w,c
  4475   00109A  0FBF               	addlw	191
  4476   00109C  6E0C               	movwf	Lcd_Set_Cursor@temp^0,c
  4477                           
  4478                           ;lcd.c: 66:   z = temp>>4;
  4479   00109E  380C               	swapf	Lcd_Set_Cursor@temp^0,w,c
  4480   0010A0  0B0F               	andlw	15
  4481   0010A2  6E0A               	movwf	Lcd_Set_Cursor@z^0,c
  4482                           
  4483                           ;lcd.c: 67:   y = temp & 0x0F;
  4484   0010A4  500C               	movf	Lcd_Set_Cursor@temp^0,w,c
  4485   0010A6  0B0F               	andlw	15
  4486   0010A8  6E0B               	movwf	Lcd_Set_Cursor@y^0,c
  4487                           
  4488                           ;lcd.c: 68:   Lcd_Cmd(z);
  4489   0010AA  500A               	movf	Lcd_Set_Cursor@z^0,w,c
  4490   0010AC  EC50  F00D         	call	_Lcd_Cmd
  4491                           
  4492                           ;lcd.c: 69:   Lcd_Cmd(y);
  4493   0010B0  500B               	movf	Lcd_Set_Cursor@y^0,w,c
  4494   0010B2  EC50  F00D         	call	_Lcd_Cmd
  4495                           
  4496                           ;lcd.c: 70:  }else if(a == 3)
  4497   0010B6  0012               	return	
  4498   0010B8                     l4403:
  4499   0010B8  0E03               	movlw	3
  4500   0010BA  1809               	xorwf	Lcd_Set_Cursor@a^0,w,c
  4501   0010BC  A4D8               	btfss	status,2,c
  4502   0010BE  D010               	goto	l4411
  4503                           
  4504                           ;lcd.c: 71:  {;lcd.c: 72:   temp = 0x94 + b - 1;
  4505   0010C0  5008               	movf	Lcd_Set_Cursor@b^0,w,c
  4506   0010C2  0F93               	addlw	147
  4507   0010C4  6E0C               	movwf	Lcd_Set_Cursor@temp^0,c
  4508                           
  4509                           ;lcd.c: 73:   z = temp>>4;
  4510   0010C6  380C               	swapf	Lcd_Set_Cursor@temp^0,w,c
  4511   0010C8  0B0F               	andlw	15
  4512   0010CA  6E0A               	movwf	Lcd_Set_Cursor@z^0,c
  4513                           
  4514                           ;lcd.c: 74:   y = temp & 0x0F;
  4515   0010CC  500C               	movf	Lcd_Set_Cursor@temp^0,w,c
  4516   0010CE  0B0F               	andlw	15
  4517   0010D0  6E0B               	movwf	Lcd_Set_Cursor@y^0,c
  4518                           
  4519                           ;lcd.c: 75:   Lcd_Cmd(z);
  4520   0010D2  500A               	movf	Lcd_Set_Cursor@z^0,w,c
  4521   0010D4  EC50  F00D         	call	_Lcd_Cmd
  4522                           
  4523                           ;lcd.c: 76:   Lcd_Cmd(y);
  4524   0010D8  500B               	movf	Lcd_Set_Cursor@y^0,w,c
  4525   0010DA  EC50  F00D         	call	_Lcd_Cmd
  4526                           
  4527                           ;lcd.c: 77:  }
  4528   0010DE  0012               	return	
  4529   0010E0                     l4411:
  4530   0010E0  0E04               	movlw	4
  4531   0010E2  1809               	xorwf	Lcd_Set_Cursor@a^0,w,c
  4532   0010E4  A4D8               	btfss	status,2,c
  4533   0010E6  0012               	return	
  4534                           
  4535                           ;lcd.c: 79:  {;lcd.c: 80:   temp = 0xD4 + b - 1;
  4536   0010E8  5008               	movf	Lcd_Set_Cursor@b^0,w,c
  4537   0010EA  0FD3               	addlw	211
  4538   0010EC  6E0C               	movwf	Lcd_Set_Cursor@temp^0,c
  4539                           
  4540                           ;lcd.c: 81:   z = temp>>4;
  4541   0010EE  380C               	swapf	Lcd_Set_Cursor@temp^0,w,c
  4542   0010F0  0B0F               	andlw	15
  4543   0010F2  6E0A               	movwf	Lcd_Set_Cursor@z^0,c
  4544                           
  4545                           ;lcd.c: 82:   y = temp & 0x0F;
  4546   0010F4  500C               	movf	Lcd_Set_Cursor@temp^0,w,c
  4547   0010F6  0B0F               	andlw	15
  4548   0010F8  6E0B               	movwf	Lcd_Set_Cursor@y^0,c
  4549                           
  4550                           ;lcd.c: 83:   Lcd_Cmd(z);
  4551   0010FA  500A               	movf	Lcd_Set_Cursor@z^0,w,c
  4552   0010FC  EC50  F00D         	call	_Lcd_Cmd
  4553                           
  4554                           ;lcd.c: 84:   Lcd_Cmd(y);
  4555   001100  500B               	movf	Lcd_Set_Cursor@y^0,w,c
  4556   001102  EC50  F00D         	call	_Lcd_Cmd
  4557   001106  0012               	return	
  4558   001108                     __end_of_Lcd_Set_Cursor:
  4559                           	callstack 0
  4560                           
  4561 ;; *************** function _Lcd_Clear *****************
  4562 ;; Defined at:
  4563 ;;		line 46 in file "lcd.c"
  4564 ;; Parameters:    Size  Location     Type
  4565 ;;		None
  4566 ;; Auto vars:     Size  Location     Type
  4567 ;;		None
  4568 ;; Return value:  Size  Location     Type
  4569 ;;                  1    wreg      void 
  4570 ;; Registers used:
  4571 ;;		wreg, status,2, cstack
  4572 ;; Tracked objects:
  4573 ;;		On entry : 0/0
  4574 ;;		On exit  : 0/0
  4575 ;;		Unchanged: 0/0
  4576 ;; Data sizes:     COMRAM   BANK0   BANK1
  4577 ;;      Params:         0       0       0
  4578 ;;      Locals:         0       0       0
  4579 ;;      Temps:          0       0       0
  4580 ;;      Totals:         0       0       0
  4581 ;;Total ram usage:        0 bytes
  4582 ;; Hardware stack levels used: 1
  4583 ;; Hardware stack levels required when called: 4
  4584 ;; This function calls:
  4585 ;;		_Lcd_Cmd
  4586 ;; This function is called by:
  4587 ;;		_input_value
  4588 ;;		_start_process_screen
  4589 ;;		_menu
  4590 ;;		_manual
  4591 ;;		_handle_actuator_push
  4592 ;;		_infusion
  4593 ;;		_syringe_not_pushed_screen
  4594 ;;		_input_valve_screen
  4595 ;;		_handle_syringe_fill
  4596 ;;		_handle_valve_open
  4597 ;;		_handle_valve_close
  4598 ;; This function uses a non-reentrant model
  4599 ;;
  4600                           
  4601                           	psect	text24
  4602   001B5C                     __ptext24:
  4603                           	callstack 0
  4604   001B5C                     _Lcd_Clear:
  4605                           	callstack 25
  4606                           
  4607                           ;lcd.c: 48:  Lcd_Cmd(0);
  4608                           
  4609                           ;incstack = 0
  4610   001B5C  0E00               	movlw	0
  4611   001B5E  EC50  F00D         	call	_Lcd_Cmd
  4612                           
  4613                           ;lcd.c: 49:  Lcd_Cmd(1);
  4614   001B62  0E01               	movlw	1
  4615   001B64  EC50  F00D         	call	_Lcd_Cmd
  4616   001B68  0012               	return		;funcret
  4617   001B6A                     __end_of_Lcd_Clear:
  4618                           	callstack 0
  4619                           
  4620 ;; *************** function _Lcd_Cmd *****************
  4621 ;; Defined at:
  4622 ;;		line 37 in file "lcd.c"
  4623 ;; Parameters:    Size  Location     Type
  4624 ;;  a               1    wreg     unsigned char 
  4625 ;; Auto vars:     Size  Location     Type
  4626 ;;  a               1    6[COMRAM] unsigned char 
  4627 ;; Return value:  Size  Location     Type
  4628 ;;                  1    wreg      void 
  4629 ;; Registers used:
  4630 ;;		wreg, status,2, cstack
  4631 ;; Tracked objects:
  4632 ;;		On entry : 0/0
  4633 ;;		On exit  : 0/0
  4634 ;;		Unchanged: 0/0
  4635 ;; Data sizes:     COMRAM   BANK0   BANK1
  4636 ;;      Params:         0       0       0
  4637 ;;      Locals:         1       0       0
  4638 ;;      Temps:          1       0       0
  4639 ;;      Totals:         2       0       0
  4640 ;;Total ram usage:        2 bytes
  4641 ;; Hardware stack levels used: 1
  4642 ;; Hardware stack levels required when called: 3
  4643 ;; This function calls:
  4644 ;;		_Lcd_Port
  4645 ;; This function is called by:
  4646 ;;		_Lcd_Clear
  4647 ;;		_Lcd_Set_Cursor
  4648 ;;		_Lcd_Init
  4649 ;;		_Lcd_Shift_Right
  4650 ;;		_Lcd_Shift_Left
  4651 ;; This function uses a non-reentrant model
  4652 ;;
  4653                           
  4654                           	psect	text25
  4655   001AA0                     __ptext25:
  4656                           	callstack 0
  4657   001AA0                     _Lcd_Cmd:
  4658                           	callstack 25
  4659                           
  4660                           ;incstack = 0
  4661                           ;Lcd_Cmd@a stored from wreg
  4662   001AA0  6E07               	movwf	Lcd_Cmd@a^0,c
  4663                           
  4664                           ;lcd.c: 37: void Lcd_Cmd(char a);lcd.c: 38: {;lcd.c: 39:  RD2 = 0;
  4665   001AA2  9483               	bcf	3971,2,c	;volatile
  4666                           
  4667                           ;lcd.c: 40:  Lcd_Port(a);
  4668   001AA4  5007               	movf	Lcd_Cmd@a^0,w,c
  4669   001AA6  ECED  F00C         	call	_Lcd_Port
  4670                           
  4671                           ;lcd.c: 41:  RD3 = 1;
  4672   001AAA  8683               	bsf	3971,3,c	;volatile
  4673                           
  4674                           ;lcd.c: 42:         _delay((unsigned long)((4)*(8000000L/4000.0)));
  4675   001AAC  0E0B               	movlw	11
  4676   001AAE  6E06               	movwf	??_Lcd_Cmd^0,c
  4677   001AB0  0E62               	movlw	98
  4678   001AB2                     u5217:
  4679   001AB2  2EE8               	decfsz	wreg,f,c
  4680   001AB4  D7FE               	bra	u5217
  4681   001AB6  2E06               	decfsz	??_Lcd_Cmd^0,f,c
  4682   001AB8  D7FC               	bra	u5217
  4683   001ABA  D000               	nop2	
  4684                           
  4685                           ;lcd.c: 43:         RD3 = 0;
  4686   001ABC  9683               	bcf	3971,3,c	;volatile
  4687   001ABE  0012               	return		;funcret
  4688   001AC0                     __end_of_Lcd_Cmd:
  4689                           	callstack 0
  4690                           
  4691 ;; *************** function _Lcd_Port *****************
  4692 ;; Defined at:
  4693 ;;		line 15 in file "lcd.c"
  4694 ;; Parameters:    Size  Location     Type
  4695 ;;  a               1    wreg     unsigned char 
  4696 ;; Auto vars:     Size  Location     Type
  4697 ;;  a               1    4[COMRAM] unsigned char 
  4698 ;; Return value:  Size  Location     Type
  4699 ;;                  1    wreg      void 
  4700 ;; Registers used:
  4701 ;;		wreg
  4702 ;; Tracked objects:
  4703 ;;		On entry : 0/0
  4704 ;;		On exit  : 0/0
  4705 ;;		Unchanged: 0/0
  4706 ;; Data sizes:     COMRAM   BANK0   BANK1
  4707 ;;      Params:         0       0       0
  4708 ;;      Locals:         1       0       0
  4709 ;;      Temps:          0       0       0
  4710 ;;      Totals:         1       0       0
  4711 ;;Total ram usage:        1 bytes
  4712 ;; Hardware stack levels used: 1
  4713 ;; Hardware stack levels required when called: 2
  4714 ;; This function calls:
  4715 ;;		Nothing
  4716 ;; This function is called by:
  4717 ;;		_Lcd_Cmd
  4718 ;;		_Lcd_Init
  4719 ;;		_Lcd_Write_Char
  4720 ;; This function uses a non-reentrant model
  4721 ;;
  4722                           
  4723                           	psect	text26
  4724   0019DA                     __ptext26:
  4725                           	callstack 0
  4726   0019DA                     _Lcd_Port:
  4727                           	callstack 26
  4728                           
  4729                           ;incstack = 0
  4730                           ;Lcd_Port@a stored from wreg
  4731   0019DA  6E05               	movwf	Lcd_Port@a^0,c
  4732                           
  4733                           ;lcd.c: 15: void Lcd_Port(char a);lcd.c: 16: {;lcd.c: 17:  if(a & 1)
  4734   0019DC  A005               	btfss	Lcd_Port@a^0,0,c
  4735   0019DE  D002               	goto	l17
  4736                           
  4737                           ;lcd.c: 18:   RD4 = 1;
  4738   0019E0  8883               	bsf	3971,4,c	;volatile
  4739   0019E2  D001               	goto	l4143
  4740   0019E4                     l17:
  4741                           
  4742                           ;lcd.c: 20:   RD4 = 0;
  4743   0019E4  9883               	bcf	3971,4,c	;volatile
  4744   0019E6                     l4143:
  4745                           
  4746                           ;lcd.c: 22:  if(a & 2)
  4747   0019E6  A205               	btfss	Lcd_Port@a^0,1,c
  4748   0019E8  D002               	goto	l19
  4749                           
  4750                           ;lcd.c: 23:   RD5 = 1;
  4751   0019EA  8A83               	bsf	3971,5,c	;volatile
  4752   0019EC  D001               	goto	l4147
  4753   0019EE                     l19:
  4754                           
  4755                           ;lcd.c: 25:   RD5 = 0;
  4756   0019EE  9A83               	bcf	3971,5,c	;volatile
  4757   0019F0                     l4147:
  4758                           
  4759                           ;lcd.c: 27:  if(a & 4)
  4760   0019F0  A405               	btfss	Lcd_Port@a^0,2,c
  4761   0019F2  D002               	goto	l21
  4762                           
  4763                           ;lcd.c: 28:   RD6 = 1;
  4764   0019F4  8C83               	bsf	3971,6,c	;volatile
  4765   0019F6  D001               	goto	l4151
  4766   0019F8                     l21:
  4767                           
  4768                           ;lcd.c: 30:   RD6 = 0;
  4769   0019F8  9C83               	bcf	3971,6,c	;volatile
  4770   0019FA                     l4151:
  4771                           
  4772                           ;lcd.c: 32:  if(a & 8)
  4773   0019FA  A605               	btfss	Lcd_Port@a^0,3,c
  4774   0019FC  D002               	goto	l23
  4775                           
  4776                           ;lcd.c: 33:   RD7 = 1;
  4777   0019FE  8E83               	bsf	3971,7,c	;volatile
  4778   001A00  0012               	return	
  4779   001A02                     l23:
  4780                           
  4781                           ;lcd.c: 35:   RD7 = 0;
  4782   001A02  9E83               	bcf	3971,7,c	;volatile
  4783   001A04  0012               	return		;funcret
  4784   001A06                     __end_of_Lcd_Port:
  4785                           	callstack 0
  4786                           
  4787 ;; *************** function _move_actuator *****************
  4788 ;; Defined at:
  4789 ;;		line 29 in file "actuator.c"
  4790 ;; Parameters:    Size  Location     Type
  4791 ;;  direction       2    8[COMRAM] int 
  4792 ;;  speed           2   10[COMRAM] unsigned short 
  4793 ;; Auto vars:     Size  Location     Type
  4794 ;;		None
  4795 ;; Return value:  Size  Location     Type
  4796 ;;                  1    wreg      void 
  4797 ;; Registers used:
  4798 ;;		wreg, status,2, status,0, cstack
  4799 ;; Tracked objects:
  4800 ;;		On entry : 0/0
  4801 ;;		On exit  : 0/0
  4802 ;;		Unchanged: 0/0
  4803 ;; Data sizes:     COMRAM   BANK0   BANK1
  4804 ;;      Params:         4       0       0
  4805 ;;      Locals:         0       0       0
  4806 ;;      Temps:          0       0       0
  4807 ;;      Totals:         4       0       0
  4808 ;;Total ram usage:        4 bytes
  4809 ;; Hardware stack levels used: 1
  4810 ;; Hardware stack levels required when called: 3
  4811 ;; This function calls:
  4812 ;;		_change_direction_motion
  4813 ;;		_set_pwm_duty
  4814 ;; This function is called by:
  4815 ;;		_handle_actuator_push
  4816 ;;		_infusion
  4817 ;;		_handle_syringe_fill
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           	psect	text27
  4822   00181C                     __ptext27:
  4823                           	callstack 0
  4824   00181C                     _move_actuator:
  4825                           	callstack 25
  4826                           
  4827                           ;actuator.c: 31:     if(speed > 0) {
  4828                           
  4829                           ;incstack = 0
  4830   00181C  500B               	movf	move_actuator@speed^0,w,c
  4831   00181E  100C               	iorwf	(move_actuator@speed+1)^0,w,c
  4832   001820  B4D8               	btfsc	status,2,c
  4833   001822  D01D               	goto	l4617
  4834                           
  4835                           ;actuator.c: 32:         if(direction == forward){
  4836   001824  0409               	decf	move_actuator@direction^0,w,c
  4837   001826  100A               	iorwf	(move_actuator@direction+1)^0,w,c
  4838   001828  A4D8               	btfss	status,2,c
  4839   00182A  D00B               	goto	l4613
  4840                           
  4841                           ;actuator.c: 33:             change_direction_motion(0,1);
  4842   00182C  0E00               	movlw	0
  4843   00182E  6E06               	movwf	(change_direction_motion@hDriverIn1+1)^0,c
  4844   001830  0E00               	movlw	0
  4845   001832  6E05               	movwf	change_direction_motion@hDriverIn1^0,c
  4846   001834  0E00               	movlw	0
  4847   001836  6E08               	movwf	(change_direction_motion@hDriverIn2+1)^0,c
  4848   001838  0E01               	movlw	1
  4849   00183A  6E07               	movwf	change_direction_motion@hDriverIn2^0,c
  4850   00183C  EC87  F00D         	call	_change_direction_motion	;wreg free
  4851                           
  4852                           ;actuator.c: 34:         }else if(direction == backwards){
  4853   001840  D00E               	goto	l4617
  4854   001842                     l4613:
  4855   001842  5009               	movf	move_actuator@direction^0,w,c
  4856   001844  100A               	iorwf	(move_actuator@direction+1)^0,w,c
  4857   001846  A4D8               	btfss	status,2,c
  4858   001848  D00A               	goto	l4617
  4859                           
  4860                           ;actuator.c: 35:             change_direction_motion(1,0);
  4861   00184A  0E00               	movlw	0
  4862   00184C  6E06               	movwf	(change_direction_motion@hDriverIn1+1)^0,c
  4863   00184E  0E01               	movlw	1
  4864   001850  6E05               	movwf	change_direction_motion@hDriverIn1^0,c
  4865   001852  0E00               	movlw	0
  4866   001854  6E08               	movwf	(change_direction_motion@hDriverIn2+1)^0,c
  4867   001856  0E00               	movlw	0
  4868   001858  6E07               	movwf	change_direction_motion@hDriverIn2^0,c
  4869   00185A  EC87  F00D         	call	_change_direction_motion	;wreg free
  4870   00185E                     l4617:
  4871                           
  4872                           ;actuator.c: 38:     set_pwm_duty(speed);
  4873   00185E  C00B  F005         	movff	move_actuator@speed,set_pwm_duty@pwm_duty
  4874   001862  C00C  F006         	movff	move_actuator@speed+1,set_pwm_duty@pwm_duty+1
  4875   001866  EC3E  F00D         	call	_set_pwm_duty	;wreg free
  4876   00186A  0012               	return		;funcret
  4877   00186C                     __end_of_move_actuator:
  4878                           	callstack 0
  4879                           
  4880 ;; *************** function _set_pwm_duty *****************
  4881 ;; Defined at:
  4882 ;;		line 18 in file "actuator.c"
  4883 ;; Parameters:    Size  Location     Type
  4884 ;;  pwm_duty        2    4[COMRAM] unsigned short 
  4885 ;; Auto vars:     Size  Location     Type
  4886 ;;		None
  4887 ;; Return value:  Size  Location     Type
  4888 ;;                  1    wreg      void 
  4889 ;; Registers used:
  4890 ;;		wreg, status,2, status,0
  4891 ;; Tracked objects:
  4892 ;;		On entry : 0/0
  4893 ;;		On exit  : 0/0
  4894 ;;		Unchanged: 0/0
  4895 ;; Data sizes:     COMRAM   BANK0   BANK1
  4896 ;;      Params:         2       0       0
  4897 ;;      Locals:         0       0       0
  4898 ;;      Temps:          2       0       0
  4899 ;;      Totals:         4       0       0
  4900 ;;Total ram usage:        4 bytes
  4901 ;; Hardware stack levels used: 1
  4902 ;; Hardware stack levels required when called: 2
  4903 ;; This function calls:
  4904 ;;		Nothing
  4905 ;; This function is called by:
  4906 ;;		_move_actuator
  4907 ;; This function uses a non-reentrant model
  4908 ;;
  4909                           
  4910                           	psect	text28
  4911   001A7C                     __ptext28:
  4912                           	callstack 0
  4913   001A7C                     _set_pwm_duty:
  4914                           	callstack 25
  4915                           
  4916                           ;actuator.c: 18: void set_pwm_duty(uint16_t pwm_duty);actuator.c: 19: {;actuator.c: 20: 
      +                            CCP1CON = ((pwm_duty << 4) & 0x30) | 0x0C;
  4917                           
  4918                           ;incstack = 0
  4919   001A7C  3805               	swapf	set_pwm_duty@pwm_duty^0,w,c
  4920   001A7E  0BF0               	andlw	240
  4921   001A80  0B30               	andlw	48
  4922   001A82  090C               	iorlw	12
  4923   001A84  6EBD               	movwf	189,c	;volatile
  4924                           
  4925                           ;actuator.c: 21:   CCPR1L = pwm_duty>>2;
  4926   001A86  C005  F007         	movff	set_pwm_duty@pwm_duty,??_set_pwm_duty
  4927   001A8A  C006  F008         	movff	set_pwm_duty@pwm_duty+1,??_set_pwm_duty+1
  4928   001A8E  90D8               	bcf	status,0,c
  4929   001A90  3208               	rrcf	(??_set_pwm_duty+1)^0,f,c
  4930   001A92  3207               	rrcf	??_set_pwm_duty^0,f,c
  4931   001A94  90D8               	bcf	status,0,c
  4932   001A96  3208               	rrcf	(??_set_pwm_duty+1)^0,f,c
  4933   001A98  3207               	rrcf	??_set_pwm_duty^0,f,c
  4934   001A9A  5007               	movf	??_set_pwm_duty^0,w,c
  4935   001A9C  6EBE               	movwf	190,c	;volatile
  4936   001A9E  0012               	return		;funcret
  4937   001AA0                     __end_of_set_pwm_duty:
  4938                           	callstack 0
  4939                           
  4940 ;; *************** function _change_direction_motion *****************
  4941 ;; Defined at:
  4942 ;;		line 24 in file "actuator.c"
  4943 ;; Parameters:    Size  Location     Type
  4944 ;;  hDriverIn1      2    4[COMRAM] int 
  4945 ;;  hDriverIn2      2    6[COMRAM] int 
  4946 ;; Auto vars:     Size  Location     Type
  4947 ;;		None
  4948 ;; Return value:  Size  Location     Type
  4949 ;;                  1    wreg      void 
  4950 ;; Registers used:
  4951 ;;		None
  4952 ;; Tracked objects:
  4953 ;;		On entry : 0/0
  4954 ;;		On exit  : 0/0
  4955 ;;		Unchanged: 0/0
  4956 ;; Data sizes:     COMRAM   BANK0   BANK1
  4957 ;;      Params:         4       0       0
  4958 ;;      Locals:         0       0       0
  4959 ;;      Temps:          0       0       0
  4960 ;;      Totals:         4       0       0
  4961 ;;Total ram usage:        4 bytes
  4962 ;; Hardware stack levels used: 1
  4963 ;; Hardware stack levels required when called: 2
  4964 ;; This function calls:
  4965 ;;		Nothing
  4966 ;; This function is called by:
  4967 ;;		_move_actuator
  4968 ;; This function uses a non-reentrant model
  4969 ;;
  4970                           
  4971                           	psect	text29
  4972   001B0E                     __ptext29:
  4973                           	callstack 0
  4974   001B0E                     _change_direction_motion:
  4975                           	callstack 25
  4976                           
  4977                           ;actuator.c: 25:         RD1 = hDriverIn1;
  4978                           
  4979                           ;incstack = 0
  4980   001B0E  A005               	btfss	change_direction_motion@hDriverIn1^0,0,c
  4981   001B10  D002               	goto	u4190
  4982   001B12  8283               	bsf	3971,1,c	;volatile
  4983   001B14  D001               	goto	u4205
  4984   001B16                     u4190:
  4985   001B16  9283               	bcf	3971,1,c	;volatile
  4986   001B18                     u4205:
  4987                           
  4988                           ;actuator.c: 26:         RD0= hDriverIn2;
  4989   001B18  A007               	btfss	change_direction_motion@hDriverIn2^0,0,c
  4990   001B1A  D002               	goto	u4210
  4991   001B1C  8083               	bsf	3971,0,c	;volatile
  4992   001B1E  0012               	return	
  4993   001B20                     u4210:
  4994   001B20  9083               	bcf	3971,0,c	;volatile
  4995   001B22  0012               	return		;funcret
  4996   001B24                     __end_of_change_direction_motion:
  4997                           	callstack 0
  4998                           
  4999 ;; *************** function _input_option *****************
  5000 ;; Defined at:
  5001 ;;		line 190 in file "main.c"
  5002 ;; Parameters:    Size  Location     Type
  5003 ;;		None
  5004 ;; Auto vars:     Size  Location     Type
  5005 ;;  option          2   11[COMRAM] int 
  5006 ;;  userInput       1   13[COMRAM] unsigned char 
  5007 ;; Return value:  Size  Location     Type
  5008 ;;                  2    7[COMRAM] int 
  5009 ;; Registers used:
  5010 ;;		wreg, status,2, status,0, cstack
  5011 ;; Tracked objects:
  5012 ;;		On entry : 0/0
  5013 ;;		On exit  : 0/0
  5014 ;;		Unchanged: 0/0
  5015 ;; Data sizes:     COMRAM   BANK0   BANK1
  5016 ;;      Params:         2       0       0
  5017 ;;      Locals:         3       0       0
  5018 ;;      Temps:          2       0       0
  5019 ;;      Totals:         7       0       0
  5020 ;;Total ram usage:        7 bytes
  5021 ;; Hardware stack levels used: 1
  5022 ;; Hardware stack levels required when called: 4
  5023 ;; This function calls:
  5024 ;;		_switch_press_scan
  5025 ;; This function is called by:
  5026 ;;		_handle_actuator_push
  5027 ;;		_handle_syringe_fill
  5028 ;;		_handle_valve_open
  5029 ;;		_handle_valve_close
  5030 ;;		_confirm_start
  5031 ;; This function uses a non-reentrant model
  5032 ;;
  5033                           
  5034                           	psect	text30
  5035   001108                     __ptext30:
  5036                           	callstack 0
  5037   001108                     _input_option:
  5038                           	callstack 23
  5039                           
  5040                           ;main.c: 191:     char userInput = 'n';
  5041                           
  5042                           ;incstack = 0
  5043   001108  0E6E               	movlw	110
  5044   00110A  6E0E               	movwf	input_option@userInput^0,c
  5045                           
  5046                           ;main.c: 192:     int option;;main.c: 194:     while(userInput == 'n'){
  5047   00110C  D03C               	goto	l4723
  5048   00110E                     l4701:
  5049                           
  5050                           ;main.c: 195:         userInput = switch_press_scan();
  5051   00110E  EC92  F00D         	call	_switch_press_scan	;wreg free
  5052   001112  6E0E               	movwf	input_option@userInput^0,c
  5053                           
  5054                           ;main.c: 196:         if(userInput == '1'){
  5055   001114  0E31               	movlw	49
  5056   001116  180E               	xorwf	input_option@userInput^0,w,c
  5057   001118  A4D8               	btfss	status,2,c
  5058   00111A  D00F               	goto	l4709
  5059                           
  5060                           ;main.c: 197:             _delay((unsigned long)((1000)*(8000000L/4000.0)));
  5061   00111C  0E0B               	movlw	11
  5062   00111E  6E0B               	movwf	(??_input_option+1)^0,c
  5063   001120  0E26               	movlw	38
  5064   001122  6E0A               	movwf	??_input_option^0,c
  5065   001124  0E5E               	movlw	94
  5066   001126                     u5227:
  5067   001126  2EE8               	decfsz	wreg,f,c
  5068   001128  D7FE               	bra	u5227
  5069   00112A  2E0A               	decfsz	??_input_option^0,f,c
  5070   00112C  D7FC               	bra	u5227
  5071   00112E  2E0B               	decfsz	(??_input_option+1)^0,f,c
  5072   001130  D7FA               	bra	u5227
  5073                           
  5074                           ;main.c: 198:             option = 1;
  5075   001132  0E00               	movlw	0
  5076   001134  6E0D               	movwf	(input_option@option+1)^0,c
  5077   001136  0E01               	movlw	1
  5078   001138  D025               	goto	L4
  5079   00113A                     l4709:
  5080   00113A  0E32               	movlw	50
  5081   00113C  180E               	xorwf	input_option@userInput^0,w,c
  5082   00113E  A4D8               	btfss	status,2,c
  5083   001140  D00F               	goto	l4715
  5084                           
  5085                           ;main.c: 200:             _delay((unsigned long)((1000)*(8000000L/4000.0)));
  5086   001142  0E0B               	movlw	11
  5087   001144  6E0B               	movwf	(??_input_option+1)^0,c
  5088   001146  0E26               	movlw	38
  5089   001148  6E0A               	movwf	??_input_option^0,c
  5090   00114A  0E5E               	movlw	94
  5091   00114C                     u5237:
  5092   00114C  2EE8               	decfsz	wreg,f,c
  5093   00114E  D7FE               	bra	u5237
  5094   001150  2E0A               	decfsz	??_input_option^0,f,c
  5095   001152  D7FC               	bra	u5237
  5096   001154  2E0B               	decfsz	(??_input_option+1)^0,f,c
  5097   001156  D7FA               	bra	u5237
  5098                           
  5099                           ;main.c: 201:             option = 2;
  5100   001158  0E00               	movlw	0
  5101   00115A  6E0D               	movwf	(input_option@option+1)^0,c
  5102   00115C  0E02               	movlw	2
  5103   00115E  D012               	goto	L4
  5104   001160                     l4715:
  5105   001160  0E62               	movlw	98
  5106   001162  180E               	xorwf	input_option@userInput^0,w,c
  5107   001164  A4D8               	btfss	status,2,c
  5108   001166  D7D0               	goto	__ptext30
  5109                           
  5110                           ;main.c: 203:             _delay((unsigned long)((1000)*(8000000L/4000.0)));
  5111   001168  0E0B               	movlw	11
  5112   00116A  6E0B               	movwf	(??_input_option+1)^0,c
  5113   00116C  0E26               	movlw	38
  5114   00116E  6E0A               	movwf	??_input_option^0,c
  5115   001170  0E5E               	movlw	94
  5116   001172                     u5247:
  5117   001172  2EE8               	decfsz	wreg,f,c
  5118   001174  D7FE               	bra	u5247
  5119   001176  2E0A               	decfsz	??_input_option^0,f,c
  5120   001178  D7FC               	bra	u5247
  5121   00117A  2E0B               	decfsz	(??_input_option+1)^0,f,c
  5122   00117C  D7FA               	bra	u5247
  5123                           
  5124                           ;main.c: 204:             option = 'b';
  5125   00117E  0E00               	movlw	0
  5126   001180  6E0D               	movwf	(input_option@option+1)^0,c
  5127   001182  0E62               	movlw	98
  5128   001184                     L4:
  5129   001184  6E0C               	movwf	input_option@option^0,c
  5130   001186                     l4723:
  5131                           
  5132                           ;main.c: 194:     while(userInput == 'n'){
  5133   001186  0E6E               	movlw	110
  5134   001188  180E               	xorwf	input_option@userInput^0,w,c
  5135   00118A  B4D8               	btfsc	status,2,c
  5136   00118C  D7C0               	goto	l4701
  5137                           
  5138                           ;main.c: 209:     return option;
  5139   00118E  C00C  F008         	movff	input_option@option,?_input_option
  5140   001192  C00D  F009         	movff	input_option@option+1,?_input_option+1
  5141   001196  0012               	return		;funcret
  5142   001198                     __end_of_input_option:
  5143                           	callstack 0
  5144                           
  5145 ;; *************** function _switch_press_scan *****************
  5146 ;; Defined at:
  5147 ;;		line 31 in file "keypad.c"
  5148 ;; Parameters:    Size  Location     Type
  5149 ;;		None
  5150 ;; Auto vars:     Size  Location     Type
  5151 ;;  key             1    6[COMRAM] unsigned char 
  5152 ;; Return value:  Size  Location     Type
  5153 ;;                  1    wreg      unsigned char 
  5154 ;; Registers used:
  5155 ;;		wreg, status,2, status,0, cstack
  5156 ;; Tracked objects:
  5157 ;;		On entry : 0/0
  5158 ;;		On exit  : 0/0
  5159 ;;		Unchanged: 0/0
  5160 ;; Data sizes:     COMRAM   BANK0   BANK1
  5161 ;;      Params:         0       0       0
  5162 ;;      Locals:         1       0       0
  5163 ;;      Temps:          0       0       0
  5164 ;;      Totals:         1       0       0
  5165 ;;Total ram usage:        1 bytes
  5166 ;; Hardware stack levels used: 1
  5167 ;; Hardware stack levels required when called: 3
  5168 ;; This function calls:
  5169 ;;		_keypad_scanner
  5170 ;; This function is called by:
  5171 ;;		_input_option
  5172 ;;		_main
  5173 ;;		_input_numbers
  5174 ;; This function uses a non-reentrant model
  5175 ;;
  5176                           
  5177                           	psect	text31
  5178   001B24                     __ptext31:
  5179                           	callstack 0
  5180   001B24                     _switch_press_scan:
  5181                           	callstack 27
  5182                           
  5183                           ;keypad.c: 33:             char key = 'n';
  5184                           
  5185                           ;incstack = 0
  5186   001B24  0E6E               	movlw	110
  5187   001B26  D002               	goto	L5
  5188   001B28                     l4433:
  5189                           
  5190                           ;keypad.c: 35:             key = keypad_scanner();
  5191   001B28  EC1F  F003         	call	_keypad_scanner	;wreg free
  5192   001B2C                     L5:
  5193   001B2C  6E07               	movwf	switch_press_scan@key^0,c
  5194                           
  5195                           ;keypad.c: 34:             while(key=='n')
  5196   001B2E  0E6E               	movlw	110
  5197   001B30  1807               	xorwf	switch_press_scan@key^0,w,c
  5198   001B32  B4D8               	btfsc	status,2,c
  5199   001B34  D7F9               	goto	l4433
  5200                           
  5201                           ;keypad.c: 36:             return key;
  5202   001B36  5007               	movf	switch_press_scan@key^0,w,c
  5203   001B38  0012               	return		;funcret
  5204   001B3A                     __end_of_switch_press_scan:
  5205                           	callstack 0
  5206                           
  5207 ;; *************** function _keypad_scanner *****************
  5208 ;; Defined at:
  5209 ;;		line 3 in file "keypad.c"
  5210 ;; Parameters:    Size  Location     Type
  5211 ;;		None
  5212 ;; Auto vars:     Size  Location     Type
  5213 ;;		None
  5214 ;; Return value:  Size  Location     Type
  5215 ;;                  1    wreg      unsigned char 
  5216 ;; Registers used:
  5217 ;;		wreg
  5218 ;; Tracked objects:
  5219 ;;		On entry : 0/0
  5220 ;;		On exit  : 0/0
  5221 ;;		Unchanged: 0/0
  5222 ;; Data sizes:     COMRAM   BANK0   BANK1
  5223 ;;      Params:         0       0       0
  5224 ;;      Locals:         0       0       0
  5225 ;;      Temps:          2       0       0
  5226 ;;      Totals:         2       0       0
  5227 ;;Total ram usage:        2 bytes
  5228 ;; Hardware stack levels used: 1
  5229 ;; Hardware stack levels required when called: 2
  5230 ;; This function calls:
  5231 ;;		Nothing
  5232 ;; This function is called by:
  5233 ;;		_switch_press_scan
  5234 ;; This function uses a non-reentrant model
  5235 ;;
  5236                           
  5237                           	psect	text32
  5238   00063E                     __ptext32:
  5239                           	callstack 0
  5240   00063E                     _keypad_scanner:
  5241                           	callstack 27
  5242                           
  5243                           ;keypad.c: 5:             RB0 = 0; RB1 = 1; RB2 = 1; RB3 = 1;
  5244                           
  5245                           ;incstack = 0
  5246   00063E  9081               	bcf	3969,0,c	;volatile
  5247   000640  8281               	bsf	3969,1,c	;volatile
  5248   000642  8481               	bsf	3969,2,c	;volatile
  5249   000644  8681               	bsf	3969,3,c	;volatile
  5250                           
  5251                           ;keypad.c: 6:             if (RB4 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0)
      +                          )); while (RB4==0); return '7'; }
  5252   000646  B881               	btfsc	3969,4,c	;volatile
  5253   000648  D010               	goto	l251
  5254   00064A  0E02               	movlw	2
  5255   00064C  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5256   00064E  0E04               	movlw	4
  5257   000650  6E05               	movwf	??_keypad_scanner^0,c
  5258   000652  0EBA               	movlw	186
  5259   000654                     u5257:
  5260   000654  2EE8               	decfsz	wreg,f,c
  5261   000656  D7FE               	bra	u5257
  5262   000658  2E05               	decfsz	??_keypad_scanner^0,f,c
  5263   00065A  D7FC               	bra	u5257
  5264   00065C  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5265   00065E  D7FA               	bra	u5257
  5266   000660  D000               	nop2	
  5267   000662                     l252:
  5268   000662  A881               	btfss	3969,4,c	;volatile
  5269   000664  D7FE               	goto	l252
  5270   000666  0E37               	movlw	55
  5271   000668  0012               	return	
  5272   00066A                     l251:
  5273                           
  5274                           ;keypad.c: 7:             if (RC7 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0)
      +                          )); while (RC7==0); return '8'; }
  5275   00066A  BE82               	btfsc	3970,7,c	;volatile
  5276   00066C  D010               	goto	l256
  5277   00066E  0E02               	movlw	2
  5278   000670  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5279   000672  0E04               	movlw	4
  5280   000674  6E05               	movwf	??_keypad_scanner^0,c
  5281   000676  0EBA               	movlw	186
  5282   000678                     u5267:
  5283   000678  2EE8               	decfsz	wreg,f,c
  5284   00067A  D7FE               	bra	u5267
  5285   00067C  2E05               	decfsz	??_keypad_scanner^0,f,c
  5286   00067E  D7FC               	bra	u5267
  5287   000680  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5288   000682  D7FA               	bra	u5267
  5289   000684  D000               	nop2	
  5290   000686                     l257:
  5291   000686  AE82               	btfss	3970,7,c	;volatile
  5292   000688  D7FE               	goto	l257
  5293   00068A  0E38               	movlw	56
  5294   00068C  0012               	return	
  5295   00068E                     l256:
  5296                           
  5297                           ;keypad.c: 8:             if (RB6 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0)
      +                          )); while (RB6==0); return '9'; }
  5298   00068E  BC81               	btfsc	3969,6,c	;volatile
  5299   000690  D010               	goto	l260
  5300   000692  0E02               	movlw	2
  5301   000694  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5302   000696  0E04               	movlw	4
  5303   000698  6E05               	movwf	??_keypad_scanner^0,c
  5304   00069A  0EBA               	movlw	186
  5305   00069C                     u5277:
  5306   00069C  2EE8               	decfsz	wreg,f,c
  5307   00069E  D7FE               	bra	u5277
  5308   0006A0  2E05               	decfsz	??_keypad_scanner^0,f,c
  5309   0006A2  D7FC               	bra	u5277
  5310   0006A4  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5311   0006A6  D7FA               	bra	u5277
  5312   0006A8  D000               	nop2	
  5313   0006AA                     l261:
  5314   0006AA  AC81               	btfss	3969,6,c	;volatile
  5315   0006AC  D7FE               	goto	l261
  5316   0006AE  0E39               	movlw	57
  5317   0006B0  0012               	return	
  5318   0006B2                     l260:
  5319                           
  5320                           ;keypad.c: 9:             if (RB7 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0)
      +                          )); while (RB7==0); return 'u'; }
  5321   0006B2  BE81               	btfsc	3969,7,c	;volatile
  5322   0006B4  D010               	goto	l264
  5323   0006B6  0E02               	movlw	2
  5324   0006B8  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5325   0006BA  0E04               	movlw	4
  5326   0006BC  6E05               	movwf	??_keypad_scanner^0,c
  5327   0006BE  0EBA               	movlw	186
  5328   0006C0                     u5287:
  5329   0006C0  2EE8               	decfsz	wreg,f,c
  5330   0006C2  D7FE               	bra	u5287
  5331   0006C4  2E05               	decfsz	??_keypad_scanner^0,f,c
  5332   0006C6  D7FC               	bra	u5287
  5333   0006C8  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5334   0006CA  D7FA               	bra	u5287
  5335   0006CC  D000               	nop2	
  5336   0006CE                     l265:
  5337   0006CE  AE81               	btfss	3969,7,c	;volatile
  5338   0006D0  D7FE               	goto	l265
  5339   0006D2  0E75               	movlw	117
  5340   0006D4  0012               	return	
  5341   0006D6                     l264:
  5342                           
  5343                           ;keypad.c: 11:             RB0 = 1; RB1 = 0; RB2 = 1; RB3 = 1;
  5344   0006D6  8081               	bsf	3969,0,c	;volatile
  5345   0006D8  9281               	bcf	3969,1,c	;volatile
  5346   0006DA  8481               	bsf	3969,2,c	;volatile
  5347   0006DC  8681               	bsf	3969,3,c	;volatile
  5348                           
  5349                           ;keypad.c: 12:             if (RB4 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB4==0); return '4'; }
  5350   0006DE  B881               	btfsc	3969,4,c	;volatile
  5351   0006E0  D010               	goto	l268
  5352   0006E2  0E02               	movlw	2
  5353   0006E4  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5354   0006E6  0E04               	movlw	4
  5355   0006E8  6E05               	movwf	??_keypad_scanner^0,c
  5356   0006EA  0EBA               	movlw	186
  5357   0006EC                     u5297:
  5358   0006EC  2EE8               	decfsz	wreg,f,c
  5359   0006EE  D7FE               	bra	u5297
  5360   0006F0  2E05               	decfsz	??_keypad_scanner^0,f,c
  5361   0006F2  D7FC               	bra	u5297
  5362   0006F4  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5363   0006F6  D7FA               	bra	u5297
  5364   0006F8  D000               	nop2	
  5365   0006FA                     l269:
  5366   0006FA  A881               	btfss	3969,4,c	;volatile
  5367   0006FC  D7FE               	goto	l269
  5368   0006FE  0E34               	movlw	52
  5369   000700  0012               	return	
  5370   000702                     l268:
  5371                           
  5372                           ;keypad.c: 13:             if (RC7 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RC7==0); return '5'; }
  5373   000702  BE82               	btfsc	3970,7,c	;volatile
  5374   000704  D010               	goto	l272
  5375   000706  0E02               	movlw	2
  5376   000708  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5377   00070A  0E04               	movlw	4
  5378   00070C  6E05               	movwf	??_keypad_scanner^0,c
  5379   00070E  0EBA               	movlw	186
  5380   000710                     u5307:
  5381   000710  2EE8               	decfsz	wreg,f,c
  5382   000712  D7FE               	bra	u5307
  5383   000714  2E05               	decfsz	??_keypad_scanner^0,f,c
  5384   000716  D7FC               	bra	u5307
  5385   000718  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5386   00071A  D7FA               	bra	u5307
  5387   00071C  D000               	nop2	
  5388   00071E                     l273:
  5389   00071E  AE82               	btfss	3970,7,c	;volatile
  5390   000720  D7FE               	goto	l273
  5391   000722  0E35               	movlw	53
  5392   000724  0012               	return	
  5393   000726                     l272:
  5394                           
  5395                           ;keypad.c: 14:             if (RB6 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB6==0); return '6'; }
  5396   000726  BC81               	btfsc	3969,6,c	;volatile
  5397   000728  D010               	goto	l276
  5398   00072A  0E02               	movlw	2
  5399   00072C  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5400   00072E  0E04               	movlw	4
  5401   000730  6E05               	movwf	??_keypad_scanner^0,c
  5402   000732  0EBA               	movlw	186
  5403   000734                     u5317:
  5404   000734  2EE8               	decfsz	wreg,f,c
  5405   000736  D7FE               	bra	u5317
  5406   000738  2E05               	decfsz	??_keypad_scanner^0,f,c
  5407   00073A  D7FC               	bra	u5317
  5408   00073C  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5409   00073E  D7FA               	bra	u5317
  5410   000740  D000               	nop2	
  5411   000742                     l277:
  5412   000742  AC81               	btfss	3969,6,c	;volatile
  5413   000744  D7FE               	goto	l277
  5414   000746  0E36               	movlw	54
  5415   000748  0012               	return	
  5416   00074A                     l276:
  5417                           
  5418                           ;keypad.c: 15:             if (RB7 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB7==0); return 'r'; }
  5419   00074A  BE81               	btfsc	3969,7,c	;volatile
  5420   00074C  D010               	goto	l280
  5421   00074E  0E02               	movlw	2
  5422   000750  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5423   000752  0E04               	movlw	4
  5424   000754  6E05               	movwf	??_keypad_scanner^0,c
  5425   000756  0EBA               	movlw	186
  5426   000758                     u5327:
  5427   000758  2EE8               	decfsz	wreg,f,c
  5428   00075A  D7FE               	bra	u5327
  5429   00075C  2E05               	decfsz	??_keypad_scanner^0,f,c
  5430   00075E  D7FC               	bra	u5327
  5431   000760  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5432   000762  D7FA               	bra	u5327
  5433   000764  D000               	nop2	
  5434   000766                     l281:
  5435   000766  AE81               	btfss	3969,7,c	;volatile
  5436   000768  D7FE               	goto	l281
  5437   00076A  0E72               	movlw	114
  5438   00076C  0012               	return	
  5439   00076E                     l280:
  5440                           
  5441                           ;keypad.c: 17:             RB0 = 1; RB1 = 1; RB2 = 0; RB3 = 1;
  5442   00076E  8081               	bsf	3969,0,c	;volatile
  5443   000770  8281               	bsf	3969,1,c	;volatile
  5444   000772  9481               	bcf	3969,2,c	;volatile
  5445   000774  8681               	bsf	3969,3,c	;volatile
  5446                           
  5447                           ;keypad.c: 18:             if (RB4 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB4==0); return '1'; }
  5448   000776  B881               	btfsc	3969,4,c	;volatile
  5449   000778  D010               	goto	l284
  5450   00077A  0E02               	movlw	2
  5451   00077C  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5452   00077E  0E04               	movlw	4
  5453   000780  6E05               	movwf	??_keypad_scanner^0,c
  5454   000782  0EBA               	movlw	186
  5455   000784                     u5337:
  5456   000784  2EE8               	decfsz	wreg,f,c
  5457   000786  D7FE               	bra	u5337
  5458   000788  2E05               	decfsz	??_keypad_scanner^0,f,c
  5459   00078A  D7FC               	bra	u5337
  5460   00078C  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5461   00078E  D7FA               	bra	u5337
  5462   000790  D000               	nop2	
  5463   000792                     l285:
  5464   000792  A881               	btfss	3969,4,c	;volatile
  5465   000794  D7FE               	goto	l285
  5466   000796  0E31               	movlw	49
  5467   000798  0012               	return	
  5468   00079A                     l284:
  5469                           
  5470                           ;keypad.c: 19:             if (RC7 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RC7==0); return '2'; }
  5471   00079A  BE82               	btfsc	3970,7,c	;volatile
  5472   00079C  D010               	goto	l288
  5473   00079E  0E02               	movlw	2
  5474   0007A0  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5475   0007A2  0E04               	movlw	4
  5476   0007A4  6E05               	movwf	??_keypad_scanner^0,c
  5477   0007A6  0EBA               	movlw	186
  5478   0007A8                     u5347:
  5479   0007A8  2EE8               	decfsz	wreg,f,c
  5480   0007AA  D7FE               	bra	u5347
  5481   0007AC  2E05               	decfsz	??_keypad_scanner^0,f,c
  5482   0007AE  D7FC               	bra	u5347
  5483   0007B0  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5484   0007B2  D7FA               	bra	u5347
  5485   0007B4  D000               	nop2	
  5486   0007B6                     l289:
  5487   0007B6  AE82               	btfss	3970,7,c	;volatile
  5488   0007B8  D7FE               	goto	l289
  5489   0007BA  0E32               	movlw	50
  5490   0007BC  0012               	return	
  5491   0007BE                     l288:
  5492                           
  5493                           ;keypad.c: 20:             if (RB6 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB6==0); return '3'; }
  5494   0007BE  BC81               	btfsc	3969,6,c	;volatile
  5495   0007C0  D010               	goto	l292
  5496   0007C2  0E02               	movlw	2
  5497   0007C4  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5498   0007C6  0E04               	movlw	4
  5499   0007C8  6E05               	movwf	??_keypad_scanner^0,c
  5500   0007CA  0EBA               	movlw	186
  5501   0007CC                     u5357:
  5502   0007CC  2EE8               	decfsz	wreg,f,c
  5503   0007CE  D7FE               	bra	u5357
  5504   0007D0  2E05               	decfsz	??_keypad_scanner^0,f,c
  5505   0007D2  D7FC               	bra	u5357
  5506   0007D4  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5507   0007D6  D7FA               	bra	u5357
  5508   0007D8  D000               	nop2	
  5509   0007DA                     l293:
  5510   0007DA  AC81               	btfss	3969,6,c	;volatile
  5511   0007DC  D7FE               	goto	l293
  5512   0007DE  0E33               	movlw	51
  5513   0007E0  0012               	return	
  5514   0007E2                     l292:
  5515                           
  5516                           ;keypad.c: 21:             if (RB7 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB7==0); return 'l'; }
  5517   0007E2  BE81               	btfsc	3969,7,c	;volatile
  5518   0007E4  D010               	goto	l296
  5519   0007E6  0E02               	movlw	2
  5520   0007E8  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5521   0007EA  0E04               	movlw	4
  5522   0007EC  6E05               	movwf	??_keypad_scanner^0,c
  5523   0007EE  0EBA               	movlw	186
  5524   0007F0                     u5367:
  5525   0007F0  2EE8               	decfsz	wreg,f,c
  5526   0007F2  D7FE               	bra	u5367
  5527   0007F4  2E05               	decfsz	??_keypad_scanner^0,f,c
  5528   0007F6  D7FC               	bra	u5367
  5529   0007F8  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5530   0007FA  D7FA               	bra	u5367
  5531   0007FC  D000               	nop2	
  5532   0007FE                     l297:
  5533   0007FE  AE81               	btfss	3969,7,c	;volatile
  5534   000800  D7FE               	goto	l297
  5535   000802  0E6C               	movlw	108
  5536   000804  0012               	return	
  5537   000806                     l296:
  5538                           
  5539                           ;keypad.c: 23:             RB0 = 1; RB1 = 1; RB2 = 1; RB3 = 0;
  5540   000806  8081               	bsf	3969,0,c	;volatile
  5541   000808  8281               	bsf	3969,1,c	;volatile
  5542   00080A  8481               	bsf	3969,2,c	;volatile
  5543   00080C  9681               	bcf	3969,3,c	;volatile
  5544                           
  5545                           ;keypad.c: 24:             if (RB4 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB4==0); return 'b'; }
  5546   00080E  B881               	btfsc	3969,4,c	;volatile
  5547   000810  D010               	goto	l300
  5548   000812  0E02               	movlw	2
  5549   000814  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5550   000816  0E04               	movlw	4
  5551   000818  6E05               	movwf	??_keypad_scanner^0,c
  5552   00081A  0EBA               	movlw	186
  5553   00081C                     u5377:
  5554   00081C  2EE8               	decfsz	wreg,f,c
  5555   00081E  D7FE               	bra	u5377
  5556   000820  2E05               	decfsz	??_keypad_scanner^0,f,c
  5557   000822  D7FC               	bra	u5377
  5558   000824  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5559   000826  D7FA               	bra	u5377
  5560   000828  D000               	nop2	
  5561   00082A                     l301:
  5562   00082A  A881               	btfss	3969,4,c	;volatile
  5563   00082C  D7FE               	goto	l301
  5564   00082E  0E62               	movlw	98
  5565   000830  0012               	return	
  5566   000832                     l300:
  5567                           
  5568                           ;keypad.c: 25:             if (RC7 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RC7==0); return '0'; }
  5569   000832  BE82               	btfsc	3970,7,c	;volatile
  5570   000834  D010               	goto	l304
  5571   000836  0E02               	movlw	2
  5572   000838  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5573   00083A  0E04               	movlw	4
  5574   00083C  6E05               	movwf	??_keypad_scanner^0,c
  5575   00083E  0EBA               	movlw	186
  5576   000840                     u5387:
  5577   000840  2EE8               	decfsz	wreg,f,c
  5578   000842  D7FE               	bra	u5387
  5579   000844  2E05               	decfsz	??_keypad_scanner^0,f,c
  5580   000846  D7FC               	bra	u5387
  5581   000848  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5582   00084A  D7FA               	bra	u5387
  5583   00084C  D000               	nop2	
  5584   00084E                     l305:
  5585   00084E  AE82               	btfss	3970,7,c	;volatile
  5586   000850  D7FE               	goto	l305
  5587   000852  0E30               	movlw	48
  5588   000854  0012               	return	
  5589   000856                     l304:
  5590                           
  5591                           ;keypad.c: 26:             if (RB6 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB6==0); return '.'; }
  5592   000856  BC81               	btfsc	3969,6,c	;volatile
  5593   000858  D010               	goto	l308
  5594   00085A  0E02               	movlw	2
  5595   00085C  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5596   00085E  0E04               	movlw	4
  5597   000860  6E05               	movwf	??_keypad_scanner^0,c
  5598   000862  0EBA               	movlw	186
  5599   000864                     u5397:
  5600   000864  2EE8               	decfsz	wreg,f,c
  5601   000866  D7FE               	bra	u5397
  5602   000868  2E05               	decfsz	??_keypad_scanner^0,f,c
  5603   00086A  D7FC               	bra	u5397
  5604   00086C  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5605   00086E  D7FA               	bra	u5397
  5606   000870  D000               	nop2	
  5607   000872                     l309:
  5608   000872  AC81               	btfss	3969,6,c	;volatile
  5609   000874  D7FE               	goto	l309
  5610   000876  0E2E               	movlw	46
  5611   000878  0012               	return	
  5612   00087A                     l308:
  5613                           
  5614                           ;keypad.c: 27:             if (RB7 == 0) { _delay((unsigned long)((100)*(8000000L/4000.0
      +                          ))); while (RB7==0); return 'd'; }
  5615   00087A  BE81               	btfsc	3969,7,c	;volatile
  5616   00087C  D010               	goto	l4283
  5617   00087E  0E02               	movlw	2
  5618   000880  6E06               	movwf	(??_keypad_scanner+1)^0,c
  5619   000882  0E04               	movlw	4
  5620   000884  6E05               	movwf	??_keypad_scanner^0,c
  5621   000886  0EBA               	movlw	186
  5622   000888                     u5407:
  5623   000888  2EE8               	decfsz	wreg,f,c
  5624   00088A  D7FE               	bra	u5407
  5625   00088C  2E05               	decfsz	??_keypad_scanner^0,f,c
  5626   00088E  D7FC               	bra	u5407
  5627   000890  2E06               	decfsz	(??_keypad_scanner+1)^0,f,c
  5628   000892  D7FA               	bra	u5407
  5629   000894  D000               	nop2	
  5630   000896                     l313:
  5631   000896  AE81               	btfss	3969,7,c	;volatile
  5632   000898  D7FE               	goto	l313
  5633   00089A  0E64               	movlw	100
  5634   00089C  0012               	return	
  5635   00089E                     l4283:
  5636                           
  5637                           ;keypad.c: 29:     return 'n';
  5638   00089E  0E6E               	movlw	110
  5639   0008A0  0012               	return		;funcret
  5640   0008A2                     __end_of_keypad_scanner:
  5641                           	callstack 0
  5642                           
  5643 ;; *************** function _ADC_Read *****************
  5644 ;; Defined at:
  5645 ;;		line 6 in file "helper.c"
  5646 ;; Parameters:    Size  Location     Type
  5647 ;;  channel         1    wreg     char 
  5648 ;; Auto vars:     Size  Location     Type
  5649 ;;  channel         1   10[COMRAM] char 
  5650 ;;  digital         2   11[COMRAM] short 
  5651 ;; Return value:  Size  Location     Type
  5652 ;;                  2    4[COMRAM] short 
  5653 ;; Registers used:
  5654 ;;		wreg, status,2, status,0
  5655 ;; Tracked objects:
  5656 ;;		On entry : 0/0
  5657 ;;		On exit  : 0/0
  5658 ;;		Unchanged: 0/0
  5659 ;; Data sizes:     COMRAM   BANK0   BANK1
  5660 ;;      Params:         2       0       0
  5661 ;;      Locals:         3       0       0
  5662 ;;      Temps:          4       0       0
  5663 ;;      Totals:         9       0       0
  5664 ;;Total ram usage:        9 bytes
  5665 ;; Hardware stack levels used: 1
  5666 ;; Hardware stack levels required when called: 2
  5667 ;; This function calls:
  5668 ;;		Nothing
  5669 ;; This function is called by:
  5670 ;;		_handle_actuator_push
  5671 ;;		_infusion
  5672 ;;		_handle_infusion_setup
  5673 ;;		_handle_syringe_fill
  5674 ;; This function uses a non-reentrant model
  5675 ;;
  5676                           
  5677                           	psect	text33
  5678   001420                     __ptext33:
  5679                           	callstack 0
  5680   001420                     _ADC_Read:
  5681                           	callstack 25
  5682                           
  5683                           ;incstack = 0
  5684                           ;ADC_Read@channel stored from wreg
  5685   001420  6E0B               	movwf	ADC_Read@channel^0,c
  5686                           
  5687                           ;helper.c: 6: int16_t ADC_Read(int8_t channel);helper.c: 7: {;helper.c: 8:     int16_t d
      +                          igital;;helper.c: 9:     ADCON0 =(ADCON0 & 0b11000011)|((channel<<2) & 0b00111100);
  5688   001422  C00B  F007         	movff	ADC_Read@channel,??_ADC_Read
  5689   001426  90D8               	bcf	status,0,c
  5690   001428  3607               	rlcf	??_ADC_Read^0,f,c
  5691   00142A  90D8               	bcf	status,0,c
  5692   00142C  3607               	rlcf	??_ADC_Read^0,f,c
  5693   00142E  0E3C               	movlw	60
  5694   001430  1607               	andwf	??_ADC_Read^0,f,c
  5695   001432  50C2               	movf	194,w,c	;volatile
  5696   001434  0BC3               	andlw	195
  5697   001436  1007               	iorwf	??_ADC_Read^0,w,c
  5698   001438  6EC2               	movwf	194,c	;volatile
  5699                           
  5700                           ;helper.c: 10:     ADCON0 |= ((1<<ADON)|(1<<GO));
  5701   00143A  A2C2               	btfss	4034,1,c	;volatile
  5702   00143C  D003               	goto	u4510
  5703   00143E  6A07               	clrf	??_ADC_Read^0,c
  5704   001440  2A07               	incf	??_ADC_Read^0,f,c
  5705   001442  D001               	goto	u4528
  5706   001444                     u4510:
  5707   001444  6A07               	clrf	??_ADC_Read^0,c
  5708   001446                     u4528:
  5709   001446  0E01               	movlw	1
  5710   001448  6E08               	movwf	(??_ADC_Read+1)^0,c
  5711   00144A  2A07               	incf	??_ADC_Read^0,f,c
  5712   00144C  D002               	goto	u4534
  5713   00144E                     u4535:
  5714   00144E  90D8               	bcf	status,0,c
  5715   001450  3608               	rlcf	(??_ADC_Read+1)^0,f,c
  5716   001452                     u4534:
  5717   001452  2E07               	decfsz	??_ADC_Read^0,f,c
  5718   001454  D7FC               	goto	u4535
  5719   001456  A0C2               	btfss	4034,0,c	;volatile
  5720   001458  D003               	goto	u4540
  5721   00145A  6A09               	clrf	(??_ADC_Read+2)^0,c
  5722   00145C  2A09               	incf	(??_ADC_Read+2)^0,f,c
  5723   00145E  D001               	goto	u4558
  5724   001460                     u4540:
  5725   001460  6A09               	clrf	(??_ADC_Read+2)^0,c
  5726   001462                     u4558:
  5727   001462  0E01               	movlw	1
  5728   001464  6E0A               	movwf	(??_ADC_Read+3)^0,c
  5729   001466  2A09               	incf	(??_ADC_Read+2)^0,f,c
  5730   001468  D002               	goto	u4564
  5731   00146A                     u4565:
  5732   00146A  90D8               	bcf	status,0,c
  5733   00146C  360A               	rlcf	(??_ADC_Read+3)^0,f,c
  5734   00146E                     u4564:
  5735   00146E  2E09               	decfsz	(??_ADC_Read+2)^0,f,c
  5736   001470  D7FC               	goto	u4565
  5737   001472  500A               	movf	(??_ADC_Read+3)^0,w,c
  5738   001474  1008               	iorwf	(??_ADC_Read+1)^0,w,c
  5739   001476  12C2               	iorwf	194,f,c	;volatile
  5740   001478                     l130:
  5741   001478  B2C2               	btfsc	194,1,c	;volatile
  5742   00147A  D7FE               	goto	l130
  5743                           
  5744                           ;helper.c: 12:     digital = (ADRESH*256) | (ADRESL);
  5745   00147C  50C3               	movf	195,w,c	;volatile
  5746   00147E  CFC4 F007          	movff	4036,??_ADC_Read	;volatile
  5747   001482  6A08               	clrf	(??_ADC_Read+1)^0,c
  5748   001484  C007  F008         	movff	??_ADC_Read,??_ADC_Read+1
  5749   001488  6A07               	clrf	??_ADC_Read^0,c
  5750   00148A  1007               	iorwf	??_ADC_Read^0,w,c
  5751   00148C  6E0C               	movwf	ADC_Read@digital^0,c
  5752   00148E  5008               	movf	(??_ADC_Read+1)^0,w,c
  5753   001490  6E0D               	movwf	(ADC_Read@digital+1)^0,c
  5754                           
  5755                           ;helper.c: 13:     return(digital);
  5756   001492  C00C  F005         	movff	ADC_Read@digital,?_ADC_Read
  5757   001496  C00D  F006         	movff	ADC_Read@digital+1,?_ADC_Read+1
  5758   00149A  0012               	return		;funcret
  5759   00149C                     __end_of_ADC_Read:
  5760                           	callstack 0
  5761                           
  5762 ;; *************** function _getExpected *****************
  5763 ;; Defined at:
  5764 ;;		line 367 in file "main.c"
  5765 ;; Parameters:    Size  Location     Type
  5766 ;;		None
  5767 ;; Auto vars:     Size  Location     Type
  5768 ;;  expected        4   91[COMRAM] long 
  5769 ;;  ms              4   87[COMRAM] long 
  5770 ;; Return value:  Size  Location     Type
  5771 ;;                  4   83[COMRAM] long 
  5772 ;; Registers used:
  5773 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5774 ;; Tracked objects:
  5775 ;;		On entry : 0/0
  5776 ;;		On exit  : 0/0
  5777 ;;		Unchanged: 0/0
  5778 ;; Data sizes:     COMRAM   BANK0   BANK1
  5779 ;;      Params:         4       0       0
  5780 ;;      Locals:        16       0       0
  5781 ;;      Temps:          0       0       0
  5782 ;;      Totals:        20       0       0
  5783 ;;Total ram usage:       20 bytes
  5784 ;; Hardware stack levels used: 1
  5785 ;; Hardware stack levels required when called: 4
  5786 ;; This function calls:
  5787 ;;		___lldiv
  5788 ;;		___lmul
  5789 ;;		_calculateBitRatePer10Sec
  5790 ;;		_processTimeToSeconds
  5791 ;; This function is called by:
  5792 ;;		_infusion
  5793 ;; This function uses a non-reentrant model
  5794 ;;
  5795                           
  5796                           	psect	text34
  5797   000BE0                     __ptext34:
  5798                           	callstack 0
  5799   000BE0                     _getExpected:
  5800                           	callstack 24
  5801                           
  5802                           ;main.c: 368:     long ms = mil;
  5803                           
  5804                           ;incstack = 0
  5805   000BE0  C073  F058         	movff	_mil,getExpected@ms
  5806   000BE4  C074  F059         	movff	_mil+1,getExpected@ms+1
  5807   000BE8  C075  F05A         	movff	_mil+2,getExpected@ms+2
  5808   000BEC  C076  F05B         	movff	_mil+3,getExpected@ms+3
  5809                           
  5810                           ;main.c: 369:     long expected = 1023 - (((ms/1000UL) * (calculateBitRatePer10Sec(volum
      +                          e, processTimeToSeconds(timeInfusion)))/10)) ;
  5811   000BF0  0E00               	movlw	0
  5812   000BF2  6E0E               	movwf	(processTimeToSeconds@timeInput+1)^0,c
  5813   000BF4  0E64               	movlw	100
  5814   000BF6  6E0D               	movwf	processTimeToSeconds@timeInput^0,c
  5815   000BF8  EC2B  F00B         	call	_processTimeToSeconds	;wreg free
  5816   000BFC  C00D  F040         	movff	?_processTimeToSeconds,calculateBitRatePer10Sec@totalSeconds
  5817   000C00  C00E  F041         	movff	?_processTimeToSeconds+1,calculateBitRatePer10Sec@totalSeconds+1
  5818   000C04  0E00               	movlw	0
  5819   000C06  BE41               	btfsc	(calculateBitRatePer10Sec@totalSeconds+1)^0,7,c
  5820   000C08  0EFF               	movlw	-1
  5821   000C0A  6E42               	movwf	(calculateBitRatePer10Sec@totalSeconds+2)^0,c
  5822   000C0C  6E43               	movwf	(calculateBitRatePer10Sec@totalSeconds+3)^0,c
  5823   000C0E  0E0A               	movlw	10
  5824   000C10  6E3C               	movwf	calculateBitRatePer10Sec@volume_mL^0,c
  5825   000C12  0E00               	movlw	0
  5826   000C14  6E3D               	movwf	(calculateBitRatePer10Sec@volume_mL+1)^0,c
  5827   000C16  0E00               	movlw	0
  5828   000C18  6E3E               	movwf	(calculateBitRatePer10Sec@volume_mL+2)^0,c
  5829   000C1A  0E00               	movlw	0
  5830   000C1C  6E3F               	movwf	(calculateBitRatePer10Sec@volume_mL+3)^0,c
  5831   000C1E  EC5B  F005         	call	_calculateBitRatePer10Sec	;wreg free
  5832   000C22  C03C  F060         	movff	?_calculateBitRatePer10Sec,_getExpected$1675
  5833   000C26  C03D  F061         	movff	?_calculateBitRatePer10Sec+1,_getExpected$1675+1
  5834   000C2A  C03E  F062         	movff	?_calculateBitRatePer10Sec+2,_getExpected$1675+2
  5835   000C2E  C03F  F063         	movff	?_calculateBitRatePer10Sec+3,_getExpected$1675+3
  5836                           
  5837                           ;main.c: 369:     long expected = 1023 - (((ms/1000UL) * (calculateBitRatePer10Sec(volum
      +                          e, processTimeToSeconds(timeInfusion)))/10)) ;
  5838   000C32  0EE8               	movlw	232
  5839   000C34  6E19               	movwf	___lldiv@divisor^0,c
  5840   000C36  0E03               	movlw	3
  5841   000C38  6E1A               	movwf	(___lldiv@divisor+1)^0,c
  5842   000C3A  0E00               	movlw	0
  5843   000C3C  6E1B               	movwf	(___lldiv@divisor+2)^0,c
  5844   000C3E  0E00               	movlw	0
  5845   000C40  6E1C               	movwf	(___lldiv@divisor+3)^0,c
  5846   000C42  C058  F015         	movff	getExpected@ms,___lldiv@dividend
  5847   000C46  C059  F016         	movff	getExpected@ms+1,___lldiv@dividend+1
  5848   000C4A  C05A  F017         	movff	getExpected@ms+2,___lldiv@dividend+2
  5849   000C4E  C05B  F018         	movff	getExpected@ms+3,___lldiv@dividend+3
  5850   000C52  EC0E  F009         	call	___lldiv	;wreg free
  5851   000C56  C015  F022         	movff	?___lldiv,___lmul@multiplier
  5852   000C5A  C016  F023         	movff	?___lldiv+1,___lmul@multiplier+1
  5853   000C5E  C017  F024         	movff	?___lldiv+2,___lmul@multiplier+2
  5854   000C62  C018  F025         	movff	?___lldiv+3,___lmul@multiplier+3
  5855   000C66  C060  F026         	movff	_getExpected$1675,___lmul@multiplicand
  5856   000C6A  C061  F027         	movff	_getExpected$1675+1,___lmul@multiplicand+1
  5857   000C6E  C062  F028         	movff	_getExpected$1675+2,___lmul@multiplicand+2
  5858   000C72  C063  F029         	movff	_getExpected$1675+3,___lmul@multiplicand+3
  5859   000C76  ECE3  F00B         	call	___lmul	;wreg free
  5860   000C7A  C022  F064         	movff	?___lmul,_getExpected$1676
  5861   000C7E  C023  F065         	movff	?___lmul+1,_getExpected$1676+1
  5862   000C82  C024  F066         	movff	?___lmul+2,_getExpected$1676+2
  5863   000C86  C025  F067         	movff	?___lmul+3,_getExpected$1676+3
  5864                           
  5865                           ;main.c: 369:     long expected = 1023 - (((ms/1000UL) * (calculateBitRatePer10Sec(volum
      +                          e, processTimeToSeconds(timeInfusion)))/10)) ;
  5866   000C8A  C064  F015         	movff	_getExpected$1676,___lldiv@dividend
  5867   000C8E  C065  F016         	movff	_getExpected$1676+1,___lldiv@dividend+1
  5868   000C92  C066  F017         	movff	_getExpected$1676+2,___lldiv@dividend+2
  5869   000C96  C067  F018         	movff	_getExpected$1676+3,___lldiv@dividend+3
  5870   000C9A  0E0A               	movlw	10
  5871   000C9C  6E19               	movwf	___lldiv@divisor^0,c
  5872   000C9E  0E00               	movlw	0
  5873   000CA0  6E1A               	movwf	(___lldiv@divisor+1)^0,c
  5874   000CA2  0E00               	movlw	0
  5875   000CA4  6E1B               	movwf	(___lldiv@divisor+2)^0,c
  5876   000CA6  0E00               	movlw	0
  5877   000CA8  6E1C               	movwf	(___lldiv@divisor+3)^0,c
  5878   000CAA  EC0E  F009         	call	___lldiv	;wreg free
  5879   000CAE  5015               	movf	?___lldiv^0,w,c
  5880   000CB0  08FF               	sublw	255
  5881   000CB2  6E5C               	movwf	getExpected@expected^0,c
  5882   000CB4  0E03               	movlw	3
  5883   000CB6  5416               	subfwb	(?___lldiv+1)^0,w,c
  5884   000CB8  6E5D               	movwf	(getExpected@expected+1)^0,c
  5885   000CBA  0E00               	movlw	0
  5886   000CBC  5417               	subfwb	(?___lldiv+2)^0,w,c
  5887   000CBE  6E5E               	movwf	(getExpected@expected+2)^0,c
  5888   000CC0  0E00               	movlw	0
  5889   000CC2  5418               	subfwb	(?___lldiv+3)^0,w,c
  5890   000CC4  6E5F               	movwf	(getExpected@expected+3)^0,c
  5891                           
  5892                           ;main.c: 370:     return expected;
  5893   000CC6  C05C  F054         	movff	getExpected@expected,?_getExpected
  5894   000CCA  C05D  F055         	movff	getExpected@expected+1,?_getExpected+1
  5895   000CCE  C05E  F056         	movff	getExpected@expected+2,?_getExpected+2
  5896   000CD2  C05F  F057         	movff	getExpected@expected+3,?_getExpected+3
  5897   000CD6  0012               	return		;funcret
  5898   000CD8                     __end_of_getExpected:
  5899                           	callstack 0
  5900                           
  5901 ;; *************** function _processTimeToSeconds *****************
  5902 ;; Defined at:
  5903 ;;		line 337 in file "main.c"
  5904 ;; Parameters:    Size  Location     Type
  5905 ;;  timeInput       2   12[COMRAM] int 
  5906 ;; Auto vars:     Size  Location     Type
  5907 ;;  totalSeconds    2   18[COMRAM] int 
  5908 ;;  seconds         2   16[COMRAM] int 
  5909 ;;  minutes         2   14[COMRAM] int 
  5910 ;; Return value:  Size  Location     Type
  5911 ;;                  2   12[COMRAM] int 
  5912 ;; Registers used:
  5913 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5914 ;; Tracked objects:
  5915 ;;		On entry : 0/0
  5916 ;;		On exit  : 0/0
  5917 ;;		Unchanged: 0/0
  5918 ;; Data sizes:     COMRAM   BANK0   BANK1
  5919 ;;      Params:         2       0       0
  5920 ;;      Locals:         6       0       0
  5921 ;;      Temps:          0       0       0
  5922 ;;      Totals:         8       0       0
  5923 ;;Total ram usage:        8 bytes
  5924 ;; Hardware stack levels used: 1
  5925 ;; Hardware stack levels required when called: 3
  5926 ;; This function calls:
  5927 ;;		___awdiv
  5928 ;;		___awmod
  5929 ;;		___wmul
  5930 ;; This function is called by:
  5931 ;;		_getExpected
  5932 ;;		_infusion
  5933 ;; This function uses a non-reentrant model
  5934 ;;
  5935                           
  5936                           	psect	text35
  5937   001656                     __ptext35:
  5938                           	callstack 0
  5939   001656                     _processTimeToSeconds:
  5940                           	callstack 25
  5941                           
  5942                           ;main.c: 339:     int minutes = timeInput / 100;
  5943                           
  5944                           ;incstack = 0
  5945   001656  C00D  F005         	movff	processTimeToSeconds@timeInput,___awdiv@dividend
  5946   00165A  C00E  F006         	movff	processTimeToSeconds@timeInput+1,___awdiv@dividend+1
  5947   00165E  0E00               	movlw	0
  5948   001660  6E08               	movwf	(___awdiv@divisor+1)^0,c
  5949   001662  0E64               	movlw	100
  5950   001664  6E07               	movwf	___awdiv@divisor^0,c
  5951   001666  ECCC  F008         	call	___awdiv	;wreg free
  5952   00166A  C005  F00F         	movff	?___awdiv,processTimeToSeconds@minutes
  5953   00166E  C006  F010         	movff	?___awdiv+1,processTimeToSeconds@minutes+1
  5954                           
  5955                           ;main.c: 340:     int seconds = timeInput % 100;
  5956   001672  C00D  F005         	movff	processTimeToSeconds@timeInput,___awmod@dividend
  5957   001676  C00E  F006         	movff	processTimeToSeconds@timeInput+1,___awmod@dividend+1
  5958   00167A  0E00               	movlw	0
  5959   00167C  6E08               	movwf	(___awmod@divisor+1)^0,c
  5960   00167E  0E64               	movlw	100
  5961   001680  6E07               	movwf	___awmod@divisor^0,c
  5962   001682  ECBF  F00A         	call	___awmod	;wreg free
  5963   001686  C005  F011         	movff	?___awmod,processTimeToSeconds@seconds
  5964   00168A  C006  F012         	movff	?___awmod+1,processTimeToSeconds@seconds+1
  5965                           
  5966                           ;main.c: 343:     int totalSeconds = (minutes * 60) + seconds;
  5967   00168E  C00F  F005         	movff	processTimeToSeconds@minutes,___wmul@multiplier
  5968   001692  C010  F006         	movff	processTimeToSeconds@minutes+1,___wmul@multiplier+1
  5969   001696  0E00               	movlw	0
  5970   001698  6E08               	movwf	(___wmul@multiplicand+1)^0,c
  5971   00169A  0E3C               	movlw	60
  5972   00169C  6E07               	movwf	___wmul@multiplicand^0,c
  5973   00169E  EC2B  F00D         	call	___wmul	;wreg free
  5974   0016A2  5011               	movf	processTimeToSeconds@seconds^0,w,c
  5975   0016A4  2405               	addwf	?___wmul^0,w,c
  5976   0016A6  6E13               	movwf	processTimeToSeconds@totalSeconds^0,c
  5977   0016A8  5012               	movf	(processTimeToSeconds@seconds+1)^0,w,c
  5978   0016AA  2006               	addwfc	(?___wmul+1)^0,w,c
  5979   0016AC  6E14               	movwf	(processTimeToSeconds@totalSeconds+1)^0,c
  5980                           
  5981                           ;main.c: 345:     return totalSeconds;
  5982   0016AE  C013  F00D         	movff	processTimeToSeconds@totalSeconds,?_processTimeToSeconds
  5983   0016B2  C014  F00E         	movff	processTimeToSeconds@totalSeconds+1,?_processTimeToSeconds+1
  5984   0016B6  0012               	return		;funcret
  5985   0016B8                     __end_of_processTimeToSeconds:
  5986                           	callstack 0
  5987                           
  5988 ;; *************** function ___wmul *****************
  5989 ;; Defined at:
  5990 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
  5991 ;; Parameters:    Size  Location     Type
  5992 ;;  multiplier      2    4[COMRAM] unsigned int 
  5993 ;;  multiplicand    2    6[COMRAM] unsigned int 
  5994 ;; Auto vars:     Size  Location     Type
  5995 ;;  product         2    8[COMRAM] unsigned int 
  5996 ;; Return value:  Size  Location     Type
  5997 ;;                  2    4[COMRAM] unsigned int 
  5998 ;; Registers used:
  5999 ;;		wreg, status,2, status,0, prodl, prodh
  6000 ;; Tracked objects:
  6001 ;;		On entry : 0/0
  6002 ;;		On exit  : 0/0
  6003 ;;		Unchanged: 0/0
  6004 ;; Data sizes:     COMRAM   BANK0   BANK1
  6005 ;;      Params:         4       0       0
  6006 ;;      Locals:         2       0       0
  6007 ;;      Temps:          0       0       0
  6008 ;;      Totals:         6       0       0
  6009 ;;Total ram usage:        6 bytes
  6010 ;; Hardware stack levels used: 1
  6011 ;; Hardware stack levels required when called: 2
  6012 ;; This function calls:
  6013 ;;		Nothing
  6014 ;; This function is called by:
  6015 ;;		_processTimeToSeconds
  6016 ;;		_string_long_time
  6017 ;; This function uses a non-reentrant model
  6018 ;;
  6019                           
  6020                           	psect	text36
  6021   001A56                     __ptext36:
  6022                           	callstack 0
  6023   001A56                     ___wmul:
  6024                           	callstack 25
  6025                           
  6026                           ;incstack = 0
  6027   001A56  5005               	movf	___wmul@multiplier^0,w,c
  6028   001A58  0207               	mulwf	___wmul@multiplicand^0,c
  6029   001A5A  CFF3 F009          	movff	prodl,___wmul@product
  6030   001A5E  CFF4 F00A          	movff	prodh,___wmul@product+1
  6031   001A62  5005               	movf	___wmul@multiplier^0,w,c
  6032   001A64  0208               	mulwf	(___wmul@multiplicand+1)^0,c
  6033   001A66  50F3               	movf	243,w,c
  6034   001A68  260A               	addwf	(___wmul@product+1)^0,f,c
  6035   001A6A  5006               	movf	(___wmul@multiplier+1)^0,w,c
  6036   001A6C  0207               	mulwf	___wmul@multiplicand^0,c
  6037   001A6E  50F3               	movf	243,w,c
  6038   001A70  260A               	addwf	(___wmul@product+1)^0,f,c
  6039   001A72  C009  F005         	movff	___wmul@product,?___wmul
  6040   001A76  C00A  F006         	movff	___wmul@product+1,?___wmul+1
  6041   001A7A  0012               	return		;funcret
  6042   001A7C                     __end_of___wmul:
  6043                           	callstack 0
  6044                           
  6045 ;; *************** function ___awmod *****************
  6046 ;; Defined at:
  6047 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  6048 ;; Parameters:    Size  Location     Type
  6049 ;;  dividend        2    4[COMRAM] int 
  6050 ;;  divisor         2    6[COMRAM] int 
  6051 ;; Auto vars:     Size  Location     Type
  6052 ;;  sign            1    9[COMRAM] unsigned char 
  6053 ;;  counter         1    8[COMRAM] unsigned char 
  6054 ;; Return value:  Size  Location     Type
  6055 ;;                  2    4[COMRAM] int 
  6056 ;; Registers used:
  6057 ;;		wreg, status,2, status,0
  6058 ;; Tracked objects:
  6059 ;;		On entry : 0/0
  6060 ;;		On exit  : 0/0
  6061 ;;		Unchanged: 0/0
  6062 ;; Data sizes:     COMRAM   BANK0   BANK1
  6063 ;;      Params:         4       0       0
  6064 ;;      Locals:         2       0       0
  6065 ;;      Temps:          0       0       0
  6066 ;;      Totals:         6       0       0
  6067 ;;Total ram usage:        6 bytes
  6068 ;; Hardware stack levels used: 1
  6069 ;; Hardware stack levels required when called: 2
  6070 ;; This function calls:
  6071 ;;		Nothing
  6072 ;; This function is called by:
  6073 ;;		_processTimeToSeconds
  6074 ;; This function uses a non-reentrant model
  6075 ;;
  6076                           
  6077                           	psect	text37
  6078   00157E                     __ptext37:
  6079                           	callstack 0
  6080   00157E                     ___awmod:
  6081                           	callstack 25
  6082                           
  6083                           ;incstack = 0
  6084   00157E  0E00               	movlw	0
  6085   001580  6E0A               	movwf	___awmod@sign^0,c
  6086   001582  AE06               	btfss	(___awmod@dividend+1)^0,7,c
  6087   001584  D006               	goto	l4509
  6088   001586  6C05               	negf	___awmod@dividend^0,c
  6089   001588  1E06               	comf	(___awmod@dividend+1)^0,f,c
  6090   00158A  B0D8               	btfsc	status,0,c
  6091   00158C  2A06               	incf	(___awmod@dividend+1)^0,f,c
  6092   00158E  0E01               	movlw	1
  6093   001590  6E0A               	movwf	___awmod@sign^0,c
  6094   001592                     l4509:
  6095   001592  AE08               	btfss	(___awmod@divisor+1)^0,7,c
  6096   001594  D004               	goto	l4513
  6097   001596  6C07               	negf	___awmod@divisor^0,c
  6098   001598  1E08               	comf	(___awmod@divisor+1)^0,f,c
  6099   00159A  B0D8               	btfsc	status,0,c
  6100   00159C  2A08               	incf	(___awmod@divisor+1)^0,f,c
  6101   00159E                     l4513:
  6102   00159E  5007               	movf	___awmod@divisor^0,w,c
  6103   0015A0  1008               	iorwf	(___awmod@divisor+1)^0,w,c
  6104   0015A2  B4D8               	btfsc	status,2,c
  6105   0015A4  D018               	goto	l4529
  6106   0015A6  0E01               	movlw	1
  6107   0015A8  6E09               	movwf	___awmod@counter^0,c
  6108   0015AA  D004               	goto	l4519
  6109   0015AC                     l4517:
  6110   0015AC  90D8               	bcf	status,0,c
  6111   0015AE  3607               	rlcf	___awmod@divisor^0,f,c
  6112   0015B0  3608               	rlcf	(___awmod@divisor+1)^0,f,c
  6113   0015B2  2A09               	incf	___awmod@counter^0,f,c
  6114   0015B4                     l4519:
  6115   0015B4  AE08               	btfss	(___awmod@divisor+1)^0,7,c
  6116   0015B6  D7FA               	goto	l4517
  6117   0015B8                     u4350:
  6118   0015B8  5007               	movf	___awmod@divisor^0,w,c
  6119   0015BA  5C05               	subwf	___awmod@dividend^0,w,c
  6120   0015BC  5008               	movf	(___awmod@divisor+1)^0,w,c
  6121   0015BE  5806               	subwfb	(___awmod@dividend+1)^0,w,c
  6122   0015C0  A0D8               	btfss	status,0,c
  6123   0015C2  D004               	goto	l4525
  6124   0015C4  5007               	movf	___awmod@divisor^0,w,c
  6125   0015C6  5E05               	subwf	___awmod@dividend^0,f,c
  6126   0015C8  5008               	movf	(___awmod@divisor+1)^0,w,c
  6127   0015CA  5A06               	subwfb	(___awmod@dividend+1)^0,f,c
  6128   0015CC                     l4525:
  6129   0015CC  90D8               	bcf	status,0,c
  6130   0015CE  3208               	rrcf	(___awmod@divisor+1)^0,f,c
  6131   0015D0  3207               	rrcf	___awmod@divisor^0,f,c
  6132   0015D2  2E09               	decfsz	___awmod@counter^0,f,c
  6133   0015D4  D7F1               	goto	u4350
  6134   0015D6                     l4529:
  6135   0015D6  500A               	movf	___awmod@sign^0,w,c
  6136   0015D8  B4D8               	btfsc	status,2,c
  6137   0015DA  D004               	goto	l4533
  6138   0015DC  6C05               	negf	___awmod@dividend^0,c
  6139   0015DE  1E06               	comf	(___awmod@dividend+1)^0,f,c
  6140   0015E0  B0D8               	btfsc	status,0,c
  6141   0015E2  2A06               	incf	(___awmod@dividend+1)^0,f,c
  6142   0015E4                     l4533:
  6143   0015E4  C005  F005         	movff	___awmod@dividend,?___awmod
  6144   0015E8  C006  F006         	movff	___awmod@dividend+1,?___awmod+1
  6145   0015EC  0012               	return		;funcret
  6146   0015EE                     __end_of___awmod:
  6147                           	callstack 0
  6148                           
  6149 ;; *************** function ___awdiv *****************
  6150 ;; Defined at:
  6151 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  6152 ;; Parameters:    Size  Location     Type
  6153 ;;  dividend        2    4[COMRAM] int 
  6154 ;;  divisor         2    6[COMRAM] int 
  6155 ;; Auto vars:     Size  Location     Type
  6156 ;;  quotient        2   10[COMRAM] int 
  6157 ;;  sign            1    9[COMRAM] unsigned char 
  6158 ;;  counter         1    8[COMRAM] unsigned char 
  6159 ;; Return value:  Size  Location     Type
  6160 ;;                  2    4[COMRAM] int 
  6161 ;; Registers used:
  6162 ;;		wreg, status,2, status,0
  6163 ;; Tracked objects:
  6164 ;;		On entry : 0/0
  6165 ;;		On exit  : 0/0
  6166 ;;		Unchanged: 0/0
  6167 ;; Data sizes:     COMRAM   BANK0   BANK1
  6168 ;;      Params:         4       0       0
  6169 ;;      Locals:         4       0       0
  6170 ;;      Temps:          0       0       0
  6171 ;;      Totals:         8       0       0
  6172 ;;Total ram usage:        8 bytes
  6173 ;; Hardware stack levels used: 1
  6174 ;; Hardware stack levels required when called: 2
  6175 ;; This function calls:
  6176 ;;		Nothing
  6177 ;; This function is called by:
  6178 ;;		_processTimeToSeconds
  6179 ;; This function uses a non-reentrant model
  6180 ;;
  6181                           
  6182                           	psect	text38
  6183   001198                     __ptext38:
  6184                           	callstack 0
  6185   001198                     ___awdiv:
  6186                           	callstack 25
  6187                           
  6188                           ;incstack = 0
  6189   001198  0E00               	movlw	0
  6190   00119A  6E0A               	movwf	___awdiv@sign^0,c
  6191   00119C  AE08               	btfss	(___awdiv@divisor+1)^0,7,c
  6192   00119E  D006               	goto	l4465
  6193   0011A0  6C07               	negf	___awdiv@divisor^0,c
  6194   0011A2  1E08               	comf	(___awdiv@divisor+1)^0,f,c
  6195   0011A4  B0D8               	btfsc	status,0,c
  6196   0011A6  2A08               	incf	(___awdiv@divisor+1)^0,f,c
  6197   0011A8  0E01               	movlw	1
  6198   0011AA  6E0A               	movwf	___awdiv@sign^0,c
  6199   0011AC                     l4465:
  6200   0011AC  AE06               	btfss	(___awdiv@dividend+1)^0,7,c
  6201   0011AE  D006               	goto	l4471
  6202   0011B0  6C05               	negf	___awdiv@dividend^0,c
  6203   0011B2  1E06               	comf	(___awdiv@dividend+1)^0,f,c
  6204   0011B4  B0D8               	btfsc	status,0,c
  6205   0011B6  2A06               	incf	(___awdiv@dividend+1)^0,f,c
  6206   0011B8  0E01               	movlw	1
  6207   0011BA  1A0A               	xorwf	___awdiv@sign^0,f,c
  6208   0011BC                     l4471:
  6209   0011BC  0E00               	movlw	0
  6210   0011BE  6E0C               	movwf	(___awdiv@quotient+1)^0,c
  6211   0011C0  0E00               	movlw	0
  6212   0011C2  6E0B               	movwf	___awdiv@quotient^0,c
  6213   0011C4  5007               	movf	___awdiv@divisor^0,w,c
  6214   0011C6  1008               	iorwf	(___awdiv@divisor+1)^0,w,c
  6215   0011C8  B4D8               	btfsc	status,2,c
  6216   0011CA  D01C               	goto	l4493
  6217   0011CC  0E01               	movlw	1
  6218   0011CE  6E09               	movwf	___awdiv@counter^0,c
  6219   0011D0  D004               	goto	l4479
  6220   0011D2                     l4477:
  6221   0011D2  90D8               	bcf	status,0,c
  6222   0011D4  3607               	rlcf	___awdiv@divisor^0,f,c
  6223   0011D6  3608               	rlcf	(___awdiv@divisor+1)^0,f,c
  6224   0011D8  2A09               	incf	___awdiv@counter^0,f,c
  6225   0011DA                     l4479:
  6226   0011DA  AE08               	btfss	(___awdiv@divisor+1)^0,7,c
  6227   0011DC  D7FA               	goto	l4477
  6228   0011DE                     u4290:
  6229   0011DE  90D8               	bcf	status,0,c
  6230   0011E0  360B               	rlcf	___awdiv@quotient^0,f,c
  6231   0011E2  360C               	rlcf	(___awdiv@quotient+1)^0,f,c
  6232   0011E4  5007               	movf	___awdiv@divisor^0,w,c
  6233   0011E6  5C05               	subwf	___awdiv@dividend^0,w,c
  6234   0011E8  5008               	movf	(___awdiv@divisor+1)^0,w,c
  6235   0011EA  5806               	subwfb	(___awdiv@dividend+1)^0,w,c
  6236   0011EC  A0D8               	btfss	status,0,c
  6237   0011EE  D005               	goto	l4489
  6238   0011F0  5007               	movf	___awdiv@divisor^0,w,c
  6239   0011F2  5E05               	subwf	___awdiv@dividend^0,f,c
  6240   0011F4  5008               	movf	(___awdiv@divisor+1)^0,w,c
  6241   0011F6  5A06               	subwfb	(___awdiv@dividend+1)^0,f,c
  6242   0011F8  800B               	bsf	___awdiv@quotient^0,0,c
  6243   0011FA                     l4489:
  6244   0011FA  90D8               	bcf	status,0,c
  6245   0011FC  3208               	rrcf	(___awdiv@divisor+1)^0,f,c
  6246   0011FE  3207               	rrcf	___awdiv@divisor^0,f,c
  6247   001200  2E09               	decfsz	___awdiv@counter^0,f,c
  6248   001202  D7ED               	goto	u4290
  6249   001204                     l4493:
  6250   001204  500A               	movf	___awdiv@sign^0,w,c
  6251   001206  B4D8               	btfsc	status,2,c
  6252   001208  D004               	goto	l4497
  6253   00120A  6C0B               	negf	___awdiv@quotient^0,c
  6254   00120C  1E0C               	comf	(___awdiv@quotient+1)^0,f,c
  6255   00120E  B0D8               	btfsc	status,0,c
  6256   001210  2A0C               	incf	(___awdiv@quotient+1)^0,f,c
  6257   001212                     l4497:
  6258   001212  C00B  F005         	movff	___awdiv@quotient,?___awdiv
  6259   001216  C00C  F006         	movff	___awdiv@quotient+1,?___awdiv+1
  6260   00121A  0012               	return		;funcret
  6261   00121C                     __end_of___awdiv:
  6262                           	callstack 0
  6263                           
  6264 ;; *************** function _calculateBitRatePer10Sec *****************
  6265 ;; Defined at:
  6266 ;;		line 348 in file "main.c"
  6267 ;; Parameters:    Size  Location     Type
  6268 ;;  volume_mL       4   59[COMRAM] long 
  6269 ;;  totalSeconds    4   63[COMRAM] long 
  6270 ;; Auto vars:     Size  Location     Type
  6271 ;;  bit_rate_per    4   79[COMRAM] long 
  6272 ;;  bit_rate_per    4   75[COMRAM] long 
  6273 ;;  length_per_m    4   71[COMRAM] long 
  6274 ;;  length_mm_sc    4   67[COMRAM] long 
  6275 ;; Return value:  Size  Location     Type
  6276 ;;                  4   59[COMRAM] long 
  6277 ;; Registers used:
  6278 ;;		wreg, status,2, status,0, cstack
  6279 ;; Tracked objects:
  6280 ;;		On entry : 0/0
  6281 ;;		On exit  : 0/0
  6282 ;;		Unchanged: 0/0
  6283 ;; Data sizes:     COMRAM   BANK0   BANK1
  6284 ;;      Params:         8       0       0
  6285 ;;      Locals:        16       0       0
  6286 ;;      Temps:          0       0       0
  6287 ;;      Totals:        24       0       0
  6288 ;;Total ram usage:       24 bytes
  6289 ;; Hardware stack levels used: 1
  6290 ;; Hardware stack levels required when called: 3
  6291 ;; This function calls:
  6292 ;;		___aldiv
  6293 ;;		___lmul
  6294 ;; This function is called by:
  6295 ;;		_getExpected
  6296 ;; This function uses a non-reentrant model
  6297 ;;
  6298                           
  6299                           	psect	text39
  6300   000AB6                     __ptext39:
  6301                           	callstack 0
  6302   000AB6                     _calculateBitRatePer10Sec:
  6303                           	callstack 24
  6304                           
  6305                           ;main.c: 353:     long length_mm_scaled = (volume_mL * 10000) / 158;
  6306                           
  6307                           ;incstack = 0
  6308   000AB6  C03C  F022         	movff	calculateBitRatePer10Sec@volume_mL,___lmul@multiplier
  6309   000ABA  C03D  F023         	movff	calculateBitRatePer10Sec@volume_mL+1,___lmul@multiplier+1
  6310   000ABE  C03E  F024         	movff	calculateBitRatePer10Sec@volume_mL+2,___lmul@multiplier+2
  6311   000AC2  C03F  F025         	movff	calculateBitRatePer10Sec@volume_mL+3,___lmul@multiplier+3
  6312   000AC6  0E10               	movlw	16
  6313   000AC8  6E26               	movwf	___lmul@multiplicand^0,c
  6314   000ACA  0E27               	movlw	39
  6315   000ACC  6E27               	movwf	(___lmul@multiplicand+1)^0,c
  6316   000ACE  0E00               	movlw	0
  6317   000AD0  6E28               	movwf	(___lmul@multiplicand+2)^0,c
  6318   000AD2  0E00               	movlw	0
  6319   000AD4  6E29               	movwf	(___lmul@multiplicand+3)^0,c
  6320   000AD6  ECE3  F00B         	call	___lmul	;wreg free
  6321   000ADA  C022  F02E         	movff	?___lmul,___aldiv@dividend
  6322   000ADE  C023  F02F         	movff	?___lmul+1,___aldiv@dividend+1
  6323   000AE2  C024  F030         	movff	?___lmul+2,___aldiv@dividend+2
  6324   000AE6  C025  F031         	movff	?___lmul+3,___aldiv@dividend+3
  6325   000AEA  0E9E               	movlw	158
  6326   000AEC  6E32               	movwf	___aldiv@divisor^0,c
  6327   000AEE  0E00               	movlw	0
  6328   000AF0  6E33               	movwf	(___aldiv@divisor+1)^0,c
  6329   000AF2  0E00               	movlw	0
  6330   000AF4  6E34               	movwf	(___aldiv@divisor+2)^0,c
  6331   000AF6  0E00               	movlw	0
  6332   000AF8  6E35               	movwf	(___aldiv@divisor+3)^0,c
  6333   000AFA  EC6C  F006         	call	___aldiv	;wreg free
  6334   000AFE  C02E  F044         	movff	?___aldiv,calculateBitRatePer10Sec@length_mm_scaled
  6335   000B02  C02F  F045         	movff	?___aldiv+1,calculateBitRatePer10Sec@length_mm_scaled+1
  6336   000B06  C030  F046         	movff	?___aldiv+2,calculateBitRatePer10Sec@length_mm_scaled+2
  6337   000B0A  C031  F047         	movff	?___aldiv+3,calculateBitRatePer10Sec@length_mm_scaled+3
  6338                           
  6339                           ;main.c: 356:     long length_per_min_mm_scaled = length_mm_scaled / totalSeconds;
  6340   000B0E  C044  F02E         	movff	calculateBitRatePer10Sec@length_mm_scaled,___aldiv@dividend
  6341   000B12  C045  F02F         	movff	calculateBitRatePer10Sec@length_mm_scaled+1,___aldiv@dividend+1
  6342   000B16  C046  F030         	movff	calculateBitRatePer10Sec@length_mm_scaled+2,___aldiv@dividend+2
  6343   000B1A  C047  F031         	movff	calculateBitRatePer10Sec@length_mm_scaled+3,___aldiv@dividend+3
  6344   000B1E  C040  F032         	movff	calculateBitRatePer10Sec@totalSeconds,___aldiv@divisor
  6345   000B22  C041  F033         	movff	calculateBitRatePer10Sec@totalSeconds+1,___aldiv@divisor+1
  6346   000B26  C042  F034         	movff	calculateBitRatePer10Sec@totalSeconds+2,___aldiv@divisor+2
  6347   000B2A  C043  F035         	movff	calculateBitRatePer10Sec@totalSeconds+3,___aldiv@divisor+3
  6348   000B2E  EC6C  F006         	call	___aldiv	;wreg free
  6349   000B32  C02E  F048         	movff	?___aldiv,calculateBitRatePer10Sec@length_per_min_mm_scaled
  6350   000B36  C02F  F049         	movff	?___aldiv+1,calculateBitRatePer10Sec@length_per_min_mm_scaled+1
  6351   000B3A  C030  F04A         	movff	?___aldiv+2,calculateBitRatePer10Sec@length_per_min_mm_scaled+2
  6352   000B3E  C031  F04B         	movff	?___aldiv+3,calculateBitRatePer10Sec@length_per_min_mm_scaled+3
  6353                           
  6354                           ;main.c: 359:     long bit_rate_per_min_scaled = (length_per_min_mm_scaled * 100) / (635
      +                          /60);
  6355   000B42  C048  F022         	movff	calculateBitRatePer10Sec@length_per_min_mm_scaled,___lmul@multiplier
  6356   000B46  C049  F023         	movff	calculateBitRatePer10Sec@length_per_min_mm_scaled+1,___lmul@multiplier+1
  6357   000B4A  C04A  F024         	movff	calculateBitRatePer10Sec@length_per_min_mm_scaled+2,___lmul@multiplier+2
  6358   000B4E  C04B  F025         	movff	calculateBitRatePer10Sec@length_per_min_mm_scaled+3,___lmul@multiplier+3
  6359   000B52  0E64               	movlw	100
  6360   000B54  6E26               	movwf	___lmul@multiplicand^0,c
  6361   000B56  0E00               	movlw	0
  6362   000B58  6E27               	movwf	(___lmul@multiplicand+1)^0,c
  6363   000B5A  0E00               	movlw	0
  6364   000B5C  6E28               	movwf	(___lmul@multiplicand+2)^0,c
  6365   000B5E  0E00               	movlw	0
  6366   000B60  6E29               	movwf	(___lmul@multiplicand+3)^0,c
  6367   000B62  ECE3  F00B         	call	___lmul	;wreg free
  6368   000B66  C022  F02E         	movff	?___lmul,___aldiv@dividend
  6369   000B6A  C023  F02F         	movff	?___lmul+1,___aldiv@dividend+1
  6370   000B6E  C024  F030         	movff	?___lmul+2,___aldiv@dividend+2
  6371   000B72  C025  F031         	movff	?___lmul+3,___aldiv@dividend+3
  6372   000B76  0E0A               	movlw	10
  6373   000B78  6E32               	movwf	___aldiv@divisor^0,c
  6374   000B7A  0E00               	movlw	0
  6375   000B7C  6E33               	movwf	(___aldiv@divisor+1)^0,c
  6376   000B7E  0E00               	movlw	0
  6377   000B80  6E34               	movwf	(___aldiv@divisor+2)^0,c
  6378   000B82  0E00               	movlw	0
  6379   000B84  6E35               	movwf	(___aldiv@divisor+3)^0,c
  6380   000B86  EC6C  F006         	call	___aldiv	;wreg free
  6381   000B8A  C02E  F04C         	movff	?___aldiv,calculateBitRatePer10Sec@bit_rate_per_min_scaled
  6382   000B8E  C02F  F04D         	movff	?___aldiv+1,calculateBitRatePer10Sec@bit_rate_per_min_scaled+1
  6383   000B92  C030  F04E         	movff	?___aldiv+2,calculateBitRatePer10Sec@bit_rate_per_min_scaled+2
  6384   000B96  C031  F04F         	movff	?___aldiv+3,calculateBitRatePer10Sec@bit_rate_per_min_scaled+3
  6385                           
  6386                           ;main.c: 362:     long bit_rate_per_10sec = bit_rate_per_min_scaled / 6;
  6387   000B9A  C04C  F02E         	movff	calculateBitRatePer10Sec@bit_rate_per_min_scaled,___aldiv@dividend
  6388   000B9E  C04D  F02F         	movff	calculateBitRatePer10Sec@bit_rate_per_min_scaled+1,___aldiv@dividend+1
  6389   000BA2  C04E  F030         	movff	calculateBitRatePer10Sec@bit_rate_per_min_scaled+2,___aldiv@dividend+2
  6390   000BA6  C04F  F031         	movff	calculateBitRatePer10Sec@bit_rate_per_min_scaled+3,___aldiv@dividend+3
  6391   000BAA  0E06               	movlw	6
  6392   000BAC  6E32               	movwf	___aldiv@divisor^0,c
  6393   000BAE  0E00               	movlw	0
  6394   000BB0  6E33               	movwf	(___aldiv@divisor+1)^0,c
  6395   000BB2  0E00               	movlw	0
  6396   000BB4  6E34               	movwf	(___aldiv@divisor+2)^0,c
  6397   000BB6  0E00               	movlw	0
  6398   000BB8  6E35               	movwf	(___aldiv@divisor+3)^0,c
  6399   000BBA  EC6C  F006         	call	___aldiv	;wreg free
  6400   000BBE  C02E  F050         	movff	?___aldiv,calculateBitRatePer10Sec@bit_rate_per_10sec
  6401   000BC2  C02F  F051         	movff	?___aldiv+1,calculateBitRatePer10Sec@bit_rate_per_10sec+1
  6402   000BC6  C030  F052         	movff	?___aldiv+2,calculateBitRatePer10Sec@bit_rate_per_10sec+2
  6403   000BCA  C031  F053         	movff	?___aldiv+3,calculateBitRatePer10Sec@bit_rate_per_10sec+3
  6404                           
  6405                           ;main.c: 364:     return bit_rate_per_10sec;
  6406   000BCE  C050  F03C         	movff	calculateBitRatePer10Sec@bit_rate_per_10sec,?_calculateBitRatePer10Sec
  6407   000BD2  C051  F03D         	movff	calculateBitRatePer10Sec@bit_rate_per_10sec+1,?_calculateBitRatePer10Sec+1
  6408   000BD6  C052  F03E         	movff	calculateBitRatePer10Sec@bit_rate_per_10sec+2,?_calculateBitRatePer10Sec+2
  6409   000BDA  C053  F03F         	movff	calculateBitRatePer10Sec@bit_rate_per_10sec+3,?_calculateBitRatePer10Sec+3
  6410   000BDE  0012               	return		;funcret
  6411   000BE0                     __end_of_calculateBitRatePer10Sec:
  6412                           	callstack 0
  6413                           
  6414 ;; *************** function ___lmul *****************
  6415 ;; Defined at:
  6416 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul32.c"
  6417 ;; Parameters:    Size  Location     Type
  6418 ;;  multiplier      4   33[COMRAM] unsigned long 
  6419 ;;  multiplicand    4   37[COMRAM] unsigned long 
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;  product         4   41[COMRAM] unsigned long 
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  4   33[COMRAM] unsigned long 
  6424 ;; Registers used:
  6425 ;;		wreg, status,2, status,0
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMRAM   BANK0   BANK1
  6431 ;;      Params:         8       0       0
  6432 ;;      Locals:         4       0       0
  6433 ;;      Temps:          0       0       0
  6434 ;;      Totals:        12       0       0
  6435 ;;Total ram usage:       12 bytes
  6436 ;; Hardware stack levels used: 1
  6437 ;; Hardware stack levels required when called: 2
  6438 ;; This function calls:
  6439 ;;		Nothing
  6440 ;; This function is called by:
  6441 ;;		_calculateBitRatePer10Sec
  6442 ;;		_getExpected
  6443 ;;		_infusion
  6444 ;;		_mapServo
  6445 ;;		_string_long_vol
  6446 ;; This function uses a non-reentrant model
  6447 ;;
  6448                           
  6449                           	psect	text40
  6450   0017C6                     __ptext40:
  6451                           	callstack 0
  6452   0017C6                     ___lmul:
  6453                           	callstack 24
  6454                           
  6455                           ;incstack = 0
  6456   0017C6  0E00               	movlw	0
  6457   0017C8  6E2A               	movwf	___lmul@product^0,c
  6458   0017CA  0E00               	movlw	0
  6459   0017CC  6E2B               	movwf	(___lmul@product+1)^0,c
  6460   0017CE  0E00               	movlw	0
  6461   0017D0  6E2C               	movwf	(___lmul@product+2)^0,c
  6462   0017D2  0E00               	movlw	0
  6463   0017D4  6E2D               	movwf	(___lmul@product+3)^0,c
  6464   0017D6                     l4449:
  6465   0017D6  A022               	btfss	___lmul@multiplier^0,0,c
  6466   0017D8  D008               	goto	l4453
  6467   0017DA  5026               	movf	___lmul@multiplicand^0,w,c
  6468   0017DC  262A               	addwf	___lmul@product^0,f,c
  6469   0017DE  5027               	movf	(___lmul@multiplicand+1)^0,w,c
  6470   0017E0  222B               	addwfc	(___lmul@product+1)^0,f,c
  6471   0017E2  5028               	movf	(___lmul@multiplicand+2)^0,w,c
  6472   0017E4  222C               	addwfc	(___lmul@product+2)^0,f,c
  6473   0017E6  5029               	movf	(___lmul@multiplicand+3)^0,w,c
  6474   0017E8  222D               	addwfc	(___lmul@product+3)^0,f,c
  6475   0017EA                     l4453:
  6476   0017EA  90D8               	bcf	status,0,c
  6477   0017EC  3626               	rlcf	___lmul@multiplicand^0,f,c
  6478   0017EE  3627               	rlcf	(___lmul@multiplicand+1)^0,f,c
  6479   0017F0  3628               	rlcf	(___lmul@multiplicand+2)^0,f,c
  6480   0017F2  3629               	rlcf	(___lmul@multiplicand+3)^0,f,c
  6481   0017F4  90D8               	bcf	status,0,c
  6482   0017F6  3225               	rrcf	(___lmul@multiplier+3)^0,f,c
  6483   0017F8  3224               	rrcf	(___lmul@multiplier+2)^0,f,c
  6484   0017FA  3223               	rrcf	(___lmul@multiplier+1)^0,f,c
  6485   0017FC  3222               	rrcf	___lmul@multiplier^0,f,c
  6486   0017FE  5022               	movf	___lmul@multiplier^0,w,c
  6487   001800  1023               	iorwf	(___lmul@multiplier+1)^0,w,c
  6488   001802  1024               	iorwf	(___lmul@multiplier+2)^0,w,c
  6489   001804  1025               	iorwf	(___lmul@multiplier+3)^0,w,c
  6490   001806  A4D8               	btfss	status,2,c
  6491   001808  D7E6               	goto	l4449
  6492   00180A  C02A  F022         	movff	___lmul@product,?___lmul
  6493   00180E  C02B  F023         	movff	___lmul@product+1,?___lmul+1
  6494   001812  C02C  F024         	movff	___lmul@product+2,?___lmul+2
  6495   001816  C02D  F025         	movff	___lmul@product+3,?___lmul+3
  6496   00181A  0012               	return		;funcret
  6497   00181C                     __end_of___lmul:
  6498                           	callstack 0
  6499                           
  6500 ;; *************** function ___aldiv *****************
  6501 ;; Defined at:
  6502 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\aldiv.c"
  6503 ;; Parameters:    Size  Location     Type
  6504 ;;  dividend        4   45[COMRAM] long 
  6505 ;;  divisor         4   49[COMRAM] long 
  6506 ;; Auto vars:     Size  Location     Type
  6507 ;;  quotient        4   55[COMRAM] long 
  6508 ;;  sign            1   54[COMRAM] unsigned char 
  6509 ;;  counter         1   53[COMRAM] unsigned char 
  6510 ;; Return value:  Size  Location     Type
  6511 ;;                  4   45[COMRAM] long 
  6512 ;; Registers used:
  6513 ;;		wreg, status,2, status,0
  6514 ;; Tracked objects:
  6515 ;;		On entry : 0/0
  6516 ;;		On exit  : 0/0
  6517 ;;		Unchanged: 0/0
  6518 ;; Data sizes:     COMRAM   BANK0   BANK1
  6519 ;;      Params:         8       0       0
  6520 ;;      Locals:         6       0       0
  6521 ;;      Temps:          0       0       0
  6522 ;;      Totals:        14       0       0
  6523 ;;Total ram usage:       14 bytes
  6524 ;; Hardware stack levels used: 1
  6525 ;; Hardware stack levels required when called: 2
  6526 ;; This function calls:
  6527 ;;		Nothing
  6528 ;; This function is called by:
  6529 ;;		_calculateBitRatePer10Sec
  6530 ;;		_infusion
  6531 ;;		_vfpfcnvrt
  6532 ;; This function uses a non-reentrant model
  6533 ;;
  6534                           
  6535                           	psect	text41
  6536   000CD8                     __ptext41:
  6537                           	callstack 0
  6538   000CD8                     ___aldiv:
  6539                           	callstack 23
  6540                           
  6541                           ;incstack = 0
  6542   000CD8  0E00               	movlw	0
  6543   000CDA  6E37               	movwf	___aldiv@sign^0,c
  6544   000CDC  AE35               	btfss	(___aldiv@divisor+3)^0,7,c
  6545   000CDE  D00A               	goto	l4295
  6546   000CE0  1E35               	comf	(___aldiv@divisor+3)^0,f,c
  6547   000CE2  1E34               	comf	(___aldiv@divisor+2)^0,f,c
  6548   000CE4  1E33               	comf	(___aldiv@divisor+1)^0,f,c
  6549   000CE6  6C32               	negf	___aldiv@divisor^0,c
  6550   000CE8  0E00               	movlw	0
  6551   000CEA  2233               	addwfc	(___aldiv@divisor+1)^0,f,c
  6552   000CEC  2234               	addwfc	(___aldiv@divisor+2)^0,f,c
  6553   000CEE  2235               	addwfc	(___aldiv@divisor+3)^0,f,c
  6554   000CF0  0E01               	movlw	1
  6555   000CF2  6E37               	movwf	___aldiv@sign^0,c
  6556   000CF4                     l4295:
  6557   000CF4  AE31               	btfss	(___aldiv@dividend+3)^0,7,c
  6558   000CF6  D00A               	goto	l4301
  6559   000CF8  1E31               	comf	(___aldiv@dividend+3)^0,f,c
  6560   000CFA  1E30               	comf	(___aldiv@dividend+2)^0,f,c
  6561   000CFC  1E2F               	comf	(___aldiv@dividend+1)^0,f,c
  6562   000CFE  6C2E               	negf	___aldiv@dividend^0,c
  6563   000D00  0E00               	movlw	0
  6564   000D02  222F               	addwfc	(___aldiv@dividend+1)^0,f,c
  6565   000D04  2230               	addwfc	(___aldiv@dividend+2)^0,f,c
  6566   000D06  2231               	addwfc	(___aldiv@dividend+3)^0,f,c
  6567   000D08  0E01               	movlw	1
  6568   000D0A  1A37               	xorwf	___aldiv@sign^0,f,c
  6569   000D0C                     l4301:
  6570   000D0C  0E00               	movlw	0
  6571   000D0E  6E38               	movwf	___aldiv@quotient^0,c
  6572   000D10  0E00               	movlw	0
  6573   000D12  6E39               	movwf	(___aldiv@quotient+1)^0,c
  6574   000D14  0E00               	movlw	0
  6575   000D16  6E3A               	movwf	(___aldiv@quotient+2)^0,c
  6576   000D18  0E00               	movlw	0
  6577   000D1A  6E3B               	movwf	(___aldiv@quotient+3)^0,c
  6578   000D1C  5032               	movf	___aldiv@divisor^0,w,c
  6579   000D1E  1033               	iorwf	(___aldiv@divisor+1)^0,w,c
  6580   000D20  1034               	iorwf	(___aldiv@divisor+2)^0,w,c
  6581   000D22  1035               	iorwf	(___aldiv@divisor+3)^0,w,c
  6582   000D24  B4D8               	btfsc	status,2,c
  6583   000D26  D02A               	goto	l4323
  6584   000D28  0E01               	movlw	1
  6585   000D2A  6E36               	movwf	___aldiv@counter^0,c
  6586   000D2C  D006               	goto	l4309
  6587   000D2E                     l4307:
  6588   000D2E  90D8               	bcf	status,0,c
  6589   000D30  3632               	rlcf	___aldiv@divisor^0,f,c
  6590   000D32  3633               	rlcf	(___aldiv@divisor+1)^0,f,c
  6591   000D34  3634               	rlcf	(___aldiv@divisor+2)^0,f,c
  6592   000D36  3635               	rlcf	(___aldiv@divisor+3)^0,f,c
  6593   000D38  2A36               	incf	___aldiv@counter^0,f,c
  6594   000D3A                     l4309:
  6595   000D3A  AE35               	btfss	(___aldiv@divisor+3)^0,7,c
  6596   000D3C  D7F8               	goto	l4307
  6597   000D3E                     u3980:
  6598   000D3E  90D8               	bcf	status,0,c
  6599   000D40  3638               	rlcf	___aldiv@quotient^0,f,c
  6600   000D42  3639               	rlcf	(___aldiv@quotient+1)^0,f,c
  6601   000D44  363A               	rlcf	(___aldiv@quotient+2)^0,f,c
  6602   000D46  363B               	rlcf	(___aldiv@quotient+3)^0,f,c
  6603   000D48  5032               	movf	___aldiv@divisor^0,w,c
  6604   000D4A  5C2E               	subwf	___aldiv@dividend^0,w,c
  6605   000D4C  5033               	movf	(___aldiv@divisor+1)^0,w,c
  6606   000D4E  582F               	subwfb	(___aldiv@dividend+1)^0,w,c
  6607   000D50  5034               	movf	(___aldiv@divisor+2)^0,w,c
  6608   000D52  5830               	subwfb	(___aldiv@dividend+2)^0,w,c
  6609   000D54  5035               	movf	(___aldiv@divisor+3)^0,w,c
  6610   000D56  5831               	subwfb	(___aldiv@dividend+3)^0,w,c
  6611   000D58  A0D8               	btfss	status,0,c
  6612   000D5A  D009               	goto	l4319
  6613   000D5C  5032               	movf	___aldiv@divisor^0,w,c
  6614   000D5E  5E2E               	subwf	___aldiv@dividend^0,f,c
  6615   000D60  5033               	movf	(___aldiv@divisor+1)^0,w,c
  6616   000D62  5A2F               	subwfb	(___aldiv@dividend+1)^0,f,c
  6617   000D64  5034               	movf	(___aldiv@divisor+2)^0,w,c
  6618   000D66  5A30               	subwfb	(___aldiv@dividend+2)^0,f,c
  6619   000D68  5035               	movf	(___aldiv@divisor+3)^0,w,c
  6620   000D6A  5A31               	subwfb	(___aldiv@dividend+3)^0,f,c
  6621   000D6C  8038               	bsf	___aldiv@quotient^0,0,c
  6622   000D6E                     l4319:
  6623   000D6E  90D8               	bcf	status,0,c
  6624   000D70  3235               	rrcf	(___aldiv@divisor+3)^0,f,c
  6625   000D72  3234               	rrcf	(___aldiv@divisor+2)^0,f,c
  6626   000D74  3233               	rrcf	(___aldiv@divisor+1)^0,f,c
  6627   000D76  3232               	rrcf	___aldiv@divisor^0,f,c
  6628   000D78  2E36               	decfsz	___aldiv@counter^0,f,c
  6629   000D7A  D7E1               	goto	u3980
  6630   000D7C                     l4323:
  6631   000D7C  5037               	movf	___aldiv@sign^0,w,c
  6632   000D7E  B4D8               	btfsc	status,2,c
  6633   000D80  D008               	goto	l4327
  6634   000D82  1E3B               	comf	(___aldiv@quotient+3)^0,f,c
  6635   000D84  1E3A               	comf	(___aldiv@quotient+2)^0,f,c
  6636   000D86  1E39               	comf	(___aldiv@quotient+1)^0,f,c
  6637   000D88  6C38               	negf	___aldiv@quotient^0,c
  6638   000D8A  0E00               	movlw	0
  6639   000D8C  2239               	addwfc	(___aldiv@quotient+1)^0,f,c
  6640   000D8E  223A               	addwfc	(___aldiv@quotient+2)^0,f,c
  6641   000D90  223B               	addwfc	(___aldiv@quotient+3)^0,f,c
  6642   000D92                     l4327:
  6643   000D92  C038  F02E         	movff	___aldiv@quotient,?___aldiv
  6644   000D96  C039  F02F         	movff	___aldiv@quotient+1,?___aldiv+1
  6645   000D9A  C03A  F030         	movff	___aldiv@quotient+2,?___aldiv+2
  6646   000D9E  C03B  F031         	movff	___aldiv@quotient+3,?___aldiv+3
  6647   000DA2  0012               	return		;funcret
  6648   000DA4                     __end_of___aldiv:
  6649                           	callstack 0
  6650                           
  6651 ;; *************** function ___lldiv *****************
  6652 ;; Defined at:
  6653 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\__lldiv.c"
  6654 ;; Parameters:    Size  Location     Type
  6655 ;;  dividend        4   20[COMRAM] unsigned long 
  6656 ;;  divisor         4   24[COMRAM] unsigned long 
  6657 ;; Auto vars:     Size  Location     Type
  6658 ;;  quotient        4   28[COMRAM] unsigned long 
  6659 ;;  counter         1   32[COMRAM] unsigned char 
  6660 ;; Return value:  Size  Location     Type
  6661 ;;                  4   20[COMRAM] unsigned long 
  6662 ;; Registers used:
  6663 ;;		wreg, status,2, status,0
  6664 ;; Tracked objects:
  6665 ;;		On entry : 0/0
  6666 ;;		On exit  : 0/0
  6667 ;;		Unchanged: 0/0
  6668 ;; Data sizes:     COMRAM   BANK0   BANK1
  6669 ;;      Params:         8       0       0
  6670 ;;      Locals:         5       0       0
  6671 ;;      Temps:          0       0       0
  6672 ;;      Totals:        13       0       0
  6673 ;;Total ram usage:       13 bytes
  6674 ;; Hardware stack levels used: 1
  6675 ;; Hardware stack levels required when called: 2
  6676 ;; This function calls:
  6677 ;;		Nothing
  6678 ;; This function is called by:
  6679 ;;		_getExpected
  6680 ;;		_mapServo
  6681 ;; This function uses a non-reentrant model
  6682 ;;
  6683                           
  6684                           	psect	text42
  6685   00121C                     __ptext42:
  6686                           	callstack 0
  6687   00121C                     ___lldiv:
  6688                           	callstack 25
  6689                           
  6690                           ;incstack = 0
  6691   00121C  0E00               	movlw	0
  6692   00121E  6E1D               	movwf	___lldiv@quotient^0,c
  6693   001220  0E00               	movlw	0
  6694   001222  6E1E               	movwf	(___lldiv@quotient+1)^0,c
  6695   001224  0E00               	movlw	0
  6696   001226  6E1F               	movwf	(___lldiv@quotient+2)^0,c
  6697   001228  0E00               	movlw	0
  6698   00122A  6E20               	movwf	(___lldiv@quotient+3)^0,c
  6699   00122C  5019               	movf	___lldiv@divisor^0,w,c
  6700   00122E  101A               	iorwf	(___lldiv@divisor+1)^0,w,c
  6701   001230  101B               	iorwf	(___lldiv@divisor+2)^0,w,c
  6702   001232  101C               	iorwf	(___lldiv@divisor+3)^0,w,c
  6703   001234  B4D8               	btfsc	status,2,c
  6704   001236  D02A               	goto	l626
  6705   001238  0E01               	movlw	1
  6706   00123A  6E21               	movwf	___lldiv@counter^0,c
  6707   00123C  D006               	goto	l4747
  6708   00123E                     l4745:
  6709   00123E  90D8               	bcf	status,0,c
  6710   001240  3619               	rlcf	___lldiv@divisor^0,f,c
  6711   001242  361A               	rlcf	(___lldiv@divisor+1)^0,f,c
  6712   001244  361B               	rlcf	(___lldiv@divisor+2)^0,f,c
  6713   001246  361C               	rlcf	(___lldiv@divisor+3)^0,f,c
  6714   001248  2A21               	incf	___lldiv@counter^0,f,c
  6715   00124A                     l4747:
  6716   00124A  AE1C               	btfss	(___lldiv@divisor+3)^0,7,c
  6717   00124C  D7F8               	goto	l4745
  6718   00124E                     u4790:
  6719   00124E  90D8               	bcf	status,0,c
  6720   001250  361D               	rlcf	___lldiv@quotient^0,f,c
  6721   001252  361E               	rlcf	(___lldiv@quotient+1)^0,f,c
  6722   001254  361F               	rlcf	(___lldiv@quotient+2)^0,f,c
  6723   001256  3620               	rlcf	(___lldiv@quotient+3)^0,f,c
  6724   001258  5019               	movf	___lldiv@divisor^0,w,c
  6725   00125A  5C15               	subwf	___lldiv@dividend^0,w,c
  6726   00125C  501A               	movf	(___lldiv@divisor+1)^0,w,c
  6727   00125E  5816               	subwfb	(___lldiv@dividend+1)^0,w,c
  6728   001260  501B               	movf	(___lldiv@divisor+2)^0,w,c
  6729   001262  5817               	subwfb	(___lldiv@dividend+2)^0,w,c
  6730   001264  501C               	movf	(___lldiv@divisor+3)^0,w,c
  6731   001266  5818               	subwfb	(___lldiv@dividend+3)^0,w,c
  6732   001268  A0D8               	btfss	status,0,c
  6733   00126A  D009               	goto	l4757
  6734   00126C  5019               	movf	___lldiv@divisor^0,w,c
  6735   00126E  5E15               	subwf	___lldiv@dividend^0,f,c
  6736   001270  501A               	movf	(___lldiv@divisor+1)^0,w,c
  6737   001272  5A16               	subwfb	(___lldiv@dividend+1)^0,f,c
  6738   001274  501B               	movf	(___lldiv@divisor+2)^0,w,c
  6739   001276  5A17               	subwfb	(___lldiv@dividend+2)^0,f,c
  6740   001278  501C               	movf	(___lldiv@divisor+3)^0,w,c
  6741   00127A  5A18               	subwfb	(___lldiv@dividend+3)^0,f,c
  6742   00127C  801D               	bsf	___lldiv@quotient^0,0,c
  6743   00127E                     l4757:
  6744   00127E  90D8               	bcf	status,0,c
  6745   001280  321C               	rrcf	(___lldiv@divisor+3)^0,f,c
  6746   001282  321B               	rrcf	(___lldiv@divisor+2)^0,f,c
  6747   001284  321A               	rrcf	(___lldiv@divisor+1)^0,f,c
  6748   001286  3219               	rrcf	___lldiv@divisor^0,f,c
  6749   001288  2E21               	decfsz	___lldiv@counter^0,f,c
  6750   00128A  D7E1               	goto	u4790
  6751   00128C                     l626:
  6752   00128C  C01D  F015         	movff	___lldiv@quotient,?___lldiv
  6753   001290  C01E  F016         	movff	___lldiv@quotient+1,?___lldiv+1
  6754   001294  C01F  F017         	movff	___lldiv@quotient+2,?___lldiv+2
  6755   001298  C020  F018         	movff	___lldiv@quotient+3,?___lldiv+3
  6756   00129C  0012               	return		;funcret
  6757   00129E                     __end_of___lldiv:
  6758                           	callstack 0
  6759                           
  6760 ;; *************** function _delay_ms *****************
  6761 ;; Defined at:
  6762 ;;		line 36 in file "main.c"
  6763 ;; Parameters:    Size  Location     Type
  6764 ;;  milliseconds    2    4[COMRAM] unsigned int 
  6765 ;; Auto vars:     Size  Location     Type
  6766 ;;		None
  6767 ;; Return value:  Size  Location     Type
  6768 ;;                  1    wreg      void 
  6769 ;; Registers used:
  6770 ;;		wreg, status,2, status,0
  6771 ;; Tracked objects:
  6772 ;;		On entry : 0/0
  6773 ;;		On exit  : 0/0
  6774 ;;		Unchanged: 0/0
  6775 ;; Data sizes:     COMRAM   BANK0   BANK1
  6776 ;;      Params:         2       0       0
  6777 ;;      Locals:         0       0       0
  6778 ;;      Temps:          1       0       0
  6779 ;;      Totals:         3       0       0
  6780 ;;Total ram usage:        3 bytes
  6781 ;; Hardware stack levels used: 1
  6782 ;; Hardware stack levels required when called: 2
  6783 ;; This function calls:
  6784 ;;		Nothing
  6785 ;; This function is called by:
  6786 ;;		_infusion
  6787 ;; This function uses a non-reentrant model
  6788 ;;
  6789                           
  6790                           	psect	text43
  6791   001AC0                     __ptext43:
  6792                           	callstack 0
  6793   001AC0                     _delay_ms:
  6794                           	callstack 26
  6795                           
  6796                           ;main.c: 37:     while(milliseconds > 0) {
  6797                           
  6798                           ;incstack = 0
  6799   001AC0  D00A               	goto	l447
  6800   001AC2                     l4777:
  6801                           
  6802                           ;main.c: 38:         _delay((unsigned long)((1)*(8000000L/4000.0)));
  6803   001AC2  0E03               	movlw	3
  6804   001AC4  6E07               	movwf	??_delay_ms^0,c
  6805   001AC6  0E98               	movlw	152
  6806   001AC8                     u5417:
  6807   001AC8  2EE8               	decfsz	wreg,f,c
  6808   001ACA  D7FE               	bra	u5417
  6809   001ACC  2E07               	decfsz	??_delay_ms^0,f,c
  6810   001ACE  D7FC               	bra	u5417
  6811                           
  6812                           ;main.c: 39:         milliseconds--;
  6813   001AD0  0605               	decf	delay_ms@milliseconds^0,f,c
  6814   001AD2  A0D8               	btfss	status,0,c
  6815   001AD4  0606               	decf	(delay_ms@milliseconds+1)^0,f,c
  6816   001AD6                     l447:
  6817                           
  6818                           ;main.c: 37:     while(milliseconds > 0) {
  6819   001AD6  5005               	movf	delay_ms@milliseconds^0,w,c
  6820   001AD8  1006               	iorwf	(delay_ms@milliseconds+1)^0,w,c
  6821   001ADA  B4D8               	btfsc	status,2,c
  6822   001ADC  0012               	return	
  6823   001ADE  D7F1               	goto	l4777
  6824   001AE0                     __end_of_delay_ms:
  6825                           	callstack 0
  6826                           
  6827 ;; *************** function _Timer1_start *****************
  6828 ;; Defined at:
  6829 ;;		line 125 in file "main.c"
  6830 ;; Parameters:    Size  Location     Type
  6831 ;;		None
  6832 ;; Auto vars:     Size  Location     Type
  6833 ;;		None
  6834 ;; Return value:  Size  Location     Type
  6835 ;;                  1    wreg      void 
  6836 ;; Registers used:
  6837 ;;		wreg, status,2
  6838 ;; Tracked objects:
  6839 ;;		On entry : 0/0
  6840 ;;		On exit  : 0/0
  6841 ;;		Unchanged: 0/0
  6842 ;; Data sizes:     COMRAM   BANK0   BANK1
  6843 ;;      Params:         0       0       0
  6844 ;;      Locals:         0       0       0
  6845 ;;      Temps:          0       0       0
  6846 ;;      Totals:         0       0       0
  6847 ;;Total ram usage:        0 bytes
  6848 ;; Hardware stack levels used: 1
  6849 ;; Hardware stack levels required when called: 2
  6850 ;; This function calls:
  6851 ;;		Nothing
  6852 ;; This function is called by:
  6853 ;;		_infusion
  6854 ;; This function uses a non-reentrant model
  6855 ;;
  6856                           
  6857                           	psect	text44
  6858   001AE0                     __ptext44:
  6859                           	callstack 0
  6860   001AE0                     _Timer1_start:
  6861                           	callstack 26
  6862                           
  6863                           ;main.c: 127:     GIE=1;
  6864                           
  6865                           ;incstack = 0
  6866   001AE0  8EF2               	bsf	4082,7,c	;volatile
  6867                           
  6868                           ;main.c: 128:     PEIE=1;
  6869   001AE2  8CF2               	bsf	4082,6,c	;volatile
  6870                           
  6871                           ;main.c: 129:     TMR1IE=1;
  6872   001AE4  809D               	bsf	3997,0,c	;volatile
  6873                           
  6874                           ;main.c: 130:     TMR1IF=0;
  6875   001AE6  909E               	bcf	3998,0,c	;volatile
  6876                           
  6877                           ;main.c: 133:     T1CON=0x80;
  6878   001AE8  0E80               	movlw	128
  6879   001AEA  6ECD               	movwf	205,c	;volatile
  6880                           
  6881                           ;main.c: 134:     TMR1=0xF856;
  6882   001AEC  0EF8               	movlw	248
  6883   001AEE  6ECF               	movwf	207,c	;volatile
  6884   001AF0  0E56               	movlw	86
  6885   001AF2  6ECE               	movwf	206,c	;volatile
  6886                           
  6887                           ;main.c: 135:     TMR1ON=1;
  6888   001AF4  80CD               	bsf	4045,0,c	;volatile
  6889   001AF6  0012               	return		;funcret
  6890   001AF8                     __end_of_Timer1_start:
  6891                           	callstack 0
  6892                           
  6893 ;; *************** function _GetNextState *****************
  6894 ;; Defined at:
  6895 ;;		line 586 in file "main.c"
  6896 ;; Parameters:    Size  Location     Type
  6897 ;;  currentState    1    wreg     enum E2620
  6898 ;;  input           1    4[COMRAM] unsigned char 
  6899 ;; Auto vars:     Size  Location     Type
  6900 ;;  currentState    1    7[COMRAM] enum E2620
  6901 ;; Return value:  Size  Location     Type
  6902 ;;                  1    wreg      enum E2620
  6903 ;; Registers used:
  6904 ;;		wreg, status,2, status,0
  6905 ;; Tracked objects:
  6906 ;;		On entry : 0/0
  6907 ;;		On exit  : 0/0
  6908 ;;		Unchanged: 0/0
  6909 ;; Data sizes:     COMRAM   BANK0   BANK1
  6910 ;;      Params:         1       0       0
  6911 ;;      Locals:         1       0       0
  6912 ;;      Temps:          2       0       0
  6913 ;;      Totals:         4       0       0
  6914 ;;Total ram usage:        4 bytes
  6915 ;; Hardware stack levels used: 1
  6916 ;; Hardware stack levels required when called: 2
  6917 ;; This function calls:
  6918 ;;		Nothing
  6919 ;; This function is called by:
  6920 ;;		_main
  6921 ;; This function uses a non-reentrant model
  6922 ;;
  6923                           
  6924                           	psect	text45
  6925   00129E                     __ptext45:
  6926                           	callstack 0
  6927   00129E                     _GetNextState:
  6928                           	callstack 28
  6929                           
  6930                           ;incstack = 0
  6931                           ;GetNextState@currentState stored from wreg
  6932   00129E  6E08               	movwf	GetNextState@currentState^0,c
  6933                           
  6934                           ;main.c: 587:     switch (currentState) {
  6935   0012A0  D029               	goto	l5185
  6936   0012A2                     l5137:
  6937                           
  6938                           ;main.c: 589:             if (input == '1') return MAIN_MENU;
  6939   0012A2  0E31               	movlw	49
  6940   0012A4  1805               	xorwf	GetNextState@input^0,w,c
  6941   0012A6  A4D8               	btfss	status,2,c
  6942   0012A8  D039               	goto	l5187
  6943   0012AA                     u4940:
  6944   0012AA  0E01               	movlw	1
  6945   0012AC  0012               	return	
  6946   0012AE                     l5143:
  6947                           
  6948                           ;main.c: 592:             if (input == 'b') return MAIN_MENU;
  6949   0012AE  0E62               	movlw	98
  6950   0012B0  1805               	xorwf	GetNextState@input^0,w,c
  6951   0012B2  B4D8               	btfsc	status,2,c
  6952   0012B4  D7FA               	goto	u4940
  6953   0012B6  D032               	goto	l5187
  6954   0012B8                     l5149:
  6955                           
  6956                           ;main.c: 595:             if (input == '1') return SET_UP_INFUSION;
  6957   0012B8  0E31               	movlw	49
  6958   0012BA  1805               	xorwf	GetNextState@input^0,w,c
  6959   0012BC  A4D8               	btfss	status,2,c
  6960   0012BE  D002               	goto	l5155
  6961   0012C0  0E02               	movlw	2
  6962   0012C2  0012               	return	
  6963   0012C4                     l5155:
  6964                           
  6965                           ;main.c: 596:             if (input == '2') return MANUAL_SCREEN;
  6966   0012C4  0E32               	movlw	50
  6967   0012C6  1805               	xorwf	GetNextState@input^0,w,c
  6968   0012C8  A4D8               	btfss	status,2,c
  6969   0012CA  D002               	goto	l5161
  6970   0012CC  0E03               	movlw	3
  6971   0012CE  0012               	return	
  6972   0012D0                     l5161:
  6973                           
  6974                           ;main.c: 597:             if (input == '3') return SETTINGS;
  6975   0012D0  0E33               	movlw	51
  6976   0012D2  1805               	xorwf	GetNextState@input^0,w,c
  6977   0012D4  A4D8               	btfss	status,2,c
  6978   0012D6  D002               	goto	l5167
  6979   0012D8  0E04               	movlw	4
  6980   0012DA  0012               	return	
  6981   0012DC                     l5167:
  6982                           
  6983                           ;main.c: 598:             if (input == '4') return ABOUT_PAGE;
  6984   0012DC  0E34               	movlw	52
  6985   0012DE  1805               	xorwf	GetNextState@input^0,w,c
  6986   0012E0  A4D8               	btfss	status,2,c
  6987   0012E2  D002               	goto	l5173
  6988   0012E4  0E05               	movlw	5
  6989   0012E6  0012               	return	
  6990   0012E8                     l5173:
  6991                           
  6992                           ;main.c: 599:             if (input == 'b') return WELCOME_SCREEN;
  6993   0012E8  0E62               	movlw	98
  6994   0012EA  1805               	xorwf	GetNextState@input^0,w,c
  6995   0012EC  A4D8               	btfss	status,2,c
  6996   0012EE  D016               	goto	l5187
  6997   0012F0  0E00               	movlw	0
  6998   0012F2  0012               	return	
  6999   0012F4                     l5185:
  7000   0012F4  5008               	movf	GetNextState@currentState^0,w,c
  7001   0012F6  6E06               	movwf	??_GetNextState^0,c
  7002   0012F8  6A07               	clrf	(??_GetNextState+1)^0,c
  7003                           
  7004                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7005                           ; Switch size 1, requested type "simple"
  7006                           ; Number of cases is 1, Range of values is 0 to 0
  7007                           ; switch strategies available:
  7008                           ; Name         Instructions Cycles
  7009                           ; simple_byte            4     3 (average)
  7010                           ;	Chosen strategy is simple_byte
  7011   0012FA  5007               	movf	(??_GetNextState+1)^0,w,c
  7012   0012FC  0A00               	xorlw	0	; case 0
  7013   0012FE  A4D8               	btfss	status,2,c
  7014   001300  D00D               	goto	l5187
  7015                           
  7016                           ; Switch size 1, requested type "simple"
  7017                           ; Number of cases is 4, Range of values is 0 to 3
  7018                           ; switch strategies available:
  7019                           ; Name         Instructions Cycles
  7020                           ; simple_byte           13     7 (average)
  7021                           ;	Chosen strategy is simple_byte
  7022   001302  5006               	movf	??_GetNextState^0,w,c
  7023   001304  0A00               	xorlw	0	; case 0
  7024   001306  B4D8               	btfsc	status,2,c
  7025   001308  D7CC               	goto	l5137
  7026   00130A  0A01               	xorlw	1	; case 1
  7027   00130C  B4D8               	btfsc	status,2,c
  7028   00130E  D7D4               	goto	l5149
  7029   001310  0A03               	xorlw	3	; case 2
  7030   001312  B4D8               	btfsc	status,2,c
  7031   001314  D7CA               	goto	u4940
  7032   001316  0A01               	xorlw	1	; case 3
  7033   001318  B4D8               	btfsc	status,2,c
  7034   00131A  D7C9               	goto	l5143
  7035   00131C                     l5187:
  7036                           
  7037                           ;main.c: 605:     return currentState;
  7038   00131C  5008               	movf	GetNextState@currentState^0,w,c
  7039   00131E  0012               	return		;funcret
  7040   001320                     __end_of_GetNextState:
  7041                           	callstack 0
  7042                           
  7043 ;; *************** function _Timer1_ISR *****************
  7044 ;; Defined at:
  7045 ;;		line 44 in file "main.c"
  7046 ;; Parameters:    Size  Location     Type
  7047 ;;		None
  7048 ;; Auto vars:     Size  Location     Type
  7049 ;;		None
  7050 ;; Return value:  Size  Location     Type
  7051 ;;                  1    wreg      void 
  7052 ;; Registers used:
  7053 ;;		wreg, status,2, status,0, cstack
  7054 ;; Tracked objects:
  7055 ;;		On entry : 0/0
  7056 ;;		On exit  : 0/0
  7057 ;;		Unchanged: 0/0
  7058 ;; Data sizes:     COMRAM   BANK0   BANK1
  7059 ;;      Params:         0       0       0
  7060 ;;      Locals:         0       0       0
  7061 ;;      Temps:          1       0       0
  7062 ;;      Totals:         1       0       0
  7063 ;;Total ram usage:        1 bytes
  7064 ;; Hardware stack levels used: 1
  7065 ;; Hardware stack levels required when called: 1
  7066 ;; This function calls:
  7067 ;;		_signalServo
  7068 ;; This function is called by:
  7069 ;;		Interrupt level 2
  7070 ;; This function uses a non-reentrant model
  7071 ;;
  7072                           
  7073                           	psect	intcode
  7074   000008                     __pintcode:
  7075                           	callstack 0
  7076   000008                     _Timer1_ISR:
  7077                           	callstack 22
  7078                           
  7079                           ;incstack = 0
  7080   000008  827B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7081                           
  7082                           ;main.c: 46:     if (TMR1IF == 1) {
  7083   00000A  A09E               	btfss	3998,0,c	;volatile
  7084   00000C  D00D               	goto	i2l455
  7085                           
  7086                           ;main.c: 47:         TMR1=0xF856;
  7087   00000E  0EF8               	movlw	248
  7088   000010  6ECF               	movwf	207,c	;volatile
  7089   000012  0E56               	movlw	86
  7090   000014  6ECE               	movwf	206,c	;volatile
  7091                           
  7092                           ;main.c: 48:         LATB = ~LATB;
  7093   000016  1E8A               	comf	138,f,c	;volatile
  7094                           
  7095                           ;main.c: 49:         PIR1bits.TMR1IF=0;
  7096   000018  909E               	bcf	158,0,c	;volatile
  7097                           
  7098                           ;main.c: 50:         mil++;
  7099   00001A  0E01               	movlw	1
  7100   00001C  2673               	addwf	_mil^0,f,c
  7101   00001E  0E00               	movlw	0
  7102   000020  2274               	addwfc	(_mil+1)^0,f,c
  7103   000022  2275               	addwfc	(_mil+2)^0,f,c
  7104   000024  2276               	addwfc	(_mil+3)^0,f,c
  7105                           
  7106                           ;main.c: 51:     }
  7107   000026  D0AF               	goto	i2l466
  7108   000028                     i2l455:
  7109   000028  A4F2               	btfss	4082,2,c	;volatile
  7110   00002A  D0AD               	goto	i2l466
  7111                           
  7112                           ;main.c: 53:         INTCONbits.TMR0IF=0;
  7113   00002C  94F2               	bcf	242,2,c	;volatile
  7114                           
  7115                           ;main.c: 55:         switch (servo_active){
  7116   00002E  D094               	goto	i2l3901
  7117   000030                     i2l3875:
  7118   000030  B28B               	btfsc	139,1,c	;volatile
  7119   000032  D003               	goto	i2u330_40
  7120   000034  6A04               	clrf	??_Timer1_ISR^0,c
  7121   000036  2A04               	incf	??_Timer1_ISR^0,f,c
  7122   000038  D001               	goto	i2u331_48
  7123   00003A                     i2u330_40:
  7124   00003A  6A04               	clrf	??_Timer1_ISR^0,c
  7125   00003C                     i2u331_48:
  7126   00003C  4604               	rlncf	??_Timer1_ISR^0,f,c
  7127   00003E  508B               	movf	139,w,c	;volatile
  7128   000040  1804               	xorwf	??_Timer1_ISR^0,w,c
  7129   000042  0BFD               	andlw	-3
  7130   000044  1804               	xorwf	??_Timer1_ISR^0,w,c
  7131   000046  6E8B               	movwf	139,c	;volatile
  7132   000048  C0AC  F001         	movff	_pulse,signalServo@pulseServo
  7133   00004C  C0AD  F002         	movff	_pulse+1,signalServo@pulseServo+1
  7134   000050  A28B               	btfss	139,1,c	;volatile
  7135   000052  D002               	goto	i2u332_40
  7136   000054  0E01               	movlw	1
  7137   000056  D001               	goto	i2u332_46
  7138   000058                     i2u332_40:
  7139   000058  0E00               	movlw	0
  7140   00005A                     i2u332_46:
  7141   00005A  ECB6  F00C         	call	_signalServo
  7142   00005E  D08F               	goto	i2l3903
  7143   000060                     i2l3879:
  7144   000060  B28A               	btfsc	138,1,c	;volatile
  7145   000062  D003               	goto	i2u333_40
  7146   000064  6A04               	clrf	??_Timer1_ISR^0,c
  7147   000066  2A04               	incf	??_Timer1_ISR^0,f,c
  7148   000068  D001               	goto	i2u334_48
  7149   00006A                     i2u333_40:
  7150   00006A  6A04               	clrf	??_Timer1_ISR^0,c
  7151   00006C                     i2u334_48:
  7152   00006C  4604               	rlncf	??_Timer1_ISR^0,f,c
  7153   00006E  508A               	movf	138,w,c	;volatile
  7154   000070  1804               	xorwf	??_Timer1_ISR^0,w,c
  7155   000072  0BFD               	andlw	-3
  7156   000074  1804               	xorwf	??_Timer1_ISR^0,w,c
  7157   000076  6E8A               	movwf	138,c	;volatile
  7158   000078  C0AE  F001         	movff	_pulse+2,signalServo@pulseServo
  7159   00007C  C0AF  F002         	movff	_pulse+3,signalServo@pulseServo+1
  7160   000080  A28A               	btfss	138,1,c	;volatile
  7161   000082  D002               	goto	i2u335_40
  7162   000084  0E01               	movlw	1
  7163   000086  D001               	goto	i2u335_46
  7164   000088                     i2u335_40:
  7165   000088  0E00               	movlw	0
  7166   00008A                     i2u335_46:
  7167   00008A  ECB6  F00C         	call	_signalServo
  7168   00008E  D077               	goto	i2l3903
  7169   000090                     i2l3883:
  7170   000090  B48A               	btfsc	138,2,c	;volatile
  7171   000092  D003               	goto	i2u336_40
  7172   000094  6A04               	clrf	??_Timer1_ISR^0,c
  7173   000096  2A04               	incf	??_Timer1_ISR^0,f,c
  7174   000098  D001               	goto	i2u337_48
  7175   00009A                     i2u336_40:
  7176   00009A  6A04               	clrf	??_Timer1_ISR^0,c
  7177   00009C                     i2u337_48:
  7178   00009C  4604               	rlncf	??_Timer1_ISR^0,f,c
  7179   00009E  4604               	rlncf	??_Timer1_ISR^0,f,c
  7180   0000A0  508A               	movf	138,w,c	;volatile
  7181   0000A2  1804               	xorwf	??_Timer1_ISR^0,w,c
  7182   0000A4  0BFB               	andlw	-5
  7183   0000A6  1804               	xorwf	??_Timer1_ISR^0,w,c
  7184   0000A8  6E8A               	movwf	138,c	;volatile
  7185   0000AA  C0B0  F001         	movff	_pulse+4,signalServo@pulseServo
  7186   0000AE  C0B1  F002         	movff	_pulse+5,signalServo@pulseServo+1
  7187   0000B2  A48A               	btfss	138,2,c	;volatile
  7188   0000B4  D002               	goto	i2u338_40
  7189   0000B6  0E01               	movlw	1
  7190   0000B8  D001               	goto	i2u338_46
  7191   0000BA                     i2u338_40:
  7192   0000BA  0E00               	movlw	0
  7193   0000BC                     i2u338_46:
  7194   0000BC  ECB6  F00C         	call	_signalServo
  7195   0000C0  D05E               	goto	i2l3903
  7196   0000C2                     i2l3887:
  7197   0000C2  B68A               	btfsc	138,3,c	;volatile
  7198   0000C4  D003               	goto	i2u339_40
  7199   0000C6  6A04               	clrf	??_Timer1_ISR^0,c
  7200   0000C8  2A04               	incf	??_Timer1_ISR^0,f,c
  7201   0000CA  D001               	goto	i2u340_48
  7202   0000CC                     i2u339_40:
  7203   0000CC  6A04               	clrf	??_Timer1_ISR^0,c
  7204   0000CE                     i2u340_48:
  7205   0000CE  4604               	rlncf	??_Timer1_ISR^0,f,c
  7206   0000D0  4604               	rlncf	??_Timer1_ISR^0,f,c
  7207   0000D2  4604               	rlncf	??_Timer1_ISR^0,f,c
  7208   0000D4  508A               	movf	138,w,c	;volatile
  7209   0000D6  1804               	xorwf	??_Timer1_ISR^0,w,c
  7210   0000D8  0BF7               	andlw	-9
  7211   0000DA  1804               	xorwf	??_Timer1_ISR^0,w,c
  7212   0000DC  6E8A               	movwf	138,c	;volatile
  7213   0000DE  C0B2  F001         	movff	_pulse+6,signalServo@pulseServo
  7214   0000E2  C0B3  F002         	movff	_pulse+7,signalServo@pulseServo+1
  7215   0000E6  A68A               	btfss	138,3,c	;volatile
  7216   0000E8  D002               	goto	i2u341_40
  7217   0000EA  0E01               	movlw	1
  7218   0000EC  D001               	goto	i2u341_46
  7219   0000EE                     i2u341_40:
  7220   0000EE  0E00               	movlw	0
  7221   0000F0                     i2u341_46:
  7222   0000F0  ECB6  F00C         	call	_signalServo
  7223   0000F4  D044               	goto	i2l3903
  7224   0000F6                     i2l3891:
  7225   0000F6  B88A               	btfsc	138,4,c	;volatile
  7226   0000F8  D003               	goto	i2u342_40
  7227   0000FA  6A04               	clrf	??_Timer1_ISR^0,c
  7228   0000FC  2A04               	incf	??_Timer1_ISR^0,f,c
  7229   0000FE  D001               	goto	i2u343_48
  7230   000100                     i2u342_40:
  7231   000100  6A04               	clrf	??_Timer1_ISR^0,c
  7232   000102                     i2u343_48:
  7233   000102  3A04               	swapf	??_Timer1_ISR^0,f,c
  7234   000104  508A               	movf	138,w,c	;volatile
  7235   000106  1804               	xorwf	??_Timer1_ISR^0,w,c
  7236   000108  0BEF               	andlw	-17
  7237   00010A  1804               	xorwf	??_Timer1_ISR^0,w,c
  7238   00010C  6E8A               	movwf	138,c	;volatile
  7239   00010E  C0B4  F001         	movff	_pulse+8,signalServo@pulseServo
  7240   000112  C0B5  F002         	movff	_pulse+9,signalServo@pulseServo+1
  7241   000116  A88A               	btfss	138,4,c	;volatile
  7242   000118  D002               	goto	i2u344_40
  7243   00011A  0E01               	movlw	1
  7244   00011C  D001               	goto	i2u344_46
  7245   00011E                     i2u344_40:
  7246   00011E  0E00               	movlw	0
  7247   000120                     i2u344_46:
  7248   000120  ECB6  F00C         	call	_signalServo
  7249   000124  D02C               	goto	i2l3903
  7250   000126                     i2l3895:
  7251   000126  BA8A               	btfsc	138,5,c	;volatile
  7252   000128  D003               	goto	i2u345_40
  7253   00012A  6A04               	clrf	??_Timer1_ISR^0,c
  7254   00012C  2A04               	incf	??_Timer1_ISR^0,f,c
  7255   00012E  D001               	goto	i2u346_48
  7256   000130                     i2u345_40:
  7257   000130  6A04               	clrf	??_Timer1_ISR^0,c
  7258   000132                     i2u346_48:
  7259   000132  3A04               	swapf	??_Timer1_ISR^0,f,c
  7260   000134  4604               	rlncf	??_Timer1_ISR^0,f,c
  7261   000136  508A               	movf	138,w,c	;volatile
  7262   000138  1804               	xorwf	??_Timer1_ISR^0,w,c
  7263   00013A  0BDF               	andlw	-33
  7264   00013C  1804               	xorwf	??_Timer1_ISR^0,w,c
  7265   00013E  6E8A               	movwf	138,c	;volatile
  7266   000140  C0B6  F001         	movff	_pulse+10,signalServo@pulseServo
  7267   000144  C0B7  F002         	movff	_pulse+11,signalServo@pulseServo+1
  7268   000148  AA8A               	btfss	138,5,c	;volatile
  7269   00014A  D002               	goto	i2u347_40
  7270   00014C  0E01               	movlw	1
  7271   00014E  D001               	goto	i2u347_46
  7272   000150                     i2u347_40:
  7273   000150  0E00               	movlw	0
  7274   000152                     i2u347_46:
  7275   000152  ECB6  F00C         	call	_signalServo
  7276   000156  D013               	goto	i2l3903
  7277   000158                     i2l3901:
  7278   000158  507A               	movf	_servo_active^0,w,c
  7279                           
  7280                           ; Switch size 1, requested type "simple"
  7281                           ; Number of cases is 6, Range of values is 1 to 6
  7282                           ; switch strategies available:
  7283                           ; Name         Instructions Cycles
  7284                           ; simple_byte           19    10 (average)
  7285                           ;	Chosen strategy is simple_byte
  7286   00015A  0A01               	xorlw	1	; case 1
  7287   00015C  B4D8               	btfsc	status,2,c
  7288   00015E  D768               	goto	i2l3875
  7289   000160  0A03               	xorlw	3	; case 2
  7290   000162  B4D8               	btfsc	status,2,c
  7291   000164  D77D               	goto	i2l3879
  7292   000166  0A01               	xorlw	1	; case 3
  7293   000168  B4D8               	btfsc	status,2,c
  7294   00016A  D792               	goto	i2l3883
  7295   00016C  0A07               	xorlw	7	; case 4
  7296   00016E  B4D8               	btfsc	status,2,c
  7297   000170  D7A8               	goto	i2l3887
  7298   000172  0A01               	xorlw	1	; case 5
  7299   000174  B4D8               	btfsc	status,2,c
  7300   000176  D7BF               	goto	i2l3891
  7301   000178  0A03               	xorlw	3	; case 6
  7302   00017A  B4D8               	btfsc	status,2,c
  7303   00017C  D7D4               	goto	i2l3895
  7304   00017E                     i2l3903:
  7305                           
  7306                           ;main.c: 63:         {TMR0H=(TMR0_ini>>8); TMR0L=(TMR0_ini&0x00FF);};
  7307   00017E  5078               	movf	(_TMR0_ini+1)^0,w,c
  7308   000180  6ED7               	movwf	215,c	;volatile
  7309   000182  C077  FFD6         	movff	_TMR0_ini,4054	;volatile
  7310   000186                     i2l466:
  7311   000186  927B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7312   000188  0011               	retfie		f
  7313   00018A                     __end_of_Timer1_ISR:
  7314                           	callstack 0
  7315                           
  7316 ;; *************** function _signalServo *****************
  7317 ;; Defined at:
  7318 ;;		line 9 in file "servo.c"
  7319 ;; Parameters:    Size  Location     Type
  7320 ;;  pinServo        1    wreg     unsigned char 
  7321 ;;  pulseServo      2    0[COMRAM] unsigned short 
  7322 ;; Auto vars:     Size  Location     Type
  7323 ;;  pinServo        1    2[COMRAM] unsigned char 
  7324 ;; Return value:  Size  Location     Type
  7325 ;;                  1    wreg      void 
  7326 ;; Registers used:
  7327 ;;		wreg, status,2, status,0
  7328 ;; Tracked objects:
  7329 ;;		On entry : 0/0
  7330 ;;		On exit  : 0/0
  7331 ;;		Unchanged: 0/0
  7332 ;; Data sizes:     COMRAM   BANK0   BANK1
  7333 ;;      Params:         2       0       0
  7334 ;;      Locals:         1       0       0
  7335 ;;      Temps:          0       0       0
  7336 ;;      Totals:         3       0       0
  7337 ;;Total ram usage:        3 bytes
  7338 ;; Hardware stack levels used: 1
  7339 ;; This function calls:
  7340 ;;		Nothing
  7341 ;; This function is called by:
  7342 ;;		_Timer1_ISR
  7343 ;; This function uses a non-reentrant model
  7344 ;;
  7345                           
  7346                           	psect	text47
  7347   00196C                     __ptext47:
  7348                           	callstack 0
  7349   00196C                     _signalServo:
  7350                           	callstack 22
  7351                           
  7352                           ;incstack = 0
  7353                           ;signalServo@pinServo stored from wreg
  7354   00196C  6E03               	movwf	signalServo@pinServo^0,c
  7355                           
  7356                           ;servo.c: 10:     if (pinServo){
  7357   00196E  5003               	movf	signalServo@pinServo^0,w,c
  7358   001970  B4D8               	btfsc	status,2,c
  7359   001972  D009               	goto	i2l3683
  7360                           
  7361                           ;servo.c: 11:         TMR0_ini= (uint16_t)(65536-pulseServo+30);
  7362   001974  5001               	movf	signalServo@pulseServo^0,w,c
  7363   001976  081E               	sublw	30
  7364   001978  6E77               	movwf	_TMR0_ini^0,c
  7365   00197A  5002               	movf	(signalServo@pulseServo+1)^0,w,c
  7366   00197C  A0D8               	btfss	status,0,c
  7367   00197E  2AE8               	incf	wreg,f,c
  7368   001980  0800               	sublw	0
  7369   001982  6E78               	movwf	(_TMR0_ini+1)^0,c
  7370                           
  7371                           ;servo.c: 12:     }
  7372   001984  0012               	return	
  7373   001986                     i2l3683:
  7374                           
  7375                           ;servo.c: 14:         TMR0_ini= (65536-(20000/6)+pulseServo+30);
  7376   001986  0E19               	movlw	25
  7377   001988  2401               	addwf	signalServo@pulseServo^0,w,c
  7378   00198A  6E77               	movwf	_TMR0_ini^0,c
  7379   00198C  0EF3               	movlw	243
  7380   00198E  2002               	addwfc	(signalServo@pulseServo+1)^0,w,c
  7381   001990  6E78               	movwf	(_TMR0_ini+1)^0,c
  7382                           
  7383                           ;servo.c: 16:         if(servo_active == 6) servo_active=1;
  7384   001992  0E06               	movlw	6
  7385   001994  187A               	xorwf	_servo_active^0,w,c
  7386   001996  A4D8               	btfss	status,2,c
  7387   001998  D003               	goto	i2l3687
  7388   00199A  0E01               	movlw	1
  7389   00199C  6E7A               	movwf	_servo_active^0,c
  7390   00199E  0012               	return	
  7391   0019A0                     i2l3687:
  7392   0019A0  2A7A               	incf	_servo_active^0,f,c
  7393   0019A2  0012               	return		;funcret
  7394   0019A4                     __end_of_signalServo:
  7395                           	callstack 0
  7396                           
  7397                           	psect	rparam
  7398   000000                     
  7399                           	psect	temp
  7400   00007B                     btemp:
  7401                           	callstack 0
  7402   00007B                     	ds	1
  7403   000000                     int$flags	set	btemp
  7404   000000                     wtemp8	set	btemp+1
  7405   000000                     ttemp5	set	btemp+1
  7406   000000                     ttemp6	set	btemp+4
  7407   000000                     ttemp7	set	btemp+8
  7408                           
  7409                           	psect	config
  7410                           
  7411                           ; Padding undefined space
  7412   300000                     	org	3145728
  7413   300000  FF                 	db	255
  7414                           
  7415                           ;Config register CONFIG1H @ 0x300001
  7416                           ;	Oscillator
  7417                           ;	OSC = INTIO2, Internal oscillator block, port function on RA6 and RA7
  7418                           ;	Fail-Safe Clock Monitor Enable bit
  7419                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  7420                           ;	Internal/External Oscillator Switchover bit
  7421                           ;	IESO = OFF, Oscillator Switchover mode disabled
  7422   300001                     	org	3145729
  7423   300001  08                 	db	8
  7424                           
  7425                           ;Config register CONFIG2L @ 0x300002
  7426                           ;	Power-up Timer Enable bit
  7427                           ;	PWRT = ON, PWRT enabled
  7428                           ;	Brown-out Reset Enable bits
  7429                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  7430                           ;	Brown-out Reset Voltage bits
  7431                           ;	BORV = 3, Minimum Setting
  7432   300002                     	org	3145730
  7433   300002  1E                 	db	30
  7434                           
  7435                           ;Config register CONFIG2H @ 0x300003
  7436                           ;	Watchdog Timer Enable bit
  7437                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  7438                           ;	Watchdog Timer Postscale Select bits
  7439                           ;	WDTPS = 32768, 1:32768
  7440   300003                     	org	3145731
  7441   300003  1E                 	db	30
  7442                           
  7443                           ; Padding undefined space
  7444   300004                     	org	3145732
  7445   300004  FF                 	db	255
  7446                           
  7447                           ;Config register CONFIG3H @ 0x300005
  7448                           ;	CCP2 MUX bit
  7449                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  7450                           ;	PORTB A/D Enable bit
  7451                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
  7452                           ;	Low-Power Timer1 Oscillator Enable bit
  7453                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  7454                           ;	MCLR Pin Enable bit
  7455                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  7456   300005                     	org	3145733
  7457   300005  81                 	db	129
  7458                           
  7459                           ;Config register CONFIG4L @ 0x300006
  7460                           ;	Stack Full/Underflow Reset Enable bit
  7461                           ;	STVREN = ON, Stack full/underflow will cause Reset
  7462                           ;	Single-Supply ICSP Enable bit
  7463                           ;	LVP = OFF, Single-Supply ICSP disabled
  7464                           ;	Boot Block Size Select bits
  7465                           ;	BBSIZ = BB256, 256 Word
  7466                           ;	Extended Instruction Set Enable bit
  7467                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  7468                           ;	Background Debugger Enable bit
  7469                           ;	DEBUG = 0x1, unprogrammed default
  7470   300006                     	org	3145734
  7471   300006  81                 	db	129
  7472                           
  7473                           ; Padding undefined space
  7474   300007                     	org	3145735
  7475   300007  FF                 	db	255
  7476                           
  7477                           ;Config register CONFIG5L @ 0x300008
  7478                           ;	Code Protection bit
  7479                           ;	CP0 = OFF, Block 0 not code-protected
  7480                           ;	Code Protection bit
  7481                           ;	CP1 = OFF, Block 1 not code-protected
  7482   300008                     	org	3145736
  7483   300008  03                 	db	3
  7484                           
  7485                           ;Config register CONFIG5H @ 0x300009
  7486                           ;	Boot Block Code Protection bitProtect Boot
  7487                           ;	CPB = OFF, Boot block not code-protected
  7488                           ;	Data EEPROM Code Protection bit
  7489                           ;	CPD = OFF, Data EEPROM not code-protected
  7490   300009                     	org	3145737
  7491   300009  C0                 	db	192
  7492                           
  7493                           ;Config register CONFIG6L @ 0x30000A
  7494                           ;	Write Protection bit
  7495                           ;	WRT0 = OFF, Block 0 not write-protected
  7496                           ;	Write Protection bit
  7497                           ;	WRT1 = OFF, Block 1 not write-protected
  7498   30000A                     	org	3145738
  7499   30000A  03                 	db	3
  7500                           
  7501                           ;Config register CONFIG6H @ 0x30000B
  7502                           ;	Configuration Register Write Protection bit
  7503                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  7504                           ;	Boot Block Write Protection bit
  7505                           ;	WRTB = OFF, Boot block not write-protected
  7506                           ;	Data EEPROM Write Protection bit
  7507                           ;	WRTD = OFF, Data EEPROM not write-protected
  7508   30000B                     	org	3145739
  7509   30000B  E0                 	db	224
  7510                           
  7511                           ;Config register CONFIG7L @ 0x30000C
  7512                           ;	Table Read Protection bit
  7513                           ;	EBTR0 = OFF, Block 0 not protected from table reads executed in other blocks
  7514                           ;	Table Read Protection bit
  7515                           ;	EBTR1 = OFF, Block 1 not protected from table reads executed in other blocks
  7516   30000C                     	org	3145740
  7517   30000C  03                 	db	3
  7518                           
  7519                           ;Config register CONFIG7H @ 0x30000D
  7520                           ;	Boot Block Table Read Protection bit
  7521                           ;	EBTRB = OFF, Boot block not protected from table reads executed in other blocks
  7522   30000D                     	org	3145741
  7523   30000D  40                 	db	64
  7524                           tosu	equ	0xFFF
  7525                           tosh	equ	0xFFE
  7526                           tosl	equ	0xFFD
  7527                           stkptr	equ	0xFFC
  7528                           pclatu	equ	0xFFB
  7529                           pclath	equ	0xFFA
  7530                           pcl	equ	0xFF9
  7531                           tblptru	equ	0xFF8
  7532                           tblptrh	equ	0xFF7
  7533                           tblptrl	equ	0xFF6
  7534                           tablat	equ	0xFF5
  7535                           prodh	equ	0xFF4
  7536                           prodl	equ	0xFF3
  7537                           indf0	equ	0xFEF
  7538                           postinc0	equ	0xFEE
  7539                           postdec0	equ	0xFED
  7540                           preinc0	equ	0xFEC
  7541                           plusw0	equ	0xFEB
  7542                           fsr0h	equ	0xFEA
  7543                           fsr0l	equ	0xFE9
  7544                           wreg	equ	0xFE8
  7545                           indf1	equ	0xFE7
  7546                           postinc1	equ	0xFE6
  7547                           postdec1	equ	0xFE5
  7548                           preinc1	equ	0xFE4
  7549                           plusw1	equ	0xFE3
  7550                           fsr1h	equ	0xFE2
  7551                           fsr1l	equ	0xFE1
  7552                           bsr	equ	0xFE0
  7553                           indf2	equ	0xFDF
  7554                           postinc2	equ	0xFDE
  7555                           postdec2	equ	0xFDD
  7556                           preinc2	equ	0xFDC
  7557                           plusw2	equ	0xFDB
  7558                           fsr2h	equ	0xFDA
  7559                           fsr2l	equ	0xFD9
  7560                           status	equ	0xFD8

Data Sizes:
    Strings     298
    Constant    24
    Data        41
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    114     122
    BANK0           128     40     124
    BANK1           256      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    input_value@initial	PTR unsigned char  size(2) Largest target is 2
		 -> STR_41(CODE[2]), 

    input_value@inputType	PTR unsigned char  size(2) Largest target is 7
		 -> STR_40(CODE[7]), 

    input_value@limit	PTR unsigned char  size(2) Largest target is 3
		 -> STR_42(CODE[3]), 

    input_value@units	PTR unsigned char  size(2) Largest target is 3
		 -> STR_43(CODE[3]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 21
		 -> infusion@buff(BANK0[5]), input_numbers@outputBuffer(COMRAM[2]), STR_1(CODE[7]), STR_10(CODE[11]), 
		 -> STR_11(CODE[12]), STR_12(CODE[7]), STR_13(CODE[6]), STR_14(CODE[5]), 
		 -> STR_15(CODE[15]), STR_16(CODE[7]), STR_17(CODE[7]), STR_18(CODE[6]), 
		 -> STR_19(CODE[5]), STR_2(CODE[12]), STR_20(CODE[14]), STR_21(CODE[21]), 
		 -> STR_22(CODE[9]), STR_23(CODE[21]), STR_24(CODE[17]), STR_25(CODE[5]), 
		 -> STR_26(CODE[8]), STR_27(CODE[11]), STR_28(CODE[8]), STR_29(CODE[11]), 
		 -> STR_3(CODE[2]), STR_30(CODE[9]), STR_31(CODE[7]), STR_33(CODE[5]), 
		 -> STR_35(CODE[5]), STR_37(CODE[4]), STR_39(CODE[19]), STR_4(CODE[3]), 
		 -> STR_40(CODE[7]), STR_41(CODE[2]), STR_42(CODE[3]), STR_43(CODE[3]), 
		 -> STR_5(CODE[5]), STR_6(CODE[15]), STR_7(CODE[10]), STR_8(CODE[8]), 
		 -> STR_9(CODE[15]), 

    S1245$buffer	PTR unsigned char  size(2) Largest target is 0

    S1245$source	PTR const unsigned char  size(2) Largest target is 0

    sp__input_numbers	PTR unsigned char  size(2) Largest target is 511
		 -> input_numbers@inputBuffer(COMRAM[5]), RAM(DATA[511]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_32(CODE[4]), STR_34(CODE[4]), STR_36(CODE[4]), STR_38(CODE[3]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 5
		 -> infusion@buff(BANK0[5]), 

    start_process_screen@word	PTR unsigned char  size(2) Largest target is 9
		 -> STR_26(CODE[8]), STR_28(CODE[8]), STR_30(CODE[9]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 4
		 -> STR_32(CODE[4]), STR_34(CODE[4]), STR_36(CODE[4]), STR_38(CODE[3]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 4
		 -> STR_32(CODE[4]), STR_34(CODE[4]), STR_36(CODE[4]), STR_38(CODE[3]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_32(CODE[4]), STR_34(CODE[4]), STR_36(CODE[4]), STR_38(CODE[3]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_handle_infusion_setup
    _system_init->_Lcd_Init
    _system_init->_usePeripheral
    _Lcd_Init->_Lcd_Cmd
    _menu->_Lcd_Write_String
    _manual->_Lcd_Write_String
    _handle_infusion_setup->_infusion
    _input_value->_Lcd_Write_String
    _infusion->_getExpected
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->___aldiv
    _abs->___almod
    _handle_actuator_push->_start_process_screen
    _start_process_screen->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _move_actuator->_change_direction_motion
    _move_actuator->_set_pwm_duty
    _input_option->_switch_press_scan
    _switch_press_scan->_keypad_scanner
    _getExpected->_calculateBitRatePer10Sec
    _processTimeToSeconds->___awdiv
    _calculateBitRatePer10Sec->___aldiv
    ___lmul->___lldiv
    ___aldiv->___lmul
    ___lldiv->_processTimeToSeconds

Critical Paths under _Timer1_ISR in COMRAM

    _Timer1_ISR->_signalServo

Critical Paths under _main in BANK0

    _handle_infusion_setup->_infusion

Critical Paths under _Timer1_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Timer1_ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   89399
                                             36 BANK0      4     4      0
                       _GetNextState
              _handle_infusion_setup
                             _manual
                               _menu
                  _switch_press_scan
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0    3115
                           _ADC_init
                         _InitKeypad
                           _Lcd_Init
                      _init_actuator
                      _usePeripheral
 ---------------------------------------------------------------------------------
 (2) _init_actuator                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             1     1      0     279
                                              7 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _InitKeypad                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _menu                                                 0     0      0    8404
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _manual                                               0     0      0    8404
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _handle_infusion_setup                               13    13      0   68928
                                            111 COMRAM     3     3      0
                           _ADC_Read
                           _infusion
                        _input_value
 ---------------------------------------------------------------------------------
 (2) _input_value                                          8     0      8    8919
                                             14 COMRAM     8     0      8
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _infusion                                            44    44      0   59873
                                            103 COMRAM     8     8      0
                                              0 BANK0     36    36      0
                           _ADC_Read
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                       _Timer1_start
                            ___aldiv
                             ___lmul
                           _delay_ms
                        _getExpected
               _handle_actuator_push
                      _move_actuator
               _processTimeToSeconds
                            _sprintf
                      _usePeripheral
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             22    15      7    6606
                                             78 COMRAM    20    13      7
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             6     2      4    5574
                                             72 COMRAM     6     2      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           13    10      3    5113
                                             59 COMRAM    13    10      3
                            ___aldiv
                            ___almod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                8     5      3     957
                                              4 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                             14 COMRAM     4     2      2
                            ___almod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___almod                                             10     2      8     613
                                              4 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (3) _handle_actuator_push                                 5     3      2   22194
                                             16 COMRAM     5     3      2
                           _ADC_Read
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                       _input_option
                      _move_actuator
               _start_process_screen
                      _usePeripheral
 ---------------------------------------------------------------------------------
 (2) _usePeripheral                                        4     0      4    2836
                                              4 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _start_process_screen                                 2     0      2    8705
                                             14 COMRAM     2     0      2
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     6     4      2    4344
                                              8 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       3     3      0     254
                                              5 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1    3905
                                              7 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     155
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              2     2      0     155
                                              5 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     124
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _move_actuator                                        4     0      4    1778
                                              8 COMRAM     4     0      4
            _change_direction_motion
                       _set_pwm_duty
 ---------------------------------------------------------------------------------
 (4) _set_pwm_duty                                         4     2      2     152
                                              4 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _change_direction_motion                              4     0      4     422
                                              4 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (4) _input_option                                         7     5      2     241
                                              7 COMRAM     7     5      2
                  _switch_press_scan
 ---------------------------------------------------------------------------------
 (1) _switch_press_scan                                    1     1      0      68
                                              6 COMRAM     1     1      0
                     _keypad_scanner
 ---------------------------------------------------------------------------------
 (2) _keypad_scanner                                       2     2      0       0
                                              4 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _ADC_Read                                             9     7      2      65
                                              4 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (3) _getExpected                                         20    16      4   10170
                                             83 COMRAM    20    16      4
                            ___lldiv
                             ___lmul
           _calculateBitRatePer10Sec
               _processTimeToSeconds
 ---------------------------------------------------------------------------------
 (3) _processTimeToSeconds                                 8     6      2    2534
                                             12 COMRAM     8     6      2
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     952
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     613
                                              4 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     625
                                              4 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) _calculateBitRatePer10Sec                            24    16      8    4643
                                             59 COMRAM    24    16      8
                            ___aldiv
                            ___lldiv (ARG)
                             ___lmul
               _processTimeToSeconds (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8    2076
                                             33 COMRAM    12     4      8
                            ___lldiv (ARG)
               _processTimeToSeconds (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aldiv                                             14     6      8    2189
                                             45 COMRAM    14     6      8
                            ___lldiv (ARG)
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     781
                                             20 COMRAM    13     5      8
               _processTimeToSeconds (ARG)
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             3     1      2     124
                                              4 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (3) _Timer1_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GetNextState                                         4     3      1     369
                                              4 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _Timer1_ISR                                           1     1      0     522
                                              3 COMRAM     1     1      0
                        _signalServo
 ---------------------------------------------------------------------------------
 (9) _signalServo                                          3     1      2     522
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetNextState
   _handle_infusion_setup
     _ADC_Read
     _infusion
       _ADC_Read
       _Lcd_Clear
         _Lcd_Cmd
           _Lcd_Port
       _Lcd_Set_Cursor
         _Lcd_Cmd
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _Timer1_start
       ___aldiv
         ___lldiv (ARG)
           _processTimeToSeconds (ARG)
             ___awdiv
             ___awmod
             ___wmul
         ___lmul (ARG)
           ___lldiv (ARG)
           _processTimeToSeconds (ARG)
       ___lmul
       _delay_ms
       _getExpected
         ___lldiv
         ___lmul
         _calculateBitRatePer10Sec
           ___aldiv
           ___lldiv (ARG)
           ___lmul (ARG)
           _processTimeToSeconds (ARG)
         _processTimeToSeconds
       _handle_actuator_push
         _ADC_Read
         _Lcd_Clear
         _Lcd_Set_Cursor
         _Lcd_Write_String
         _input_option
           _switch_press_scan
             _keypad_scanner
         _move_actuator
           _change_direction_motion
           _set_pwm_duty
         _start_process_screen
           _Lcd_Clear
           _Lcd_Set_Cursor
           _Lcd_Write_String
         _usePeripheral
       _move_actuator
       _processTimeToSeconds
       _sprintf
         _vfprintf
           _vfpfcnvrt
             ___aldiv
             ___almod
             _abs
               ___almod (ARG)
             _fputc
               _putch
       _usePeripheral
     _input_value
       _Lcd_Clear
       _Lcd_Set_Cursor
       _Lcd_Write_String
   _manual
     _Lcd_Clear
     _Lcd_Set_Cursor
     _Lcd_Write_String
   _menu
     _Lcd_Clear
     _Lcd_Set_Cursor
     _Lcd_Write_String
   _switch_press_scan
   _system_init
     _ADC_init
     _InitKeypad
     _Lcd_Init
       _Lcd_Cmd
       _Lcd_Port
     _init_actuator
     _usePeripheral

 _Timer1_ISR (ROOT)
   _signalServo

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     28      7C       5       96.9%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     72      7A       1       96.8%
BITBIGSFRhhlh       1E      0       0      15        0.0%
BITBIGSFRhhhhlh     19      0       0       9        0.0%
BITBIGSFRhhhhh       D      0       0       8        0.0%
BITBIGSFRhhll        7      0       0      16        0.0%
BITBIGSFRhllhh       6      0       0      17        0.0%
BITBIGSFRhhhlhh      5      0       0      13        0.0%
BITBIGSFRhlll        5      0       0      18        0.0%
BITBIGSFRhhhhlh      3      0       0      11        0.0%
BITBIGSFRhhhhlh      1      0       0      10        0.0%
BITBIGSFRhhhhll      1      0       0      12        0.0%
BITBIGSFRhhhll       1      0       0      14        0.0%
BITBIGSFRl           1      0       0      19        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F6      20        0.0%
DATA                 0      0      F6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Mon Apr 15 20:45:03 2024

                                               _c 00C8          calculateBitRatePer10Sec@length_mm_scaled 0044  
                                              l21 19F8                                                l23 1A02  
                                              l17 19E4                                                l19 19EE  
                                              _GO 7E11                                                _Kd 00B8  
                                              _Ki 00BC                                                _Kp 00C0  
                                    ___awdiv@sign 000A                                                _dT 00C4  
                             ___wmul@multiplicand 0007                               __end_of_system_init 1656  
                                             l130 1478                                               l300 0832  
                                             l301 082A                                               l304 0856  
                                             l313 0896                                               l305 084E  
                                             l251 066A                                               l308 087A  
                                             l260 06B2                                               l252 0662  
                                             l309 0872                                               l261 06AA  
                                             l280 076E                                               l272 0726  
                                             l264 06D6                                               l256 068E  
                                             l281 0766                                               l273 071E  
                                             l265 06CE                                               l257 0686  
                                             l292 07E2                                               l284 079A  
                                             l276 074A                                               l268 0702  
                                             l293 07DA                                               l285 0792  
                                             l277 0742                                               l269 06FA  
                                             l447 1AD6                                               l296 0806  
                                             l288 07BE                                               l297 07FE  
                                             l289 07B6                                               l626 128C  
                                             _GIE 7F97                                               _RB0 7C08  
                                             _RB1 7C09                                               _RB2 7C0A  
                                             _RB3 7C0B                                               _RC2 7C12  
                                             _RD0 7C18                                               _RB4 7C0C  
                                             _RD1 7C19                                               _RD2 7C1A  
                                             _RB6 7C0E                                               _RD3 7C1B  
                                             _RB7 7C0F                                               _RD4 7C1C  
                                             _RD5 7C1D                                               _RC7 7C17  
                                             _RD6 7C1E                                               _RD7 7C1F  
                                             _PR2 0FCB                                    ?_usePeripheral 0005  
                                             _abs 1A2E                                               _mil 0073  
                                    ___awmod@sign 000A                                               wreg 0FE8  
                                            ?_abs 000F                                              l1335 1A3C  
                                            l4301 0D0C                                              l5005 05A6  
                                            l4151 19FA                                              l4143 19E6  
                                            l4307 0D2E                                              l4323 0D7C  
                                            l4147 19F0                                              l4411 10E0  
                                            l4403 10B8                                              l4309 0D3A  
                                            l4421 14A6                                              l5143 12AE  
                                            l4327 0D92                                              l4319 0D6E  
                                            l4343 0E9E                                              l5127 174E  
                                            l5119 1720                                              l5161 12D0  
                                            l5137 12A2                                              l4513 159E  
                                            l4433 1B28                                              l4425 14DA  
                                            l4601 0A96                                              l5129 1764  
                                            l5155 12C4                                              l4283 089E  
                                            l4363 0F08                                              l4355 0EE4  
                                            l4347 0EB0                                              l4339 0E8A  
                                            l5173 12E8                                              l5149 12B8  
                                            l4453 17EA                                              l4533 15E4  
                                            l4525 15CC                                              l4517 15AC  
                                            l4509 1592                                              l4701 110E  
                                            l4613 1842                                              l4349 0EBC  
                                            l4373 1334                                              l5167 12DC  
                                            l4295 0CF4                                              l4471 11BC  
                                            l4519 15B4                                              l4359 0EF2  
                                            l4551 08FC                                              l5185 12F4  
                                            l4449 17D6                                              l4465 11AC  
                                            l4529 15D6                                              l4617 185E  
                                            l4633 0F2E                                              l4553 0900  
                                            l5187 131C                                              l4715 1160  
                                            l4723 1186                                              l4395 1090  
                                            l4651 0F6A                                              l4571 0996  
                                            l4563 0942                                              l4477 11D2  
                                            l4493 1204                                              l4709 113A  
                                            l4645 0F56                                              l4805 0E34  
                                            l4565 0966                                              l4549 08F6  
                                            l4557 0906                                              l5381 16C6  
                                            l4479 11DA                                              l4663 0F96  
                                            l4639 0F42                                              l4591 0A62  
                                            l4559 091C                                              l5391 16DA  
                                            l4745 123E                                              l4497 1212  
                                            l4489 11FA                                              l4657 0F80  
                                            l4577 09C0                                              l4569 0988  
                                            l5385 16CE                                              l5393 16FC  
                                            l4747 124A                                              l4595 0A7E  
                                            l4763 19AE                                              l5379 16C0  
                                            l4757 127E                                              l4669 0FAC  
                                            l4597 0A88                                              l4765 19BE  
                                            l4941 037A                                              l4925 01DC  
                                            l4777 1AC2                                              l4945 039E  
                                            l4799 0DE0                                              l4989 051E  
                                            _ADON 7E10                                              STR_1 1FC9  
                                            STR_2 1F4F                                              STR_3 1FEE  
                                            STR_4 1FED                                              STR_5 1FE7  
                                            STR_6 1F32                                              STR_7 1F88  
                                            STR_8 1FAC                                              STR_9 1F23  
                                            _LATB 0F8A                                              u4100 136E  
                                            u4040 0EC0                                              u4210 1B20  
                                            u4205 1B18                                              u4160 14D2  
                                            u4080 132C                                              u4170 1506  
                                            u4410 09BC                                              u4420 09BE  
                                            u4350 15B8                                              u4510 1444  
                                            u4190 1B16                                              u5207 1962  
                                            u4167 14C8                                              u5127 151A  
                                            u4440 0A46                                              u5217 1AB2  
                                            u4177 14FC                                              u5137 152E  
                                            u4290 11DE                                              u5307 0710  
                                            u5227 1126                                              u5147 1542  
                                            _PEIE 7F96                                              u4540 1460  
                                            u5317 0734                                              u5237 114C  
                                            u5157 05D8                                              u4534 1452  
                                            u4535 144E                                              u5407 0888  
                                            u5327 0758                                              u5247 1172  
                                            u5167 0616                                              u4528 1446  
                                            u5417 1AC8                                              u5337 0784  
                                            u5257 0654                                              u5177 0E08  
                                            u5347 07A8                                              u5267 0678  
                                            u5187 0E2A                                              u4564 146E  
                                            u4565 146A                                              u5357 07CC  
                                            u5277 069C                                              u5197 1950  
                                            u4558 1462                                              u5367 07F0  
                                            u5287 06C0                                              u4840 0E44  
                                            u5377 081C                                              u5297 06EC  
                                            u5387 0840                                              u4940 12AA  
                                            u3980 0D3E                                              u4860 038E  
                                            u5397 0864                                              u4790 124E  
                                            _RBPU 7F8F                                              _TMR1 0FCE  
                                            abs@a 000F                                 ?_Lcd_Write_String 0009  
                                            _dbuf 0080                                              _main 16B8  
                                            _menu 186C                                              _prec 00AA  
                                            fsr1h 0FE2                                              fsr2h 0FDA  
                                            indf1 0FE7                                              indf2 0FDF  
                                            fsr1l 0FE1                                              fsr2l 0FD9  
                                            btemp 007B                                  __end_of_ADC_Read 149C  
                                            prodh 0FF4                                              prodl 0FF3  
                                            start 018A                                ??_Lcd_Write_String 000B  
                                __end_of_ADC_init 1B4E                                   __end_of_Lcd_Cmd 1AC0  
                                    ___param_bank 0000                              __end_of_GetNextState 1320  
                                           ??_abs 0011                 handle_infusion_setup@currentState 0072  
                                 __end_of___aldiv 0DA4                                   __end_of___almod 0F1A  
                                           ?_main 0001                                             ?_menu 0001  
                                 __end_of___awdiv 121C                                             STR_10 1F7D  
                                           STR_11 1F5B                                             STR_12 1FD0  
                                           STR_20 1F41                                             STR_13 1FD7  
                                           STR_21 1ED5                                             STR_22 1F9B  
                                           STR_30 1F92                                             STR_15 1F23  
                                           STR_31 1FB4                                             STR_23 1EEA  
                                           STR_32 1FF0                                             STR_16 1FC2  
                                           STR_40 1FBB                                             STR_24 1F12  
                                           STR_25 1FE7                                             STR_17 1FD0  
                                           STR_41 1FFD                                             STR_33 1FE2  
                                           STR_26 1FAC                                             STR_18 1FD7  
                                           STR_34 1FF0                                             STR_42 1FF4  
                                           STR_19 1FE7                                             STR_43 1FFA  
                                           STR_35 1FDD                                             STR_27 1F67  
                                           STR_36 1FF0                                             STR_28 1FA4  
                                 __end_of___awmod 15EE                                             STR_37 1FEC  
                                           STR_29 1F72                                             STR_38 1FF7  
                                           STR_39 1EFF                                   __end_of___lldiv 129E  
                                           _T0CON 0FD5                                   ___awdiv@divisor 0007  
                                           _T1CON 0FCD                                             _T2CON 0FCA  
                                           _LATA2 7C4A                                             _LATC4 7C5C  
                                           _LATC5 7C5D                                             _LATC6 7C5E  
                     handle_actuator_push@act_pos 0011                                             i2l455 0028  
                                           i2l466 0186                                   ___awdiv@counter 0009  
                                    vfpfcnvrt@fmt 003D                                             _TMR0H 0FD7  
                                           _TMR0L 0FD6                                             _PORTB 0F81  
                                           _PORTD 0F83                                             _TRISA 0F92  
                                           _TRISB 0F93                                             _TRISC 0F94  
                                           _TRISD 0F95                               ___lmul@multiplicand 0026  
                        GetNextState@currentState 0008                                  ??_keypad_scanner 0005  
                                           _flags 0079                                             _fputc 1320  
                                           _width 00A8                                             _pulse 00AC  
                                           _putch 1B6A                                  _getExpected$1675 0060  
                                _getExpected$1676 0064                             infusion@analogReading 00E7  
                                           tablat 0FF5                                             ttemp5 007C  
                                           ttemp6 007F                                             ttemp7 0083  
                                           status 0FD8                                             wtemp8 007C  
                                 __end_of_sprintf 1934                                  __end_of_Lcd_Init 157E  
                                __end_of_Lcd_Port 1A06                                        _InitKeypad 1B4E  
                                 __initialization 176E                                       _system_init 15EE  
                                    __end_of_main 1714                                      __end_of_menu 18B4  
                          move_actuator@direction 0009                                      ?_input_value 000F  
                                 ??_usePeripheral 0009                                            ??_main 00F8  
                                          ??_menu 000F                                     __activetblptr 0002  
                                          _ADCON0 0FC2                                            _ADCON1 0FC1  
                                          _ADCON2 0FC0                      __end_of_processTimeToSeconds 16B8  
                                          ?_fputc 0005                                            _ADRESH 0FC4  
                                          _ADRESL 0FC3                                            _CCPR1L 0FBE  
                                ___awdiv@dividend 0005                                            ?_putch 0001  
                                          i2l3901 0158                                            i2l3903 017E  
                                          i2l3683 1986                                            i2l3687 19A0  
                                          i2l3891 00F6                                            i2l3883 0090  
                                          i2l3875 0030                                            i2l3895 0126  
                                          i2l3887 00C2                                            i2l3879 0060  
                                          _OSCCON 0FD3                      handle_actuator_push@decision 0014  
                                       ??_Lcd_Cmd 0006                                     vfpfcnvrt@done 0041  
                                          _TMR0IF 7F92                                            _TMR1IE 7CE8  
                                          _TMR1IF 7CF0                                            _TMR2IF 7CF1  
                                          _TMR1ON 7E68                                            _TRISA2 7C92  
                                          _TRISC2 7CA2                                            _TRISC4 7CA4  
                                          _TRISC5 7CA5                                            _TRISC6 7CA6  
                                          _TRISC7 7CA7                                 GetNextState@input 0005  
                                __end_of_delay_ms 1AE0                             input_option@userInput 000E  
                                    ?_signalServo 0001                              delay_ms@milliseconds 0005  
                                      _Timer1_ISR 0008                                      vfprintf@cfmt 004D  
                                          ___lmul 17C6                                         ??___aldiv 0036  
                                       ??___almod 000D                                            ___wmul 1A56  
                                       ??___awdiv 0009                                         ??___awmod 0009  
                                       ??___lldiv 001D                                   ADC_Read@channel 000B  
                                          _manual 18B4                           _change_direction_motion 1B0E  
                                 ADC_Read@digital 000C                                            clear_0 17A6  
                                          clear_1 17B2                                  __end_of_infusion 063E  
                                ___awdiv@quotient 000B                                   ___awmod@divisor 0007  
                           __end_of_move_actuator 186C                                            isa$std 0001  
                                 ___awmod@counter 0009                                            _volume 00D0  
                                          fputc@c 0005                                      __pdataCOMRAM 007A  
                                       ?_ADC_Read 0005                                input_value@initial 0011  
                                    __mediumconst 1EBC                                            tblptrh 0FF7  
                                          tblptrl 0FF6                                            tblptru 0FF8  
                                       ?_ADC_init 0001                                  __end_of_pulseMax 1EC9  
                                __end_of_pulseMin 1ED5                                            putch@c 0001  
                                __end_of_vfprintf 19DA                                         ??_sprintf 0056  
                                   main@userInput 00FA                                   Lcd_Set_Cursor@a 0009  
                                 Lcd_Set_Cursor@b 0008                                   Lcd_Set_Cursor@y 000B  
                                 Lcd_Set_Cursor@z 000A                                        __accesstop 0080  
                         __end_of__initialization 17B8                                 __end_of_Lcd_Clear 1B6A  
                                   ___rparam_used 0001                                       ?_InitKeypad 0001  
                                  __pcstackCOMRAM 0001                          _calculateBitRatePer10Sec 0AB6  
                                    __pidataBANK0 1A06                     __end_of_handle_infusion_setup 176E  
                                   __end_of_fputc 13A0                                     __end_of_putch 1B6C  
                    __end_of_start_process_screen 1420                               usePeripheral@action 0007  
                                   ?_input_option 0008                                     _init_actuator 1AF8  
                                  _Lcd_Set_Cursor 1068                                        ??_ADC_Read 0007  
                                      ??_ADC_init 0005                                         ?_Lcd_Init 0001  
                                       ?_Lcd_Port 0001                                           ??_fputc 0008  
                                input_value@limit 0013                                           ??_putch 0005  
                                    _GetNextState 129E                                  input_value@units 0015  
                                      __pbssBANK0 0080  calculateBitRatePer10Sec@length_per_min_mm_scaled 0048  
                                   _infusion$1678 00D8                                       ?_Timer1_ISR 0001  
                       ??_change_direction_motion 0009                                           ?___lmul 0022  
                                   ?_Timer1_start 0001                                           ?___wmul 0005  
                            _processTimeToSeconds 1656   calculateBitRatePer10Sec@bit_rate_per_min_scaled 004C  
                                         _CCP1CON 0FBD                                           ?_manual 0001  
                                  ___lmul@product 002A                            __end_of_Lcd_Set_Cursor 1108  
                                  ??_input_option 000A                                    ?_init_actuator 0001  
                                       ?_delay_ms 0005                                        ??_Lcd_Init 0008  
                               infusion@expectedX 00E3                                        ??_Lcd_Port 0005  
               calculateBitRatePer10Sec@volume_mL 003C                                    _Lcd_Write_Char 1934  
                                         _Lcd_Cmd 1AA0                                         ?_infusion 0001  
                             getExpected@expected 005C                                           __Hparam 0000  
                              input_option@option 000C                                           __Lparam 0000  
                                  ??_Timer1_start 0005                                      ?_system_init 0001  
                                         ___aldiv 0CD8                                           ___almod 0E6E  
                                         ___awdiv 1198                                           ___awmod 157E  
                           ?_processTimeToSeconds 000D                                           ___lldiv 121C  
                    __end_of_handle_actuator_push 0E6E                                         ?_vfprintf 0049  
                                         __pcinit 176E                                           __ramtop 0200  
                                 ?_Lcd_Set_Cursor 0008                                           __ptext0 16B8  
                                         __ptext1 15EE                                           __ptext2 1AF8  
                                         __ptext3 150E                                           __ptext4 1B4E  
                                         __ptext5 1B3A                                           __ptext6 186C  
                                         __ptext7 18B4                                           __ptext8 1714  
                                         __ptext9 0FC2                                     ?_set_pwm_duty 0005  
                                ___awmod@dividend 0005                                  ___aldiv@dividend 002E  
                                      ??_delay_ms 0007                       processTimeToSeconds@minutes 000F  
                     processTimeToSeconds@seconds 0011                   __end_of_change_direction_motion 1B24  
               change_direction_motion@hDriverIn1 0005                 change_direction_motion@hDriverIn2 0007  
                                         _sprintf 18FC                            __end_of_Lcd_Write_Char 196C  
                            end_of_initialization 17B8                               signalServo@pinServo 0003  
                                         fputc@fp 0007                                     __Lmediumconst 1EBC  
                            _start_process_screen 13A0                                        ??_infusion 0068  
                                 ___lldiv@divisor 0019                                   ___lldiv@counter 0021  
                               __end_of_vfpfcnvrt 0AB6                                  ___aldiv@quotient 0038  
                                         postdec1 0FE5                                           postdec2 0FDD  
                                         postinc0 0FEE                                           postinc1 0FE6  
                                         postinc2 0FDE                                  vfpfcnvrt@convarg 0044  
                                       Lcd_Port@a 0005                                        ??_vfprintf 004D  
                                 ??_init_actuator 0005                                      infusion@buff 00DE  
                                  ??_set_pwm_duty 0007                                     ??_getExpected 0058  
                           __end_of_usePeripheral 0FC2                                         _TRISCbits 0F94  
                            switch_press_scan@key 0007                                   ?_Lcd_Write_Char 0001  
                               Lcd_Write_String@a 0009                                 Lcd_Write_String@i 000D  
                      ??_calculateBitRatePer10Sec 0044                             ?_start_process_screen 000F  
                                main@currentState 00FB                              __end_of_input_option 1198  
                   processTimeToSeconds@timeInput 000D                                      ??_InitKeypad 0005  
      calculateBitRatePer10Sec@bit_rate_per_10sec 0050                            ??_processTimeToSeconds 000F  
                                       _Lcd_Clear 1B5C                                    __end_of___lmul 181C  
                                     vfpfcnvrt@ap 003E                                       vfpfcnvrt@cp 0042  
                                     vfpfcnvrt@fp 003C                                    __end_of___wmul 1A7C  
                                _Lcd_Write_String 149C                                     __pidataCOMRAM 1B6C  
                                  __end_of_manual 18FC                               start_initialization 176E  
                                     __end_of_abs 1A56                              __end_of_Timer1_start 1AF8  
                              __end_of_InitKeypad 1B5C                               __end_of_getExpected 0CD8  
                            _handle_actuator_push 0DA4                                      ??_Timer1_ISR 0004  
                                     vfprintf@fmt 004A                                        ?_Lcd_Clear 0001  
                                        ??___lmul 002A                                          ??___wmul 0009  
                                     __pdataBANK0 00AC                                          ??_manual 000F  
                                 Lcd_Write_Char@a 0008                                   Lcd_Write_Char@y 0007  
                           _handle_infusion_setup 1714                             infusion@controlSignal 00F0  
                                     __pbssCOMRAM 0073                                     __pcstackBANK0 00D4  
                              move_actuator@speed 000B                                __end_of_Timer1_ISR 018A  
                           ?_handle_actuator_push 0011              calculateBitRatePer10Sec@totalSeconds 0040  
                          ??_start_process_screen 0011                                          ?_Lcd_Cmd 0001  
                        start_process_screen@word 000F                              __end_of_set_pwm_duty 1AA0  
                                ??_Lcd_Set_Cursor 0009                                         __pintcode 0008  
                                   __pmediumconst 1EBC                                          ?___aldiv 002E  
                                        ?___almod 0005                                          ?___awdiv 0005  
                                        ?___awmod 0005                                     ??_input_value 0017  
                                        ?___lldiv 0015                           usePeripheral@peripheral 0005  
                                ___almod@dividend 0005                                     _move_actuator 181C  
                                     _getExpected 0BE0                                          _ADC_Read 1420  
                                       _lastError 00A0                                          _ADC_init 1B3A  
                                        ?_sprintf 004F                                  infusion@stopTime 00EB  
                __end_of_calculateBitRatePer10Sec 0BE0                                   ___aldiv@divisor 0032  
                                 ___aldiv@counter 0036                                    ___wmul@product 0009  
                                        _LATBbits 0F8A                                          _LATCbits 0F8B  
                                  _keypad_scanner 063E                          ?_change_direction_motion 0005  
                                   ??_signalServo 0003                                          i2u330_40 003A  
                                        Lcd_Cmd@a 0007                                          i2u332_40 0058  
                                        i2u331_48 003C                                          i2u332_46 005A  
                                        i2u341_40 00EE                                          i2u340_48 00CE  
                                        i2u333_40 006A                                          i2u341_46 00F0  
                                        i2u342_40 0100                                          i2u335_40 0088  
                                        i2u334_48 006C                                          i2u335_46 008A  
                                        i2u344_40 011E                                          i2u343_48 0102  
                                        i2u336_40 009A                                          i2u344_46 0120  
                                        i2u345_40 0130                                          _PIR1bits 0F9E  
                                        i2u338_40 00BA                                          i2u337_48 009C  
                                        i2u338_46 00BC                                          i2u347_40 0150  
                                        i2u346_48 0132                                          i2u339_40 00CC  
                                        i2u347_46 0152                                       ??_Lcd_Clear 0008  
                                        _TMR0_ini 0077                            ?_handle_infusion_setup 0001  
                               _switch_press_scan 1B24                                         _vfpfcnvrt 08A2  
                                  ?_move_actuator 0009                                        _ADCON0bits 0FC2  
                               ___wmul@multiplier 0005                                ?_switch_press_scan 0001  
                                    _input_option 1108                               __end_of_input_value 1068  
                                ??_Lcd_Write_Char 0006                                          _Lcd_Init 150E  
                             ??_switch_press_scan 0007                                          _Lcd_Port 19DA  
                          ??_handle_actuator_push 0013                                        vfpfcnvrt@c 0048  
                               ___lmul@multiplier 0022                                         copy_data0 1782  
                        __end_of_Lcd_Write_String 150E                            __end_of_keypad_scanner 08A2  
                                        __Hrparam 0000                                        vfprintf@ap 004C  
                                        __Lrparam 0000                                        vfprintf@fp 0049  
                                   getExpected@ms 0058                         __end_of_switch_press_scan 1B3A  
                                    _Timer1_start 1AE0                                         infusion@i 00EF  
                             __end_of_signalServo 19A4                                        ?_vfpfcnvrt 003C  
                           __end_of_init_actuator 1B0E                                        sprintf@fmt 0050  
                                 infusion@act_pos 00DC                                          _delay_ms 1AC0  
                                        __ptext10 018E                                          __ptext11 18FC  
                                        __ptext20 13A0                                          __ptext12 19A4  
                                        __ptext21 149C                                          __ptext13 08A2  
                                        __ptext30 1108                                          __ptext22 1934  
                                        __ptext14 1320                                          __ptext31 1B24  
                                        __ptext23 1068                                          __ptext15 1B6A  
                                        __ptext40 17C6                                          __ptext32 063E  
                                        __ptext24 1B5C                                          __ptext16 1A2E  
                                        __ptext41 0CD8                                          __ptext33 1420  
                                        __ptext25 1AA0                                          __ptext17 0E6E  
                                        __ptext42 121C                                          __ptext34 0BE0  
                                        __ptext26 19DA                                          __ptext18 0DA4  
                                        __ptext43 1AC0                                          __ptext35 1656  
                                        __ptext27 181C                                          __ptext19 0F1A  
                                        __ptext44 1AE0                                          __ptext36 1A56  
                                        __ptext28 1A7C                                          __ptext45 129E  
                                        __ptext37 157E                                          __ptext29 1B0E  
                                        __ptext38 1198                                          __ptext47 196C  
                                        __ptext39 0AB6                                     ?_GetNextState 0005  
                                 ___almod@divisor 0009                                   ___almod@counter 000D  
                                 ?_keypad_scanner 0001                                          _errorSum 00A4  
                                        _infusion 018E                             signalServo@pulseServo 0001  
                                        isa$xinst 0000                                      _timeInfusion 00CC  
                                        int$flags 007B                                          _pulseMax 1EBD  
                                        _pulseMin 1EC9                                   ??_move_actuator 000D  
                                        _vfprintf 19A4                                       _input_value 0FC2  
                       ?_calculateBitRatePer10Sec 003C                                      _set_pwm_duty 1A7C  
                                      _INTCONbits 0FF2                  processTimeToSeconds@totalSeconds 0013  
                                  ??_GetNextState 0006                                    infusion@dError 00D4  
                              Lcd_Write_Char@temp 0006                                          intlevel2 0000  
                                       sprintf@ap 0056                                  ___lldiv@dividend 0015  
                            set_pwm_duty@pwm_duty 0005                                       _signalServo 196C  
                            input_value@inputType 000F                                     ??_system_init 0009  
                                    _servo_active 007A                                       ??_vfpfcnvrt 003F  
                              Lcd_Set_Cursor@temp 000C                                          sprintf@f 0057  
                                        sprintf@s 004F                                      ?_getExpected 0054  
                                ___lldiv@quotient 001D                                     infusion@error 00F4  
                                   _usePeripheral 0F1A                                      ___aldiv@sign 0037  
                                    ___almod@sign 000E                           ??_handle_infusion_setup 0070  
